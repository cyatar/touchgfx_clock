
TOUCHGFX_TEST1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000142c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ac0  08014454  08014454  00015454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000019a  08015f14  08015f14  00016f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  080160b0  080160b0  000170b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 000002c0  080160c8  080160c8  000170c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000010  08016388  08016388  00017388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08016398  08016398  00018480  2**0
                  CONTENTS
  8 .ARM          00000008  08016398  08016398  00017398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080163a0  080163a0  00018480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  080163a0  080163a0  000173a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080163b4  080163b4  000173b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000080  20000000  080163bc  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_Framebuffer 00000400  20000080  0801643c  00018080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          0000413c  20000480  0801683c  00018480  2**2
                  ALLOC
 15 ._user_heap_stack 00006004  200045bc  0801683c  000185bc  2**0
                  ALLOC
 16 .ARM.attributes 00000030  00000000  00000000  00018480  2**0
                  CONTENTS, READONLY
 17 .debug_info   0006eccf  00000000  00000000  000184b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000eafd  00000000  00000000  0008717f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003020  00000000  00000000  00095c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 000023ed  00000000  00000000  00098ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002bfaf  00000000  00000000  0009b08d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00038e9e  00000000  00000000  000c703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000ef0fd  00000000  00000000  000ffeda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000c2  00000000  00000000  001eefd7  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000d114  00000000  00000000  001ef09c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 0000004b  00000000  00000000  001fc1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000480 	.word	0x20000480
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801443c 	.word	0x0801443c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000484 	.word	0x20000484
 80001cc:	0801443c 	.word	0x0801443c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000564:	4b0d      	ldr	r3, [pc, #52]	@ (800059c <MX_CRC_Init+0x3c>)
 8000566:	4a0e      	ldr	r2, [pc, #56]	@ (80005a0 <MX_CRC_Init+0x40>)
 8000568:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800056a:	4b0c      	ldr	r3, [pc, #48]	@ (800059c <MX_CRC_Init+0x3c>)
 800056c:	2200      	movs	r2, #0
 800056e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000570:	4b0a      	ldr	r3, [pc, #40]	@ (800059c <MX_CRC_Init+0x3c>)
 8000572:	2200      	movs	r2, #0
 8000574:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000576:	4b09      	ldr	r3, [pc, #36]	@ (800059c <MX_CRC_Init+0x3c>)
 8000578:	2200      	movs	r2, #0
 800057a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800057c:	4b07      	ldr	r3, [pc, #28]	@ (800059c <MX_CRC_Init+0x3c>)
 800057e:	2200      	movs	r2, #0
 8000580:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000582:	4b06      	ldr	r3, [pc, #24]	@ (800059c <MX_CRC_Init+0x3c>)
 8000584:	2201      	movs	r2, #1
 8000586:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000588:	4804      	ldr	r0, [pc, #16]	@ (800059c <MX_CRC_Init+0x3c>)
 800058a:	f000 fdd7 	bl	800113c <HAL_CRC_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000594:	f000 f9e2 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	2000049c 	.word	0x2000049c
 80005a0:	40023000 	.word	0x40023000

080005a4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a0a      	ldr	r2, [pc, #40]	@ (80005dc <HAL_CRC_MspInit+0x38>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d10b      	bne.n	80005ce <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005b6:	4b0a      	ldr	r3, [pc, #40]	@ (80005e0 <HAL_CRC_MspInit+0x3c>)
 80005b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005ba:	4a09      	ldr	r2, [pc, #36]	@ (80005e0 <HAL_CRC_MspInit+0x3c>)
 80005bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80005c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80005c2:	4b07      	ldr	r3, [pc, #28]	@ (80005e0 <HAL_CRC_MspInit+0x3c>)
 80005c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	40023000 	.word	0x40023000
 80005e0:	40021000 	.word	0x40021000

080005e4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005e8:	4a08      	ldr	r2, [pc, #32]	@ (800060c <MX_FREERTOS_Init+0x28>)
 80005ea:	2100      	movs	r1, #0
 80005ec:	4808      	ldr	r0, [pc, #32]	@ (8000610 <MX_FREERTOS_Init+0x2c>)
 80005ee:	f003 fdd1 	bl	8004194 <osThreadNew>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a07      	ldr	r2, [pc, #28]	@ (8000614 <MX_FREERTOS_Init+0x30>)
 80005f6:	6013      	str	r3, [r2, #0]

  /* creation of Touch */
  TouchHandle = osThreadNew(Touch_in, NULL, &Touch_attributes);
 80005f8:	4a07      	ldr	r2, [pc, #28]	@ (8000618 <MX_FREERTOS_Init+0x34>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	4807      	ldr	r0, [pc, #28]	@ (800061c <MX_FREERTOS_Init+0x38>)
 80005fe:	f003 fdc9 	bl	8004194 <osThreadNew>
 8000602:	4603      	mov	r3, r0
 8000604:	4a06      	ldr	r2, [pc, #24]	@ (8000620 <MX_FREERTOS_Init+0x3c>)
 8000606:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	08014e84 	.word	0x08014e84
 8000610:	08000625 	.word	0x08000625
 8000614:	200004c0 	.word	0x200004c0
 8000618:	08014ea8 	.word	0x08014ea8
 800061c:	08000635 	.word	0x08000635
 8000620:	200004c4 	.word	0x200004c4

08000624 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800062c:	2001      	movs	r0, #1
 800062e:	f003 fe43 	bl	80042b8 <osDelay>
 8000632:	e7fb      	b.n	800062c <StartDefaultTask+0x8>

08000634 <Touch_in>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Touch_in */
void Touch_in(void *argument)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Touch_in */

   MX_TouchGFX_Process();
 800063c:	f007 f973 	bl	8007926 <MX_TouchGFX_Process>

  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8000640:	2001      	movs	r0, #1
 8000642:	f003 fe39 	bl	80042b8 <osDelay>
 8000646:	e7fb      	b.n	8000640 <Touch_in+0xc>

08000648 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <MX_GPIO_Init+0x44>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000652:	4a0e      	ldr	r2, [pc, #56]	@ (800068c <MX_GPIO_Init+0x44>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800065a:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <MX_GPIO_Init+0x44>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	4b09      	ldr	r3, [pc, #36]	@ (800068c <MX_GPIO_Init+0x44>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066a:	4a08      	ldr	r2, [pc, #32]	@ (800068c <MX_GPIO_Init+0x44>)
 800066c:	f043 0302 	orr.w	r3, r3, #2
 8000670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000672:	4b06      	ldr	r3, [pc, #24]	@ (800068c <MX_GPIO_Init+0x44>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	f003 0302 	and.w	r3, r3, #2
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]

}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	40021000 	.word	0x40021000

08000690 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000694:	4b1b      	ldr	r3, [pc, #108]	@ (8000704 <MX_I2C1_Init+0x74>)
 8000696:	4a1c      	ldr	r2, [pc, #112]	@ (8000708 <MX_I2C1_Init+0x78>)
 8000698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 800069a:	4b1a      	ldr	r3, [pc, #104]	@ (8000704 <MX_I2C1_Init+0x74>)
 800069c:	4a1b      	ldr	r2, [pc, #108]	@ (800070c <MX_I2C1_Init+0x7c>)
 800069e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006a0:	4b18      	ldr	r3, [pc, #96]	@ (8000704 <MX_I2C1_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a6:	4b17      	ldr	r3, [pc, #92]	@ (8000704 <MX_I2C1_Init+0x74>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ac:	4b15      	ldr	r3, [pc, #84]	@ (8000704 <MX_I2C1_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006b2:	4b14      	ldr	r3, [pc, #80]	@ (8000704 <MX_I2C1_Init+0x74>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006b8:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <MX_I2C1_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006be:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <MX_I2C1_Init+0x74>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <MX_I2C1_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ca:	480e      	ldr	r0, [pc, #56]	@ (8000704 <MX_I2C1_Init+0x74>)
 80006cc:	f000 ff8a 	bl	80015e4 <HAL_I2C_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006d6:	f000 f941 	bl	800095c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006da:	2100      	movs	r1, #0
 80006dc:	4809      	ldr	r0, [pc, #36]	@ (8000704 <MX_I2C1_Init+0x74>)
 80006de:	f001 fb77 	bl	8001dd0 <HAL_I2CEx_ConfigAnalogFilter>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006e8:	f000 f938 	bl	800095c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006ec:	2100      	movs	r1, #0
 80006ee:	4805      	ldr	r0, [pc, #20]	@ (8000704 <MX_I2C1_Init+0x74>)
 80006f0:	f001 fbb9 	bl	8001e66 <HAL_I2CEx_ConfigDigitalFilter>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006fa:	f000 f92f 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200004c8 	.word	0x200004c8
 8000708:	40005400 	.word	0x40005400
 800070c:	00702991 	.word	0x00702991

08000710 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b09e      	sub	sp, #120	@ 0x78
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	2254      	movs	r2, #84	@ 0x54
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f013 f86a 	bl	801380a <memset>
  if(i2cHandle->Instance==I2C1)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a1e      	ldr	r2, [pc, #120]	@ (80007b4 <HAL_I2C_MspInit+0xa4>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d135      	bne.n	80007ac <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000740:	2340      	movs	r3, #64	@ 0x40
 8000742:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000744:	2300      	movs	r3, #0
 8000746:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000748:	f107 0310 	add.w	r3, r7, #16
 800074c:	4618      	mov	r0, r3
 800074e:	f002 faa5 	bl	8002c9c <HAL_RCCEx_PeriphCLKConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000758:	f000 f900 	bl	800095c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075c:	4b16      	ldr	r3, [pc, #88]	@ (80007b8 <HAL_I2C_MspInit+0xa8>)
 800075e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000760:	4a15      	ldr	r2, [pc, #84]	@ (80007b8 <HAL_I2C_MspInit+0xa8>)
 8000762:	f043 0302 	orr.w	r3, r3, #2
 8000766:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000768:	4b13      	ldr	r3, [pc, #76]	@ (80007b8 <HAL_I2C_MspInit+0xa8>)
 800076a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076c:	f003 0302 	and.w	r3, r3, #2
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000774:	23c0      	movs	r3, #192	@ 0xc0
 8000776:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000778:	2312      	movs	r3, #18
 800077a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000780:	2303      	movs	r3, #3
 8000782:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000784:	2304      	movs	r3, #4
 8000786:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000788:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800078c:	4619      	mov	r1, r3
 800078e:	480b      	ldr	r0, [pc, #44]	@ (80007bc <HAL_I2C_MspInit+0xac>)
 8000790:	f000 fdbe 	bl	8001310 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000794:	4b08      	ldr	r3, [pc, #32]	@ (80007b8 <HAL_I2C_MspInit+0xa8>)
 8000796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000798:	4a07      	ldr	r2, [pc, #28]	@ (80007b8 <HAL_I2C_MspInit+0xa8>)
 800079a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800079e:	6593      	str	r3, [r2, #88]	@ 0x58
 80007a0:	4b05      	ldr	r3, [pc, #20]	@ (80007b8 <HAL_I2C_MspInit+0xa8>)
 80007a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007ac:	bf00      	nop
 80007ae:	3778      	adds	r7, #120	@ 0x78
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40005400 	.word	0x40005400
 80007b8:	40021000 	.word	0x40021000
 80007bc:	48000400 	.word	0x48000400

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c4:	f000 fb7b 	bl	8000ebe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c8:	f000 f81e 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007cc:	f7ff ff3c 	bl	8000648 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007d0:	f7ff ff5e 	bl	8000690 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80007d4:	f000 fac2 	bl	8000d5c <MX_USART2_UART_Init>
  MX_CRC_Init();
 80007d8:	f7ff fec2 	bl	8000560 <MX_CRC_Init>
  MX_TIM6_Init();
 80007dc:	f000 fa62 	bl	8000ca4 <MX_TIM6_Init>
  MX_TouchGFX_Init();
 80007e0:	f007 f899 	bl	8007916 <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 80007e4:	f007 f890 	bl	8007908 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80007e8:	f00a fea8 	bl	800b53c <ssd1306_Init>

 // ssd1306_TestAll();
  HAL_TIM_Base_Start_IT(&htim6);
 80007ec:	4805      	ldr	r0, [pc, #20]	@ (8000804 <main+0x44>)
 80007ee:	f002 fd95 	bl	800331c <HAL_TIM_Base_Start_IT>
 // HAL_TIM_Base_Start_IT(&htim7);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80007f2:	f003 fc85 	bl	8004100 <osKernelInitialize>
  MX_FREERTOS_Init();
 80007f6:	f7ff fef5 	bl	80005e4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80007fa:	f003 fca5 	bl	8004148 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007fe:	bf00      	nop
 8000800:	e7fd      	b.n	80007fe <main+0x3e>
 8000802:	bf00      	nop
 8000804:	2000057c 	.word	0x2000057c

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b096      	sub	sp, #88	@ 0x58
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	2244      	movs	r2, #68	@ 0x44
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f012 fff7 	bl	801380a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	463b      	mov	r3, r7
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800082a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800082e:	f001 fb75 	bl	8001f1c <HAL_PWREx_ControlVoltageScaling>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000838:	f000 f890 	bl	800095c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800083c:	2310      	movs	r3, #16
 800083e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000840:	2301      	movs	r3, #1
 8000842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000848:	2360      	movs	r3, #96	@ 0x60
 800084a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084c:	2302      	movs	r3, #2
 800084e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000850:	2301      	movs	r3, #1
 8000852:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000854:	2301      	movs	r3, #1
 8000856:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000858:	2328      	movs	r3, #40	@ 0x28
 800085a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800085c:	2307      	movs	r3, #7
 800085e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000860:	2302      	movs	r3, #2
 8000862:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000864:	2302      	movs	r3, #2
 8000866:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4618      	mov	r0, r3
 800086e:	f001 fbab 	bl	8001fc8 <HAL_RCC_OscConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000878:	f000 f870 	bl	800095c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087c:	230f      	movs	r3, #15
 800087e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000880:	2303      	movs	r3, #3
 8000882:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	2104      	movs	r1, #4
 8000894:	4618      	mov	r0, r3
 8000896:	f001 ffab 	bl	80027f0 <HAL_RCC_ClockConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80008a0:	f000 f85c 	bl	800095c <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	3758      	adds	r7, #88	@ 0x58
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM6)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a22      	ldr	r2, [pc, #136]	@ (8000944 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d101      	bne.n	80008c2 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		touchgfxSignalVSync();
 80008be:	f009 fe7f 	bl	800a5c0 <touchgfxSignalVSync>
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a20      	ldr	r2, [pc, #128]	@ (8000948 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d101      	bne.n	80008d0 <HAL_TIM_PeriodElapsedCallback+0x24>
    HAL_IncTick();
 80008cc:	f000 fb10 	bl	8000ef0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000944 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d130      	bne.n	800093c <HAL_TIM_PeriodElapsedCallback+0x90>
	 {
	  	 if( tick == 2){
 80008da:	4b1c      	ldr	r3, [pc, #112]	@ (800094c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d127      	bne.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x86>

	  		if (++seconds >= 60)
 80008e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000950 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	3301      	adds	r3, #1
 80008e8:	4a19      	ldr	r2, [pc, #100]	@ (8000950 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80008ea:	6013      	str	r3, [r2, #0]
 80008ec:	4b18      	ldr	r3, [pc, #96]	@ (8000950 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b3b      	cmp	r3, #59	@ 0x3b
 80008f2:	dd1a      	ble.n	800092a <HAL_TIM_PeriodElapsedCallback+0x7e>
			  {
				  seconds = 0;
 80008f4:	4b16      	ldr	r3, [pc, #88]	@ (8000950 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
				  if (++minutes >= 60)
 80008fa:	4b16      	ldr	r3, [pc, #88]	@ (8000954 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	3301      	adds	r3, #1
 8000900:	4a14      	ldr	r2, [pc, #80]	@ (8000954 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000902:	6013      	str	r3, [r2, #0]
 8000904:	4b13      	ldr	r3, [pc, #76]	@ (8000954 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b3b      	cmp	r3, #59	@ 0x3b
 800090a:	dd0e      	ble.n	800092a <HAL_TIM_PeriodElapsedCallback+0x7e>
				  {
					  minutes = 0;
 800090c:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
					  if (++hours >= 24)
 8000912:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	3301      	adds	r3, #1
 8000918:	4a0f      	ldr	r2, [pc, #60]	@ (8000958 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800091a:	6013      	str	r3, [r2, #0]
 800091c:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b17      	cmp	r3, #23
 8000922:	dd02      	ble.n	800092a <HAL_TIM_PeriodElapsedCallback+0x7e>
					  {
						  hours = 0;
 8000924:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
					  }
				  }
			  }

	  		tick = 0;
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]

	 }


  /* USER CODE END Callback 1 */
}
 8000930:	e004      	b.n	800093c <HAL_TIM_PeriodElapsedCallback+0x90>
	  		 tick++;
 8000932:	4b06      	ldr	r3, [pc, #24]	@ (800094c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	3301      	adds	r3, #1
 8000938:	4a04      	ldr	r2, [pc, #16]	@ (800094c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800093a:	6013      	str	r3, [r2, #0]
}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40001000 	.word	0x40001000
 8000948:	40012c00 	.word	0x40012c00
 800094c:	20000528 	.word	0x20000528
 8000950:	2000051c 	.word	0x2000051c
 8000954:	20000520 	.word	0x20000520
 8000958:	20000524 	.word	0x20000524

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <Error_Handler+0x8>

08000968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <HAL_MspInit+0x4c>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000972:	4a10      	ldr	r2, [pc, #64]	@ (80009b4 <HAL_MspInit+0x4c>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6613      	str	r3, [r2, #96]	@ 0x60
 800097a:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <HAL_MspInit+0x4c>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	4b0b      	ldr	r3, [pc, #44]	@ (80009b4 <HAL_MspInit+0x4c>)
 8000988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800098a:	4a0a      	ldr	r2, [pc, #40]	@ (80009b4 <HAL_MspInit+0x4c>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000990:	6593      	str	r3, [r2, #88]	@ 0x58
 8000992:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <HAL_MspInit+0x4c>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	210f      	movs	r1, #15
 80009a2:	f06f 0001 	mvn.w	r0, #1
 80009a6:	f000 fb9f 	bl	80010e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000

080009b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08c      	sub	sp, #48	@ 0x30
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80009c0:	2300      	movs	r3, #0
 80009c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000a80 <HAL_InitTick+0xc8>)
 80009c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ca:	4a2d      	ldr	r2, [pc, #180]	@ (8000a80 <HAL_InitTick+0xc8>)
 80009cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80009d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000a80 <HAL_InitTick+0xc8>)
 80009d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009de:	f107 020c 	add.w	r2, r7, #12
 80009e2:	f107 0310 	add.w	r3, r7, #16
 80009e6:	4611      	mov	r1, r2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f002 f8c5 	bl	8002b78 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009ee:	f002 f8ad 	bl	8002b4c <HAL_RCC_GetPCLK2Freq>
 80009f2:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009f6:	4a23      	ldr	r2, [pc, #140]	@ (8000a84 <HAL_InitTick+0xcc>)
 80009f8:	fba2 2303 	umull	r2, r3, r2, r3
 80009fc:	0c9b      	lsrs	r3, r3, #18
 80009fe:	3b01      	subs	r3, #1
 8000a00:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a02:	4b21      	ldr	r3, [pc, #132]	@ (8000a88 <HAL_InitTick+0xd0>)
 8000a04:	4a21      	ldr	r2, [pc, #132]	@ (8000a8c <HAL_InitTick+0xd4>)
 8000a06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a08:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <HAL_InitTick+0xd0>)
 8000a0a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a0e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a10:	4a1d      	ldr	r2, [pc, #116]	@ (8000a88 <HAL_InitTick+0xd0>)
 8000a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a14:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <HAL_InitTick+0xd0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <HAL_InitTick+0xd0>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a22:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <HAL_InitTick+0xd0>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a28:	4817      	ldr	r0, [pc, #92]	@ (8000a88 <HAL_InitTick+0xd0>)
 8000a2a:	f002 fc1f 	bl	800326c <HAL_TIM_Base_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d11b      	bne.n	8000a74 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a3c:	4812      	ldr	r0, [pc, #72]	@ (8000a88 <HAL_InitTick+0xd0>)
 8000a3e:	f002 fc6d 	bl	800331c <HAL_TIM_Base_Start_IT>
 8000a42:	4603      	mov	r3, r0
 8000a44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d111      	bne.n	8000a74 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a50:	2019      	movs	r0, #25
 8000a52:	f000 fb65 	bl	8001120 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b0f      	cmp	r3, #15
 8000a5a:	d808      	bhi.n	8000a6e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	2019      	movs	r0, #25
 8000a62:	f000 fb41 	bl	80010e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a66:	4a0a      	ldr	r2, [pc, #40]	@ (8000a90 <HAL_InitTick+0xd8>)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6013      	str	r3, [r2, #0]
 8000a6c:	e002      	b.n	8000a74 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3730      	adds	r7, #48	@ 0x30
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40021000 	.word	0x40021000
 8000a84:	431bde83 	.word	0x431bde83
 8000a88:	2000052c 	.word	0x2000052c
 8000a8c:	40012c00 	.word	0x40012c00
 8000a90:	20000004 	.word	0x20000004

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <NMI_Handler+0x4>

08000a9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <HardFault_Handler+0x4>

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
	...

08000acc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ad0:	4802      	ldr	r0, [pc, #8]	@ (8000adc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000ad2:	f002 fc77 	bl	80033c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	2000052c 	.word	0x2000052c

08000ae0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ae4:	4802      	ldr	r0, [pc, #8]	@ (8000af0 <TIM6_DAC_IRQHandler+0x10>)
 8000ae6:	f002 fc6d 	bl	80033c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	2000057c 	.word	0x2000057c

08000af4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return 1;
 8000af8:	2301      	movs	r3, #1
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <_kill>:

int _kill(int pid, int sig)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b0e:	f012 ff1f 	bl	8013950 <__errno>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2216      	movs	r2, #22
 8000b16:	601a      	str	r2, [r3, #0]
  return -1;
 8000b18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <_exit>:

void _exit (int status)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ffe7 	bl	8000b04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b36:	bf00      	nop
 8000b38:	e7fd      	b.n	8000b36 <_exit+0x12>

08000b3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b086      	sub	sp, #24
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	60f8      	str	r0, [r7, #12]
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	e00a      	b.n	8000b62 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b4c:	f3af 8000 	nop.w
 8000b50:	4601      	mov	r1, r0
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	1c5a      	adds	r2, r3, #1
 8000b56:	60ba      	str	r2, [r7, #8]
 8000b58:	b2ca      	uxtb	r2, r1
 8000b5a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	697a      	ldr	r2, [r7, #20]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	dbf0      	blt.n	8000b4c <_read+0x12>
  }

  return len;
 8000b6a:	687b      	ldr	r3, [r7, #4]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	e009      	b.n	8000b9a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	1c5a      	adds	r2, r3, #1
 8000b8a:	60ba      	str	r2, [r7, #8]
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	3301      	adds	r3, #1
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	697a      	ldr	r2, [r7, #20]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	dbf1      	blt.n	8000b86 <_write+0x12>
  }
  return len;
 8000ba2:	687b      	ldr	r3, [r7, #4]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <_close>:

int _close(int file)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bd4:	605a      	str	r2, [r3, #4]
  return 0;
 8000bd6:	2300      	movs	r3, #0
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <_isatty>:

int _isatty(int file)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bec:	2301      	movs	r3, #1
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b085      	sub	sp, #20
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	60f8      	str	r0, [r7, #12]
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c1c:	4a14      	ldr	r2, [pc, #80]	@ (8000c70 <_sbrk+0x5c>)
 8000c1e:	4b15      	ldr	r3, [pc, #84]	@ (8000c74 <_sbrk+0x60>)
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c28:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d102      	bne.n	8000c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c30:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <_sbrk+0x64>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	@ (8000c7c <_sbrk+0x68>)
 8000c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d207      	bcs.n	8000c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c44:	f012 fe84 	bl	8013950 <__errno>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c52:	e009      	b.n	8000c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c54:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5a:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	4a05      	ldr	r2, [pc, #20]	@ (8000c78 <_sbrk+0x64>)
 8000c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c66:	68fb      	ldr	r3, [r7, #12]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20010000 	.word	0x20010000
 8000c74:	00004000 	.word	0x00004000
 8000c78:	20000578 	.word	0x20000578
 8000c7c:	200045c0 	.word	0x200045c0

08000c80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <SystemInit+0x20>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ca0 <SystemInit+0x20>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000cb4:	4b14      	ldr	r3, [pc, #80]	@ (8000d08 <MX_TIM6_Init+0x64>)
 8000cb6:	4a15      	ldr	r2, [pc, #84]	@ (8000d0c <MX_TIM6_Init+0x68>)
 8000cb8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 8000cba:	4b13      	ldr	r3, [pc, #76]	@ (8000d08 <MX_TIM6_Init+0x64>)
 8000cbc:	224f      	movs	r2, #79	@ 0x4f
 8000cbe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <MX_TIM6_Init+0x64>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000-1;
 8000cc6:	4b10      	ldr	r3, [pc, #64]	@ (8000d08 <MX_TIM6_Init+0x64>)
 8000cc8:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000ccc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <MX_TIM6_Init+0x64>)
 8000cd0:	2280      	movs	r2, #128	@ 0x80
 8000cd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cd4:	480c      	ldr	r0, [pc, #48]	@ (8000d08 <MX_TIM6_Init+0x64>)
 8000cd6:	f002 fac9 	bl	800326c <HAL_TIM_Base_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000ce0:	f7ff fe3c 	bl	800095c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	@ (8000d08 <MX_TIM6_Init+0x64>)
 8000cf2:	f002 fd13 	bl	800371c <HAL_TIMEx_MasterConfigSynchronization>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000cfc:	f7ff fe2e 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	2000057c 	.word	0x2000057c
 8000d0c:	40001000 	.word	0x40001000

08000d10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d54 <HAL_TIM_Base_MspInit+0x44>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d113      	bne.n	8000d4a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d22:	4b0d      	ldr	r3, [pc, #52]	@ (8000d58 <HAL_TIM_Base_MspInit+0x48>)
 8000d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d26:	4a0c      	ldr	r2, [pc, #48]	@ (8000d58 <HAL_TIM_Base_MspInit+0x48>)
 8000d28:	f043 0310 	orr.w	r3, r3, #16
 8000d2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <HAL_TIM_Base_MspInit+0x48>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d32:	f003 0310 	and.w	r3, r3, #16
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2105      	movs	r1, #5
 8000d3e:	2036      	movs	r0, #54	@ 0x36
 8000d40:	f000 f9d2 	bl	80010e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d44:	2036      	movs	r0, #54	@ 0x36
 8000d46:	f000 f9eb 	bl	8001120 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40001000 	.word	0x40001000
 8000d58:	40021000 	.word	0x40021000

08000d5c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d60:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d62:	4a15      	ldr	r2, [pc, #84]	@ (8000db8 <MX_USART2_UART_Init+0x5c>)
 8000d64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d66:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d82:	220c      	movs	r2, #12
 8000d84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d92:	4b08      	ldr	r3, [pc, #32]	@ (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d9e:	4805      	ldr	r0, [pc, #20]	@ (8000db4 <MX_USART2_UART_Init+0x58>)
 8000da0:	f002 fd40 	bl	8003824 <HAL_UART_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000daa:	f7ff fdd7 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200005c8 	.word	0x200005c8
 8000db8:	40004400 	.word	0x40004400

08000dbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b09e      	sub	sp, #120	@ 0x78
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	2254      	movs	r2, #84	@ 0x54
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f012 fd14 	bl	801380a <memset>
  if(uartHandle->Instance==USART2)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a1f      	ldr	r2, [pc, #124]	@ (8000e64 <HAL_UART_MspInit+0xa8>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d136      	bne.n	8000e5a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dec:	2302      	movs	r3, #2
 8000dee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f001 ff4f 	bl	8002c9c <HAL_RCCEx_PeriphCLKConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e04:	f7ff fdaa 	bl	800095c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e08:	4b17      	ldr	r3, [pc, #92]	@ (8000e68 <HAL_UART_MspInit+0xac>)
 8000e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e0c:	4a16      	ldr	r2, [pc, #88]	@ (8000e68 <HAL_UART_MspInit+0xac>)
 8000e0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e12:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e14:	4b14      	ldr	r3, [pc, #80]	@ (8000e68 <HAL_UART_MspInit+0xac>)
 8000e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e20:	4b11      	ldr	r3, [pc, #68]	@ (8000e68 <HAL_UART_MspInit+0xac>)
 8000e22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e24:	4a10      	ldr	r2, [pc, #64]	@ (8000e68 <HAL_UART_MspInit+0xac>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e68 <HAL_UART_MspInit+0xac>)
 8000e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e38:	230c      	movs	r3, #12
 8000e3a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e48:	2307      	movs	r3, #7
 8000e4a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e50:	4619      	mov	r1, r3
 8000e52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e56:	f000 fa5b 	bl	8001310 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	3778      	adds	r7, #120	@ 0x78
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40004400 	.word	0x40004400
 8000e68:	40021000 	.word	0x40021000

08000e6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ea4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e70:	f7ff ff06 	bl	8000c80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e74:	480c      	ldr	r0, [pc, #48]	@ (8000ea8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e76:	490d      	ldr	r1, [pc, #52]	@ (8000eac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e78:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb0 <LoopForever+0xe>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e7c:	e002      	b.n	8000e84 <LoopCopyDataInit>

08000e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e82:	3304      	adds	r3, #4

08000e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e88:	d3f9      	bcc.n	8000e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000eb8 <LoopForever+0x16>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e90:	e001      	b.n	8000e96 <LoopFillZerobss>

08000e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e94:	3204      	adds	r2, #4

08000e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e98:	d3fb      	bcc.n	8000e92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9a:	f012 fd5f 	bl	801395c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e9e:	f7ff fc8f 	bl	80007c0 <main>

08000ea2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ea2:	e7fe      	b.n	8000ea2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ea4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eac:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000eb0:	080163bc 	.word	0x080163bc
  ldr r2, =_sbss
 8000eb4:	20000480 	.word	0x20000480
  ldr r4, =_ebss
 8000eb8:	200045bc 	.word	0x200045bc

08000ebc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ebc:	e7fe      	b.n	8000ebc <ADC1_IRQHandler>

08000ebe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec8:	2003      	movs	r0, #3
 8000eca:	f000 f902 	bl	80010d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ece:	2004      	movs	r0, #4
 8000ed0:	f7ff fd72 	bl	80009b8 <HAL_InitTick>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d002      	beq.n	8000ee0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	71fb      	strb	r3, [r7, #7]
 8000ede:	e001      	b.n	8000ee4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ee0:	f7ff fd42 	bl	8000968 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <HAL_IncTick+0x20>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <HAL_IncTick+0x24>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a04      	ldr	r2, [pc, #16]	@ (8000f14 <HAL_IncTick+0x24>)
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008
 8000f14:	2000064c 	.word	0x2000064c

08000f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f1c:	4b03      	ldr	r3, [pc, #12]	@ (8000f2c <HAL_GetTick+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	2000064c 	.word	0x2000064c

08000f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f38:	f7ff ffee 	bl	8000f18 <HAL_GetTick>
 8000f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f48:	d005      	beq.n	8000f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <HAL_Delay+0x44>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f56:	bf00      	nop
 8000f58:	f7ff ffde 	bl	8000f18 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d8f7      	bhi.n	8000f58 <HAL_Delay+0x28>
  {
  }
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000008 	.word	0x20000008

08000f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f88:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f94:	4013      	ands	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000faa:	4a04      	ldr	r2, [pc, #16]	@ (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	60d3      	str	r3, [r2, #12]
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc4:	4b04      	ldr	r3, [pc, #16]	@ (8000fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	f003 0307 	and.w	r3, r3, #7
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	db0b      	blt.n	8001006 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	f003 021f 	and.w	r2, r3, #31
 8000ff4:	4907      	ldr	r1, [pc, #28]	@ (8001014 <__NVIC_EnableIRQ+0x38>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	095b      	lsrs	r3, r3, #5
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8001002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000e100 	.word	0xe000e100

08001018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001028:	2b00      	cmp	r3, #0
 800102a:	db0a      	blt.n	8001042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	b2da      	uxtb	r2, r3
 8001030:	490c      	ldr	r1, [pc, #48]	@ (8001064 <__NVIC_SetPriority+0x4c>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	0112      	lsls	r2, r2, #4
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	440b      	add	r3, r1
 800103c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001040:	e00a      	b.n	8001058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4908      	ldr	r1, [pc, #32]	@ (8001068 <__NVIC_SetPriority+0x50>)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	3b04      	subs	r3, #4
 8001050:	0112      	lsls	r2, r2, #4
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	440b      	add	r3, r1
 8001056:	761a      	strb	r2, [r3, #24]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000e100 	.word	0xe000e100
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	@ 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f1c3 0307 	rsb	r3, r3, #7
 8001086:	2b04      	cmp	r3, #4
 8001088:	bf28      	it	cs
 800108a:	2304      	movcs	r3, #4
 800108c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3304      	adds	r3, #4
 8001092:	2b06      	cmp	r3, #6
 8001094:	d902      	bls.n	800109c <NVIC_EncodePriority+0x30>
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3b03      	subs	r3, #3
 800109a:	e000      	b.n	800109e <NVIC_EncodePriority+0x32>
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	f04f 32ff 	mov.w	r2, #4294967295
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43da      	mvns	r2, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	401a      	ands	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b4:	f04f 31ff 	mov.w	r1, #4294967295
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	43d9      	mvns	r1, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	4313      	orrs	r3, r2
         );
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3724      	adds	r7, #36	@ 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ff4c 	bl	8000f78 <__NVIC_SetPriorityGrouping>
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
 80010f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010fa:	f7ff ff61 	bl	8000fc0 <__NVIC_GetPriorityGrouping>
 80010fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	68b9      	ldr	r1, [r7, #8]
 8001104:	6978      	ldr	r0, [r7, #20]
 8001106:	f7ff ffb1 	bl	800106c <NVIC_EncodePriority>
 800110a:	4602      	mov	r2, r0
 800110c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001110:	4611      	mov	r1, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff80 	bl	8001018 <__NVIC_SetPriority>
}
 8001118:	bf00      	nop
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ff54 	bl	8000fdc <__NVIC_EnableIRQ>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e054      	b.n	80011f8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	7f5b      	ldrb	r3, [r3, #29]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	d105      	bne.n	8001164 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff fa20 	bl	80005a4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2202      	movs	r2, #2
 8001168:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	791b      	ldrb	r3, [r3, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d10c      	bne.n	800118c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a22      	ldr	r2, [pc, #136]	@ (8001200 <HAL_CRC_Init+0xc4>)
 8001178:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0218 	bic.w	r2, r2, #24
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	e00c      	b.n	80011a6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6899      	ldr	r1, [r3, #8]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	461a      	mov	r2, r3
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f834 	bl	8001204 <HAL_CRCEx_Polynomial_Set>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e028      	b.n	80011f8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	795b      	ldrb	r3, [r3, #5]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d105      	bne.n	80011ba <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f04f 32ff 	mov.w	r2, #4294967295
 80011b6:	611a      	str	r2, [r3, #16]
 80011b8:	e004      	b.n	80011c4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	6912      	ldr	r2, [r2, #16]
 80011c2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	695a      	ldr	r2, [r3, #20]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	430a      	orrs	r2, r1
 80011d8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	699a      	ldr	r2, [r3, #24]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	430a      	orrs	r2, r1
 80011ee:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	04c11db7 	.word	0x04c11db7

08001204 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001204:	b480      	push	{r7}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001210:	2300      	movs	r3, #0
 8001212:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001214:	231f      	movs	r3, #31
 8001216:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001218:	bf00      	nop
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1e5a      	subs	r2, r3, #1
 800121e:	613a      	str	r2, [r7, #16]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d009      	beq.n	8001238 <HAL_CRCEx_Polynomial_Set+0x34>
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	f003 031f 	and.w	r3, r3, #31
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	fa22 f303 	lsr.w	r3, r2, r3
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0f0      	beq.n	800121a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b18      	cmp	r3, #24
 800123c:	d846      	bhi.n	80012cc <HAL_CRCEx_Polynomial_Set+0xc8>
 800123e:	a201      	add	r2, pc, #4	@ (adr r2, 8001244 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001244:	080012d3 	.word	0x080012d3
 8001248:	080012cd 	.word	0x080012cd
 800124c:	080012cd 	.word	0x080012cd
 8001250:	080012cd 	.word	0x080012cd
 8001254:	080012cd 	.word	0x080012cd
 8001258:	080012cd 	.word	0x080012cd
 800125c:	080012cd 	.word	0x080012cd
 8001260:	080012cd 	.word	0x080012cd
 8001264:	080012c1 	.word	0x080012c1
 8001268:	080012cd 	.word	0x080012cd
 800126c:	080012cd 	.word	0x080012cd
 8001270:	080012cd 	.word	0x080012cd
 8001274:	080012cd 	.word	0x080012cd
 8001278:	080012cd 	.word	0x080012cd
 800127c:	080012cd 	.word	0x080012cd
 8001280:	080012cd 	.word	0x080012cd
 8001284:	080012b5 	.word	0x080012b5
 8001288:	080012cd 	.word	0x080012cd
 800128c:	080012cd 	.word	0x080012cd
 8001290:	080012cd 	.word	0x080012cd
 8001294:	080012cd 	.word	0x080012cd
 8001298:	080012cd 	.word	0x080012cd
 800129c:	080012cd 	.word	0x080012cd
 80012a0:	080012cd 	.word	0x080012cd
 80012a4:	080012a9 	.word	0x080012a9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d913      	bls.n	80012d6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80012b2:	e010      	b.n	80012d6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	2b07      	cmp	r3, #7
 80012b8:	d90f      	bls.n	80012da <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80012be:	e00c      	b.n	80012da <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	2b0f      	cmp	r3, #15
 80012c4:	d90b      	bls.n	80012de <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80012ca:	e008      	b.n	80012de <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	75fb      	strb	r3, [r7, #23]
      break;
 80012d0:	e006      	b.n	80012e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80012d2:	bf00      	nop
 80012d4:	e004      	b.n	80012e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80012d6:	bf00      	nop
 80012d8:	e002      	b.n	80012e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80012da:	bf00      	nop
 80012dc:	e000      	b.n	80012e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80012de:	bf00      	nop
  }
  if (status == HAL_OK)
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10d      	bne.n	8001302 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f023 0118 	bic.w	r1, r3, #24
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	430a      	orrs	r2, r1
 8001300:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001302:	7dfb      	ldrb	r3, [r7, #23]
}
 8001304:	4618      	mov	r0, r3
 8001306:	371c      	adds	r7, #28
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001310:	b480      	push	{r7}
 8001312:	b087      	sub	sp, #28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800131e:	e148      	b.n	80015b2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	2101      	movs	r1, #1
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	fa01 f303 	lsl.w	r3, r1, r3
 800132c:	4013      	ands	r3, r2
 800132e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 813a 	beq.w	80015ac <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	2b01      	cmp	r3, #1
 8001342:	d005      	beq.n	8001350 <HAL_GPIO_Init+0x40>
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d130      	bne.n	80013b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	2203      	movs	r2, #3
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	68da      	ldr	r2, [r3, #12]
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4313      	orrs	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001386:	2201      	movs	r2, #1
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	091b      	lsrs	r3, r3, #4
 800139c:	f003 0201 	and.w	r2, r3, #1
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	2b03      	cmp	r3, #3
 80013bc:	d017      	beq.n	80013ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	2203      	movs	r2, #3
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d123      	bne.n	8001442 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	08da      	lsrs	r2, r3, #3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3208      	adds	r2, #8
 8001402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001406:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	220f      	movs	r2, #15
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	691a      	ldr	r2, [r3, #16]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	08da      	lsrs	r2, r3, #3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3208      	adds	r2, #8
 800143c:	6939      	ldr	r1, [r7, #16]
 800143e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	2203      	movs	r2, #3
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 0203 	and.w	r2, r3, #3
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 8094 	beq.w	80015ac <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001484:	4b52      	ldr	r3, [pc, #328]	@ (80015d0 <HAL_GPIO_Init+0x2c0>)
 8001486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001488:	4a51      	ldr	r2, [pc, #324]	@ (80015d0 <HAL_GPIO_Init+0x2c0>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001490:	4b4f      	ldr	r3, [pc, #316]	@ (80015d0 <HAL_GPIO_Init+0x2c0>)
 8001492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800149c:	4a4d      	ldr	r2, [pc, #308]	@ (80015d4 <HAL_GPIO_Init+0x2c4>)
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	089b      	lsrs	r3, r3, #2
 80014a2:	3302      	adds	r3, #2
 80014a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	220f      	movs	r2, #15
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014c6:	d00d      	beq.n	80014e4 <HAL_GPIO_Init+0x1d4>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a43      	ldr	r2, [pc, #268]	@ (80015d8 <HAL_GPIO_Init+0x2c8>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d007      	beq.n	80014e0 <HAL_GPIO_Init+0x1d0>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a42      	ldr	r2, [pc, #264]	@ (80015dc <HAL_GPIO_Init+0x2cc>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d101      	bne.n	80014dc <HAL_GPIO_Init+0x1cc>
 80014d8:	2302      	movs	r3, #2
 80014da:	e004      	b.n	80014e6 <HAL_GPIO_Init+0x1d6>
 80014dc:	2307      	movs	r3, #7
 80014de:	e002      	b.n	80014e6 <HAL_GPIO_Init+0x1d6>
 80014e0:	2301      	movs	r3, #1
 80014e2:	e000      	b.n	80014e6 <HAL_GPIO_Init+0x1d6>
 80014e4:	2300      	movs	r3, #0
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	f002 0203 	and.w	r2, r2, #3
 80014ec:	0092      	lsls	r2, r2, #2
 80014ee:	4093      	lsls	r3, r2
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014f6:	4937      	ldr	r1, [pc, #220]	@ (80015d4 <HAL_GPIO_Init+0x2c4>)
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	3302      	adds	r3, #2
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001504:	4b36      	ldr	r3, [pc, #216]	@ (80015e0 <HAL_GPIO_Init+0x2d0>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	43db      	mvns	r3, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001528:	4a2d      	ldr	r2, [pc, #180]	@ (80015e0 <HAL_GPIO_Init+0x2d0>)
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800152e:	4b2c      	ldr	r3, [pc, #176]	@ (80015e0 <HAL_GPIO_Init+0x2d0>)
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4313      	orrs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001552:	4a23      	ldr	r2, [pc, #140]	@ (80015e0 <HAL_GPIO_Init+0x2d0>)
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001558:	4b21      	ldr	r3, [pc, #132]	@ (80015e0 <HAL_GPIO_Init+0x2d0>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	43db      	mvns	r3, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800157c:	4a18      	ldr	r2, [pc, #96]	@ (80015e0 <HAL_GPIO_Init+0x2d0>)
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001582:	4b17      	ldr	r3, [pc, #92]	@ (80015e0 <HAL_GPIO_Init+0x2d0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	43db      	mvns	r3, r3
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4013      	ands	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015a6:	4a0e      	ldr	r2, [pc, #56]	@ (80015e0 <HAL_GPIO_Init+0x2d0>)
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	3301      	adds	r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	fa22 f303 	lsr.w	r3, r2, r3
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f47f aeaf 	bne.w	8001320 <HAL_GPIO_Init+0x10>
  }
}
 80015c2:	bf00      	nop
 80015c4:	bf00      	nop
 80015c6:	371c      	adds	r7, #28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40010000 	.word	0x40010000
 80015d8:	48000400 	.word	0x48000400
 80015dc:	48000800 	.word	0x48000800
 80015e0:	40010400 	.word	0x40010400

080015e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e081      	b.n	80016fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d106      	bne.n	8001610 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff f880 	bl	8000710 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2224      	movs	r2, #36	@ 0x24
 8001614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0201 	bic.w	r2, r2, #1
 8001626:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001634:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001644:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d107      	bne.n	800165e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	e006      	b.n	800166c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800166a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d104      	bne.n	800167e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800167c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800168c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001690:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691a      	ldr	r2, [r3, #16]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69d9      	ldr	r1, [r3, #28]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a1a      	ldr	r2, [r3, #32]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 0201 	orr.w	r2, r2, #1
 80016da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2220      	movs	r2, #32
 80016e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af02      	add	r7, sp, #8
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	4608      	mov	r0, r1
 800170e:	4611      	mov	r1, r2
 8001710:	461a      	mov	r2, r3
 8001712:	4603      	mov	r3, r0
 8001714:	817b      	strh	r3, [r7, #10]
 8001716:	460b      	mov	r3, r1
 8001718:	813b      	strh	r3, [r7, #8]
 800171a:	4613      	mov	r3, r2
 800171c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b20      	cmp	r3, #32
 8001728:	f040 80f9 	bne.w	800191e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800172c:	6a3b      	ldr	r3, [r7, #32]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d002      	beq.n	8001738 <HAL_I2C_Mem_Write+0x34>
 8001732:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001734:	2b00      	cmp	r3, #0
 8001736:	d105      	bne.n	8001744 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800173e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e0ed      	b.n	8001920 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_I2C_Mem_Write+0x4e>
 800174e:	2302      	movs	r3, #2
 8001750:	e0e6      	b.n	8001920 <HAL_I2C_Mem_Write+0x21c>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800175a:	f7ff fbdd 	bl	8000f18 <HAL_GetTick>
 800175e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	2319      	movs	r3, #25
 8001766:	2201      	movs	r2, #1
 8001768:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f000 f955 	bl	8001a1c <I2C_WaitOnFlagUntilTimeout>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0d1      	b.n	8001920 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2221      	movs	r2, #33	@ 0x21
 8001780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2240      	movs	r2, #64	@ 0x40
 8001788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6a3a      	ldr	r2, [r7, #32]
 8001796:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800179c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017a4:	88f8      	ldrh	r0, [r7, #6]
 80017a6:	893a      	ldrh	r2, [r7, #8]
 80017a8:	8979      	ldrh	r1, [r7, #10]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	9301      	str	r3, [sp, #4]
 80017ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	4603      	mov	r3, r0
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f000 f8b9 	bl	800192c <I2C_RequestMemoryWrite>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0a9      	b.n	8001920 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	2bff      	cmp	r3, #255	@ 0xff
 80017d4:	d90e      	bls.n	80017f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	22ff      	movs	r2, #255	@ 0xff
 80017da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	8979      	ldrh	r1, [r7, #10]
 80017e4:	2300      	movs	r3, #0
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	f000 fabd 	bl	8001d6c <I2C_TransferConfig>
 80017f2:	e00f      	b.n	8001814 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001802:	b2da      	uxtb	r2, r3
 8001804:	8979      	ldrh	r1, [r7, #10]
 8001806:	2300      	movs	r3, #0
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f000 faac 	bl	8001d6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f000 f93f 	bl	8001a9c <I2C_WaitOnTXISFlagUntilTimeout>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e07b      	b.n	8001920 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182c:	781a      	ldrb	r2, [r3, #0]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001842:	b29b      	uxth	r3, r3
 8001844:	3b01      	subs	r3, #1
 8001846:	b29a      	uxth	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001850:	3b01      	subs	r3, #1
 8001852:	b29a      	uxth	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800185c:	b29b      	uxth	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d034      	beq.n	80018cc <HAL_I2C_Mem_Write+0x1c8>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001866:	2b00      	cmp	r3, #0
 8001868:	d130      	bne.n	80018cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001870:	2200      	movs	r2, #0
 8001872:	2180      	movs	r1, #128	@ 0x80
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f000 f8d1 	bl	8001a1c <I2C_WaitOnFlagUntilTimeout>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e04d      	b.n	8001920 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001888:	b29b      	uxth	r3, r3
 800188a:	2bff      	cmp	r3, #255	@ 0xff
 800188c:	d90e      	bls.n	80018ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	22ff      	movs	r2, #255	@ 0xff
 8001892:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001898:	b2da      	uxtb	r2, r3
 800189a:	8979      	ldrh	r1, [r7, #10]
 800189c:	2300      	movs	r3, #0
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	f000 fa61 	bl	8001d6c <I2C_TransferConfig>
 80018aa:	e00f      	b.n	80018cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	8979      	ldrh	r1, [r7, #10]
 80018be:	2300      	movs	r3, #0
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f000 fa50 	bl	8001d6c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d19e      	bne.n	8001814 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 f91e 	bl	8001b1c <I2C_WaitOnSTOPFlagUntilTimeout>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e01a      	b.n	8001920 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2220      	movs	r2, #32
 80018f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6859      	ldr	r1, [r3, #4]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <HAL_I2C_Mem_Write+0x224>)
 80018fe:	400b      	ands	r3, r1
 8001900:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2220      	movs	r2, #32
 8001906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	e000      	b.n	8001920 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800191e:	2302      	movs	r3, #2
  }
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	fe00e800 	.word	0xfe00e800

0800192c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af02      	add	r7, sp, #8
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	4608      	mov	r0, r1
 8001936:	4611      	mov	r1, r2
 8001938:	461a      	mov	r2, r3
 800193a:	4603      	mov	r3, r0
 800193c:	817b      	strh	r3, [r7, #10]
 800193e:	460b      	mov	r3, r1
 8001940:	813b      	strh	r3, [r7, #8]
 8001942:	4613      	mov	r3, r2
 8001944:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001946:	88fb      	ldrh	r3, [r7, #6]
 8001948:	b2da      	uxtb	r2, r3
 800194a:	8979      	ldrh	r1, [r7, #10]
 800194c:	4b20      	ldr	r3, [pc, #128]	@ (80019d0 <I2C_RequestMemoryWrite+0xa4>)
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f000 fa09 	bl	8001d6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	69b9      	ldr	r1, [r7, #24]
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f000 f89c 	bl	8001a9c <I2C_WaitOnTXISFlagUntilTimeout>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e02c      	b.n	80019c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d105      	bne.n	8001980 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001974:	893b      	ldrh	r3, [r7, #8]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	629a      	str	r2, [r3, #40]	@ 0x28
 800197e:	e015      	b.n	80019ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001980:	893b      	ldrh	r3, [r7, #8]
 8001982:	0a1b      	lsrs	r3, r3, #8
 8001984:	b29b      	uxth	r3, r3
 8001986:	b2da      	uxtb	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	69b9      	ldr	r1, [r7, #24]
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f000 f882 	bl	8001a9c <I2C_WaitOnTXISFlagUntilTimeout>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e012      	b.n	80019c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80019a2:	893b      	ldrh	r3, [r7, #8]
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2200      	movs	r2, #0
 80019b4:	2180      	movs	r1, #128	@ 0x80
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 f830 	bl	8001a1c <I2C_WaitOnFlagUntilTimeout>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	80002000 	.word	0x80002000

080019d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d103      	bne.n	80019f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2200      	movs	r2, #0
 80019f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d007      	beq.n	8001a10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	699a      	ldr	r2, [r3, #24]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	619a      	str	r2, [r3, #24]
  }
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a2c:	e022      	b.n	8001a74 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a34:	d01e      	beq.n	8001a74 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a36:	f7ff fa6f 	bl	8000f18 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d302      	bcc.n	8001a4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d113      	bne.n	8001a74 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a50:	f043 0220 	orr.w	r2, r3, #32
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e00f      	b.n	8001a94 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	699a      	ldr	r2, [r3, #24]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	bf0c      	ite	eq
 8001a84:	2301      	moveq	r3, #1
 8001a86:	2300      	movne	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d0cd      	beq.n	8001a2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001aa8:	e02c      	b.n	8001b04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f000 f870 	bl	8001b94 <I2C_IsErrorOccurred>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e02a      	b.n	8001b14 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac4:	d01e      	beq.n	8001b04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ac6:	f7ff fa27 	bl	8000f18 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d302      	bcc.n	8001adc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d113      	bne.n	8001b04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae0:	f043 0220 	orr.w	r2, r3, #32
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2220      	movs	r2, #32
 8001aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e007      	b.n	8001b14 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d1cb      	bne.n	8001aaa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b28:	e028      	b.n	8001b7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	68b9      	ldr	r1, [r7, #8]
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f000 f830 	bl	8001b94 <I2C_IsErrorOccurred>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e026      	b.n	8001b8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b3e:	f7ff f9eb 	bl	8000f18 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d302      	bcc.n	8001b54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d113      	bne.n	8001b7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b58:	f043 0220 	orr.w	r2, r3, #32
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2220      	movs	r2, #32
 8001b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e007      	b.n	8001b8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	f003 0320 	and.w	r3, r3, #32
 8001b86:	2b20      	cmp	r3, #32
 8001b88:	d1cf      	bne.n	8001b2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	@ 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d075      	beq.n	8001cac <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2210      	movs	r2, #16
 8001bc6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001bc8:	e056      	b.n	8001c78 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd0:	d052      	beq.n	8001c78 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bd2:	f7ff f9a1 	bl	8000f18 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d302      	bcc.n	8001be8 <I2C_IsErrorOccurred+0x54>
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d147      	bne.n	8001c78 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bf2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001bfa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c0a:	d12e      	bne.n	8001c6a <I2C_IsErrorOccurred+0xd6>
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001c12:	d02a      	beq.n	8001c6a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001c14:	7cfb      	ldrb	r3, [r7, #19]
 8001c16:	2b20      	cmp	r3, #32
 8001c18:	d027      	beq.n	8001c6a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c28:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c2a:	f7ff f975 	bl	8000f18 <HAL_GetTick>
 8001c2e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c30:	e01b      	b.n	8001c6a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c32:	f7ff f971 	bl	8000f18 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b19      	cmp	r3, #25
 8001c3e:	d914      	bls.n	8001c6a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c44:	f043 0220 	orr.w	r2, r3, #32
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	645a      	str	r2, [r3, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2220      	movs	r2, #32
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

              status = HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f003 0320 	and.w	r3, r3, #32
 8001c74:	2b20      	cmp	r3, #32
 8001c76:	d1dc      	bne.n	8001c32 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	f003 0320 	and.w	r3, r3, #32
 8001c82:	2b20      	cmp	r3, #32
 8001c84:	d003      	beq.n	8001c8e <I2C_IsErrorOccurred+0xfa>
 8001c86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d09d      	beq.n	8001bca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001c8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d103      	bne.n	8001c9e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001c9e:	6a3b      	ldr	r3, [r7, #32]
 8001ca0:	f043 0304 	orr.w	r3, r3, #4
 8001ca4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00b      	beq.n	8001cd6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00b      	beq.n	8001cf8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001ce0:	6a3b      	ldr	r3, [r7, #32]
 8001ce2:	f043 0308 	orr.w	r3, r3, #8
 8001ce6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cf0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00b      	beq.n	8001d1a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	f043 0302 	orr.w	r3, r3, #2
 8001d08:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001d1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d01c      	beq.n	8001d5c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f7ff fe56 	bl	80019d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6859      	ldr	r1, [r3, #4]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4b0d      	ldr	r3, [pc, #52]	@ (8001d68 <I2C_IsErrorOccurred+0x1d4>)
 8001d34:	400b      	ands	r3, r1
 8001d36:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2220      	movs	r2, #32
 8001d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3728      	adds	r7, #40	@ 0x28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	fe00e800 	.word	0xfe00e800

08001d6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	460b      	mov	r3, r1
 8001d78:	817b      	strh	r3, [r7, #10]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d7e:	897b      	ldrh	r3, [r7, #10]
 8001d80:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d84:	7a7b      	ldrb	r3, [r7, #9]
 8001d86:	041b      	lsls	r3, r3, #16
 8001d88:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d8c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d9a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	0d5b      	lsrs	r3, r3, #21
 8001da6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001daa:	4b08      	ldr	r3, [pc, #32]	@ (8001dcc <I2C_TransferConfig+0x60>)
 8001dac:	430b      	orrs	r3, r1
 8001dae:	43db      	mvns	r3, r3
 8001db0:	ea02 0103 	and.w	r1, r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001dbe:	bf00      	nop
 8001dc0:	371c      	adds	r7, #28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	03ff63ff 	.word	0x03ff63ff

08001dd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b20      	cmp	r3, #32
 8001de4:	d138      	bne.n	8001e58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e032      	b.n	8001e5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2224      	movs	r2, #36	@ 0x24
 8001e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0201 	bic.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6819      	ldr	r1, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2220      	movs	r2, #32
 8001e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	e000      	b.n	8001e5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e58:	2302      	movs	r3, #2
  }
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b085      	sub	sp, #20
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b20      	cmp	r3, #32
 8001e7a:	d139      	bne.n	8001ef0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e033      	b.n	8001ef2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2224      	movs	r2, #36	@ 0x24
 8001e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0201 	bic.w	r2, r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001eb8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	021b      	lsls	r3, r3, #8
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0201 	orr.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001eec:	2300      	movs	r3, #0
 8001eee:	e000      	b.n	8001ef2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ef0:	2302      	movs	r3, #2
  }
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f04:	4b04      	ldr	r3, [pc, #16]	@ (8001f18 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40007000 	.word	0x40007000

08001f1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f2a:	d130      	bne.n	8001f8e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f2c:	4b23      	ldr	r3, [pc, #140]	@ (8001fbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f38:	d038      	beq.n	8001fac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f3a:	4b20      	ldr	r3, [pc, #128]	@ (8001fbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f42:	4a1e      	ldr	r2, [pc, #120]	@ (8001fbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f48:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2232      	movs	r2, #50	@ 0x32
 8001f50:	fb02 f303 	mul.w	r3, r2, r3
 8001f54:	4a1b      	ldr	r2, [pc, #108]	@ (8001fc4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f56:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5a:	0c9b      	lsrs	r3, r3, #18
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f60:	e002      	b.n	8001f68 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f68:	4b14      	ldr	r3, [pc, #80]	@ (8001fbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f74:	d102      	bne.n	8001f7c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1f2      	bne.n	8001f62 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f88:	d110      	bne.n	8001fac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e00f      	b.n	8001fae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f9a:	d007      	beq.n	8001fac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f9c:	4b07      	ldr	r3, [pc, #28]	@ (8001fbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fa4:	4a05      	ldr	r2, [pc, #20]	@ (8001fbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001faa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40007000 	.word	0x40007000
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	431bde83 	.word	0x431bde83

08001fc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d102      	bne.n	8001fdc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	f000 bc02 	b.w	80027e0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fdc:	4b96      	ldr	r3, [pc, #600]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 030c 	and.w	r3, r3, #12
 8001fe4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fe6:	4b94      	ldr	r3, [pc, #592]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0310 	and.w	r3, r3, #16
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80e4 	beq.w	80021c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d007      	beq.n	8002014 <HAL_RCC_OscConfig+0x4c>
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	2b0c      	cmp	r3, #12
 8002008:	f040 808b 	bne.w	8002122 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2b01      	cmp	r3, #1
 8002010:	f040 8087 	bne.w	8002122 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002014:	4b88      	ldr	r3, [pc, #544]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_RCC_OscConfig+0x64>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e3d9      	b.n	80027e0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a1a      	ldr	r2, [r3, #32]
 8002030:	4b81      	ldr	r3, [pc, #516]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d004      	beq.n	8002046 <HAL_RCC_OscConfig+0x7e>
 800203c:	4b7e      	ldr	r3, [pc, #504]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002044:	e005      	b.n	8002052 <HAL_RCC_OscConfig+0x8a>
 8002046:	4b7c      	ldr	r3, [pc, #496]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 8002048:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002052:	4293      	cmp	r3, r2
 8002054:	d223      	bcs.n	800209e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	4618      	mov	r0, r3
 800205c:	f000 fdbe 	bl	8002bdc <RCC_SetFlashLatencyFromMSIRange>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e3ba      	b.n	80027e0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800206a:	4b73      	ldr	r3, [pc, #460]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a72      	ldr	r2, [pc, #456]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 8002070:	f043 0308 	orr.w	r3, r3, #8
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	4b70      	ldr	r3, [pc, #448]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	496d      	ldr	r1, [pc, #436]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 8002084:	4313      	orrs	r3, r2
 8002086:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002088:	4b6b      	ldr	r3, [pc, #428]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	021b      	lsls	r3, r3, #8
 8002096:	4968      	ldr	r1, [pc, #416]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 8002098:	4313      	orrs	r3, r2
 800209a:	604b      	str	r3, [r1, #4]
 800209c:	e025      	b.n	80020ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800209e:	4b66      	ldr	r3, [pc, #408]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a65      	ldr	r2, [pc, #404]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 80020a4:	f043 0308 	orr.w	r3, r3, #8
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	4b63      	ldr	r3, [pc, #396]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	4960      	ldr	r1, [pc, #384]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020bc:	4b5e      	ldr	r3, [pc, #376]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	495b      	ldr	r1, [pc, #364]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d109      	bne.n	80020ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 fd7e 	bl	8002bdc <RCC_SetFlashLatencyFromMSIRange>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e37a      	b.n	80027e0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020ea:	f000 fc81 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 80020ee:	4602      	mov	r2, r0
 80020f0:	4b51      	ldr	r3, [pc, #324]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	4950      	ldr	r1, [pc, #320]	@ (800223c <HAL_RCC_OscConfig+0x274>)
 80020fc:	5ccb      	ldrb	r3, [r1, r3]
 80020fe:	f003 031f 	and.w	r3, r3, #31
 8002102:	fa22 f303 	lsr.w	r3, r2, r3
 8002106:	4a4e      	ldr	r2, [pc, #312]	@ (8002240 <HAL_RCC_OscConfig+0x278>)
 8002108:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800210a:	4b4e      	ldr	r3, [pc, #312]	@ (8002244 <HAL_RCC_OscConfig+0x27c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fc52 	bl	80009b8 <HAL_InitTick>
 8002114:	4603      	mov	r3, r0
 8002116:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d052      	beq.n	80021c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	e35e      	b.n	80027e0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d032      	beq.n	8002190 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800212a:	4b43      	ldr	r3, [pc, #268]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a42      	ldr	r2, [pc, #264]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002136:	f7fe feef 	bl	8000f18 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800213e:	f7fe feeb 	bl	8000f18 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e347      	b.n	80027e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002150:	4b39      	ldr	r3, [pc, #228]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0f0      	beq.n	800213e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800215c:	4b36      	ldr	r3, [pc, #216]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a35      	ldr	r2, [pc, #212]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 8002162:	f043 0308 	orr.w	r3, r3, #8
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b33      	ldr	r3, [pc, #204]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	4930      	ldr	r1, [pc, #192]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800217a:	4b2f      	ldr	r3, [pc, #188]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	021b      	lsls	r3, r3, #8
 8002188:	492b      	ldr	r1, [pc, #172]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 800218a:	4313      	orrs	r3, r2
 800218c:	604b      	str	r3, [r1, #4]
 800218e:	e01a      	b.n	80021c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002190:	4b29      	ldr	r3, [pc, #164]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a28      	ldr	r2, [pc, #160]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 8002196:	f023 0301 	bic.w	r3, r3, #1
 800219a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800219c:	f7fe febc 	bl	8000f18 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021a4:	f7fe feb8 	bl	8000f18 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e314      	b.n	80027e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021b6:	4b20      	ldr	r3, [pc, #128]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x1dc>
 80021c2:	e000      	b.n	80021c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d073      	beq.n	80022ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d005      	beq.n	80021e4 <HAL_RCC_OscConfig+0x21c>
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	2b0c      	cmp	r3, #12
 80021dc:	d10e      	bne.n	80021fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d10b      	bne.n	80021fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e4:	4b14      	ldr	r3, [pc, #80]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d063      	beq.n	80022b8 <HAL_RCC_OscConfig+0x2f0>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d15f      	bne.n	80022b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e2f1      	b.n	80027e0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002204:	d106      	bne.n	8002214 <HAL_RCC_OscConfig+0x24c>
 8002206:	4b0c      	ldr	r3, [pc, #48]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a0b      	ldr	r2, [pc, #44]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 800220c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e025      	b.n	8002260 <HAL_RCC_OscConfig+0x298>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800221c:	d114      	bne.n	8002248 <HAL_RCC_OscConfig+0x280>
 800221e:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a05      	ldr	r2, [pc, #20]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 8002224:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	4b03      	ldr	r3, [pc, #12]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a02      	ldr	r2, [pc, #8]	@ (8002238 <HAL_RCC_OscConfig+0x270>)
 8002230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e013      	b.n	8002260 <HAL_RCC_OscConfig+0x298>
 8002238:	40021000 	.word	0x40021000
 800223c:	08014ecc 	.word	0x08014ecc
 8002240:	20000000 	.word	0x20000000
 8002244:	20000004 	.word	0x20000004
 8002248:	4ba0      	ldr	r3, [pc, #640]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a9f      	ldr	r2, [pc, #636]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 800224e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	4b9d      	ldr	r3, [pc, #628]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a9c      	ldr	r2, [pc, #624]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 800225a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800225e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d013      	beq.n	8002290 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7fe fe56 	bl	8000f18 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002270:	f7fe fe52 	bl	8000f18 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b64      	cmp	r3, #100	@ 0x64
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e2ae      	b.n	80027e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002282:	4b92      	ldr	r3, [pc, #584]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0x2a8>
 800228e:	e014      	b.n	80022ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002290:	f7fe fe42 	bl	8000f18 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002298:	f7fe fe3e 	bl	8000f18 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b64      	cmp	r3, #100	@ 0x64
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e29a      	b.n	80027e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022aa:	4b88      	ldr	r3, [pc, #544]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x2d0>
 80022b6:	e000      	b.n	80022ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d060      	beq.n	8002388 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_OscConfig+0x310>
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	2b0c      	cmp	r3, #12
 80022d0:	d119      	bne.n	8002306 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d116      	bne.n	8002306 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022d8:	4b7c      	ldr	r3, [pc, #496]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <HAL_RCC_OscConfig+0x328>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e277      	b.n	80027e0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f0:	4b76      	ldr	r3, [pc, #472]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	061b      	lsls	r3, r3, #24
 80022fe:	4973      	ldr	r1, [pc, #460]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 8002300:	4313      	orrs	r3, r2
 8002302:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002304:	e040      	b.n	8002388 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d023      	beq.n	8002356 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800230e:	4b6f      	ldr	r3, [pc, #444]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a6e      	ldr	r2, [pc, #440]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 8002314:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231a:	f7fe fdfd 	bl	8000f18 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002322:	f7fe fdf9 	bl	8000f18 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e255      	b.n	80027e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002334:	4b65      	ldr	r3, [pc, #404]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002340:	4b62      	ldr	r3, [pc, #392]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	061b      	lsls	r3, r3, #24
 800234e:	495f      	ldr	r1, [pc, #380]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 8002350:	4313      	orrs	r3, r2
 8002352:	604b      	str	r3, [r1, #4]
 8002354:	e018      	b.n	8002388 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002356:	4b5d      	ldr	r3, [pc, #372]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a5c      	ldr	r2, [pc, #368]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 800235c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002360:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002362:	f7fe fdd9 	bl	8000f18 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800236a:	f7fe fdd5 	bl	8000f18 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e231      	b.n	80027e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800237c:	4b53      	ldr	r3, [pc, #332]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1f0      	bne.n	800236a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	2b00      	cmp	r3, #0
 8002392:	d03c      	beq.n	800240e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01c      	beq.n	80023d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800239c:	4b4b      	ldr	r3, [pc, #300]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 800239e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023a2:	4a4a      	ldr	r2, [pc, #296]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ac:	f7fe fdb4 	bl	8000f18 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b4:	f7fe fdb0 	bl	8000f18 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e20c      	b.n	80027e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023c6:	4b41      	ldr	r3, [pc, #260]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 80023c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0ef      	beq.n	80023b4 <HAL_RCC_OscConfig+0x3ec>
 80023d4:	e01b      	b.n	800240e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023d6:	4b3d      	ldr	r3, [pc, #244]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 80023d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023dc:	4a3b      	ldr	r2, [pc, #236]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 80023de:	f023 0301 	bic.w	r3, r3, #1
 80023e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e6:	f7fe fd97 	bl	8000f18 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ee:	f7fe fd93 	bl	8000f18 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e1ef      	b.n	80027e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002400:	4b32      	ldr	r3, [pc, #200]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 8002402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1ef      	bne.n	80023ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 80a6 	beq.w	8002568 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800241c:	2300      	movs	r3, #0
 800241e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002420:	4b2a      	ldr	r3, [pc, #168]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 8002422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10d      	bne.n	8002448 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800242c:	4b27      	ldr	r3, [pc, #156]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 800242e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002430:	4a26      	ldr	r2, [pc, #152]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 8002432:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002436:	6593      	str	r3, [r2, #88]	@ 0x58
 8002438:	4b24      	ldr	r3, [pc, #144]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 800243a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800243c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002444:	2301      	movs	r3, #1
 8002446:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002448:	4b21      	ldr	r3, [pc, #132]	@ (80024d0 <HAL_RCC_OscConfig+0x508>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002450:	2b00      	cmp	r3, #0
 8002452:	d118      	bne.n	8002486 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002454:	4b1e      	ldr	r3, [pc, #120]	@ (80024d0 <HAL_RCC_OscConfig+0x508>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a1d      	ldr	r2, [pc, #116]	@ (80024d0 <HAL_RCC_OscConfig+0x508>)
 800245a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800245e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002460:	f7fe fd5a 	bl	8000f18 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002468:	f7fe fd56 	bl	8000f18 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e1b2      	b.n	80027e0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800247a:	4b15      	ldr	r3, [pc, #84]	@ (80024d0 <HAL_RCC_OscConfig+0x508>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d108      	bne.n	80024a0 <HAL_RCC_OscConfig+0x4d8>
 800248e:	4b0f      	ldr	r3, [pc, #60]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 8002490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002494:	4a0d      	ldr	r2, [pc, #52]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800249e:	e029      	b.n	80024f4 <HAL_RCC_OscConfig+0x52c>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b05      	cmp	r3, #5
 80024a6:	d115      	bne.n	80024d4 <HAL_RCC_OscConfig+0x50c>
 80024a8:	4b08      	ldr	r3, [pc, #32]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 80024aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ae:	4a07      	ldr	r2, [pc, #28]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 80024b0:	f043 0304 	orr.w	r3, r3, #4
 80024b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024b8:	4b04      	ldr	r3, [pc, #16]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 80024ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024be:	4a03      	ldr	r2, [pc, #12]	@ (80024cc <HAL_RCC_OscConfig+0x504>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024c8:	e014      	b.n	80024f4 <HAL_RCC_OscConfig+0x52c>
 80024ca:	bf00      	nop
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40007000 	.word	0x40007000
 80024d4:	4b9a      	ldr	r3, [pc, #616]	@ (8002740 <HAL_RCC_OscConfig+0x778>)
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024da:	4a99      	ldr	r2, [pc, #612]	@ (8002740 <HAL_RCC_OscConfig+0x778>)
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024e4:	4b96      	ldr	r3, [pc, #600]	@ (8002740 <HAL_RCC_OscConfig+0x778>)
 80024e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ea:	4a95      	ldr	r2, [pc, #596]	@ (8002740 <HAL_RCC_OscConfig+0x778>)
 80024ec:	f023 0304 	bic.w	r3, r3, #4
 80024f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d016      	beq.n	800252a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fc:	f7fe fd0c 	bl	8000f18 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002502:	e00a      	b.n	800251a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002504:	f7fe fd08 	bl	8000f18 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002512:	4293      	cmp	r3, r2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e162      	b.n	80027e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800251a:	4b89      	ldr	r3, [pc, #548]	@ (8002740 <HAL_RCC_OscConfig+0x778>)
 800251c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0ed      	beq.n	8002504 <HAL_RCC_OscConfig+0x53c>
 8002528:	e015      	b.n	8002556 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252a:	f7fe fcf5 	bl	8000f18 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002530:	e00a      	b.n	8002548 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002532:	f7fe fcf1 	bl	8000f18 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002540:	4293      	cmp	r3, r2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e14b      	b.n	80027e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002548:	4b7d      	ldr	r3, [pc, #500]	@ (8002740 <HAL_RCC_OscConfig+0x778>)
 800254a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1ed      	bne.n	8002532 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002556:	7ffb      	ldrb	r3, [r7, #31]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d105      	bne.n	8002568 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800255c:	4b78      	ldr	r3, [pc, #480]	@ (8002740 <HAL_RCC_OscConfig+0x778>)
 800255e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002560:	4a77      	ldr	r2, [pc, #476]	@ (8002740 <HAL_RCC_OscConfig+0x778>)
 8002562:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002566:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0320 	and.w	r3, r3, #32
 8002570:	2b00      	cmp	r3, #0
 8002572:	d03c      	beq.n	80025ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002578:	2b00      	cmp	r3, #0
 800257a:	d01c      	beq.n	80025b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800257c:	4b70      	ldr	r3, [pc, #448]	@ (8002740 <HAL_RCC_OscConfig+0x778>)
 800257e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002582:	4a6f      	ldr	r2, [pc, #444]	@ (8002740 <HAL_RCC_OscConfig+0x778>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258c:	f7fe fcc4 	bl	8000f18 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002594:	f7fe fcc0 	bl	8000f18 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e11c      	b.n	80027e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025a6:	4b66      	ldr	r3, [pc, #408]	@ (8002740 <HAL_RCC_OscConfig+0x778>)
 80025a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0ef      	beq.n	8002594 <HAL_RCC_OscConfig+0x5cc>
 80025b4:	e01b      	b.n	80025ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025b6:	4b62      	ldr	r3, [pc, #392]	@ (8002740 <HAL_RCC_OscConfig+0x778>)
 80025b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025bc:	4a60      	ldr	r2, [pc, #384]	@ (8002740 <HAL_RCC_OscConfig+0x778>)
 80025be:	f023 0301 	bic.w	r3, r3, #1
 80025c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c6:	f7fe fca7 	bl	8000f18 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025ce:	f7fe fca3 	bl	8000f18 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e0ff      	b.n	80027e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025e0:	4b57      	ldr	r3, [pc, #348]	@ (8002740 <HAL_RCC_OscConfig+0x778>)
 80025e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1ef      	bne.n	80025ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 80f3 	beq.w	80027de <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	f040 80c9 	bne.w	8002794 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002602:	4b4f      	ldr	r3, [pc, #316]	@ (8002740 <HAL_RCC_OscConfig+0x778>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f003 0203 	and.w	r2, r3, #3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002612:	429a      	cmp	r2, r3
 8002614:	d12c      	bne.n	8002670 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002620:	3b01      	subs	r3, #1
 8002622:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002624:	429a      	cmp	r2, r3
 8002626:	d123      	bne.n	8002670 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002632:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002634:	429a      	cmp	r2, r3
 8002636:	d11b      	bne.n	8002670 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002642:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002644:	429a      	cmp	r2, r3
 8002646:	d113      	bne.n	8002670 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002652:	085b      	lsrs	r3, r3, #1
 8002654:	3b01      	subs	r3, #1
 8002656:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002658:	429a      	cmp	r2, r3
 800265a:	d109      	bne.n	8002670 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002666:	085b      	lsrs	r3, r3, #1
 8002668:	3b01      	subs	r3, #1
 800266a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d06b      	beq.n	8002748 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	2b0c      	cmp	r3, #12
 8002674:	d062      	beq.n	800273c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002676:	4b32      	ldr	r3, [pc, #200]	@ (8002740 <HAL_RCC_OscConfig+0x778>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e0ac      	b.n	80027e0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002686:	4b2e      	ldr	r3, [pc, #184]	@ (8002740 <HAL_RCC_OscConfig+0x778>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a2d      	ldr	r2, [pc, #180]	@ (8002740 <HAL_RCC_OscConfig+0x778>)
 800268c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002690:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002692:	f7fe fc41 	bl	8000f18 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269a:	f7fe fc3d 	bl	8000f18 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e099      	b.n	80027e0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ac:	4b24      	ldr	r3, [pc, #144]	@ (8002740 <HAL_RCC_OscConfig+0x778>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1f0      	bne.n	800269a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026b8:	4b21      	ldr	r3, [pc, #132]	@ (8002740 <HAL_RCC_OscConfig+0x778>)
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	4b21      	ldr	r3, [pc, #132]	@ (8002744 <HAL_RCC_OscConfig+0x77c>)
 80026be:	4013      	ands	r3, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80026c8:	3a01      	subs	r2, #1
 80026ca:	0112      	lsls	r2, r2, #4
 80026cc:	4311      	orrs	r1, r2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80026d2:	0212      	lsls	r2, r2, #8
 80026d4:	4311      	orrs	r1, r2
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026da:	0852      	lsrs	r2, r2, #1
 80026dc:	3a01      	subs	r2, #1
 80026de:	0552      	lsls	r2, r2, #21
 80026e0:	4311      	orrs	r1, r2
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80026e6:	0852      	lsrs	r2, r2, #1
 80026e8:	3a01      	subs	r2, #1
 80026ea:	0652      	lsls	r2, r2, #25
 80026ec:	4311      	orrs	r1, r2
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80026f2:	06d2      	lsls	r2, r2, #27
 80026f4:	430a      	orrs	r2, r1
 80026f6:	4912      	ldr	r1, [pc, #72]	@ (8002740 <HAL_RCC_OscConfig+0x778>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026fc:	4b10      	ldr	r3, [pc, #64]	@ (8002740 <HAL_RCC_OscConfig+0x778>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a0f      	ldr	r2, [pc, #60]	@ (8002740 <HAL_RCC_OscConfig+0x778>)
 8002702:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002706:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002708:	4b0d      	ldr	r3, [pc, #52]	@ (8002740 <HAL_RCC_OscConfig+0x778>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4a0c      	ldr	r2, [pc, #48]	@ (8002740 <HAL_RCC_OscConfig+0x778>)
 800270e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002712:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002714:	f7fe fc00 	bl	8000f18 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271c:	f7fe fbfc 	bl	8000f18 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e058      	b.n	80027e0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800272e:	4b04      	ldr	r3, [pc, #16]	@ (8002740 <HAL_RCC_OscConfig+0x778>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800273a:	e050      	b.n	80027de <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e04f      	b.n	80027e0 <HAL_RCC_OscConfig+0x818>
 8002740:	40021000 	.word	0x40021000
 8002744:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002748:	4b27      	ldr	r3, [pc, #156]	@ (80027e8 <HAL_RCC_OscConfig+0x820>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d144      	bne.n	80027de <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002754:	4b24      	ldr	r3, [pc, #144]	@ (80027e8 <HAL_RCC_OscConfig+0x820>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a23      	ldr	r2, [pc, #140]	@ (80027e8 <HAL_RCC_OscConfig+0x820>)
 800275a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800275e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002760:	4b21      	ldr	r3, [pc, #132]	@ (80027e8 <HAL_RCC_OscConfig+0x820>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4a20      	ldr	r2, [pc, #128]	@ (80027e8 <HAL_RCC_OscConfig+0x820>)
 8002766:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800276a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800276c:	f7fe fbd4 	bl	8000f18 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002774:	f7fe fbd0 	bl	8000f18 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e02c      	b.n	80027e0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002786:	4b18      	ldr	r3, [pc, #96]	@ (80027e8 <HAL_RCC_OscConfig+0x820>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0x7ac>
 8002792:	e024      	b.n	80027de <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	2b0c      	cmp	r3, #12
 8002798:	d01f      	beq.n	80027da <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279a:	4b13      	ldr	r3, [pc, #76]	@ (80027e8 <HAL_RCC_OscConfig+0x820>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a12      	ldr	r2, [pc, #72]	@ (80027e8 <HAL_RCC_OscConfig+0x820>)
 80027a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a6:	f7fe fbb7 	bl	8000f18 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ae:	f7fe fbb3 	bl	8000f18 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e00f      	b.n	80027e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027c0:	4b09      	ldr	r3, [pc, #36]	@ (80027e8 <HAL_RCC_OscConfig+0x820>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1f0      	bne.n	80027ae <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80027cc:	4b06      	ldr	r3, [pc, #24]	@ (80027e8 <HAL_RCC_OscConfig+0x820>)
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	4905      	ldr	r1, [pc, #20]	@ (80027e8 <HAL_RCC_OscConfig+0x820>)
 80027d2:	4b06      	ldr	r3, [pc, #24]	@ (80027ec <HAL_RCC_OscConfig+0x824>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	60cb      	str	r3, [r1, #12]
 80027d8:	e001      	b.n	80027de <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3720      	adds	r7, #32
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40021000 	.word	0x40021000
 80027ec:	feeefffc 	.word	0xfeeefffc

080027f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0e7      	b.n	80029d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002804:	4b75      	ldr	r3, [pc, #468]	@ (80029dc <HAL_RCC_ClockConfig+0x1ec>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d910      	bls.n	8002834 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002812:	4b72      	ldr	r3, [pc, #456]	@ (80029dc <HAL_RCC_ClockConfig+0x1ec>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 0207 	bic.w	r2, r3, #7
 800281a:	4970      	ldr	r1, [pc, #448]	@ (80029dc <HAL_RCC_ClockConfig+0x1ec>)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	4313      	orrs	r3, r2
 8002820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002822:	4b6e      	ldr	r3, [pc, #440]	@ (80029dc <HAL_RCC_ClockConfig+0x1ec>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d001      	beq.n	8002834 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e0cf      	b.n	80029d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d010      	beq.n	8002862 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	4b66      	ldr	r3, [pc, #408]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800284c:	429a      	cmp	r2, r3
 800284e:	d908      	bls.n	8002862 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002850:	4b63      	ldr	r3, [pc, #396]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	4960      	ldr	r1, [pc, #384]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 800285e:	4313      	orrs	r3, r2
 8002860:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d04c      	beq.n	8002908 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b03      	cmp	r3, #3
 8002874:	d107      	bne.n	8002886 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002876:	4b5a      	ldr	r3, [pc, #360]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d121      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e0a6      	b.n	80029d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d107      	bne.n	800289e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800288e:	4b54      	ldr	r3, [pc, #336]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d115      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e09a      	b.n	80029d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d107      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028a6:	4b4e      	ldr	r3, [pc, #312]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e08e      	b.n	80029d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028b6:	4b4a      	ldr	r3, [pc, #296]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e086      	b.n	80029d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028c6:	4b46      	ldr	r3, [pc, #280]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f023 0203 	bic.w	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	4943      	ldr	r1, [pc, #268]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028d8:	f7fe fb1e 	bl	8000f18 <HAL_GetTick>
 80028dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028de:	e00a      	b.n	80028f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e0:	f7fe fb1a 	bl	8000f18 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e06e      	b.n	80029d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	4b3a      	ldr	r3, [pc, #232]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 020c 	and.w	r2, r3, #12
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	429a      	cmp	r2, r3
 8002906:	d1eb      	bne.n	80028e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d010      	beq.n	8002936 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	4b31      	ldr	r3, [pc, #196]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002920:	429a      	cmp	r2, r3
 8002922:	d208      	bcs.n	8002936 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002924:	4b2e      	ldr	r3, [pc, #184]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	492b      	ldr	r1, [pc, #172]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002932:	4313      	orrs	r3, r2
 8002934:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002936:	4b29      	ldr	r3, [pc, #164]	@ (80029dc <HAL_RCC_ClockConfig+0x1ec>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d210      	bcs.n	8002966 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002944:	4b25      	ldr	r3, [pc, #148]	@ (80029dc <HAL_RCC_ClockConfig+0x1ec>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f023 0207 	bic.w	r2, r3, #7
 800294c:	4923      	ldr	r1, [pc, #140]	@ (80029dc <HAL_RCC_ClockConfig+0x1ec>)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	4313      	orrs	r3, r2
 8002952:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002954:	4b21      	ldr	r3, [pc, #132]	@ (80029dc <HAL_RCC_ClockConfig+0x1ec>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d001      	beq.n	8002966 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e036      	b.n	80029d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b00      	cmp	r3, #0
 8002970:	d008      	beq.n	8002984 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002972:	4b1b      	ldr	r3, [pc, #108]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	4918      	ldr	r1, [pc, #96]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002980:	4313      	orrs	r3, r2
 8002982:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	2b00      	cmp	r3, #0
 800298e:	d009      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002990:	4b13      	ldr	r3, [pc, #76]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4910      	ldr	r1, [pc, #64]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029a4:	f000 f824 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4b0d      	ldr	r3, [pc, #52]	@ (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	091b      	lsrs	r3, r3, #4
 80029b0:	f003 030f 	and.w	r3, r3, #15
 80029b4:	490b      	ldr	r1, [pc, #44]	@ (80029e4 <HAL_RCC_ClockConfig+0x1f4>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	fa22 f303 	lsr.w	r3, r2, r3
 80029c0:	4a09      	ldr	r2, [pc, #36]	@ (80029e8 <HAL_RCC_ClockConfig+0x1f8>)
 80029c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029c4:	4b09      	ldr	r3, [pc, #36]	@ (80029ec <HAL_RCC_ClockConfig+0x1fc>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fd fff5 	bl	80009b8 <HAL_InitTick>
 80029ce:	4603      	mov	r3, r0
 80029d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80029d2:	7afb      	ldrb	r3, [r7, #11]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40022000 	.word	0x40022000
 80029e0:	40021000 	.word	0x40021000
 80029e4:	08014ecc 	.word	0x08014ecc
 80029e8:	20000000 	.word	0x20000000
 80029ec:	20000004 	.word	0x20000004

080029f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b089      	sub	sp, #36	@ 0x24
 80029f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
 80029fa:	2300      	movs	r3, #0
 80029fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029fe:	4b3e      	ldr	r3, [pc, #248]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a08:	4b3b      	ldr	r3, [pc, #236]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f003 0303 	and.w	r3, r3, #3
 8002a10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <HAL_RCC_GetSysClockFreq+0x34>
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	2b0c      	cmp	r3, #12
 8002a1c:	d121      	bne.n	8002a62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d11e      	bne.n	8002a62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a24:	4b34      	ldr	r3, [pc, #208]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d107      	bne.n	8002a40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a30:	4b31      	ldr	r3, [pc, #196]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a36:	0a1b      	lsrs	r3, r3, #8
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	61fb      	str	r3, [r7, #28]
 8002a3e:	e005      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a40:	4b2d      	ldr	r3, [pc, #180]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a4c:	4a2b      	ldr	r2, [pc, #172]	@ (8002afc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10d      	bne.n	8002a78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a60:	e00a      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d102      	bne.n	8002a6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a68:	4b25      	ldr	r3, [pc, #148]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a6a:	61bb      	str	r3, [r7, #24]
 8002a6c:	e004      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a74:	4b23      	ldr	r3, [pc, #140]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	2b0c      	cmp	r3, #12
 8002a7c:	d134      	bne.n	8002ae8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d003      	beq.n	8002a96 <HAL_RCC_GetSysClockFreq+0xa6>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d003      	beq.n	8002a9c <HAL_RCC_GetSysClockFreq+0xac>
 8002a94:	e005      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a96:	4b1a      	ldr	r3, [pc, #104]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a98:	617b      	str	r3, [r7, #20]
      break;
 8002a9a:	e005      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a9c:	4b19      	ldr	r3, [pc, #100]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a9e:	617b      	str	r3, [r7, #20]
      break;
 8002aa0:	e002      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	617b      	str	r3, [r7, #20]
      break;
 8002aa6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002aa8:	4b13      	ldr	r3, [pc, #76]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	091b      	lsrs	r3, r3, #4
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ab6:	4b10      	ldr	r3, [pc, #64]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	0a1b      	lsrs	r3, r3, #8
 8002abc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	fb03 f202 	mul.w	r2, r3, r2
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002acc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ace:	4b0a      	ldr	r3, [pc, #40]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	0e5b      	lsrs	r3, r3, #25
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	3301      	adds	r3, #1
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ae8:	69bb      	ldr	r3, [r7, #24]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3724      	adds	r7, #36	@ 0x24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40021000 	.word	0x40021000
 8002afc:	08014ee4 	.word	0x08014ee4
 8002b00:	00f42400 	.word	0x00f42400
 8002b04:	007a1200 	.word	0x007a1200

08002b08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b0c:	4b03      	ldr	r3, [pc, #12]	@ (8002b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	20000000 	.word	0x20000000

08002b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b24:	f7ff fff0 	bl	8002b08 <HAL_RCC_GetHCLKFreq>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	0a1b      	lsrs	r3, r3, #8
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	4904      	ldr	r1, [pc, #16]	@ (8002b48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b36:	5ccb      	ldrb	r3, [r1, r3]
 8002b38:	f003 031f 	and.w	r3, r3, #31
 8002b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40021000 	.word	0x40021000
 8002b48:	08014edc 	.word	0x08014edc

08002b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b50:	f7ff ffda 	bl	8002b08 <HAL_RCC_GetHCLKFreq>
 8002b54:	4602      	mov	r2, r0
 8002b56:	4b06      	ldr	r3, [pc, #24]	@ (8002b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	0adb      	lsrs	r3, r3, #11
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	4904      	ldr	r1, [pc, #16]	@ (8002b74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b62:	5ccb      	ldrb	r3, [r1, r3]
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40021000 	.word	0x40021000
 8002b74:	08014edc 	.word	0x08014edc

08002b78 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	220f      	movs	r2, #15
 8002b86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002b88:	4b12      	ldr	r3, [pc, #72]	@ (8002bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0203 	and.w	r2, r3, #3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002b94:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002bac:	4b09      	ldr	r3, [pc, #36]	@ (8002bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	08db      	lsrs	r3, r3, #3
 8002bb2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002bba:	4b07      	ldr	r3, [pc, #28]	@ (8002bd8 <HAL_RCC_GetClockConfig+0x60>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0207 	and.w	r2, r3, #7
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	601a      	str	r2, [r3, #0]
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	40022000 	.word	0x40022000

08002bdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002be4:	2300      	movs	r3, #0
 8002be6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002be8:	4b2a      	ldr	r3, [pc, #168]	@ (8002c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bf4:	f7ff f984 	bl	8001f00 <HAL_PWREx_GetVoltageRange>
 8002bf8:	6178      	str	r0, [r7, #20]
 8002bfa:	e014      	b.n	8002c26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bfc:	4b25      	ldr	r3, [pc, #148]	@ (8002c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c00:	4a24      	ldr	r2, [pc, #144]	@ (8002c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c06:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c08:	4b22      	ldr	r3, [pc, #136]	@ (8002c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c14:	f7ff f974 	bl	8001f00 <HAL_PWREx_GetVoltageRange>
 8002c18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8002c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1e:	4a1d      	ldr	r2, [pc, #116]	@ (8002c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c24:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c2c:	d10b      	bne.n	8002c46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b80      	cmp	r3, #128	@ 0x80
 8002c32:	d919      	bls.n	8002c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2ba0      	cmp	r3, #160	@ 0xa0
 8002c38:	d902      	bls.n	8002c40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	e013      	b.n	8002c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c40:	2301      	movs	r3, #1
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	e010      	b.n	8002c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b80      	cmp	r3, #128	@ 0x80
 8002c4a:	d902      	bls.n	8002c52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	613b      	str	r3, [r7, #16]
 8002c50:	e00a      	b.n	8002c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b80      	cmp	r3, #128	@ 0x80
 8002c56:	d102      	bne.n	8002c5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c58:	2302      	movs	r3, #2
 8002c5a:	613b      	str	r3, [r7, #16]
 8002c5c:	e004      	b.n	8002c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b70      	cmp	r3, #112	@ 0x70
 8002c62:	d101      	bne.n	8002c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c64:	2301      	movs	r3, #1
 8002c66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c68:	4b0b      	ldr	r3, [pc, #44]	@ (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f023 0207 	bic.w	r2, r3, #7
 8002c70:	4909      	ldr	r1, [pc, #36]	@ (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c78:	4b07      	ldr	r3, [pc, #28]	@ (8002c98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d001      	beq.n	8002c8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40022000 	.word	0x40022000

08002c9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ca8:	2300      	movs	r3, #0
 8002caa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d031      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cbc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002cc0:	d01a      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002cc2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002cc6:	d814      	bhi.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d009      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ccc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002cd0:	d10f      	bne.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002cd2:	4b5d      	ldr	r3, [pc, #372]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	4a5c      	ldr	r2, [pc, #368]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cdc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cde:	e00c      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 f9ce 	bl	8003088 <RCCEx_PLLSAI1_Config>
 8002cec:	4603      	mov	r3, r0
 8002cee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cf0:	e003      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	74fb      	strb	r3, [r7, #19]
      break;
 8002cf6:	e000      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002cf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cfa:	7cfb      	ldrb	r3, [r7, #19]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10b      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d00:	4b51      	ldr	r3, [pc, #324]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d0e:	494e      	ldr	r1, [pc, #312]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002d16:	e001      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d18:	7cfb      	ldrb	r3, [r7, #19]
 8002d1a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 809e 	beq.w	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d2e:	4b46      	ldr	r3, [pc, #280]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002d3e:	2300      	movs	r3, #0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00d      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d44:	4b40      	ldr	r3, [pc, #256]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d48:	4a3f      	ldr	r2, [pc, #252]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d50:	4b3d      	ldr	r3, [pc, #244]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d60:	4b3a      	ldr	r3, [pc, #232]	@ (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a39      	ldr	r2, [pc, #228]	@ (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d6c:	f7fe f8d4 	bl	8000f18 <HAL_GetTick>
 8002d70:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d72:	e009      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d74:	f7fe f8d0 	bl	8000f18 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d902      	bls.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	74fb      	strb	r3, [r7, #19]
        break;
 8002d86:	e005      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d88:	4b30      	ldr	r3, [pc, #192]	@ (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0ef      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002d94:	7cfb      	ldrb	r3, [r7, #19]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d15a      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d9a:	4b2b      	ldr	r3, [pc, #172]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002da4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d01e      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d019      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002db6:	4b24      	ldr	r3, [pc, #144]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dc0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dc2:	4b21      	ldr	r3, [pc, #132]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002de2:	4a19      	ldr	r2, [pc, #100]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d016      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df4:	f7fe f890 	bl	8000f18 <HAL_GetTick>
 8002df8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dfa:	e00b      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfc:	f7fe f88c 	bl	8000f18 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d902      	bls.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	74fb      	strb	r3, [r7, #19]
            break;
 8002e12:	e006      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e14:	4b0c      	ldr	r3, [pc, #48]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0ec      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002e22:	7cfb      	ldrb	r3, [r7, #19]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10b      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e28:	4b07      	ldr	r3, [pc, #28]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e2e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e36:	4904      	ldr	r1, [pc, #16]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002e3e:	e009      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e40:	7cfb      	ldrb	r3, [r7, #19]
 8002e42:	74bb      	strb	r3, [r7, #18]
 8002e44:	e006      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002e46:	bf00      	nop
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e50:	7cfb      	ldrb	r3, [r7, #19]
 8002e52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e54:	7c7b      	ldrb	r3, [r7, #17]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d105      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e5a:	4b8a      	ldr	r3, [pc, #552]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5e:	4a89      	ldr	r2, [pc, #548]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e64:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e72:	4b84      	ldr	r3, [pc, #528]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e78:	f023 0203 	bic.w	r2, r3, #3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	4980      	ldr	r1, [pc, #512]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00a      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e94:	4b7b      	ldr	r3, [pc, #492]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e9a:	f023 020c 	bic.w	r2, r3, #12
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea2:	4978      	ldr	r1, [pc, #480]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0320 	and.w	r3, r3, #32
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002eb6:	4b73      	ldr	r3, [pc, #460]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ebc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec4:	496f      	ldr	r1, [pc, #444]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ed8:	4b6a      	ldr	r3, [pc, #424]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ede:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ee6:	4967      	ldr	r1, [pc, #412]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002efa:	4b62      	ldr	r3, [pc, #392]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f00:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f08:	495e      	ldr	r1, [pc, #376]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00a      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f1c:	4b59      	ldr	r3, [pc, #356]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f22:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2a:	4956      	ldr	r1, [pc, #344]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f3e:	4b51      	ldr	r3, [pc, #324]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4c:	494d      	ldr	r1, [pc, #308]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d028      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f60:	4b48      	ldr	r3, [pc, #288]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f66:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6e:	4945      	ldr	r1, [pc, #276]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f7e:	d106      	bne.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f80:	4b40      	ldr	r3, [pc, #256]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	4a3f      	ldr	r2, [pc, #252]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f8a:	60d3      	str	r3, [r2, #12]
 8002f8c:	e011      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f96:	d10c      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f872 	bl	8003088 <RCCEx_PLLSAI1_Config>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002fa8:	7cfb      	ldrb	r3, [r7, #19]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002fae:	7cfb      	ldrb	r3, [r7, #19]
 8002fb0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d028      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fbe:	4b31      	ldr	r3, [pc, #196]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fcc:	492d      	ldr	r1, [pc, #180]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fdc:	d106      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fde:	4b29      	ldr	r3, [pc, #164]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	4a28      	ldr	r2, [pc, #160]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fe4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fe8:	60d3      	str	r3, [r2, #12]
 8002fea:	e011      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ff4:	d10c      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 f843 	bl	8003088 <RCCEx_PLLSAI1_Config>
 8003002:	4603      	mov	r3, r0
 8003004:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003006:	7cfb      	ldrb	r3, [r7, #19]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800300c:	7cfb      	ldrb	r3, [r7, #19]
 800300e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d01c      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800301c:	4b19      	ldr	r3, [pc, #100]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800301e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003022:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800302a:	4916      	ldr	r1, [pc, #88]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800302c:	4313      	orrs	r3, r2
 800302e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003036:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800303a:	d10c      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3304      	adds	r3, #4
 8003040:	2102      	movs	r1, #2
 8003042:	4618      	mov	r0, r3
 8003044:	f000 f820 	bl	8003088 <RCCEx_PLLSAI1_Config>
 8003048:	4603      	mov	r3, r0
 800304a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800304c:	7cfb      	ldrb	r3, [r7, #19]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003052:	7cfb      	ldrb	r3, [r7, #19]
 8003054:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00a      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003062:	4b08      	ldr	r3, [pc, #32]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003068:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003070:	4904      	ldr	r1, [pc, #16]	@ (8003084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003072:	4313      	orrs	r3, r2
 8003074:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003078:	7cbb      	ldrb	r3, [r7, #18]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40021000 	.word	0x40021000

08003088 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003096:	4b74      	ldr	r3, [pc, #464]	@ (8003268 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d018      	beq.n	80030d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030a2:	4b71      	ldr	r3, [pc, #452]	@ (8003268 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f003 0203 	and.w	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d10d      	bne.n	80030ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
       ||
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d009      	beq.n	80030ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030ba:	4b6b      	ldr	r3, [pc, #428]	@ (8003268 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	091b      	lsrs	r3, r3, #4
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
       ||
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d047      	beq.n	800315e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	73fb      	strb	r3, [r7, #15]
 80030d2:	e044      	b.n	800315e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d018      	beq.n	800310e <RCCEx_PLLSAI1_Config+0x86>
 80030dc:	2b03      	cmp	r3, #3
 80030de:	d825      	bhi.n	800312c <RCCEx_PLLSAI1_Config+0xa4>
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d002      	beq.n	80030ea <RCCEx_PLLSAI1_Config+0x62>
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d009      	beq.n	80030fc <RCCEx_PLLSAI1_Config+0x74>
 80030e8:	e020      	b.n	800312c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003268 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d11d      	bne.n	8003132 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030fa:	e01a      	b.n	8003132 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030fc:	4b5a      	ldr	r3, [pc, #360]	@ (8003268 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003104:	2b00      	cmp	r3, #0
 8003106:	d116      	bne.n	8003136 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800310c:	e013      	b.n	8003136 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800310e:	4b56      	ldr	r3, [pc, #344]	@ (8003268 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10f      	bne.n	800313a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800311a:	4b53      	ldr	r3, [pc, #332]	@ (8003268 <RCCEx_PLLSAI1_Config+0x1e0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800312a:	e006      	b.n	800313a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	73fb      	strb	r3, [r7, #15]
      break;
 8003130:	e004      	b.n	800313c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003132:	bf00      	nop
 8003134:	e002      	b.n	800313c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003136:	bf00      	nop
 8003138:	e000      	b.n	800313c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800313a:	bf00      	nop
    }

    if(status == HAL_OK)
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10d      	bne.n	800315e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003142:	4b49      	ldr	r3, [pc, #292]	@ (8003268 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6819      	ldr	r1, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	3b01      	subs	r3, #1
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	430b      	orrs	r3, r1
 8003158:	4943      	ldr	r1, [pc, #268]	@ (8003268 <RCCEx_PLLSAI1_Config+0x1e0>)
 800315a:	4313      	orrs	r3, r2
 800315c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800315e:	7bfb      	ldrb	r3, [r7, #15]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d17c      	bne.n	800325e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003164:	4b40      	ldr	r3, [pc, #256]	@ (8003268 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a3f      	ldr	r2, [pc, #252]	@ (8003268 <RCCEx_PLLSAI1_Config+0x1e0>)
 800316a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800316e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003170:	f7fd fed2 	bl	8000f18 <HAL_GetTick>
 8003174:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003176:	e009      	b.n	800318c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003178:	f7fd fece 	bl	8000f18 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d902      	bls.n	800318c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	73fb      	strb	r3, [r7, #15]
        break;
 800318a:	e005      	b.n	8003198 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800318c:	4b36      	ldr	r3, [pc, #216]	@ (8003268 <RCCEx_PLLSAI1_Config+0x1e0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1ef      	bne.n	8003178 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003198:	7bfb      	ldrb	r3, [r7, #15]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d15f      	bne.n	800325e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d110      	bne.n	80031c6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031a4:	4b30      	ldr	r3, [pc, #192]	@ (8003268 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80031ac:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6892      	ldr	r2, [r2, #8]
 80031b4:	0211      	lsls	r1, r2, #8
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	68d2      	ldr	r2, [r2, #12]
 80031ba:	06d2      	lsls	r2, r2, #27
 80031bc:	430a      	orrs	r2, r1
 80031be:	492a      	ldr	r1, [pc, #168]	@ (8003268 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	610b      	str	r3, [r1, #16]
 80031c4:	e027      	b.n	8003216 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d112      	bne.n	80031f2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031cc:	4b26      	ldr	r3, [pc, #152]	@ (8003268 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80031d4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6892      	ldr	r2, [r2, #8]
 80031dc:	0211      	lsls	r1, r2, #8
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6912      	ldr	r2, [r2, #16]
 80031e2:	0852      	lsrs	r2, r2, #1
 80031e4:	3a01      	subs	r2, #1
 80031e6:	0552      	lsls	r2, r2, #21
 80031e8:	430a      	orrs	r2, r1
 80031ea:	491f      	ldr	r1, [pc, #124]	@ (8003268 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	610b      	str	r3, [r1, #16]
 80031f0:	e011      	b.n	8003216 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003268 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80031fa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6892      	ldr	r2, [r2, #8]
 8003202:	0211      	lsls	r1, r2, #8
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6952      	ldr	r2, [r2, #20]
 8003208:	0852      	lsrs	r2, r2, #1
 800320a:	3a01      	subs	r2, #1
 800320c:	0652      	lsls	r2, r2, #25
 800320e:	430a      	orrs	r2, r1
 8003210:	4915      	ldr	r1, [pc, #84]	@ (8003268 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003212:	4313      	orrs	r3, r2
 8003214:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003216:	4b14      	ldr	r3, [pc, #80]	@ (8003268 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a13      	ldr	r2, [pc, #76]	@ (8003268 <RCCEx_PLLSAI1_Config+0x1e0>)
 800321c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003220:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003222:	f7fd fe79 	bl	8000f18 <HAL_GetTick>
 8003226:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003228:	e009      	b.n	800323e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800322a:	f7fd fe75 	bl	8000f18 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d902      	bls.n	800323e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	73fb      	strb	r3, [r7, #15]
          break;
 800323c:	e005      	b.n	800324a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800323e:	4b0a      	ldr	r3, [pc, #40]	@ (8003268 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0ef      	beq.n	800322a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800324a:	7bfb      	ldrb	r3, [r7, #15]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d106      	bne.n	800325e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003250:	4b05      	ldr	r3, [pc, #20]	@ (8003268 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	4903      	ldr	r1, [pc, #12]	@ (8003268 <RCCEx_PLLSAI1_Config+0x1e0>)
 800325a:	4313      	orrs	r3, r2
 800325c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800325e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40021000 	.word	0x40021000

0800326c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e049      	b.n	8003312 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d106      	bne.n	8003298 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7fd fd3c 	bl	8000d10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3304      	adds	r3, #4
 80032a8:	4619      	mov	r1, r3
 80032aa:	4610      	mov	r0, r2
 80032ac:	f000 f9d2 	bl	8003654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b01      	cmp	r3, #1
 800332e:	d001      	beq.n	8003334 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e03b      	b.n	80033ac <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0201 	orr.w	r2, r2, #1
 800334a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a19      	ldr	r2, [pc, #100]	@ (80033b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d009      	beq.n	800336a <HAL_TIM_Base_Start_IT+0x4e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800335e:	d004      	beq.n	800336a <HAL_TIM_Base_Start_IT+0x4e>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a15      	ldr	r2, [pc, #84]	@ (80033bc <HAL_TIM_Base_Start_IT+0xa0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d115      	bne.n	8003396 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	4b13      	ldr	r3, [pc, #76]	@ (80033c0 <HAL_TIM_Base_Start_IT+0xa4>)
 8003372:	4013      	ands	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2b06      	cmp	r3, #6
 800337a:	d015      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x8c>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003382:	d011      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0201 	orr.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003394:	e008      	b.n	80033a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0201 	orr.w	r2, r2, #1
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	e000      	b.n	80033aa <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	40012c00 	.word	0x40012c00
 80033bc:	40014000 	.word	0x40014000
 80033c0:	00010007 	.word	0x00010007

080033c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d122      	bne.n	8003420 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d11b      	bne.n	8003420 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f06f 0202 	mvn.w	r2, #2
 80033f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f905 	bl	8003616 <HAL_TIM_IC_CaptureCallback>
 800340c:	e005      	b.n	800341a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f8f7 	bl	8003602 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f908 	bl	800362a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	2b04      	cmp	r3, #4
 800342c:	d122      	bne.n	8003474 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b04      	cmp	r3, #4
 800343a:	d11b      	bne.n	8003474 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f06f 0204 	mvn.w	r2, #4
 8003444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2202      	movs	r2, #2
 800344a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f8db 	bl	8003616 <HAL_TIM_IC_CaptureCallback>
 8003460:	e005      	b.n	800346e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f8cd 	bl	8003602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f8de 	bl	800362a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b08      	cmp	r3, #8
 8003480:	d122      	bne.n	80034c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d11b      	bne.n	80034c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f06f 0208 	mvn.w	r2, #8
 8003498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2204      	movs	r2, #4
 800349e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f8b1 	bl	8003616 <HAL_TIM_IC_CaptureCallback>
 80034b4:	e005      	b.n	80034c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f8a3 	bl	8003602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f8b4 	bl	800362a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f003 0310 	and.w	r3, r3, #16
 80034d2:	2b10      	cmp	r3, #16
 80034d4:	d122      	bne.n	800351c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	2b10      	cmp	r3, #16
 80034e2:	d11b      	bne.n	800351c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f06f 0210 	mvn.w	r2, #16
 80034ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2208      	movs	r2, #8
 80034f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f887 	bl	8003616 <HAL_TIM_IC_CaptureCallback>
 8003508:	e005      	b.n	8003516 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f879 	bl	8003602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f88a 	bl	800362a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b01      	cmp	r3, #1
 8003528:	d10e      	bne.n	8003548 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b01      	cmp	r3, #1
 8003536:	d107      	bne.n	8003548 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0201 	mvn.w	r2, #1
 8003540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7fd f9b2 	bl	80008ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003552:	2b80      	cmp	r3, #128	@ 0x80
 8003554:	d10e      	bne.n	8003574 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003560:	2b80      	cmp	r3, #128	@ 0x80
 8003562:	d107      	bne.n	8003574 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800356c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f944 	bl	80037fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003582:	d10e      	bne.n	80035a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800358e:	2b80      	cmp	r3, #128	@ 0x80
 8003590:	d107      	bne.n	80035a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800359a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f937 	bl	8003810 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ac:	2b40      	cmp	r3, #64	@ 0x40
 80035ae:	d10e      	bne.n	80035ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ba:	2b40      	cmp	r3, #64	@ 0x40
 80035bc:	d107      	bne.n	80035ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80035c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f838 	bl	800363e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d10e      	bne.n	80035fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d107      	bne.n	80035fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f06f 0220 	mvn.w	r2, #32
 80035f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f8f7 	bl	80037e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
	...

08003654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a2a      	ldr	r2, [pc, #168]	@ (8003710 <TIM_Base_SetConfig+0xbc>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d003      	beq.n	8003674 <TIM_Base_SetConfig+0x20>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003672:	d108      	bne.n	8003686 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800367a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a21      	ldr	r2, [pc, #132]	@ (8003710 <TIM_Base_SetConfig+0xbc>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d00b      	beq.n	80036a6 <TIM_Base_SetConfig+0x52>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003694:	d007      	beq.n	80036a6 <TIM_Base_SetConfig+0x52>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a1e      	ldr	r2, [pc, #120]	@ (8003714 <TIM_Base_SetConfig+0xc0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d003      	beq.n	80036a6 <TIM_Base_SetConfig+0x52>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003718 <TIM_Base_SetConfig+0xc4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d108      	bne.n	80036b8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a0c      	ldr	r2, [pc, #48]	@ (8003710 <TIM_Base_SetConfig+0xbc>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d007      	beq.n	80036f4 <TIM_Base_SetConfig+0xa0>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a0b      	ldr	r2, [pc, #44]	@ (8003714 <TIM_Base_SetConfig+0xc0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d003      	beq.n	80036f4 <TIM_Base_SetConfig+0xa0>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003718 <TIM_Base_SetConfig+0xc4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d103      	bne.n	80036fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	615a      	str	r2, [r3, #20]
}
 8003702:	bf00      	nop
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40012c00 	.word	0x40012c00
 8003714:	40014000 	.word	0x40014000
 8003718:	40014400 	.word	0x40014400

0800371c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003730:	2302      	movs	r3, #2
 8003732:	e04f      	b.n	80037d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a21      	ldr	r2, [pc, #132]	@ (80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d108      	bne.n	8003770 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003764:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	4313      	orrs	r3, r2
 800376e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003776:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a14      	ldr	r2, [pc, #80]	@ (80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d009      	beq.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800379c:	d004      	beq.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a10      	ldr	r2, [pc, #64]	@ (80037e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d10c      	bne.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	40012c00 	.word	0x40012c00
 80037e4:	40014000 	.word	0x40014000

080037e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e040      	b.n	80038b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fd fab8 	bl	8000dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2224      	movs	r2, #36	@ 0x24
 8003850:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UART_DISABLE(huart);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0201 	bic.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f82c 	bl	80038c0 <UART_SetConfig>
 8003868:	4603      	mov	r3, r0
 800386a:	2b01      	cmp	r3, #1
 800386c:	d101      	bne.n	8003872 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e022      	b.n	80038b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fa4c 	bl	8003d18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800388e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800389e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 fad3 	bl	8003e5c <UART_CheckIdleState>
 80038b6:	4603      	mov	r3, r0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c4:	b08a      	sub	sp, #40	@ 0x28
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	431a      	orrs	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	431a      	orrs	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	4bb4      	ldr	r3, [pc, #720]	@ (8003bc0 <UART_SetConfig+0x300>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	6812      	ldr	r2, [r2, #0]
 80038f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038f8:	430b      	orrs	r3, r1
 80038fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4aa9      	ldr	r2, [pc, #676]	@ (8003bc4 <UART_SetConfig+0x304>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d004      	beq.n	800392c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003928:	4313      	orrs	r3, r2
 800392a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800393c:	430a      	orrs	r2, r1
 800393e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4aa0      	ldr	r2, [pc, #640]	@ (8003bc8 <UART_SetConfig+0x308>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d126      	bne.n	8003998 <UART_SetConfig+0xd8>
 800394a:	4ba0      	ldr	r3, [pc, #640]	@ (8003bcc <UART_SetConfig+0x30c>)
 800394c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	2b03      	cmp	r3, #3
 8003956:	d81b      	bhi.n	8003990 <UART_SetConfig+0xd0>
 8003958:	a201      	add	r2, pc, #4	@ (adr r2, 8003960 <UART_SetConfig+0xa0>)
 800395a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395e:	bf00      	nop
 8003960:	08003971 	.word	0x08003971
 8003964:	08003981 	.word	0x08003981
 8003968:	08003979 	.word	0x08003979
 800396c:	08003989 	.word	0x08003989
 8003970:	2301      	movs	r3, #1
 8003972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003976:	e080      	b.n	8003a7a <UART_SetConfig+0x1ba>
 8003978:	2302      	movs	r3, #2
 800397a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800397e:	e07c      	b.n	8003a7a <UART_SetConfig+0x1ba>
 8003980:	2304      	movs	r3, #4
 8003982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003986:	e078      	b.n	8003a7a <UART_SetConfig+0x1ba>
 8003988:	2308      	movs	r3, #8
 800398a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800398e:	e074      	b.n	8003a7a <UART_SetConfig+0x1ba>
 8003990:	2310      	movs	r3, #16
 8003992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003996:	e070      	b.n	8003a7a <UART_SetConfig+0x1ba>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a8c      	ldr	r2, [pc, #560]	@ (8003bd0 <UART_SetConfig+0x310>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d138      	bne.n	8003a14 <UART_SetConfig+0x154>
 80039a2:	4b8a      	ldr	r3, [pc, #552]	@ (8003bcc <UART_SetConfig+0x30c>)
 80039a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a8:	f003 030c 	and.w	r3, r3, #12
 80039ac:	2b0c      	cmp	r3, #12
 80039ae:	d82d      	bhi.n	8003a0c <UART_SetConfig+0x14c>
 80039b0:	a201      	add	r2, pc, #4	@ (adr r2, 80039b8 <UART_SetConfig+0xf8>)
 80039b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b6:	bf00      	nop
 80039b8:	080039ed 	.word	0x080039ed
 80039bc:	08003a0d 	.word	0x08003a0d
 80039c0:	08003a0d 	.word	0x08003a0d
 80039c4:	08003a0d 	.word	0x08003a0d
 80039c8:	080039fd 	.word	0x080039fd
 80039cc:	08003a0d 	.word	0x08003a0d
 80039d0:	08003a0d 	.word	0x08003a0d
 80039d4:	08003a0d 	.word	0x08003a0d
 80039d8:	080039f5 	.word	0x080039f5
 80039dc:	08003a0d 	.word	0x08003a0d
 80039e0:	08003a0d 	.word	0x08003a0d
 80039e4:	08003a0d 	.word	0x08003a0d
 80039e8:	08003a05 	.word	0x08003a05
 80039ec:	2300      	movs	r3, #0
 80039ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039f2:	e042      	b.n	8003a7a <UART_SetConfig+0x1ba>
 80039f4:	2302      	movs	r3, #2
 80039f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039fa:	e03e      	b.n	8003a7a <UART_SetConfig+0x1ba>
 80039fc:	2304      	movs	r3, #4
 80039fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a02:	e03a      	b.n	8003a7a <UART_SetConfig+0x1ba>
 8003a04:	2308      	movs	r3, #8
 8003a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a0a:	e036      	b.n	8003a7a <UART_SetConfig+0x1ba>
 8003a0c:	2310      	movs	r3, #16
 8003a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a12:	e032      	b.n	8003a7a <UART_SetConfig+0x1ba>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a6a      	ldr	r2, [pc, #424]	@ (8003bc4 <UART_SetConfig+0x304>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d12a      	bne.n	8003a74 <UART_SetConfig+0x1b4>
 8003a1e:	4b6b      	ldr	r3, [pc, #428]	@ (8003bcc <UART_SetConfig+0x30c>)
 8003a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003a28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a2c:	d01a      	beq.n	8003a64 <UART_SetConfig+0x1a4>
 8003a2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a32:	d81b      	bhi.n	8003a6c <UART_SetConfig+0x1ac>
 8003a34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a38:	d00c      	beq.n	8003a54 <UART_SetConfig+0x194>
 8003a3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a3e:	d815      	bhi.n	8003a6c <UART_SetConfig+0x1ac>
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <UART_SetConfig+0x18c>
 8003a44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a48:	d008      	beq.n	8003a5c <UART_SetConfig+0x19c>
 8003a4a:	e00f      	b.n	8003a6c <UART_SetConfig+0x1ac>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a52:	e012      	b.n	8003a7a <UART_SetConfig+0x1ba>
 8003a54:	2302      	movs	r3, #2
 8003a56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a5a:	e00e      	b.n	8003a7a <UART_SetConfig+0x1ba>
 8003a5c:	2304      	movs	r3, #4
 8003a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a62:	e00a      	b.n	8003a7a <UART_SetConfig+0x1ba>
 8003a64:	2308      	movs	r3, #8
 8003a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a6a:	e006      	b.n	8003a7a <UART_SetConfig+0x1ba>
 8003a6c:	2310      	movs	r3, #16
 8003a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a72:	e002      	b.n	8003a7a <UART_SetConfig+0x1ba>
 8003a74:	2310      	movs	r3, #16
 8003a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a51      	ldr	r2, [pc, #324]	@ (8003bc4 <UART_SetConfig+0x304>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d17a      	bne.n	8003b7a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d824      	bhi.n	8003ad6 <UART_SetConfig+0x216>
 8003a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a94 <UART_SetConfig+0x1d4>)
 8003a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a92:	bf00      	nop
 8003a94:	08003ab9 	.word	0x08003ab9
 8003a98:	08003ad7 	.word	0x08003ad7
 8003a9c:	08003ac1 	.word	0x08003ac1
 8003aa0:	08003ad7 	.word	0x08003ad7
 8003aa4:	08003ac7 	.word	0x08003ac7
 8003aa8:	08003ad7 	.word	0x08003ad7
 8003aac:	08003ad7 	.word	0x08003ad7
 8003ab0:	08003ad7 	.word	0x08003ad7
 8003ab4:	08003acf 	.word	0x08003acf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ab8:	f7ff f832 	bl	8002b20 <HAL_RCC_GetPCLK1Freq>
 8003abc:	61f8      	str	r0, [r7, #28]
        break;
 8003abe:	e010      	b.n	8003ae2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ac0:	4b44      	ldr	r3, [pc, #272]	@ (8003bd4 <UART_SetConfig+0x314>)
 8003ac2:	61fb      	str	r3, [r7, #28]
        break;
 8003ac4:	e00d      	b.n	8003ae2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ac6:	f7fe ff93 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 8003aca:	61f8      	str	r0, [r7, #28]
        break;
 8003acc:	e009      	b.n	8003ae2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ace:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ad2:	61fb      	str	r3, [r7, #28]
        break;
 8003ad4:	e005      	b.n	8003ae2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003ae0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 8107 	beq.w	8003cf8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	4413      	add	r3, r2
 8003af4:	69fa      	ldr	r2, [r7, #28]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d305      	bcc.n	8003b06 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b00:	69fa      	ldr	r2, [r7, #28]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d903      	bls.n	8003b0e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003b0c:	e0f4      	b.n	8003cf8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	2200      	movs	r2, #0
 8003b12:	461c      	mov	r4, r3
 8003b14:	4615      	mov	r5, r2
 8003b16:	f04f 0200 	mov.w	r2, #0
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	022b      	lsls	r3, r5, #8
 8003b20:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003b24:	0222      	lsls	r2, r4, #8
 8003b26:	68f9      	ldr	r1, [r7, #12]
 8003b28:	6849      	ldr	r1, [r1, #4]
 8003b2a:	0849      	lsrs	r1, r1, #1
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	4688      	mov	r8, r1
 8003b30:	4681      	mov	r9, r0
 8003b32:	eb12 0a08 	adds.w	sl, r2, r8
 8003b36:	eb43 0b09 	adc.w	fp, r3, r9
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	603b      	str	r3, [r7, #0]
 8003b42:	607a      	str	r2, [r7, #4]
 8003b44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b48:	4650      	mov	r0, sl
 8003b4a:	4659      	mov	r1, fp
 8003b4c:	f7fc fb90 	bl	8000270 <__aeabi_uldivmod>
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	4613      	mov	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b5e:	d308      	bcc.n	8003b72 <UART_SetConfig+0x2b2>
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b66:	d204      	bcs.n	8003b72 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	60da      	str	r2, [r3, #12]
 8003b70:	e0c2      	b.n	8003cf8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003b78:	e0be      	b.n	8003cf8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b82:	d16a      	bne.n	8003c5a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003b84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d834      	bhi.n	8003bf6 <UART_SetConfig+0x336>
 8003b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b94 <UART_SetConfig+0x2d4>)
 8003b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b92:	bf00      	nop
 8003b94:	08003bb9 	.word	0x08003bb9
 8003b98:	08003bd9 	.word	0x08003bd9
 8003b9c:	08003be1 	.word	0x08003be1
 8003ba0:	08003bf7 	.word	0x08003bf7
 8003ba4:	08003be7 	.word	0x08003be7
 8003ba8:	08003bf7 	.word	0x08003bf7
 8003bac:	08003bf7 	.word	0x08003bf7
 8003bb0:	08003bf7 	.word	0x08003bf7
 8003bb4:	08003bef 	.word	0x08003bef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bb8:	f7fe ffb2 	bl	8002b20 <HAL_RCC_GetPCLK1Freq>
 8003bbc:	61f8      	str	r0, [r7, #28]
        break;
 8003bbe:	e020      	b.n	8003c02 <UART_SetConfig+0x342>
 8003bc0:	efff69f3 	.word	0xefff69f3
 8003bc4:	40008000 	.word	0x40008000
 8003bc8:	40013800 	.word	0x40013800
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	40004400 	.word	0x40004400
 8003bd4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bd8:	f7fe ffb8 	bl	8002b4c <HAL_RCC_GetPCLK2Freq>
 8003bdc:	61f8      	str	r0, [r7, #28]
        break;
 8003bde:	e010      	b.n	8003c02 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003be0:	4b4c      	ldr	r3, [pc, #304]	@ (8003d14 <UART_SetConfig+0x454>)
 8003be2:	61fb      	str	r3, [r7, #28]
        break;
 8003be4:	e00d      	b.n	8003c02 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003be6:	f7fe ff03 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 8003bea:	61f8      	str	r0, [r7, #28]
        break;
 8003bec:	e009      	b.n	8003c02 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bf2:	61fb      	str	r3, [r7, #28]
        break;
 8003bf4:	e005      	b.n	8003c02 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003c00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d077      	beq.n	8003cf8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	005a      	lsls	r2, r3, #1
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	085b      	lsrs	r3, r3, #1
 8003c12:	441a      	add	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	2b0f      	cmp	r3, #15
 8003c22:	d916      	bls.n	8003c52 <UART_SetConfig+0x392>
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c2a:	d212      	bcs.n	8003c52 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	f023 030f 	bic.w	r3, r3, #15
 8003c34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	085b      	lsrs	r3, r3, #1
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	8afb      	ldrh	r3, [r7, #22]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	8afa      	ldrh	r2, [r7, #22]
 8003c4e:	60da      	str	r2, [r3, #12]
 8003c50:	e052      	b.n	8003cf8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003c58:	e04e      	b.n	8003cf8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d827      	bhi.n	8003cb2 <UART_SetConfig+0x3f2>
 8003c62:	a201      	add	r2, pc, #4	@ (adr r2, 8003c68 <UART_SetConfig+0x3a8>)
 8003c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c68:	08003c8d 	.word	0x08003c8d
 8003c6c:	08003c95 	.word	0x08003c95
 8003c70:	08003c9d 	.word	0x08003c9d
 8003c74:	08003cb3 	.word	0x08003cb3
 8003c78:	08003ca3 	.word	0x08003ca3
 8003c7c:	08003cb3 	.word	0x08003cb3
 8003c80:	08003cb3 	.word	0x08003cb3
 8003c84:	08003cb3 	.word	0x08003cb3
 8003c88:	08003cab 	.word	0x08003cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c8c:	f7fe ff48 	bl	8002b20 <HAL_RCC_GetPCLK1Freq>
 8003c90:	61f8      	str	r0, [r7, #28]
        break;
 8003c92:	e014      	b.n	8003cbe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c94:	f7fe ff5a 	bl	8002b4c <HAL_RCC_GetPCLK2Freq>
 8003c98:	61f8      	str	r0, [r7, #28]
        break;
 8003c9a:	e010      	b.n	8003cbe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003d14 <UART_SetConfig+0x454>)
 8003c9e:	61fb      	str	r3, [r7, #28]
        break;
 8003ca0:	e00d      	b.n	8003cbe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ca2:	f7fe fea5 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 8003ca6:	61f8      	str	r0, [r7, #28]
        break;
 8003ca8:	e009      	b.n	8003cbe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003caa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cae:	61fb      	str	r3, [r7, #28]
        break;
 8003cb0:	e005      	b.n	8003cbe <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003cbc:	bf00      	nop
    }

    if (pclk != 0U)
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d019      	beq.n	8003cf8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	085a      	lsrs	r2, r3, #1
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	441a      	add	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	2b0f      	cmp	r3, #15
 8003cdc:	d909      	bls.n	8003cf2 <UART_SetConfig+0x432>
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ce4:	d205      	bcs.n	8003cf2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	60da      	str	r2, [r3, #12]
 8003cf0:	e002      	b.n	8003cf8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->TxISR = NULL;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	669a      	str	r2, [r3, #104]	@ 0x68

  return ret;
 8003d04:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3728      	adds	r7, #40	@ 0x28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d12:	bf00      	nop
 8003d14:	00f42400 	.word	0x00f42400

08003d18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8a:	f003 0308 	and.w	r3, r3, #8
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dac:	f003 0310 	and.w	r3, r3, #16
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d01a      	beq.n	8003e2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e16:	d10a      	bne.n	8003e2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	605a      	str	r2, [r3, #4]
  }
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af02      	add	r7, sp, #8
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e6c:	f7fd f854 	bl	8000f18 <HAL_GetTick>
 8003e70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d10e      	bne.n	8003e9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f82d 	bl	8003eee <UART_WaitOnFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e023      	b.n	8003ee6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d10e      	bne.n	8003eca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f817 	bl	8003eee <UART_WaitOnFlagUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e00d      	b.n	8003ee6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	679a      	str	r2, [r3, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(huart);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b09c      	sub	sp, #112	@ 0x70
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	60f8      	str	r0, [r7, #12]
 8003ef6:	60b9      	str	r1, [r7, #8]
 8003ef8:	603b      	str	r3, [r7, #0]
 8003efa:	4613      	mov	r3, r2
 8003efc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003efe:	e0a5      	b.n	800404c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f06:	f000 80a1 	beq.w	800404c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f0a:	f7fd f805 	bl	8000f18 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d302      	bcc.n	8003f20 <UART_WaitOnFlagUntilTimeout+0x32>
 8003f1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d13e      	bne.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003f2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f30:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003f34:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f40:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003f44:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003f46:	e841 2300 	strex	r3, r2, [r1]
 8003f4a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8003f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e6      	bne.n	8003f20 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3308      	adds	r3, #8
 8003f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f5c:	e853 3f00 	ldrex	r3, [r3]
 8003f60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f64:	f023 0301 	bic.w	r3, r3, #1
 8003f68:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3308      	adds	r3, #8
 8003f70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003f72:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003f74:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f76:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003f78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f7a:	e841 2300 	strex	r3, r2, [r1]
 8003f7e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003f80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1e5      	bne.n	8003f52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	679a      	str	r2, [r3, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e067      	b.n	800406e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d04f      	beq.n	800404c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fba:	d147      	bne.n	800404c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003fc4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003fda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fe6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fec:	e841 2300 	strex	r3, r2, [r1]
 8003ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e6      	bne.n	8003fc6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3308      	adds	r3, #8
 8003ffe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	e853 3f00 	ldrex	r3, [r3]
 8004006:	613b      	str	r3, [r7, #16]
   return(result);
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f023 0301 	bic.w	r3, r3, #1
 800400e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3308      	adds	r3, #8
 8004016:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004018:	623a      	str	r2, [r7, #32]
 800401a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401c:	69f9      	ldr	r1, [r7, #28]
 800401e:	6a3a      	ldr	r2, [r7, #32]
 8004020:	e841 2300 	strex	r3, r2, [r1]
 8004024:	61bb      	str	r3, [r7, #24]
   return(result);
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e5      	bne.n	8003ff8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2220      	movs	r2, #32
 8004036:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2220      	movs	r2, #32
 800403c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e010      	b.n	800406e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	69da      	ldr	r2, [r3, #28]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	4013      	ands	r3, r2
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	429a      	cmp	r2, r3
 800405a:	bf0c      	ite	eq
 800405c:	2301      	moveq	r3, #1
 800405e:	2300      	movne	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	461a      	mov	r2, r3
 8004064:	79fb      	ldrb	r3, [r7, #7]
 8004066:	429a      	cmp	r2, r3
 8004068:	f43f af4a 	beq.w	8003f00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3770      	adds	r7, #112	@ 0x70
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
	...

08004078 <__NVIC_SetPriority>:
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	4603      	mov	r3, r0
 8004080:	6039      	str	r1, [r7, #0]
 8004082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004088:	2b00      	cmp	r3, #0
 800408a:	db0a      	blt.n	80040a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	b2da      	uxtb	r2, r3
 8004090:	490c      	ldr	r1, [pc, #48]	@ (80040c4 <__NVIC_SetPriority+0x4c>)
 8004092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004096:	0112      	lsls	r2, r2, #4
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	440b      	add	r3, r1
 800409c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80040a0:	e00a      	b.n	80040b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	4908      	ldr	r1, [pc, #32]	@ (80040c8 <__NVIC_SetPriority+0x50>)
 80040a8:	79fb      	ldrb	r3, [r7, #7]
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	3b04      	subs	r3, #4
 80040b0:	0112      	lsls	r2, r2, #4
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	440b      	add	r3, r1
 80040b6:	761a      	strb	r2, [r3, #24]
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	e000e100 	.word	0xe000e100
 80040c8:	e000ed00 	.word	0xe000ed00

080040cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80040d0:	4b05      	ldr	r3, [pc, #20]	@ (80040e8 <SysTick_Handler+0x1c>)
 80040d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80040d4:	f002 fa9a 	bl	800660c <xTaskGetSchedulerState>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d001      	beq.n	80040e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80040de:	f003 f993 	bl	8007408 <xPortSysTickHandler>
  }
}
 80040e2:	bf00      	nop
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	e000e010 	.word	0xe000e010

080040ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80040f0:	2100      	movs	r1, #0
 80040f2:	f06f 0004 	mvn.w	r0, #4
 80040f6:	f7ff ffbf 	bl	8004078 <__NVIC_SetPriority>
#endif
}
 80040fa:	bf00      	nop
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004106:	f3ef 8305 	mrs	r3, IPSR
 800410a:	603b      	str	r3, [r7, #0]
  return(result);
 800410c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004112:	f06f 0305 	mvn.w	r3, #5
 8004116:	607b      	str	r3, [r7, #4]
 8004118:	e00c      	b.n	8004134 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800411a:	4b0a      	ldr	r3, [pc, #40]	@ (8004144 <osKernelInitialize+0x44>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d105      	bne.n	800412e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004122:	4b08      	ldr	r3, [pc, #32]	@ (8004144 <osKernelInitialize+0x44>)
 8004124:	2201      	movs	r2, #1
 8004126:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004128:	2300      	movs	r3, #0
 800412a:	607b      	str	r3, [r7, #4]
 800412c:	e002      	b.n	8004134 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800412e:	f04f 33ff 	mov.w	r3, #4294967295
 8004132:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004134:	687b      	ldr	r3, [r7, #4]
}
 8004136:	4618      	mov	r0, r3
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	20000650 	.word	0x20000650

08004148 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800414e:	f3ef 8305 	mrs	r3, IPSR
 8004152:	603b      	str	r3, [r7, #0]
  return(result);
 8004154:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <osKernelStart+0x1a>
    stat = osErrorISR;
 800415a:	f06f 0305 	mvn.w	r3, #5
 800415e:	607b      	str	r3, [r7, #4]
 8004160:	e010      	b.n	8004184 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004162:	4b0b      	ldr	r3, [pc, #44]	@ (8004190 <osKernelStart+0x48>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d109      	bne.n	800417e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800416a:	f7ff ffbf 	bl	80040ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800416e:	4b08      	ldr	r3, [pc, #32]	@ (8004190 <osKernelStart+0x48>)
 8004170:	2202      	movs	r2, #2
 8004172:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004174:	f001 fdfc 	bl	8005d70 <vTaskStartScheduler>
      stat = osOK;
 8004178:	2300      	movs	r3, #0
 800417a:	607b      	str	r3, [r7, #4]
 800417c:	e002      	b.n	8004184 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800417e:	f04f 33ff 	mov.w	r3, #4294967295
 8004182:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004184:	687b      	ldr	r3, [r7, #4]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20000650 	.word	0x20000650

08004194 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004194:	b580      	push	{r7, lr}
 8004196:	b08e      	sub	sp, #56	@ 0x38
 8004198:	af04      	add	r7, sp, #16
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80041a0:	2300      	movs	r3, #0
 80041a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041a4:	f3ef 8305 	mrs	r3, IPSR
 80041a8:	617b      	str	r3, [r7, #20]
  return(result);
 80041aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d17e      	bne.n	80042ae <osThreadNew+0x11a>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d07b      	beq.n	80042ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80041b6:	2380      	movs	r3, #128	@ 0x80
 80041b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80041ba:	2318      	movs	r3, #24
 80041bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80041be:	2300      	movs	r3, #0
 80041c0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80041c2:	f04f 33ff 	mov.w	r3, #4294967295
 80041c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d045      	beq.n	800425a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <osThreadNew+0x48>
        name = attr->name;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d008      	beq.n	8004202 <osThreadNew+0x6e>
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	2b38      	cmp	r3, #56	@ 0x38
 80041f4:	d805      	bhi.n	8004202 <osThreadNew+0x6e>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <osThreadNew+0x72>
        return (NULL);
 8004202:	2300      	movs	r3, #0
 8004204:	e054      	b.n	80042b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	089b      	lsrs	r3, r3, #2
 8004214:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00e      	beq.n	800423c <osThreadNew+0xa8>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	2b5b      	cmp	r3, #91	@ 0x5b
 8004224:	d90a      	bls.n	800423c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800422a:	2b00      	cmp	r3, #0
 800422c:	d006      	beq.n	800423c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <osThreadNew+0xa8>
        mem = 1;
 8004236:	2301      	movs	r3, #1
 8004238:	61bb      	str	r3, [r7, #24]
 800423a:	e010      	b.n	800425e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10c      	bne.n	800425e <osThreadNew+0xca>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d108      	bne.n	800425e <osThreadNew+0xca>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d104      	bne.n	800425e <osThreadNew+0xca>
          mem = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	61bb      	str	r3, [r7, #24]
 8004258:	e001      	b.n	800425e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800425a:	2300      	movs	r3, #0
 800425c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d110      	bne.n	8004286 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800426c:	9202      	str	r2, [sp, #8]
 800426e:	9301      	str	r3, [sp, #4]
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	6a3a      	ldr	r2, [r7, #32]
 8004278:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f001 fb9c 	bl	80059b8 <xTaskCreateStatic>
 8004280:	4603      	mov	r3, r0
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	e013      	b.n	80042ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d110      	bne.n	80042ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	b29a      	uxth	r2, r3
 8004290:	f107 0310 	add.w	r3, r7, #16
 8004294:	9301      	str	r3, [sp, #4]
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f001 fbea 	bl	8005a78 <xTaskCreate>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d001      	beq.n	80042ae <osThreadNew+0x11a>
            hTask = NULL;
 80042aa:	2300      	movs	r3, #0
 80042ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80042ae:	693b      	ldr	r3, [r7, #16]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3728      	adds	r7, #40	@ 0x28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042c0:	f3ef 8305 	mrs	r3, IPSR
 80042c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80042c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <osDelay+0x1c>
    stat = osErrorISR;
 80042cc:	f06f 0305 	mvn.w	r3, #5
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	e007      	b.n	80042e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d002      	beq.n	80042e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f001 fd10 	bl	8005d04 <vTaskDelay>
    }
  }

  return (stat);
 80042e4:	68fb      	ldr	r3, [r7, #12]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b08a      	sub	sp, #40	@ 0x28
 80042f2:	af02      	add	r7, sp, #8
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042fe:	f3ef 8305 	mrs	r3, IPSR
 8004302:	613b      	str	r3, [r7, #16]
  return(result);
 8004304:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004306:	2b00      	cmp	r3, #0
 8004308:	d175      	bne.n	80043f6 <osSemaphoreNew+0x108>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d072      	beq.n	80043f6 <osSemaphoreNew+0x108>
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	429a      	cmp	r2, r3
 8004316:	d86e      	bhi.n	80043f6 <osSemaphoreNew+0x108>
    mem = -1;
 8004318:	f04f 33ff 	mov.w	r3, #4294967295
 800431c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d015      	beq.n	8004350 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d006      	beq.n	800433a <osSemaphoreNew+0x4c>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	2b4f      	cmp	r3, #79	@ 0x4f
 8004332:	d902      	bls.n	800433a <osSemaphoreNew+0x4c>
        mem = 1;
 8004334:	2301      	movs	r3, #1
 8004336:	61bb      	str	r3, [r7, #24]
 8004338:	e00c      	b.n	8004354 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d108      	bne.n	8004354 <osSemaphoreNew+0x66>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d104      	bne.n	8004354 <osSemaphoreNew+0x66>
          mem = 0;
 800434a:	2300      	movs	r3, #0
 800434c:	61bb      	str	r3, [r7, #24]
 800434e:	e001      	b.n	8004354 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004350:	2300      	movs	r3, #0
 8004352:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435a:	d04c      	beq.n	80043f6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d128      	bne.n	80043b4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d10a      	bne.n	800437e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	2203      	movs	r2, #3
 800436e:	9200      	str	r2, [sp, #0]
 8004370:	2200      	movs	r2, #0
 8004372:	2100      	movs	r1, #0
 8004374:	2001      	movs	r0, #1
 8004376:	f000 fb5d 	bl	8004a34 <xQueueGenericCreateStatic>
 800437a:	61f8      	str	r0, [r7, #28]
 800437c:	e005      	b.n	800438a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800437e:	2203      	movs	r2, #3
 8004380:	2100      	movs	r1, #0
 8004382:	2001      	movs	r0, #1
 8004384:	f000 fbd3 	bl	8004b2e <xQueueGenericCreate>
 8004388:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d022      	beq.n	80043d6 <osSemaphoreNew+0xe8>
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d01f      	beq.n	80043d6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004396:	2300      	movs	r3, #0
 8004398:	2200      	movs	r2, #0
 800439a:	2100      	movs	r1, #0
 800439c:	69f8      	ldr	r0, [r7, #28]
 800439e:	f000 fc93 	bl	8004cc8 <xQueueGenericSend>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d016      	beq.n	80043d6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80043a8:	69f8      	ldr	r0, [r7, #28]
 80043aa:	f001 f931 	bl	8005610 <vQueueDelete>
            hSemaphore = NULL;
 80043ae:	2300      	movs	r3, #0
 80043b0:	61fb      	str	r3, [r7, #28]
 80043b2:	e010      	b.n	80043d6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d108      	bne.n	80043cc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	461a      	mov	r2, r3
 80043c0:	68b9      	ldr	r1, [r7, #8]
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 fc11 	bl	8004bea <xQueueCreateCountingSemaphoreStatic>
 80043c8:	61f8      	str	r0, [r7, #28]
 80043ca:	e004      	b.n	80043d6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80043cc:	68b9      	ldr	r1, [r7, #8]
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 fc44 	bl	8004c5c <xQueueCreateCountingSemaphore>
 80043d4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00c      	beq.n	80043f6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <osSemaphoreNew+0xfc>
          name = attr->name;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	e001      	b.n	80043ee <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80043ea:	2300      	movs	r3, #0
 80043ec:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80043ee:	6979      	ldr	r1, [r7, #20]
 80043f0:	69f8      	ldr	r0, [r7, #28]
 80043f2:	f001 fa59 	bl	80058a8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80043f6:	69fb      	ldr	r3, [r7, #28]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3720      	adds	r7, #32
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d103      	bne.n	8004420 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004418:	f06f 0303 	mvn.w	r3, #3
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	e039      	b.n	8004494 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004420:	f3ef 8305 	mrs	r3, IPSR
 8004424:	60fb      	str	r3, [r7, #12]
  return(result);
 8004426:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004428:	2b00      	cmp	r3, #0
 800442a:	d022      	beq.n	8004472 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004432:	f06f 0303 	mvn.w	r3, #3
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	e02c      	b.n	8004494 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800443a:	2300      	movs	r3, #0
 800443c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800443e:	f107 0308 	add.w	r3, r7, #8
 8004442:	461a      	mov	r2, r3
 8004444:	2100      	movs	r1, #0
 8004446:	6938      	ldr	r0, [r7, #16]
 8004448:	f001 f860 	bl	800550c <xQueueReceiveFromISR>
 800444c:	4603      	mov	r3, r0
 800444e:	2b01      	cmp	r3, #1
 8004450:	d003      	beq.n	800445a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004452:	f06f 0302 	mvn.w	r3, #2
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	e01c      	b.n	8004494 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d019      	beq.n	8004494 <osSemaphoreAcquire+0x94>
 8004460:	4b0f      	ldr	r3, [pc, #60]	@ (80044a0 <osSemaphoreAcquire+0xa0>)
 8004462:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	e010      	b.n	8004494 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004472:	6839      	ldr	r1, [r7, #0]
 8004474:	6938      	ldr	r0, [r7, #16]
 8004476:	f000 ff39 	bl	80052ec <xQueueSemaphoreTake>
 800447a:	4603      	mov	r3, r0
 800447c:	2b01      	cmp	r3, #1
 800447e:	d009      	beq.n	8004494 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004486:	f06f 0301 	mvn.w	r3, #1
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	e002      	b.n	8004494 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800448e:	f06f 0302 	mvn.w	r3, #2
 8004492:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004494:	697b      	ldr	r3, [r7, #20]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	e000ed04 	.word	0xe000ed04

080044a4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d103      	bne.n	80044c2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80044ba:	f06f 0303 	mvn.w	r3, #3
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	e02c      	b.n	800451c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044c2:	f3ef 8305 	mrs	r3, IPSR
 80044c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80044c8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d01a      	beq.n	8004504 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80044ce:	2300      	movs	r3, #0
 80044d0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80044d2:	f107 0308 	add.w	r3, r7, #8
 80044d6:	4619      	mov	r1, r3
 80044d8:	6938      	ldr	r0, [r7, #16]
 80044da:	f000 fd95 	bl	8005008 <xQueueGiveFromISR>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d003      	beq.n	80044ec <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80044e4:	f06f 0302 	mvn.w	r3, #2
 80044e8:	617b      	str	r3, [r7, #20]
 80044ea:	e017      	b.n	800451c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d014      	beq.n	800451c <osSemaphoreRelease+0x78>
 80044f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004528 <osSemaphoreRelease+0x84>)
 80044f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	e00b      	b.n	800451c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004504:	2300      	movs	r3, #0
 8004506:	2200      	movs	r2, #0
 8004508:	2100      	movs	r1, #0
 800450a:	6938      	ldr	r0, [r7, #16]
 800450c:	f000 fbdc 	bl	8004cc8 <xQueueGenericSend>
 8004510:	4603      	mov	r3, r0
 8004512:	2b01      	cmp	r3, #1
 8004514:	d002      	beq.n	800451c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004516:	f06f 0302 	mvn.w	r3, #2
 800451a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800451c:	697b      	ldr	r3, [r7, #20]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	e000ed04 	.word	0xe000ed04

0800452c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800452c:	b580      	push	{r7, lr}
 800452e:	b08a      	sub	sp, #40	@ 0x28
 8004530:	af02      	add	r7, sp, #8
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004538:	2300      	movs	r3, #0
 800453a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800453c:	f3ef 8305 	mrs	r3, IPSR
 8004540:	613b      	str	r3, [r7, #16]
  return(result);
 8004542:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004544:	2b00      	cmp	r3, #0
 8004546:	d15f      	bne.n	8004608 <osMessageQueueNew+0xdc>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d05c      	beq.n	8004608 <osMessageQueueNew+0xdc>
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d059      	beq.n	8004608 <osMessageQueueNew+0xdc>
    mem = -1;
 8004554:	f04f 33ff 	mov.w	r3, #4294967295
 8004558:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d029      	beq.n	80045b4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d012      	beq.n	800458e <osMessageQueueNew+0x62>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	2b4f      	cmp	r3, #79	@ 0x4f
 800456e:	d90e      	bls.n	800458e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00a      	beq.n	800458e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	695a      	ldr	r2, [r3, #20]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	68b9      	ldr	r1, [r7, #8]
 8004580:	fb01 f303 	mul.w	r3, r1, r3
 8004584:	429a      	cmp	r2, r3
 8004586:	d302      	bcc.n	800458e <osMessageQueueNew+0x62>
        mem = 1;
 8004588:	2301      	movs	r3, #1
 800458a:	61bb      	str	r3, [r7, #24]
 800458c:	e014      	b.n	80045b8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d110      	bne.n	80045b8 <osMessageQueueNew+0x8c>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10c      	bne.n	80045b8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d108      	bne.n	80045b8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d104      	bne.n	80045b8 <osMessageQueueNew+0x8c>
          mem = 0;
 80045ae:	2300      	movs	r3, #0
 80045b0:	61bb      	str	r3, [r7, #24]
 80045b2:	e001      	b.n	80045b8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80045b4:	2300      	movs	r3, #0
 80045b6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d10b      	bne.n	80045d6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691a      	ldr	r2, [r3, #16]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2100      	movs	r1, #0
 80045c8:	9100      	str	r1, [sp, #0]
 80045ca:	68b9      	ldr	r1, [r7, #8]
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 fa31 	bl	8004a34 <xQueueGenericCreateStatic>
 80045d2:	61f8      	str	r0, [r7, #28]
 80045d4:	e008      	b.n	80045e8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d105      	bne.n	80045e8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80045dc:	2200      	movs	r2, #0
 80045de:	68b9      	ldr	r1, [r7, #8]
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 faa4 	bl	8004b2e <xQueueGenericCreate>
 80045e6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00c      	beq.n	8004608 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <osMessageQueueNew+0xd0>
        name = attr->name;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	617b      	str	r3, [r7, #20]
 80045fa:	e001      	b.n	8004600 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004600:	6979      	ldr	r1, [r7, #20]
 8004602:	69f8      	ldr	r0, [r7, #28]
 8004604:	f001 f950 	bl	80058a8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004608:	69fb      	ldr	r3, [r7, #28]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3720      	adds	r7, #32
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	603b      	str	r3, [r7, #0]
 8004620:	4613      	mov	r3, r2
 8004622:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004628:	2300      	movs	r3, #0
 800462a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800462c:	f3ef 8305 	mrs	r3, IPSR
 8004630:	617b      	str	r3, [r7, #20]
  return(result);
 8004632:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004634:	2b00      	cmp	r3, #0
 8004636:	d028      	beq.n	800468a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d005      	beq.n	800464a <osMessageQueuePut+0x36>
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <osMessageQueuePut+0x36>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800464a:	f06f 0303 	mvn.w	r3, #3
 800464e:	61fb      	str	r3, [r7, #28]
 8004650:	e038      	b.n	80046c4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004652:	2300      	movs	r3, #0
 8004654:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004656:	f107 0210 	add.w	r2, r7, #16
 800465a:	2300      	movs	r3, #0
 800465c:	68b9      	ldr	r1, [r7, #8]
 800465e:	69b8      	ldr	r0, [r7, #24]
 8004660:	f000 fc34 	bl	8004ecc <xQueueGenericSendFromISR>
 8004664:	4603      	mov	r3, r0
 8004666:	2b01      	cmp	r3, #1
 8004668:	d003      	beq.n	8004672 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800466a:	f06f 0302 	mvn.w	r3, #2
 800466e:	61fb      	str	r3, [r7, #28]
 8004670:	e028      	b.n	80046c4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d025      	beq.n	80046c4 <osMessageQueuePut+0xb0>
 8004678:	4b15      	ldr	r3, [pc, #84]	@ (80046d0 <osMessageQueuePut+0xbc>)
 800467a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	e01c      	b.n	80046c4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d002      	beq.n	8004696 <osMessageQueuePut+0x82>
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d103      	bne.n	800469e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004696:	f06f 0303 	mvn.w	r3, #3
 800469a:	61fb      	str	r3, [r7, #28]
 800469c:	e012      	b.n	80046c4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800469e:	2300      	movs	r3, #0
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	68b9      	ldr	r1, [r7, #8]
 80046a4:	69b8      	ldr	r0, [r7, #24]
 80046a6:	f000 fb0f 	bl	8004cc8 <xQueueGenericSend>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d009      	beq.n	80046c4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80046b6:	f06f 0301 	mvn.w	r3, #1
 80046ba:	61fb      	str	r3, [r7, #28]
 80046bc:	e002      	b.n	80046c4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80046be:	f06f 0302 	mvn.w	r3, #2
 80046c2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80046c4:	69fb      	ldr	r3, [r7, #28]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3720      	adds	r7, #32
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	e000ed04 	.word	0xe000ed04

080046d4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b088      	sub	sp, #32
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046ea:	f3ef 8305 	mrs	r3, IPSR
 80046ee:	617b      	str	r3, [r7, #20]
  return(result);
 80046f0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d028      	beq.n	8004748 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <osMessageQueueGet+0x34>
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <osMessageQueueGet+0x34>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004708:	f06f 0303 	mvn.w	r3, #3
 800470c:	61fb      	str	r3, [r7, #28]
 800470e:	e037      	b.n	8004780 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004710:	2300      	movs	r3, #0
 8004712:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004714:	f107 0310 	add.w	r3, r7, #16
 8004718:	461a      	mov	r2, r3
 800471a:	68b9      	ldr	r1, [r7, #8]
 800471c:	69b8      	ldr	r0, [r7, #24]
 800471e:	f000 fef5 	bl	800550c <xQueueReceiveFromISR>
 8004722:	4603      	mov	r3, r0
 8004724:	2b01      	cmp	r3, #1
 8004726:	d003      	beq.n	8004730 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004728:	f06f 0302 	mvn.w	r3, #2
 800472c:	61fb      	str	r3, [r7, #28]
 800472e:	e027      	b.n	8004780 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d024      	beq.n	8004780 <osMessageQueueGet+0xac>
 8004736:	4b15      	ldr	r3, [pc, #84]	@ (800478c <osMessageQueueGet+0xb8>)
 8004738:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	e01b      	b.n	8004780 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <osMessageQueueGet+0x80>
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d103      	bne.n	800475c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004754:	f06f 0303 	mvn.w	r3, #3
 8004758:	61fb      	str	r3, [r7, #28]
 800475a:	e011      	b.n	8004780 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	68b9      	ldr	r1, [r7, #8]
 8004760:	69b8      	ldr	r0, [r7, #24]
 8004762:	f000 fce1 	bl	8005128 <xQueueReceive>
 8004766:	4603      	mov	r3, r0
 8004768:	2b01      	cmp	r3, #1
 800476a:	d009      	beq.n	8004780 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004772:	f06f 0301 	mvn.w	r3, #1
 8004776:	61fb      	str	r3, [r7, #28]
 8004778:	e002      	b.n	8004780 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800477a:	f06f 0302 	mvn.w	r3, #2
 800477e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004780:	69fb      	ldr	r3, [r7, #28]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3720      	adds	r7, #32
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	e000ed04 	.word	0xe000ed04

08004790 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4a07      	ldr	r2, [pc, #28]	@ (80047bc <vApplicationGetIdleTaskMemory+0x2c>)
 80047a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	4a06      	ldr	r2, [pc, #24]	@ (80047c0 <vApplicationGetIdleTaskMemory+0x30>)
 80047a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2280      	movs	r2, #128	@ 0x80
 80047ac:	601a      	str	r2, [r3, #0]
}
 80047ae:	bf00      	nop
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	20000654 	.word	0x20000654
 80047c0:	200006b0 	.word	0x200006b0

080047c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4a07      	ldr	r2, [pc, #28]	@ (80047f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80047d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	4a06      	ldr	r2, [pc, #24]	@ (80047f4 <vApplicationGetTimerTaskMemory+0x30>)
 80047da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80047e2:	601a      	str	r2, [r3, #0]
}
 80047e4:	bf00      	nop
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	200008b0 	.word	0x200008b0
 80047f4:	2000090c 	.word	0x2000090c

080047f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f103 0208 	add.w	r2, r3, #8
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f04f 32ff 	mov.w	r2, #4294967295
 8004810:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f103 0208 	add.w	r2, r3, #8
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f103 0208 	add.w	r2, r3, #8
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004852:	b480      	push	{r7}
 8004854:	b085      	sub	sp, #20
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	601a      	str	r2, [r3, #0]
}
 800488e:	bf00      	nop
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800489a:	b480      	push	{r7}
 800489c:	b085      	sub	sp, #20
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b0:	d103      	bne.n	80048ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	e00c      	b.n	80048d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3308      	adds	r3, #8
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	e002      	b.n	80048c8 <vListInsert+0x2e>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d2f6      	bcs.n	80048c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	601a      	str	r2, [r3, #0]
}
 8004900:	bf00      	nop
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6892      	ldr	r2, [r2, #8]
 8004922:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6852      	ldr	r2, [r2, #4]
 800492c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	429a      	cmp	r2, r3
 8004936:	d103      	bne.n	8004940 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	1e5a      	subs	r2, r3, #1
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10b      	bne.n	800498c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004986:	bf00      	nop
 8004988:	bf00      	nop
 800498a:	e7fd      	b.n	8004988 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800498c:	f002 fcac 	bl	80072e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004998:	68f9      	ldr	r1, [r7, #12]
 800499a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800499c:	fb01 f303 	mul.w	r3, r1, r3
 80049a0:	441a      	add	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049bc:	3b01      	subs	r3, #1
 80049be:	68f9      	ldr	r1, [r7, #12]
 80049c0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80049c2:	fb01 f303 	mul.w	r3, r1, r3
 80049c6:	441a      	add	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	22ff      	movs	r2, #255	@ 0xff
 80049d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	22ff      	movs	r2, #255	@ 0xff
 80049d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d114      	bne.n	8004a0c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d01a      	beq.n	8004a20 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3310      	adds	r3, #16
 80049ee:	4618      	mov	r0, r3
 80049f0:	f001 fc4c 	bl	800628c <xTaskRemoveFromEventList>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d012      	beq.n	8004a20 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004a30 <xQueueGenericReset+0xd0>)
 80049fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	e009      	b.n	8004a20 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	3310      	adds	r3, #16
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff fef1 	bl	80047f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	3324      	adds	r3, #36	@ 0x24
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7ff feec 	bl	80047f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a20:	f002 fc94 	bl	800734c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a24:	2301      	movs	r3, #1
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	e000ed04 	.word	0xe000ed04

08004a34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08e      	sub	sp, #56	@ 0x38
 8004a38:	af02      	add	r7, sp, #8
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10b      	bne.n	8004a60 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004a5a:	bf00      	nop
 8004a5c:	bf00      	nop
 8004a5e:	e7fd      	b.n	8004a5c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10b      	bne.n	8004a7e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a78:	bf00      	nop
 8004a7a:	bf00      	nop
 8004a7c:	e7fd      	b.n	8004a7a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <xQueueGenericCreateStatic+0x56>
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <xQueueGenericCreateStatic+0x5a>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e000      	b.n	8004a90 <xQueueGenericCreateStatic+0x5c>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10b      	bne.n	8004aac <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	623b      	str	r3, [r7, #32]
}
 8004aa6:	bf00      	nop
 8004aa8:	bf00      	nop
 8004aaa:	e7fd      	b.n	8004aa8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d102      	bne.n	8004ab8 <xQueueGenericCreateStatic+0x84>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <xQueueGenericCreateStatic+0x88>
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e000      	b.n	8004abe <xQueueGenericCreateStatic+0x8a>
 8004abc:	2300      	movs	r3, #0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10b      	bne.n	8004ada <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac6:	f383 8811 	msr	BASEPRI, r3
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	61fb      	str	r3, [r7, #28]
}
 8004ad4:	bf00      	nop
 8004ad6:	bf00      	nop
 8004ad8:	e7fd      	b.n	8004ad6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ada:	2350      	movs	r3, #80	@ 0x50
 8004adc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2b50      	cmp	r3, #80	@ 0x50
 8004ae2:	d00b      	beq.n	8004afc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	61bb      	str	r3, [r7, #24]
}
 8004af6:	bf00      	nop
 8004af8:	bf00      	nop
 8004afa:	e7fd      	b.n	8004af8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004afc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00d      	beq.n	8004b24 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b10:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 f840 	bl	8004ba4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3730      	adds	r7, #48	@ 0x30
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b08a      	sub	sp, #40	@ 0x28
 8004b32:	af02      	add	r7, sp, #8
 8004b34:	60f8      	str	r0, [r7, #12]
 8004b36:	60b9      	str	r1, [r7, #8]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10b      	bne.n	8004b5a <xQueueGenericCreate+0x2c>
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	613b      	str	r3, [r7, #16]
}
 8004b54:	bf00      	nop
 8004b56:	bf00      	nop
 8004b58:	e7fd      	b.n	8004b56 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	fb02 f303 	mul.w	r3, r2, r3
 8004b62:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	3350      	adds	r3, #80	@ 0x50
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f002 fcdf 	bl	800752c <pvPortMalloc>
 8004b6e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d011      	beq.n	8004b9a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	3350      	adds	r3, #80	@ 0x50
 8004b7e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b88:	79fa      	ldrb	r2, [r7, #7]
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	68b9      	ldr	r1, [r7, #8]
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 f805 	bl	8004ba4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b9a:	69bb      	ldr	r3, [r7, #24]
	}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3720      	adds	r7, #32
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
 8004bb0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d103      	bne.n	8004bc0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	e002      	b.n	8004bc6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	69b8      	ldr	r0, [r7, #24]
 8004bd6:	f7ff fec3 	bl	8004960 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	78fa      	ldrb	r2, [r7, #3]
 8004bde:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004be2:	bf00      	nop
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b08a      	sub	sp, #40	@ 0x28
 8004bee:	af02      	add	r7, sp, #8
 8004bf0:	60f8      	str	r0, [r7, #12]
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10b      	bne.n	8004c14 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8004bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	61bb      	str	r3, [r7, #24]
}
 8004c0e:	bf00      	nop
 8004c10:	bf00      	nop
 8004c12:	e7fd      	b.n	8004c10 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d90b      	bls.n	8004c34 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8004c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c20:	f383 8811 	msr	BASEPRI, r3
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	617b      	str	r3, [r7, #20]
}
 8004c2e:	bf00      	nop
 8004c30:	bf00      	nop
 8004c32:	e7fd      	b.n	8004c30 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004c34:	2302      	movs	r3, #2
 8004c36:	9300      	str	r3, [sp, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f7ff fef8 	bl	8004a34 <xQueueGenericCreateStatic>
 8004c44:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004c52:	69fb      	ldr	r3, [r7, #28]
	}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3720      	adds	r7, #32
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10b      	bne.n	8004c84 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8004c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c70:	f383 8811 	msr	BASEPRI, r3
 8004c74:	f3bf 8f6f 	isb	sy
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	613b      	str	r3, [r7, #16]
}
 8004c7e:	bf00      	nop
 8004c80:	bf00      	nop
 8004c82:	e7fd      	b.n	8004c80 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d90b      	bls.n	8004ca4 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8004c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c90:	f383 8811 	msr	BASEPRI, r3
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	60fb      	str	r3, [r7, #12]
}
 8004c9e:	bf00      	nop
 8004ca0:	bf00      	nop
 8004ca2:	e7fd      	b.n	8004ca0 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f7ff ff40 	bl	8004b2e <xQueueGenericCreate>
 8004cae:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d002      	beq.n	8004cbc <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004cbc:	697b      	ldr	r3, [r7, #20]
	}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08e      	sub	sp, #56	@ 0x38
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10b      	bne.n	8004cfc <xQueueGenericSend+0x34>
	__asm volatile
 8004ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004cf6:	bf00      	nop
 8004cf8:	bf00      	nop
 8004cfa:	e7fd      	b.n	8004cf8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d103      	bne.n	8004d0a <xQueueGenericSend+0x42>
 8004d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <xQueueGenericSend+0x46>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e000      	b.n	8004d10 <xQueueGenericSend+0x48>
 8004d0e:	2300      	movs	r3, #0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10b      	bne.n	8004d2c <xQueueGenericSend+0x64>
	__asm volatile
 8004d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004d26:	bf00      	nop
 8004d28:	bf00      	nop
 8004d2a:	e7fd      	b.n	8004d28 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d103      	bne.n	8004d3a <xQueueGenericSend+0x72>
 8004d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d101      	bne.n	8004d3e <xQueueGenericSend+0x76>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <xQueueGenericSend+0x78>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10b      	bne.n	8004d5c <xQueueGenericSend+0x94>
	__asm volatile
 8004d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d48:	f383 8811 	msr	BASEPRI, r3
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	623b      	str	r3, [r7, #32]
}
 8004d56:	bf00      	nop
 8004d58:	bf00      	nop
 8004d5a:	e7fd      	b.n	8004d58 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d5c:	f001 fc56 	bl	800660c <xTaskGetSchedulerState>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d102      	bne.n	8004d6c <xQueueGenericSend+0xa4>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <xQueueGenericSend+0xa8>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e000      	b.n	8004d72 <xQueueGenericSend+0xaa>
 8004d70:	2300      	movs	r3, #0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10b      	bne.n	8004d8e <xQueueGenericSend+0xc6>
	__asm volatile
 8004d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d7a:	f383 8811 	msr	BASEPRI, r3
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f3bf 8f4f 	dsb	sy
 8004d86:	61fb      	str	r3, [r7, #28]
}
 8004d88:	bf00      	nop
 8004d8a:	bf00      	nop
 8004d8c:	e7fd      	b.n	8004d8a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d8e:	f002 faab 	bl	80072e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d302      	bcc.n	8004da4 <xQueueGenericSend+0xdc>
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d129      	bne.n	8004df8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	68b9      	ldr	r1, [r7, #8]
 8004da8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004daa:	f000 fc6d 	bl	8005688 <prvCopyDataToQueue>
 8004dae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d010      	beq.n	8004dda <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dba:	3324      	adds	r3, #36	@ 0x24
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f001 fa65 	bl	800628c <xTaskRemoveFromEventList>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d013      	beq.n	8004df0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004dc8:	4b3f      	ldr	r3, [pc, #252]	@ (8004ec8 <xQueueGenericSend+0x200>)
 8004dca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	e00a      	b.n	8004df0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d007      	beq.n	8004df0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004de0:	4b39      	ldr	r3, [pc, #228]	@ (8004ec8 <xQueueGenericSend+0x200>)
 8004de2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004df0:	f002 faac 	bl	800734c <vPortExitCritical>
				return pdPASS;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e063      	b.n	8004ec0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d103      	bne.n	8004e06 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004dfe:	f002 faa5 	bl	800734c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004e02:	2300      	movs	r3, #0
 8004e04:	e05c      	b.n	8004ec0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d106      	bne.n	8004e1a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e0c:	f107 0314 	add.w	r3, r7, #20
 8004e10:	4618      	mov	r0, r3
 8004e12:	f001 fa9f 	bl	8006354 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e16:	2301      	movs	r3, #1
 8004e18:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e1a:	f002 fa97 	bl	800734c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e1e:	f001 f80f 	bl	8005e40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e22:	f002 fa61 	bl	80072e8 <vPortEnterCritical>
 8004e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e2c:	b25b      	sxtb	r3, r3
 8004e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e32:	d103      	bne.n	8004e3c <xQueueGenericSend+0x174>
 8004e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e42:	b25b      	sxtb	r3, r3
 8004e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e48:	d103      	bne.n	8004e52 <xQueueGenericSend+0x18a>
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e52:	f002 fa7b 	bl	800734c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e56:	1d3a      	adds	r2, r7, #4
 8004e58:	f107 0314 	add.w	r3, r7, #20
 8004e5c:	4611      	mov	r1, r2
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f001 fa8e 	bl	8006380 <xTaskCheckForTimeOut>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d124      	bne.n	8004eb4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e6c:	f000 fd04 	bl	8005878 <prvIsQueueFull>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d018      	beq.n	8004ea8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e78:	3310      	adds	r3, #16
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	4611      	mov	r1, r2
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f001 f9b2 	bl	80061e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e86:	f000 fc8f 	bl	80057a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e8a:	f000 ffe7 	bl	8005e5c <xTaskResumeAll>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f47f af7c 	bne.w	8004d8e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004e96:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec8 <xQueueGenericSend+0x200>)
 8004e98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	e772      	b.n	8004d8e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ea8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004eaa:	f000 fc7d 	bl	80057a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004eae:	f000 ffd5 	bl	8005e5c <xTaskResumeAll>
 8004eb2:	e76c      	b.n	8004d8e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004eb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004eb6:	f000 fc77 	bl	80057a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004eba:	f000 ffcf 	bl	8005e5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ebe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3738      	adds	r7, #56	@ 0x38
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	e000ed04 	.word	0xe000ed04

08004ecc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b090      	sub	sp, #64	@ 0x40
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10b      	bne.n	8004efc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ef6:	bf00      	nop
 8004ef8:	bf00      	nop
 8004efa:	e7fd      	b.n	8004ef8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d103      	bne.n	8004f0a <xQueueGenericSendFromISR+0x3e>
 8004f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <xQueueGenericSendFromISR+0x42>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e000      	b.n	8004f10 <xQueueGenericSendFromISR+0x44>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10b      	bne.n	8004f2c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f26:	bf00      	nop
 8004f28:	bf00      	nop
 8004f2a:	e7fd      	b.n	8004f28 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d103      	bne.n	8004f3a <xQueueGenericSendFromISR+0x6e>
 8004f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d101      	bne.n	8004f3e <xQueueGenericSendFromISR+0x72>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e000      	b.n	8004f40 <xQueueGenericSendFromISR+0x74>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10b      	bne.n	8004f5c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	623b      	str	r3, [r7, #32]
}
 8004f56:	bf00      	nop
 8004f58:	bf00      	nop
 8004f5a:	e7fd      	b.n	8004f58 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f5c:	f002 faa4 	bl	80074a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f60:	f3ef 8211 	mrs	r2, BASEPRI
 8004f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	61fa      	str	r2, [r7, #28]
 8004f76:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f78:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f7a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d302      	bcc.n	8004f8e <xQueueGenericSendFromISR+0xc2>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d12f      	bne.n	8004fee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	68b9      	ldr	r1, [r7, #8]
 8004fa2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004fa4:	f000 fb70 	bl	8005688 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004fa8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb0:	d112      	bne.n	8004fd8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d016      	beq.n	8004fe8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fbc:	3324      	adds	r3, #36	@ 0x24
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f001 f964 	bl	800628c <xTaskRemoveFromEventList>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00e      	beq.n	8004fe8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00b      	beq.n	8004fe8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	e007      	b.n	8004fe8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004fd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004fdc:	3301      	adds	r3, #1
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	b25a      	sxtb	r2, r3
 8004fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004fec:	e001      	b.n	8004ff2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ff4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ffc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005000:	4618      	mov	r0, r3
 8005002:	3740      	adds	r7, #64	@ 0x40
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b08e      	sub	sp, #56	@ 0x38
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10b      	bne.n	8005034 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800501c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	623b      	str	r3, [r7, #32]
}
 800502e:	bf00      	nop
 8005030:	bf00      	nop
 8005032:	e7fd      	b.n	8005030 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00b      	beq.n	8005054 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	61fb      	str	r3, [r7, #28]
}
 800504e:	bf00      	nop
 8005050:	bf00      	nop
 8005052:	e7fd      	b.n	8005050 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d103      	bne.n	8005064 <xQueueGiveFromISR+0x5c>
 800505c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <xQueueGiveFromISR+0x60>
 8005064:	2301      	movs	r3, #1
 8005066:	e000      	b.n	800506a <xQueueGiveFromISR+0x62>
 8005068:	2300      	movs	r3, #0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10b      	bne.n	8005086 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	61bb      	str	r3, [r7, #24]
}
 8005080:	bf00      	nop
 8005082:	bf00      	nop
 8005084:	e7fd      	b.n	8005082 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005086:	f002 fa0f 	bl	80074a8 <vPortValidateInterruptPriority>
	__asm volatile
 800508a:	f3ef 8211 	mrs	r2, BASEPRI
 800508e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	617a      	str	r2, [r7, #20]
 80050a0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80050a2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050aa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80050ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d22b      	bcs.n	800510e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80050b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80050c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80050cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d0:	d112      	bne.n	80050f8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d016      	beq.n	8005108 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050dc:	3324      	adds	r3, #36	@ 0x24
 80050de:	4618      	mov	r0, r3
 80050e0:	f001 f8d4 	bl	800628c <xTaskRemoveFromEventList>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00e      	beq.n	8005108 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00b      	beq.n	8005108 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2201      	movs	r2, #1
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	e007      	b.n	8005108 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80050f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80050fc:	3301      	adds	r3, #1
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	b25a      	sxtb	r2, r3
 8005102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005104:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005108:	2301      	movs	r3, #1
 800510a:	637b      	str	r3, [r7, #52]	@ 0x34
 800510c:	e001      	b.n	8005112 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800510e:	2300      	movs	r3, #0
 8005110:	637b      	str	r3, [r7, #52]	@ 0x34
 8005112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005114:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f383 8811 	msr	BASEPRI, r3
}
 800511c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800511e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005120:	4618      	mov	r0, r3
 8005122:	3738      	adds	r7, #56	@ 0x38
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08c      	sub	sp, #48	@ 0x30
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005134:	2300      	movs	r3, #0
 8005136:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800513c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10b      	bne.n	800515a <xQueueReceive+0x32>
	__asm volatile
 8005142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	623b      	str	r3, [r7, #32]
}
 8005154:	bf00      	nop
 8005156:	bf00      	nop
 8005158:	e7fd      	b.n	8005156 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d103      	bne.n	8005168 <xQueueReceive+0x40>
 8005160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <xQueueReceive+0x44>
 8005168:	2301      	movs	r3, #1
 800516a:	e000      	b.n	800516e <xQueueReceive+0x46>
 800516c:	2300      	movs	r3, #0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10b      	bne.n	800518a <xQueueReceive+0x62>
	__asm volatile
 8005172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005176:	f383 8811 	msr	BASEPRI, r3
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	61fb      	str	r3, [r7, #28]
}
 8005184:	bf00      	nop
 8005186:	bf00      	nop
 8005188:	e7fd      	b.n	8005186 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800518a:	f001 fa3f 	bl	800660c <xTaskGetSchedulerState>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d102      	bne.n	800519a <xQueueReceive+0x72>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <xQueueReceive+0x76>
 800519a:	2301      	movs	r3, #1
 800519c:	e000      	b.n	80051a0 <xQueueReceive+0x78>
 800519e:	2300      	movs	r3, #0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10b      	bne.n	80051bc <xQueueReceive+0x94>
	__asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	61bb      	str	r3, [r7, #24]
}
 80051b6:	bf00      	nop
 80051b8:	bf00      	nop
 80051ba:	e7fd      	b.n	80051b8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051bc:	f002 f894 	bl	80072e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d01f      	beq.n	800520c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80051cc:	68b9      	ldr	r1, [r7, #8]
 80051ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051d0:	f000 fac4 	bl	800575c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d6:	1e5a      	subs	r2, r3, #1
 80051d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051da:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00f      	beq.n	8005204 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e6:	3310      	adds	r3, #16
 80051e8:	4618      	mov	r0, r3
 80051ea:	f001 f84f 	bl	800628c <xTaskRemoveFromEventList>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d007      	beq.n	8005204 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80051f4:	4b3c      	ldr	r3, [pc, #240]	@ (80052e8 <xQueueReceive+0x1c0>)
 80051f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005204:	f002 f8a2 	bl	800734c <vPortExitCritical>
				return pdPASS;
 8005208:	2301      	movs	r3, #1
 800520a:	e069      	b.n	80052e0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d103      	bne.n	800521a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005212:	f002 f89b 	bl	800734c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005216:	2300      	movs	r3, #0
 8005218:	e062      	b.n	80052e0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800521a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800521c:	2b00      	cmp	r3, #0
 800521e:	d106      	bne.n	800522e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005220:	f107 0310 	add.w	r3, r7, #16
 8005224:	4618      	mov	r0, r3
 8005226:	f001 f895 	bl	8006354 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800522a:	2301      	movs	r3, #1
 800522c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800522e:	f002 f88d 	bl	800734c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005232:	f000 fe05 	bl	8005e40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005236:	f002 f857 	bl	80072e8 <vPortEnterCritical>
 800523a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005240:	b25b      	sxtb	r3, r3
 8005242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005246:	d103      	bne.n	8005250 <xQueueReceive+0x128>
 8005248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005252:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005256:	b25b      	sxtb	r3, r3
 8005258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525c:	d103      	bne.n	8005266 <xQueueReceive+0x13e>
 800525e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005266:	f002 f871 	bl	800734c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800526a:	1d3a      	adds	r2, r7, #4
 800526c:	f107 0310 	add.w	r3, r7, #16
 8005270:	4611      	mov	r1, r2
 8005272:	4618      	mov	r0, r3
 8005274:	f001 f884 	bl	8006380 <xTaskCheckForTimeOut>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d123      	bne.n	80052c6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800527e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005280:	f000 fae4 	bl	800584c <prvIsQueueEmpty>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d017      	beq.n	80052ba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800528a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528c:	3324      	adds	r3, #36	@ 0x24
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	4611      	mov	r1, r2
 8005292:	4618      	mov	r0, r3
 8005294:	f000 ffa8 	bl	80061e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005298:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800529a:	f000 fa85 	bl	80057a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800529e:	f000 fddd 	bl	8005e5c <xTaskResumeAll>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d189      	bne.n	80051bc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80052a8:	4b0f      	ldr	r3, [pc, #60]	@ (80052e8 <xQueueReceive+0x1c0>)
 80052aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	e780      	b.n	80051bc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80052ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052bc:	f000 fa74 	bl	80057a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052c0:	f000 fdcc 	bl	8005e5c <xTaskResumeAll>
 80052c4:	e77a      	b.n	80051bc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80052c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052c8:	f000 fa6e 	bl	80057a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052cc:	f000 fdc6 	bl	8005e5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052d2:	f000 fabb 	bl	800584c <prvIsQueueEmpty>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f43f af6f 	beq.w	80051bc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80052de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3730      	adds	r7, #48	@ 0x30
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	e000ed04 	.word	0xe000ed04

080052ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b08e      	sub	sp, #56	@ 0x38
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80052f6:	2300      	movs	r3, #0
 80052f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80052fe:	2300      	movs	r3, #0
 8005300:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10b      	bne.n	8005320 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800530c:	f383 8811 	msr	BASEPRI, r3
 8005310:	f3bf 8f6f 	isb	sy
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	623b      	str	r3, [r7, #32]
}
 800531a:	bf00      	nop
 800531c:	bf00      	nop
 800531e:	e7fd      	b.n	800531c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00b      	beq.n	8005340 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	61fb      	str	r3, [r7, #28]
}
 800533a:	bf00      	nop
 800533c:	bf00      	nop
 800533e:	e7fd      	b.n	800533c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005340:	f001 f964 	bl	800660c <xTaskGetSchedulerState>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d102      	bne.n	8005350 <xQueueSemaphoreTake+0x64>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <xQueueSemaphoreTake+0x68>
 8005350:	2301      	movs	r3, #1
 8005352:	e000      	b.n	8005356 <xQueueSemaphoreTake+0x6a>
 8005354:	2300      	movs	r3, #0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10b      	bne.n	8005372 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800535a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800535e:	f383 8811 	msr	BASEPRI, r3
 8005362:	f3bf 8f6f 	isb	sy
 8005366:	f3bf 8f4f 	dsb	sy
 800536a:	61bb      	str	r3, [r7, #24]
}
 800536c:	bf00      	nop
 800536e:	bf00      	nop
 8005370:	e7fd      	b.n	800536e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005372:	f001 ffb9 	bl	80072e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800537a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800537c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537e:	2b00      	cmp	r3, #0
 8005380:	d024      	beq.n	80053cc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005384:	1e5a      	subs	r2, r3, #1
 8005386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005388:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800538a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d104      	bne.n	800539c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005392:	f001 fab5 	bl	8006900 <pvTaskIncrementMutexHeldCount>
 8005396:	4602      	mov	r2, r0
 8005398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800539a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800539c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00f      	beq.n	80053c4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a6:	3310      	adds	r3, #16
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 ff6f 	bl	800628c <xTaskRemoveFromEventList>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d007      	beq.n	80053c4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80053b4:	4b54      	ldr	r3, [pc, #336]	@ (8005508 <xQueueSemaphoreTake+0x21c>)
 80053b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80053c4:	f001 ffc2 	bl	800734c <vPortExitCritical>
				return pdPASS;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e098      	b.n	80054fe <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d112      	bne.n	80053f8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80053d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00b      	beq.n	80053f0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80053d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	617b      	str	r3, [r7, #20]
}
 80053ea:	bf00      	nop
 80053ec:	bf00      	nop
 80053ee:	e7fd      	b.n	80053ec <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80053f0:	f001 ffac 	bl	800734c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80053f4:	2300      	movs	r3, #0
 80053f6:	e082      	b.n	80054fe <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053fe:	f107 030c 	add.w	r3, r7, #12
 8005402:	4618      	mov	r0, r3
 8005404:	f000 ffa6 	bl	8006354 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005408:	2301      	movs	r3, #1
 800540a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800540c:	f001 ff9e 	bl	800734c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005410:	f000 fd16 	bl	8005e40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005414:	f001 ff68 	bl	80072e8 <vPortEnterCritical>
 8005418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800541a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800541e:	b25b      	sxtb	r3, r3
 8005420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005424:	d103      	bne.n	800542e <xQueueSemaphoreTake+0x142>
 8005426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800542e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005430:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005434:	b25b      	sxtb	r3, r3
 8005436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543a:	d103      	bne.n	8005444 <xQueueSemaphoreTake+0x158>
 800543c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005444:	f001 ff82 	bl	800734c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005448:	463a      	mov	r2, r7
 800544a:	f107 030c 	add.w	r3, r7, #12
 800544e:	4611      	mov	r1, r2
 8005450:	4618      	mov	r0, r3
 8005452:	f000 ff95 	bl	8006380 <xTaskCheckForTimeOut>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d132      	bne.n	80054c2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800545c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800545e:	f000 f9f5 	bl	800584c <prvIsQueueEmpty>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d026      	beq.n	80054b6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d109      	bne.n	8005484 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005470:	f001 ff3a 	bl	80072e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	4618      	mov	r0, r3
 800547a:	f001 f8e5 	bl	8006648 <xTaskPriorityInherit>
 800547e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005480:	f001 ff64 	bl	800734c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005486:	3324      	adds	r3, #36	@ 0x24
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	4611      	mov	r1, r2
 800548c:	4618      	mov	r0, r3
 800548e:	f000 feab 	bl	80061e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005492:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005494:	f000 f988 	bl	80057a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005498:	f000 fce0 	bl	8005e5c <xTaskResumeAll>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f47f af67 	bne.w	8005372 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80054a4:	4b18      	ldr	r3, [pc, #96]	@ (8005508 <xQueueSemaphoreTake+0x21c>)
 80054a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	e75d      	b.n	8005372 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80054b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80054b8:	f000 f976 	bl	80057a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054bc:	f000 fcce 	bl	8005e5c <xTaskResumeAll>
 80054c0:	e757      	b.n	8005372 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80054c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80054c4:	f000 f970 	bl	80057a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054c8:	f000 fcc8 	bl	8005e5c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80054ce:	f000 f9bd 	bl	800584c <prvIsQueueEmpty>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f43f af4c 	beq.w	8005372 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80054da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00d      	beq.n	80054fc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80054e0:	f001 ff02 	bl	80072e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80054e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80054e6:	f000 f8b7 	bl	8005658 <prvGetDisinheritPriorityAfterTimeout>
 80054ea:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80054ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054f2:	4618      	mov	r0, r3
 80054f4:	f001 f980 	bl	80067f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80054f8:	f001 ff28 	bl	800734c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80054fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3738      	adds	r7, #56	@ 0x38
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	e000ed04 	.word	0xe000ed04

0800550c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b08e      	sub	sp, #56	@ 0x38
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800551c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10b      	bne.n	800553a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	623b      	str	r3, [r7, #32]
}
 8005534:	bf00      	nop
 8005536:	bf00      	nop
 8005538:	e7fd      	b.n	8005536 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d103      	bne.n	8005548 <xQueueReceiveFromISR+0x3c>
 8005540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <xQueueReceiveFromISR+0x40>
 8005548:	2301      	movs	r3, #1
 800554a:	e000      	b.n	800554e <xQueueReceiveFromISR+0x42>
 800554c:	2300      	movs	r3, #0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10b      	bne.n	800556a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	61fb      	str	r3, [r7, #28]
}
 8005564:	bf00      	nop
 8005566:	bf00      	nop
 8005568:	e7fd      	b.n	8005566 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800556a:	f001 ff9d 	bl	80074a8 <vPortValidateInterruptPriority>
	__asm volatile
 800556e:	f3ef 8211 	mrs	r2, BASEPRI
 8005572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	61ba      	str	r2, [r7, #24]
 8005584:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005586:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005588:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800558a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005592:	2b00      	cmp	r3, #0
 8005594:	d02f      	beq.n	80055f6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005598:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800559c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80055a0:	68b9      	ldr	r1, [r7, #8]
 80055a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055a4:	f000 f8da 	bl	800575c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80055a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055aa:	1e5a      	subs	r2, r3, #1
 80055ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ae:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80055b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80055b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b8:	d112      	bne.n	80055e0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d016      	beq.n	80055f0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c4:	3310      	adds	r3, #16
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fe60 	bl	800628c <xTaskRemoveFromEventList>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00e      	beq.n	80055f0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00b      	beq.n	80055f0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	e007      	b.n	80055f0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80055e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055e4:	3301      	adds	r3, #1
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	b25a      	sxtb	r2, r3
 80055ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80055f0:	2301      	movs	r3, #1
 80055f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80055f4:	e001      	b.n	80055fa <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80055f6:	2300      	movs	r3, #0
 80055f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80055fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f383 8811 	msr	BASEPRI, r3
}
 8005604:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005608:	4618      	mov	r0, r3
 800560a:	3738      	adds	r7, #56	@ 0x38
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10b      	bne.n	800563a <vQueueDelete+0x2a>
	__asm volatile
 8005622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	60bb      	str	r3, [r7, #8]
}
 8005634:	bf00      	nop
 8005636:	bf00      	nop
 8005638:	e7fd      	b.n	8005636 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 f95e 	bl	80058fc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005646:	2b00      	cmp	r3, #0
 8005648:	d102      	bne.n	8005650 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f002 f83c 	bl	80076c8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005650:	bf00      	nop
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005664:	2b00      	cmp	r3, #0
 8005666:	d006      	beq.n	8005676 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	e001      	b.n	800567a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005676:	2300      	movs	r3, #0
 8005678:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800567a:	68fb      	ldr	r3, [r7, #12]
	}
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005694:	2300      	movs	r3, #0
 8005696:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10d      	bne.n	80056c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d14d      	bne.n	800574a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f001 f830 	bl	8006718 <xTaskPriorityDisinherit>
 80056b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	609a      	str	r2, [r3, #8]
 80056c0:	e043      	b.n	800574a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d119      	bne.n	80056fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6858      	ldr	r0, [r3, #4]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d0:	461a      	mov	r2, r3
 80056d2:	68b9      	ldr	r1, [r7, #8]
 80056d4:	f00e f969 	bl	80139aa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e0:	441a      	add	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d32b      	bcc.n	800574a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	605a      	str	r2, [r3, #4]
 80056fa:	e026      	b.n	800574a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	68d8      	ldr	r0, [r3, #12]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005704:	461a      	mov	r2, r3
 8005706:	68b9      	ldr	r1, [r7, #8]
 8005708:	f00e f94f 	bl	80139aa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	68da      	ldr	r2, [r3, #12]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005714:	425b      	negs	r3, r3
 8005716:	441a      	add	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	68da      	ldr	r2, [r3, #12]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d207      	bcs.n	8005738 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	689a      	ldr	r2, [r3, #8]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005730:	425b      	negs	r3, r3
 8005732:	441a      	add	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b02      	cmp	r3, #2
 800573c:	d105      	bne.n	800574a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	3b01      	subs	r3, #1
 8005748:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1c5a      	adds	r2, r3, #1
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005752:	697b      	ldr	r3, [r7, #20]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3718      	adds	r7, #24
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	d018      	beq.n	80057a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005776:	441a      	add	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	429a      	cmp	r2, r3
 8005786:	d303      	bcc.n	8005790 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68d9      	ldr	r1, [r3, #12]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005798:	461a      	mov	r2, r3
 800579a:	6838      	ldr	r0, [r7, #0]
 800579c:	f00e f905 	bl	80139aa <memcpy>
	}
}
 80057a0:	bf00      	nop
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80057b0:	f001 fd9a 	bl	80072e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057bc:	e011      	b.n	80057e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d012      	beq.n	80057ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	3324      	adds	r3, #36	@ 0x24
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 fd5e 	bl	800628c <xTaskRemoveFromEventList>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d001      	beq.n	80057da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80057d6:	f000 fe37 	bl	8006448 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80057da:	7bfb      	ldrb	r3, [r7, #15]
 80057dc:	3b01      	subs	r3, #1
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	dce9      	bgt.n	80057be <prvUnlockQueue+0x16>
 80057ea:	e000      	b.n	80057ee <prvUnlockQueue+0x46>
					break;
 80057ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	22ff      	movs	r2, #255	@ 0xff
 80057f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80057f6:	f001 fda9 	bl	800734c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80057fa:	f001 fd75 	bl	80072e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005804:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005806:	e011      	b.n	800582c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d012      	beq.n	8005836 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	3310      	adds	r3, #16
 8005814:	4618      	mov	r0, r3
 8005816:	f000 fd39 	bl	800628c <xTaskRemoveFromEventList>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005820:	f000 fe12 	bl	8006448 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005824:	7bbb      	ldrb	r3, [r7, #14]
 8005826:	3b01      	subs	r3, #1
 8005828:	b2db      	uxtb	r3, r3
 800582a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800582c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005830:	2b00      	cmp	r3, #0
 8005832:	dce9      	bgt.n	8005808 <prvUnlockQueue+0x60>
 8005834:	e000      	b.n	8005838 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005836:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	22ff      	movs	r2, #255	@ 0xff
 800583c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005840:	f001 fd84 	bl	800734c <vPortExitCritical>
}
 8005844:	bf00      	nop
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005854:	f001 fd48 	bl	80072e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800585c:	2b00      	cmp	r3, #0
 800585e:	d102      	bne.n	8005866 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005860:	2301      	movs	r3, #1
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	e001      	b.n	800586a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005866:	2300      	movs	r3, #0
 8005868:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800586a:	f001 fd6f 	bl	800734c <vPortExitCritical>

	return xReturn;
 800586e:	68fb      	ldr	r3, [r7, #12]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005880:	f001 fd32 	bl	80072e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800588c:	429a      	cmp	r2, r3
 800588e:	d102      	bne.n	8005896 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005890:	2301      	movs	r3, #1
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	e001      	b.n	800589a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005896:	2300      	movs	r3, #0
 8005898:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800589a:	f001 fd57 	bl	800734c <vPortExitCritical>

	return xReturn;
 800589e:	68fb      	ldr	r3, [r7, #12]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058b2:	2300      	movs	r3, #0
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	e014      	b.n	80058e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80058b8:	4a0f      	ldr	r2, [pc, #60]	@ (80058f8 <vQueueAddToRegistry+0x50>)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10b      	bne.n	80058dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80058c4:	490c      	ldr	r1, [pc, #48]	@ (80058f8 <vQueueAddToRegistry+0x50>)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80058ce:	4a0a      	ldr	r2, [pc, #40]	@ (80058f8 <vQueueAddToRegistry+0x50>)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	4413      	add	r3, r2
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80058da:	e006      	b.n	80058ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	3301      	adds	r3, #1
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2b07      	cmp	r3, #7
 80058e6:	d9e7      	bls.n	80058b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80058e8:	bf00      	nop
 80058ea:	bf00      	nop
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	20000d0c 	.word	0x20000d0c

080058fc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005904:	2300      	movs	r3, #0
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	e016      	b.n	8005938 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800590a:	4a10      	ldr	r2, [pc, #64]	@ (800594c <vQueueUnregisterQueue+0x50>)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	4413      	add	r3, r2
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	429a      	cmp	r2, r3
 8005918:	d10b      	bne.n	8005932 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800591a:	4a0c      	ldr	r2, [pc, #48]	@ (800594c <vQueueUnregisterQueue+0x50>)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2100      	movs	r1, #0
 8005920:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005924:	4a09      	ldr	r2, [pc, #36]	@ (800594c <vQueueUnregisterQueue+0x50>)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	4413      	add	r3, r2
 800592c:	2200      	movs	r2, #0
 800592e:	605a      	str	r2, [r3, #4]
				break;
 8005930:	e006      	b.n	8005940 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3301      	adds	r3, #1
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2b07      	cmp	r3, #7
 800593c:	d9e5      	bls.n	800590a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800593e:	bf00      	nop
 8005940:	bf00      	nop
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	20000d0c 	.word	0x20000d0c

08005950 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005960:	f001 fcc2 	bl	80072e8 <vPortEnterCritical>
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800596a:	b25b      	sxtb	r3, r3
 800596c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005970:	d103      	bne.n	800597a <vQueueWaitForMessageRestricted+0x2a>
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005980:	b25b      	sxtb	r3, r3
 8005982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005986:	d103      	bne.n	8005990 <vQueueWaitForMessageRestricted+0x40>
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005990:	f001 fcdc 	bl	800734c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005998:	2b00      	cmp	r3, #0
 800599a:	d106      	bne.n	80059aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	3324      	adds	r3, #36	@ 0x24
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	68b9      	ldr	r1, [r7, #8]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 fc45 	bl	8006234 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80059aa:	6978      	ldr	r0, [r7, #20]
 80059ac:	f7ff fefc 	bl	80057a8 <prvUnlockQueue>
	}
 80059b0:	bf00      	nop
 80059b2:	3718      	adds	r7, #24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08e      	sub	sp, #56	@ 0x38
 80059bc:	af04      	add	r7, sp, #16
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
 80059c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80059c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10b      	bne.n	80059e4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80059cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d0:	f383 8811 	msr	BASEPRI, r3
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	623b      	str	r3, [r7, #32]
}
 80059de:	bf00      	nop
 80059e0:	bf00      	nop
 80059e2:	e7fd      	b.n	80059e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80059e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10b      	bne.n	8005a02 <xTaskCreateStatic+0x4a>
	__asm volatile
 80059ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	61fb      	str	r3, [r7, #28]
}
 80059fc:	bf00      	nop
 80059fe:	bf00      	nop
 8005a00:	e7fd      	b.n	80059fe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a02:	235c      	movs	r3, #92	@ 0x5c
 8005a04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	2b5c      	cmp	r3, #92	@ 0x5c
 8005a0a:	d00b      	beq.n	8005a24 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	61bb      	str	r3, [r7, #24]
}
 8005a1e:	bf00      	nop
 8005a20:	bf00      	nop
 8005a22:	e7fd      	b.n	8005a20 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005a24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d01e      	beq.n	8005a6a <xTaskCreateStatic+0xb2>
 8005a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d01b      	beq.n	8005a6a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a34:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a3a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a44:	2300      	movs	r3, #0
 8005a46:	9303      	str	r3, [sp, #12]
 8005a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4a:	9302      	str	r3, [sp, #8]
 8005a4c:	f107 0314 	add.w	r3, r7, #20
 8005a50:	9301      	str	r3, [sp, #4]
 8005a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	68b9      	ldr	r1, [r7, #8]
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 f850 	bl	8005b02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005a64:	f000 f8de 	bl	8005c24 <prvAddNewTaskToReadyList>
 8005a68:	e001      	b.n	8005a6e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a6e:	697b      	ldr	r3, [r7, #20]
	}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3728      	adds	r7, #40	@ 0x28
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08c      	sub	sp, #48	@ 0x30
 8005a7c:	af04      	add	r7, sp, #16
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	603b      	str	r3, [r7, #0]
 8005a84:	4613      	mov	r3, r2
 8005a86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a88:	88fb      	ldrh	r3, [r7, #6]
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f001 fd4d 	bl	800752c <pvPortMalloc>
 8005a92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00e      	beq.n	8005ab8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a9a:	205c      	movs	r0, #92	@ 0x5c
 8005a9c:	f001 fd46 	bl	800752c <pvPortMalloc>
 8005aa0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	631a      	str	r2, [r3, #48]	@ 0x30
 8005aae:	e005      	b.n	8005abc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ab0:	6978      	ldr	r0, [r7, #20]
 8005ab2:	f001 fe09 	bl	80076c8 <vPortFree>
 8005ab6:	e001      	b.n	8005abc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d017      	beq.n	8005af2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005aca:	88fa      	ldrh	r2, [r7, #6]
 8005acc:	2300      	movs	r3, #0
 8005ace:	9303      	str	r3, [sp, #12]
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	9302      	str	r3, [sp, #8]
 8005ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad6:	9301      	str	r3, [sp, #4]
 8005ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	68b9      	ldr	r1, [r7, #8]
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 f80e 	bl	8005b02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ae6:	69f8      	ldr	r0, [r7, #28]
 8005ae8:	f000 f89c 	bl	8005c24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005aec:	2301      	movs	r3, #1
 8005aee:	61bb      	str	r3, [r7, #24]
 8005af0:	e002      	b.n	8005af8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005af2:	f04f 33ff 	mov.w	r3, #4294967295
 8005af6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005af8:	69bb      	ldr	r3, [r7, #24]
	}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3720      	adds	r7, #32
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b088      	sub	sp, #32
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	60f8      	str	r0, [r7, #12]
 8005b0a:	60b9      	str	r1, [r7, #8]
 8005b0c:	607a      	str	r2, [r7, #4]
 8005b0e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b12:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	461a      	mov	r2, r3
 8005b1a:	21a5      	movs	r1, #165	@ 0xa5
 8005b1c:	f00d fe75 	bl	801380a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	f023 0307 	bic.w	r3, r3, #7
 8005b38:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	f003 0307 	and.w	r3, r3, #7
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00b      	beq.n	8005b5c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	617b      	str	r3, [r7, #20]
}
 8005b56:	bf00      	nop
 8005b58:	bf00      	nop
 8005b5a:	e7fd      	b.n	8005b58 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d01f      	beq.n	8005ba2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b62:	2300      	movs	r3, #0
 8005b64:	61fb      	str	r3, [r7, #28]
 8005b66:	e012      	b.n	8005b8e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	7819      	ldrb	r1, [r3, #0]
 8005b70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	4413      	add	r3, r2
 8005b76:	3334      	adds	r3, #52	@ 0x34
 8005b78:	460a      	mov	r2, r1
 8005b7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	4413      	add	r3, r2
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d006      	beq.n	8005b96 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	61fb      	str	r3, [r7, #28]
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	2b0f      	cmp	r3, #15
 8005b92:	d9e9      	bls.n	8005b68 <prvInitialiseNewTask+0x66>
 8005b94:	e000      	b.n	8005b98 <prvInitialiseNewTask+0x96>
			{
				break;
 8005b96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ba0:	e003      	b.n	8005baa <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bac:	2b37      	cmp	r3, #55	@ 0x37
 8005bae:	d901      	bls.n	8005bb4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005bb0:	2337      	movs	r3, #55	@ 0x37
 8005bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bb8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bbe:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc8:	3304      	adds	r3, #4
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fe fe34 	bl	8004838 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd2:	3318      	adds	r3, #24
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fe fe2f 	bl	8004838 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bee:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	68f9      	ldr	r1, [r7, #12]
 8005c02:	69b8      	ldr	r0, [r7, #24]
 8005c04:	f001 fa3e 	bl	8007084 <pxPortInitialiseStack>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c0c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c1a:	bf00      	nop
 8005c1c:	3720      	adds	r7, #32
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
	...

08005c24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c2c:	f001 fb5c 	bl	80072e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c30:	4b2d      	ldr	r3, [pc, #180]	@ (8005ce8 <prvAddNewTaskToReadyList+0xc4>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3301      	adds	r3, #1
 8005c36:	4a2c      	ldr	r2, [pc, #176]	@ (8005ce8 <prvAddNewTaskToReadyList+0xc4>)
 8005c38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8005cec <prvAddNewTaskToReadyList+0xc8>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d109      	bne.n	8005c56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c42:	4a2a      	ldr	r2, [pc, #168]	@ (8005cec <prvAddNewTaskToReadyList+0xc8>)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c48:	4b27      	ldr	r3, [pc, #156]	@ (8005ce8 <prvAddNewTaskToReadyList+0xc4>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d110      	bne.n	8005c72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c50:	f000 fc1e 	bl	8006490 <prvInitialiseTaskLists>
 8005c54:	e00d      	b.n	8005c72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c56:	4b26      	ldr	r3, [pc, #152]	@ (8005cf0 <prvAddNewTaskToReadyList+0xcc>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d109      	bne.n	8005c72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c5e:	4b23      	ldr	r3, [pc, #140]	@ (8005cec <prvAddNewTaskToReadyList+0xc8>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d802      	bhi.n	8005c72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c6c:	4a1f      	ldr	r2, [pc, #124]	@ (8005cec <prvAddNewTaskToReadyList+0xc8>)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c72:	4b20      	ldr	r3, [pc, #128]	@ (8005cf4 <prvAddNewTaskToReadyList+0xd0>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3301      	adds	r3, #1
 8005c78:	4a1e      	ldr	r2, [pc, #120]	@ (8005cf4 <prvAddNewTaskToReadyList+0xd0>)
 8005c7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8005cf4 <prvAddNewTaskToReadyList+0xd0>)
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c88:	4b1b      	ldr	r3, [pc, #108]	@ (8005cf8 <prvAddNewTaskToReadyList+0xd4>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d903      	bls.n	8005c98 <prvAddNewTaskToReadyList+0x74>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c94:	4a18      	ldr	r2, [pc, #96]	@ (8005cf8 <prvAddNewTaskToReadyList+0xd4>)
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4a15      	ldr	r2, [pc, #84]	@ (8005cfc <prvAddNewTaskToReadyList+0xd8>)
 8005ca6:	441a      	add	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3304      	adds	r3, #4
 8005cac:	4619      	mov	r1, r3
 8005cae:	4610      	mov	r0, r2
 8005cb0:	f7fe fdcf 	bl	8004852 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005cb4:	f001 fb4a 	bl	800734c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf0 <prvAddNewTaskToReadyList+0xcc>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00e      	beq.n	8005cde <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8005cec <prvAddNewTaskToReadyList+0xc8>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d207      	bcs.n	8005cde <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005cce:	4b0c      	ldr	r3, [pc, #48]	@ (8005d00 <prvAddNewTaskToReadyList+0xdc>)
 8005cd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cde:	bf00      	nop
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20001220 	.word	0x20001220
 8005cec:	20000d4c 	.word	0x20000d4c
 8005cf0:	2000122c 	.word	0x2000122c
 8005cf4:	2000123c 	.word	0x2000123c
 8005cf8:	20001228 	.word	0x20001228
 8005cfc:	20000d50 	.word	0x20000d50
 8005d00:	e000ed04 	.word	0xe000ed04

08005d04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d018      	beq.n	8005d48 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d16:	4b14      	ldr	r3, [pc, #80]	@ (8005d68 <vTaskDelay+0x64>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00b      	beq.n	8005d36 <vTaskDelay+0x32>
	__asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	60bb      	str	r3, [r7, #8]
}
 8005d30:	bf00      	nop
 8005d32:	bf00      	nop
 8005d34:	e7fd      	b.n	8005d32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d36:	f000 f883 	bl	8005e40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fdf3 	bl	8006928 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d42:	f000 f88b 	bl	8005e5c <xTaskResumeAll>
 8005d46:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d107      	bne.n	8005d5e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005d4e:	4b07      	ldr	r3, [pc, #28]	@ (8005d6c <vTaskDelay+0x68>)
 8005d50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d5e:	bf00      	nop
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	20001248 	.word	0x20001248
 8005d6c:	e000ed04 	.word	0xe000ed04

08005d70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b08a      	sub	sp, #40	@ 0x28
 8005d74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d76:	2300      	movs	r3, #0
 8005d78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d7e:	463a      	mov	r2, r7
 8005d80:	1d39      	adds	r1, r7, #4
 8005d82:	f107 0308 	add.w	r3, r7, #8
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fe fd02 	bl	8004790 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	9202      	str	r2, [sp, #8]
 8005d94:	9301      	str	r3, [sp, #4]
 8005d96:	2300      	movs	r3, #0
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	460a      	mov	r2, r1
 8005d9e:	4922      	ldr	r1, [pc, #136]	@ (8005e28 <vTaskStartScheduler+0xb8>)
 8005da0:	4822      	ldr	r0, [pc, #136]	@ (8005e2c <vTaskStartScheduler+0xbc>)
 8005da2:	f7ff fe09 	bl	80059b8 <xTaskCreateStatic>
 8005da6:	4603      	mov	r3, r0
 8005da8:	4a21      	ldr	r2, [pc, #132]	@ (8005e30 <vTaskStartScheduler+0xc0>)
 8005daa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005dac:	4b20      	ldr	r3, [pc, #128]	@ (8005e30 <vTaskStartScheduler+0xc0>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d002      	beq.n	8005dba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005db4:	2301      	movs	r3, #1
 8005db6:	617b      	str	r3, [r7, #20]
 8005db8:	e001      	b.n	8005dbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d102      	bne.n	8005dca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005dc4:	f000 fe04 	bl	80069d0 <xTimerCreateTimerTask>
 8005dc8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d116      	bne.n	8005dfe <vTaskStartScheduler+0x8e>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	613b      	str	r3, [r7, #16]
}
 8005de2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005de4:	4b13      	ldr	r3, [pc, #76]	@ (8005e34 <vTaskStartScheduler+0xc4>)
 8005de6:	f04f 32ff 	mov.w	r2, #4294967295
 8005dea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005dec:	4b12      	ldr	r3, [pc, #72]	@ (8005e38 <vTaskStartScheduler+0xc8>)
 8005dee:	2201      	movs	r2, #1
 8005df0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005df2:	4b12      	ldr	r3, [pc, #72]	@ (8005e3c <vTaskStartScheduler+0xcc>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005df8:	f001 f9d2 	bl	80071a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005dfc:	e00f      	b.n	8005e1e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e04:	d10b      	bne.n	8005e1e <vTaskStartScheduler+0xae>
	__asm volatile
 8005e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	60fb      	str	r3, [r7, #12]
}
 8005e18:	bf00      	nop
 8005e1a:	bf00      	nop
 8005e1c:	e7fd      	b.n	8005e1a <vTaskStartScheduler+0xaa>
}
 8005e1e:	bf00      	nop
 8005e20:	3718      	adds	r7, #24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	08014468 	.word	0x08014468
 8005e2c:	08006461 	.word	0x08006461
 8005e30:	20001244 	.word	0x20001244
 8005e34:	20001240 	.word	0x20001240
 8005e38:	2000122c 	.word	0x2000122c
 8005e3c:	20001224 	.word	0x20001224

08005e40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e40:	b480      	push	{r7}
 8005e42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005e44:	4b04      	ldr	r3, [pc, #16]	@ (8005e58 <vTaskSuspendAll+0x18>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	4a03      	ldr	r2, [pc, #12]	@ (8005e58 <vTaskSuspendAll+0x18>)
 8005e4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005e4e:	bf00      	nop
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	20001248 	.word	0x20001248

08005e5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e66:	2300      	movs	r3, #0
 8005e68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e6a:	4b42      	ldr	r3, [pc, #264]	@ (8005f74 <xTaskResumeAll+0x118>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10b      	bne.n	8005e8a <xTaskResumeAll+0x2e>
	__asm volatile
 8005e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	603b      	str	r3, [r7, #0]
}
 8005e84:	bf00      	nop
 8005e86:	bf00      	nop
 8005e88:	e7fd      	b.n	8005e86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e8a:	f001 fa2d 	bl	80072e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e8e:	4b39      	ldr	r3, [pc, #228]	@ (8005f74 <xTaskResumeAll+0x118>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	3b01      	subs	r3, #1
 8005e94:	4a37      	ldr	r2, [pc, #220]	@ (8005f74 <xTaskResumeAll+0x118>)
 8005e96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e98:	4b36      	ldr	r3, [pc, #216]	@ (8005f74 <xTaskResumeAll+0x118>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d162      	bne.n	8005f66 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ea0:	4b35      	ldr	r3, [pc, #212]	@ (8005f78 <xTaskResumeAll+0x11c>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d05e      	beq.n	8005f66 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ea8:	e02f      	b.n	8005f0a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eaa:	4b34      	ldr	r3, [pc, #208]	@ (8005f7c <xTaskResumeAll+0x120>)
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	3318      	adds	r3, #24
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fe fd28 	bl	800490c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7fe fd23 	bl	800490c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eca:	4b2d      	ldr	r3, [pc, #180]	@ (8005f80 <xTaskResumeAll+0x124>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d903      	bls.n	8005eda <xTaskResumeAll+0x7e>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed6:	4a2a      	ldr	r2, [pc, #168]	@ (8005f80 <xTaskResumeAll+0x124>)
 8005ed8:	6013      	str	r3, [r2, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ede:	4613      	mov	r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4413      	add	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4a27      	ldr	r2, [pc, #156]	@ (8005f84 <xTaskResumeAll+0x128>)
 8005ee8:	441a      	add	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	3304      	adds	r3, #4
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	f7fe fcae 	bl	8004852 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005efa:	4b23      	ldr	r3, [pc, #140]	@ (8005f88 <xTaskResumeAll+0x12c>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d302      	bcc.n	8005f0a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005f04:	4b21      	ldr	r3, [pc, #132]	@ (8005f8c <xTaskResumeAll+0x130>)
 8005f06:	2201      	movs	r2, #1
 8005f08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8005f7c <xTaskResumeAll+0x120>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1cb      	bne.n	8005eaa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d001      	beq.n	8005f1c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f18:	f000 fb58 	bl	80065cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8005f90 <xTaskResumeAll+0x134>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d010      	beq.n	8005f4a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f28:	f000 f846 	bl	8005fb8 <xTaskIncrementTick>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005f32:	4b16      	ldr	r3, [pc, #88]	@ (8005f8c <xTaskResumeAll+0x130>)
 8005f34:	2201      	movs	r2, #1
 8005f36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1f1      	bne.n	8005f28 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005f44:	4b12      	ldr	r3, [pc, #72]	@ (8005f90 <xTaskResumeAll+0x134>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f4a:	4b10      	ldr	r3, [pc, #64]	@ (8005f8c <xTaskResumeAll+0x130>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d009      	beq.n	8005f66 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f52:	2301      	movs	r3, #1
 8005f54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f56:	4b0f      	ldr	r3, [pc, #60]	@ (8005f94 <xTaskResumeAll+0x138>)
 8005f58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f5c:	601a      	str	r2, [r3, #0]
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f66:	f001 f9f1 	bl	800734c <vPortExitCritical>

	return xAlreadyYielded;
 8005f6a:	68bb      	ldr	r3, [r7, #8]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	20001248 	.word	0x20001248
 8005f78:	20001220 	.word	0x20001220
 8005f7c:	200011e0 	.word	0x200011e0
 8005f80:	20001228 	.word	0x20001228
 8005f84:	20000d50 	.word	0x20000d50
 8005f88:	20000d4c 	.word	0x20000d4c
 8005f8c:	20001234 	.word	0x20001234
 8005f90:	20001230 	.word	0x20001230
 8005f94:	e000ed04 	.word	0xe000ed04

08005f98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005f9e:	4b05      	ldr	r3, [pc, #20]	@ (8005fb4 <xTaskGetTickCount+0x1c>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005fa4:	687b      	ldr	r3, [r7, #4]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	20001224 	.word	0x20001224

08005fb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fc2:	4b4f      	ldr	r3, [pc, #316]	@ (8006100 <xTaskIncrementTick+0x148>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f040 8090 	bne.w	80060ec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005fcc:	4b4d      	ldr	r3, [pc, #308]	@ (8006104 <xTaskIncrementTick+0x14c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005fd4:	4a4b      	ldr	r2, [pc, #300]	@ (8006104 <xTaskIncrementTick+0x14c>)
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d121      	bne.n	8006024 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005fe0:	4b49      	ldr	r3, [pc, #292]	@ (8006108 <xTaskIncrementTick+0x150>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00b      	beq.n	8006002 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	603b      	str	r3, [r7, #0]
}
 8005ffc:	bf00      	nop
 8005ffe:	bf00      	nop
 8006000:	e7fd      	b.n	8005ffe <xTaskIncrementTick+0x46>
 8006002:	4b41      	ldr	r3, [pc, #260]	@ (8006108 <xTaskIncrementTick+0x150>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	60fb      	str	r3, [r7, #12]
 8006008:	4b40      	ldr	r3, [pc, #256]	@ (800610c <xTaskIncrementTick+0x154>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a3e      	ldr	r2, [pc, #248]	@ (8006108 <xTaskIncrementTick+0x150>)
 800600e:	6013      	str	r3, [r2, #0]
 8006010:	4a3e      	ldr	r2, [pc, #248]	@ (800610c <xTaskIncrementTick+0x154>)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6013      	str	r3, [r2, #0]
 8006016:	4b3e      	ldr	r3, [pc, #248]	@ (8006110 <xTaskIncrementTick+0x158>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3301      	adds	r3, #1
 800601c:	4a3c      	ldr	r2, [pc, #240]	@ (8006110 <xTaskIncrementTick+0x158>)
 800601e:	6013      	str	r3, [r2, #0]
 8006020:	f000 fad4 	bl	80065cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006024:	4b3b      	ldr	r3, [pc, #236]	@ (8006114 <xTaskIncrementTick+0x15c>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	429a      	cmp	r2, r3
 800602c:	d349      	bcc.n	80060c2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800602e:	4b36      	ldr	r3, [pc, #216]	@ (8006108 <xTaskIncrementTick+0x150>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d104      	bne.n	8006042 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006038:	4b36      	ldr	r3, [pc, #216]	@ (8006114 <xTaskIncrementTick+0x15c>)
 800603a:	f04f 32ff 	mov.w	r2, #4294967295
 800603e:	601a      	str	r2, [r3, #0]
					break;
 8006040:	e03f      	b.n	80060c2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006042:	4b31      	ldr	r3, [pc, #196]	@ (8006108 <xTaskIncrementTick+0x150>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	429a      	cmp	r2, r3
 8006058:	d203      	bcs.n	8006062 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800605a:	4a2e      	ldr	r2, [pc, #184]	@ (8006114 <xTaskIncrementTick+0x15c>)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006060:	e02f      	b.n	80060c2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	3304      	adds	r3, #4
 8006066:	4618      	mov	r0, r3
 8006068:	f7fe fc50 	bl	800490c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006070:	2b00      	cmp	r3, #0
 8006072:	d004      	beq.n	800607e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	3318      	adds	r3, #24
 8006078:	4618      	mov	r0, r3
 800607a:	f7fe fc47 	bl	800490c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006082:	4b25      	ldr	r3, [pc, #148]	@ (8006118 <xTaskIncrementTick+0x160>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	429a      	cmp	r2, r3
 8006088:	d903      	bls.n	8006092 <xTaskIncrementTick+0xda>
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800608e:	4a22      	ldr	r2, [pc, #136]	@ (8006118 <xTaskIncrementTick+0x160>)
 8006090:	6013      	str	r3, [r2, #0]
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006096:	4613      	mov	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4a1f      	ldr	r2, [pc, #124]	@ (800611c <xTaskIncrementTick+0x164>)
 80060a0:	441a      	add	r2, r3
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	3304      	adds	r3, #4
 80060a6:	4619      	mov	r1, r3
 80060a8:	4610      	mov	r0, r2
 80060aa:	f7fe fbd2 	bl	8004852 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006120 <xTaskIncrementTick+0x168>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d3b8      	bcc.n	800602e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80060bc:	2301      	movs	r3, #1
 80060be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060c0:	e7b5      	b.n	800602e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060c2:	4b17      	ldr	r3, [pc, #92]	@ (8006120 <xTaskIncrementTick+0x168>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060c8:	4914      	ldr	r1, [pc, #80]	@ (800611c <xTaskIncrementTick+0x164>)
 80060ca:	4613      	mov	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	440b      	add	r3, r1
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d901      	bls.n	80060de <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80060da:	2301      	movs	r3, #1
 80060dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80060de:	4b11      	ldr	r3, [pc, #68]	@ (8006124 <xTaskIncrementTick+0x16c>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d007      	beq.n	80060f6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80060e6:	2301      	movs	r3, #1
 80060e8:	617b      	str	r3, [r7, #20]
 80060ea:	e004      	b.n	80060f6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80060ec:	4b0e      	ldr	r3, [pc, #56]	@ (8006128 <xTaskIncrementTick+0x170>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3301      	adds	r3, #1
 80060f2:	4a0d      	ldr	r2, [pc, #52]	@ (8006128 <xTaskIncrementTick+0x170>)
 80060f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80060f6:	697b      	ldr	r3, [r7, #20]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3718      	adds	r7, #24
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	20001248 	.word	0x20001248
 8006104:	20001224 	.word	0x20001224
 8006108:	200011d8 	.word	0x200011d8
 800610c:	200011dc 	.word	0x200011dc
 8006110:	20001238 	.word	0x20001238
 8006114:	20001240 	.word	0x20001240
 8006118:	20001228 	.word	0x20001228
 800611c:	20000d50 	.word	0x20000d50
 8006120:	20000d4c 	.word	0x20000d4c
 8006124:	20001234 	.word	0x20001234
 8006128:	20001230 	.word	0x20001230

0800612c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006132:	4b28      	ldr	r3, [pc, #160]	@ (80061d4 <vTaskSwitchContext+0xa8>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800613a:	4b27      	ldr	r3, [pc, #156]	@ (80061d8 <vTaskSwitchContext+0xac>)
 800613c:	2201      	movs	r2, #1
 800613e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006140:	e042      	b.n	80061c8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006142:	4b25      	ldr	r3, [pc, #148]	@ (80061d8 <vTaskSwitchContext+0xac>)
 8006144:	2200      	movs	r2, #0
 8006146:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006148:	4b24      	ldr	r3, [pc, #144]	@ (80061dc <vTaskSwitchContext+0xb0>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	60fb      	str	r3, [r7, #12]
 800614e:	e011      	b.n	8006174 <vTaskSwitchContext+0x48>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10b      	bne.n	800616e <vTaskSwitchContext+0x42>
	__asm volatile
 8006156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	607b      	str	r3, [r7, #4]
}
 8006168:	bf00      	nop
 800616a:	bf00      	nop
 800616c:	e7fd      	b.n	800616a <vTaskSwitchContext+0x3e>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	3b01      	subs	r3, #1
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	491a      	ldr	r1, [pc, #104]	@ (80061e0 <vTaskSwitchContext+0xb4>)
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	4613      	mov	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	440b      	add	r3, r1
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0e3      	beq.n	8006150 <vTaskSwitchContext+0x24>
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	4613      	mov	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4a13      	ldr	r2, [pc, #76]	@ (80061e0 <vTaskSwitchContext+0xb4>)
 8006194:	4413      	add	r3, r2
 8006196:	60bb      	str	r3, [r7, #8]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	605a      	str	r2, [r3, #4]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	3308      	adds	r3, #8
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d104      	bne.n	80061b8 <vTaskSwitchContext+0x8c>
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	605a      	str	r2, [r3, #4]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	4a09      	ldr	r2, [pc, #36]	@ (80061e4 <vTaskSwitchContext+0xb8>)
 80061c0:	6013      	str	r3, [r2, #0]
 80061c2:	4a06      	ldr	r2, [pc, #24]	@ (80061dc <vTaskSwitchContext+0xb0>)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6013      	str	r3, [r2, #0]
}
 80061c8:	bf00      	nop
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	20001248 	.word	0x20001248
 80061d8:	20001234 	.word	0x20001234
 80061dc:	20001228 	.word	0x20001228
 80061e0:	20000d50 	.word	0x20000d50
 80061e4:	20000d4c 	.word	0x20000d4c

080061e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10b      	bne.n	8006210 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80061f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	60fb      	str	r3, [r7, #12]
}
 800620a:	bf00      	nop
 800620c:	bf00      	nop
 800620e:	e7fd      	b.n	800620c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006210:	4b07      	ldr	r3, [pc, #28]	@ (8006230 <vTaskPlaceOnEventList+0x48>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3318      	adds	r3, #24
 8006216:	4619      	mov	r1, r3
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7fe fb3e 	bl	800489a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800621e:	2101      	movs	r1, #1
 8006220:	6838      	ldr	r0, [r7, #0]
 8006222:	f000 fb81 	bl	8006928 <prvAddCurrentTaskToDelayedList>
}
 8006226:	bf00      	nop
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	20000d4c 	.word	0x20000d4c

08006234 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10b      	bne.n	800625e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	617b      	str	r3, [r7, #20]
}
 8006258:	bf00      	nop
 800625a:	bf00      	nop
 800625c:	e7fd      	b.n	800625a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800625e:	4b0a      	ldr	r3, [pc, #40]	@ (8006288 <vTaskPlaceOnEventListRestricted+0x54>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3318      	adds	r3, #24
 8006264:	4619      	mov	r1, r3
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f7fe faf3 	bl	8004852 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006272:	f04f 33ff 	mov.w	r3, #4294967295
 8006276:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006278:	6879      	ldr	r1, [r7, #4]
 800627a:	68b8      	ldr	r0, [r7, #8]
 800627c:	f000 fb54 	bl	8006928 <prvAddCurrentTaskToDelayedList>
	}
 8006280:	bf00      	nop
 8006282:	3718      	adds	r7, #24
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	20000d4c 	.word	0x20000d4c

0800628c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10b      	bne.n	80062ba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	60fb      	str	r3, [r7, #12]
}
 80062b4:	bf00      	nop
 80062b6:	bf00      	nop
 80062b8:	e7fd      	b.n	80062b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	3318      	adds	r3, #24
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fe fb24 	bl	800490c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062c4:	4b1d      	ldr	r3, [pc, #116]	@ (800633c <xTaskRemoveFromEventList+0xb0>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d11d      	bne.n	8006308 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	3304      	adds	r3, #4
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7fe fb1b 	bl	800490c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062da:	4b19      	ldr	r3, [pc, #100]	@ (8006340 <xTaskRemoveFromEventList+0xb4>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d903      	bls.n	80062ea <xTaskRemoveFromEventList+0x5e>
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e6:	4a16      	ldr	r2, [pc, #88]	@ (8006340 <xTaskRemoveFromEventList+0xb4>)
 80062e8:	6013      	str	r3, [r2, #0]
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ee:	4613      	mov	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4a13      	ldr	r2, [pc, #76]	@ (8006344 <xTaskRemoveFromEventList+0xb8>)
 80062f8:	441a      	add	r2, r3
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	3304      	adds	r3, #4
 80062fe:	4619      	mov	r1, r3
 8006300:	4610      	mov	r0, r2
 8006302:	f7fe faa6 	bl	8004852 <vListInsertEnd>
 8006306:	e005      	b.n	8006314 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	3318      	adds	r3, #24
 800630c:	4619      	mov	r1, r3
 800630e:	480e      	ldr	r0, [pc, #56]	@ (8006348 <xTaskRemoveFromEventList+0xbc>)
 8006310:	f7fe fa9f 	bl	8004852 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006318:	4b0c      	ldr	r3, [pc, #48]	@ (800634c <xTaskRemoveFromEventList+0xc0>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800631e:	429a      	cmp	r2, r3
 8006320:	d905      	bls.n	800632e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006322:	2301      	movs	r3, #1
 8006324:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006326:	4b0a      	ldr	r3, [pc, #40]	@ (8006350 <xTaskRemoveFromEventList+0xc4>)
 8006328:	2201      	movs	r2, #1
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	e001      	b.n	8006332 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800632e:	2300      	movs	r3, #0
 8006330:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006332:	697b      	ldr	r3, [r7, #20]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3718      	adds	r7, #24
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	20001248 	.word	0x20001248
 8006340:	20001228 	.word	0x20001228
 8006344:	20000d50 	.word	0x20000d50
 8006348:	200011e0 	.word	0x200011e0
 800634c:	20000d4c 	.word	0x20000d4c
 8006350:	20001234 	.word	0x20001234

08006354 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800635c:	4b06      	ldr	r3, [pc, #24]	@ (8006378 <vTaskInternalSetTimeOutState+0x24>)
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006364:	4b05      	ldr	r3, [pc, #20]	@ (800637c <vTaskInternalSetTimeOutState+0x28>)
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	605a      	str	r2, [r3, #4]
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr
 8006378:	20001238 	.word	0x20001238
 800637c:	20001224 	.word	0x20001224

08006380 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b088      	sub	sp, #32
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10b      	bne.n	80063a8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	613b      	str	r3, [r7, #16]
}
 80063a2:	bf00      	nop
 80063a4:	bf00      	nop
 80063a6:	e7fd      	b.n	80063a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10b      	bne.n	80063c6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	60fb      	str	r3, [r7, #12]
}
 80063c0:	bf00      	nop
 80063c2:	bf00      	nop
 80063c4:	e7fd      	b.n	80063c2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80063c6:	f000 ff8f 	bl	80072e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80063ca:	4b1d      	ldr	r3, [pc, #116]	@ (8006440 <xTaskCheckForTimeOut+0xc0>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e2:	d102      	bne.n	80063ea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80063e4:	2300      	movs	r3, #0
 80063e6:	61fb      	str	r3, [r7, #28]
 80063e8:	e023      	b.n	8006432 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	4b15      	ldr	r3, [pc, #84]	@ (8006444 <xTaskCheckForTimeOut+0xc4>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d007      	beq.n	8006406 <xTaskCheckForTimeOut+0x86>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d302      	bcc.n	8006406 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006400:	2301      	movs	r3, #1
 8006402:	61fb      	str	r3, [r7, #28]
 8006404:	e015      	b.n	8006432 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	429a      	cmp	r2, r3
 800640e:	d20b      	bcs.n	8006428 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	1ad2      	subs	r2, r2, r3
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7ff ff99 	bl	8006354 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006422:	2300      	movs	r3, #0
 8006424:	61fb      	str	r3, [r7, #28]
 8006426:	e004      	b.n	8006432 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	2200      	movs	r2, #0
 800642c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800642e:	2301      	movs	r3, #1
 8006430:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006432:	f000 ff8b 	bl	800734c <vPortExitCritical>

	return xReturn;
 8006436:	69fb      	ldr	r3, [r7, #28]
}
 8006438:	4618      	mov	r0, r3
 800643a:	3720      	adds	r7, #32
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	20001224 	.word	0x20001224
 8006444:	20001238 	.word	0x20001238

08006448 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006448:	b480      	push	{r7}
 800644a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800644c:	4b03      	ldr	r3, [pc, #12]	@ (800645c <vTaskMissedYield+0x14>)
 800644e:	2201      	movs	r2, #1
 8006450:	601a      	str	r2, [r3, #0]
}
 8006452:	bf00      	nop
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	20001234 	.word	0x20001234

08006460 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006468:	f000 f852 	bl	8006510 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800646c:	4b06      	ldr	r3, [pc, #24]	@ (8006488 <prvIdleTask+0x28>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d9f9      	bls.n	8006468 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006474:	4b05      	ldr	r3, [pc, #20]	@ (800648c <prvIdleTask+0x2c>)
 8006476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006484:	e7f0      	b.n	8006468 <prvIdleTask+0x8>
 8006486:	bf00      	nop
 8006488:	20000d50 	.word	0x20000d50
 800648c:	e000ed04 	.word	0xe000ed04

08006490 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006496:	2300      	movs	r3, #0
 8006498:	607b      	str	r3, [r7, #4]
 800649a:	e00c      	b.n	80064b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	4613      	mov	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4a12      	ldr	r2, [pc, #72]	@ (80064f0 <prvInitialiseTaskLists+0x60>)
 80064a8:	4413      	add	r3, r2
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fe f9a4 	bl	80047f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	3301      	adds	r3, #1
 80064b4:	607b      	str	r3, [r7, #4]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b37      	cmp	r3, #55	@ 0x37
 80064ba:	d9ef      	bls.n	800649c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80064bc:	480d      	ldr	r0, [pc, #52]	@ (80064f4 <prvInitialiseTaskLists+0x64>)
 80064be:	f7fe f99b 	bl	80047f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80064c2:	480d      	ldr	r0, [pc, #52]	@ (80064f8 <prvInitialiseTaskLists+0x68>)
 80064c4:	f7fe f998 	bl	80047f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80064c8:	480c      	ldr	r0, [pc, #48]	@ (80064fc <prvInitialiseTaskLists+0x6c>)
 80064ca:	f7fe f995 	bl	80047f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80064ce:	480c      	ldr	r0, [pc, #48]	@ (8006500 <prvInitialiseTaskLists+0x70>)
 80064d0:	f7fe f992 	bl	80047f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80064d4:	480b      	ldr	r0, [pc, #44]	@ (8006504 <prvInitialiseTaskLists+0x74>)
 80064d6:	f7fe f98f 	bl	80047f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80064da:	4b0b      	ldr	r3, [pc, #44]	@ (8006508 <prvInitialiseTaskLists+0x78>)
 80064dc:	4a05      	ldr	r2, [pc, #20]	@ (80064f4 <prvInitialiseTaskLists+0x64>)
 80064de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80064e0:	4b0a      	ldr	r3, [pc, #40]	@ (800650c <prvInitialiseTaskLists+0x7c>)
 80064e2:	4a05      	ldr	r2, [pc, #20]	@ (80064f8 <prvInitialiseTaskLists+0x68>)
 80064e4:	601a      	str	r2, [r3, #0]
}
 80064e6:	bf00      	nop
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	20000d50 	.word	0x20000d50
 80064f4:	200011b0 	.word	0x200011b0
 80064f8:	200011c4 	.word	0x200011c4
 80064fc:	200011e0 	.word	0x200011e0
 8006500:	200011f4 	.word	0x200011f4
 8006504:	2000120c 	.word	0x2000120c
 8006508:	200011d8 	.word	0x200011d8
 800650c:	200011dc 	.word	0x200011dc

08006510 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006516:	e019      	b.n	800654c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006518:	f000 fee6 	bl	80072e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800651c:	4b10      	ldr	r3, [pc, #64]	@ (8006560 <prvCheckTasksWaitingTermination+0x50>)
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	3304      	adds	r3, #4
 8006528:	4618      	mov	r0, r3
 800652a:	f7fe f9ef 	bl	800490c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800652e:	4b0d      	ldr	r3, [pc, #52]	@ (8006564 <prvCheckTasksWaitingTermination+0x54>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	3b01      	subs	r3, #1
 8006534:	4a0b      	ldr	r2, [pc, #44]	@ (8006564 <prvCheckTasksWaitingTermination+0x54>)
 8006536:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006538:	4b0b      	ldr	r3, [pc, #44]	@ (8006568 <prvCheckTasksWaitingTermination+0x58>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3b01      	subs	r3, #1
 800653e:	4a0a      	ldr	r2, [pc, #40]	@ (8006568 <prvCheckTasksWaitingTermination+0x58>)
 8006540:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006542:	f000 ff03 	bl	800734c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f810 	bl	800656c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800654c:	4b06      	ldr	r3, [pc, #24]	@ (8006568 <prvCheckTasksWaitingTermination+0x58>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1e1      	bne.n	8006518 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006554:	bf00      	nop
 8006556:	bf00      	nop
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	200011f4 	.word	0x200011f4
 8006564:	20001220 	.word	0x20001220
 8006568:	20001208 	.word	0x20001208

0800656c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800657a:	2b00      	cmp	r3, #0
 800657c:	d108      	bne.n	8006590 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006582:	4618      	mov	r0, r3
 8006584:	f001 f8a0 	bl	80076c8 <vPortFree>
				vPortFree( pxTCB );
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f001 f89d 	bl	80076c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800658e:	e019      	b.n	80065c4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006596:	2b01      	cmp	r3, #1
 8006598:	d103      	bne.n	80065a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f001 f894 	bl	80076c8 <vPortFree>
	}
 80065a0:	e010      	b.n	80065c4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d00b      	beq.n	80065c4 <prvDeleteTCB+0x58>
	__asm volatile
 80065ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	60fb      	str	r3, [r7, #12]
}
 80065be:	bf00      	nop
 80065c0:	bf00      	nop
 80065c2:	e7fd      	b.n	80065c0 <prvDeleteTCB+0x54>
	}
 80065c4:	bf00      	nop
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006604 <prvResetNextTaskUnblockTime+0x38>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d104      	bne.n	80065e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80065dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006608 <prvResetNextTaskUnblockTime+0x3c>)
 80065de:	f04f 32ff 	mov.w	r2, #4294967295
 80065e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80065e4:	e008      	b.n	80065f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065e6:	4b07      	ldr	r3, [pc, #28]	@ (8006604 <prvResetNextTaskUnblockTime+0x38>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	4a04      	ldr	r2, [pc, #16]	@ (8006608 <prvResetNextTaskUnblockTime+0x3c>)
 80065f6:	6013      	str	r3, [r2, #0]
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr
 8006604:	200011d8 	.word	0x200011d8
 8006608:	20001240 	.word	0x20001240

0800660c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006612:	4b0b      	ldr	r3, [pc, #44]	@ (8006640 <xTaskGetSchedulerState+0x34>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d102      	bne.n	8006620 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800661a:	2301      	movs	r3, #1
 800661c:	607b      	str	r3, [r7, #4]
 800661e:	e008      	b.n	8006632 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006620:	4b08      	ldr	r3, [pc, #32]	@ (8006644 <xTaskGetSchedulerState+0x38>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d102      	bne.n	800662e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006628:	2302      	movs	r3, #2
 800662a:	607b      	str	r3, [r7, #4]
 800662c:	e001      	b.n	8006632 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800662e:	2300      	movs	r3, #0
 8006630:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006632:	687b      	ldr	r3, [r7, #4]
	}
 8006634:	4618      	mov	r0, r3
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	2000122c 	.word	0x2000122c
 8006644:	20001248 	.word	0x20001248

08006648 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006654:	2300      	movs	r3, #0
 8006656:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d051      	beq.n	8006702 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006662:	4b2a      	ldr	r3, [pc, #168]	@ (800670c <xTaskPriorityInherit+0xc4>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006668:	429a      	cmp	r2, r3
 800666a:	d241      	bcs.n	80066f0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	2b00      	cmp	r3, #0
 8006672:	db06      	blt.n	8006682 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006674:	4b25      	ldr	r3, [pc, #148]	@ (800670c <xTaskPriorityInherit+0xc4>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	6959      	ldr	r1, [r3, #20]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800668a:	4613      	mov	r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4413      	add	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4a1f      	ldr	r2, [pc, #124]	@ (8006710 <xTaskPriorityInherit+0xc8>)
 8006694:	4413      	add	r3, r2
 8006696:	4299      	cmp	r1, r3
 8006698:	d122      	bne.n	80066e0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	3304      	adds	r3, #4
 800669e:	4618      	mov	r0, r3
 80066a0:	f7fe f934 	bl	800490c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80066a4:	4b19      	ldr	r3, [pc, #100]	@ (800670c <xTaskPriorityInherit+0xc4>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066b2:	4b18      	ldr	r3, [pc, #96]	@ (8006714 <xTaskPriorityInherit+0xcc>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d903      	bls.n	80066c2 <xTaskPriorityInherit+0x7a>
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066be:	4a15      	ldr	r2, [pc, #84]	@ (8006714 <xTaskPriorityInherit+0xcc>)
 80066c0:	6013      	str	r3, [r2, #0]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066c6:	4613      	mov	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4a10      	ldr	r2, [pc, #64]	@ (8006710 <xTaskPriorityInherit+0xc8>)
 80066d0:	441a      	add	r2, r3
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	3304      	adds	r3, #4
 80066d6:	4619      	mov	r1, r3
 80066d8:	4610      	mov	r0, r2
 80066da:	f7fe f8ba 	bl	8004852 <vListInsertEnd>
 80066de:	e004      	b.n	80066ea <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80066e0:	4b0a      	ldr	r3, [pc, #40]	@ (800670c <xTaskPriorityInherit+0xc4>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80066ea:	2301      	movs	r3, #1
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	e008      	b.n	8006702 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066f4:	4b05      	ldr	r3, [pc, #20]	@ (800670c <xTaskPriorityInherit+0xc4>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d201      	bcs.n	8006702 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80066fe:	2301      	movs	r3, #1
 8006700:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006702:	68fb      	ldr	r3, [r7, #12]
	}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	20000d4c 	.word	0x20000d4c
 8006710:	20000d50 	.word	0x20000d50
 8006714:	20001228 	.word	0x20001228

08006718 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006724:	2300      	movs	r3, #0
 8006726:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d058      	beq.n	80067e0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800672e:	4b2f      	ldr	r3, [pc, #188]	@ (80067ec <xTaskPriorityDisinherit+0xd4>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	429a      	cmp	r2, r3
 8006736:	d00b      	beq.n	8006750 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800673c:	f383 8811 	msr	BASEPRI, r3
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	60fb      	str	r3, [r7, #12]
}
 800674a:	bf00      	nop
 800674c:	bf00      	nop
 800674e:	e7fd      	b.n	800674c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10b      	bne.n	8006770 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800675c:	f383 8811 	msr	BASEPRI, r3
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	60bb      	str	r3, [r7, #8]
}
 800676a:	bf00      	nop
 800676c:	bf00      	nop
 800676e:	e7fd      	b.n	800676c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006774:	1e5a      	subs	r2, r3, #1
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006782:	429a      	cmp	r2, r3
 8006784:	d02c      	beq.n	80067e0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800678a:	2b00      	cmp	r3, #0
 800678c:	d128      	bne.n	80067e0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	3304      	adds	r3, #4
 8006792:	4618      	mov	r0, r3
 8006794:	f7fe f8ba 	bl	800490c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067b0:	4b0f      	ldr	r3, [pc, #60]	@ (80067f0 <xTaskPriorityDisinherit+0xd8>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d903      	bls.n	80067c0 <xTaskPriorityDisinherit+0xa8>
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067bc:	4a0c      	ldr	r2, [pc, #48]	@ (80067f0 <xTaskPriorityDisinherit+0xd8>)
 80067be:	6013      	str	r3, [r2, #0]
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067c4:	4613      	mov	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4a09      	ldr	r2, [pc, #36]	@ (80067f4 <xTaskPriorityDisinherit+0xdc>)
 80067ce:	441a      	add	r2, r3
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	3304      	adds	r3, #4
 80067d4:	4619      	mov	r1, r3
 80067d6:	4610      	mov	r0, r2
 80067d8:	f7fe f83b 	bl	8004852 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80067dc:	2301      	movs	r3, #1
 80067de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067e0:	697b      	ldr	r3, [r7, #20]
	}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	20000d4c 	.word	0x20000d4c
 80067f0:	20001228 	.word	0x20001228
 80067f4:	20000d50 	.word	0x20000d50

080067f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b088      	sub	sp, #32
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006806:	2301      	movs	r3, #1
 8006808:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d06c      	beq.n	80068ea <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10b      	bne.n	8006830 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681c:	f383 8811 	msr	BASEPRI, r3
 8006820:	f3bf 8f6f 	isb	sy
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	60fb      	str	r3, [r7, #12]
}
 800682a:	bf00      	nop
 800682c:	bf00      	nop
 800682e:	e7fd      	b.n	800682c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	429a      	cmp	r2, r3
 8006838:	d902      	bls.n	8006840 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	61fb      	str	r3, [r7, #28]
 800683e:	e002      	b.n	8006846 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006844:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684a:	69fa      	ldr	r2, [r7, #28]
 800684c:	429a      	cmp	r2, r3
 800684e:	d04c      	beq.n	80068ea <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	429a      	cmp	r2, r3
 8006858:	d147      	bne.n	80068ea <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800685a:	4b26      	ldr	r3, [pc, #152]	@ (80068f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	429a      	cmp	r2, r3
 8006862:	d10b      	bne.n	800687c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006868:	f383 8811 	msr	BASEPRI, r3
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	60bb      	str	r3, [r7, #8]
}
 8006876:	bf00      	nop
 8006878:	bf00      	nop
 800687a:	e7fd      	b.n	8006878 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006880:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	69fa      	ldr	r2, [r7, #28]
 8006886:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	2b00      	cmp	r3, #0
 800688e:	db04      	blt.n	800689a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	6959      	ldr	r1, [r3, #20]
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	4613      	mov	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4a13      	ldr	r2, [pc, #76]	@ (80068f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80068aa:	4413      	add	r3, r2
 80068ac:	4299      	cmp	r1, r3
 80068ae:	d11c      	bne.n	80068ea <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	3304      	adds	r3, #4
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7fe f829 	bl	800490c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068be:	4b0f      	ldr	r3, [pc, #60]	@ (80068fc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d903      	bls.n	80068ce <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ca:	4a0c      	ldr	r2, [pc, #48]	@ (80068fc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80068cc:	6013      	str	r3, [r2, #0]
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068d2:	4613      	mov	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4a07      	ldr	r2, [pc, #28]	@ (80068f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80068dc:	441a      	add	r2, r3
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	3304      	adds	r3, #4
 80068e2:	4619      	mov	r1, r3
 80068e4:	4610      	mov	r0, r2
 80068e6:	f7fd ffb4 	bl	8004852 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068ea:	bf00      	nop
 80068ec:	3720      	adds	r7, #32
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	20000d4c 	.word	0x20000d4c
 80068f8:	20000d50 	.word	0x20000d50
 80068fc:	20001228 	.word	0x20001228

08006900 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006900:	b480      	push	{r7}
 8006902:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006904:	4b07      	ldr	r3, [pc, #28]	@ (8006924 <pvTaskIncrementMutexHeldCount+0x24>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d004      	beq.n	8006916 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800690c:	4b05      	ldr	r3, [pc, #20]	@ (8006924 <pvTaskIncrementMutexHeldCount+0x24>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006912:	3201      	adds	r2, #1
 8006914:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006916:	4b03      	ldr	r3, [pc, #12]	@ (8006924 <pvTaskIncrementMutexHeldCount+0x24>)
 8006918:	681b      	ldr	r3, [r3, #0]
	}
 800691a:	4618      	mov	r0, r3
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr
 8006924:	20000d4c 	.word	0x20000d4c

08006928 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006932:	4b21      	ldr	r3, [pc, #132]	@ (80069b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006938:	4b20      	ldr	r3, [pc, #128]	@ (80069bc <prvAddCurrentTaskToDelayedList+0x94>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	3304      	adds	r3, #4
 800693e:	4618      	mov	r0, r3
 8006940:	f7fd ffe4 	bl	800490c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694a:	d10a      	bne.n	8006962 <prvAddCurrentTaskToDelayedList+0x3a>
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d007      	beq.n	8006962 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006952:	4b1a      	ldr	r3, [pc, #104]	@ (80069bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	3304      	adds	r3, #4
 8006958:	4619      	mov	r1, r3
 800695a:	4819      	ldr	r0, [pc, #100]	@ (80069c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800695c:	f7fd ff79 	bl	8004852 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006960:	e026      	b.n	80069b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4413      	add	r3, r2
 8006968:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800696a:	4b14      	ldr	r3, [pc, #80]	@ (80069bc <prvAddCurrentTaskToDelayedList+0x94>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	429a      	cmp	r2, r3
 8006978:	d209      	bcs.n	800698e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800697a:	4b12      	ldr	r3, [pc, #72]	@ (80069c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	4b0f      	ldr	r3, [pc, #60]	@ (80069bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3304      	adds	r3, #4
 8006984:	4619      	mov	r1, r3
 8006986:	4610      	mov	r0, r2
 8006988:	f7fd ff87 	bl	800489a <vListInsert>
}
 800698c:	e010      	b.n	80069b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800698e:	4b0e      	ldr	r3, [pc, #56]	@ (80069c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	4b0a      	ldr	r3, [pc, #40]	@ (80069bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3304      	adds	r3, #4
 8006998:	4619      	mov	r1, r3
 800699a:	4610      	mov	r0, r2
 800699c:	f7fd ff7d 	bl	800489a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80069a0:	4b0a      	ldr	r3, [pc, #40]	@ (80069cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d202      	bcs.n	80069b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80069aa:	4a08      	ldr	r2, [pc, #32]	@ (80069cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	6013      	str	r3, [r2, #0]
}
 80069b0:	bf00      	nop
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	20001224 	.word	0x20001224
 80069bc:	20000d4c 	.word	0x20000d4c
 80069c0:	2000120c 	.word	0x2000120c
 80069c4:	200011dc 	.word	0x200011dc
 80069c8:	200011d8 	.word	0x200011d8
 80069cc:	20001240 	.word	0x20001240

080069d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b08a      	sub	sp, #40	@ 0x28
 80069d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80069d6:	2300      	movs	r3, #0
 80069d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80069da:	f000 fb13 	bl	8007004 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80069de:	4b1d      	ldr	r3, [pc, #116]	@ (8006a54 <xTimerCreateTimerTask+0x84>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d021      	beq.n	8006a2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80069e6:	2300      	movs	r3, #0
 80069e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80069ea:	2300      	movs	r3, #0
 80069ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80069ee:	1d3a      	adds	r2, r7, #4
 80069f0:	f107 0108 	add.w	r1, r7, #8
 80069f4:	f107 030c 	add.w	r3, r7, #12
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7fd fee3 	bl	80047c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80069fe:	6879      	ldr	r1, [r7, #4]
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	9202      	str	r2, [sp, #8]
 8006a06:	9301      	str	r3, [sp, #4]
 8006a08:	2302      	movs	r3, #2
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	460a      	mov	r2, r1
 8006a10:	4911      	ldr	r1, [pc, #68]	@ (8006a58 <xTimerCreateTimerTask+0x88>)
 8006a12:	4812      	ldr	r0, [pc, #72]	@ (8006a5c <xTimerCreateTimerTask+0x8c>)
 8006a14:	f7fe ffd0 	bl	80059b8 <xTaskCreateStatic>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	4a11      	ldr	r2, [pc, #68]	@ (8006a60 <xTimerCreateTimerTask+0x90>)
 8006a1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006a1e:	4b10      	ldr	r3, [pc, #64]	@ (8006a60 <xTimerCreateTimerTask+0x90>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006a26:	2301      	movs	r3, #1
 8006a28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10b      	bne.n	8006a48 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	613b      	str	r3, [r7, #16]
}
 8006a42:	bf00      	nop
 8006a44:	bf00      	nop
 8006a46:	e7fd      	b.n	8006a44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006a48:	697b      	ldr	r3, [r7, #20]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3718      	adds	r7, #24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	2000127c 	.word	0x2000127c
 8006a58:	08014470 	.word	0x08014470
 8006a5c:	08006b9d 	.word	0x08006b9d
 8006a60:	20001280 	.word	0x20001280

08006a64 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b08a      	sub	sp, #40	@ 0x28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
 8006a70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006a72:	2300      	movs	r3, #0
 8006a74:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10b      	bne.n	8006a94 <xTimerGenericCommand+0x30>
	__asm volatile
 8006a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	623b      	str	r3, [r7, #32]
}
 8006a8e:	bf00      	nop
 8006a90:	bf00      	nop
 8006a92:	e7fd      	b.n	8006a90 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006a94:	4b19      	ldr	r3, [pc, #100]	@ (8006afc <xTimerGenericCommand+0x98>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d02a      	beq.n	8006af2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b05      	cmp	r3, #5
 8006aac:	dc18      	bgt.n	8006ae0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006aae:	f7ff fdad 	bl	800660c <xTaskGetSchedulerState>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d109      	bne.n	8006acc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006ab8:	4b10      	ldr	r3, [pc, #64]	@ (8006afc <xTimerGenericCommand+0x98>)
 8006aba:	6818      	ldr	r0, [r3, #0]
 8006abc:	f107 0110 	add.w	r1, r7, #16
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ac4:	f7fe f900 	bl	8004cc8 <xQueueGenericSend>
 8006ac8:	6278      	str	r0, [r7, #36]	@ 0x24
 8006aca:	e012      	b.n	8006af2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006acc:	4b0b      	ldr	r3, [pc, #44]	@ (8006afc <xTimerGenericCommand+0x98>)
 8006ace:	6818      	ldr	r0, [r3, #0]
 8006ad0:	f107 0110 	add.w	r1, r7, #16
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f7fe f8f6 	bl	8004cc8 <xQueueGenericSend>
 8006adc:	6278      	str	r0, [r7, #36]	@ 0x24
 8006ade:	e008      	b.n	8006af2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006ae0:	4b06      	ldr	r3, [pc, #24]	@ (8006afc <xTimerGenericCommand+0x98>)
 8006ae2:	6818      	ldr	r0, [r3, #0]
 8006ae4:	f107 0110 	add.w	r1, r7, #16
 8006ae8:	2300      	movs	r3, #0
 8006aea:	683a      	ldr	r2, [r7, #0]
 8006aec:	f7fe f9ee 	bl	8004ecc <xQueueGenericSendFromISR>
 8006af0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3728      	adds	r7, #40	@ 0x28
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	2000127c 	.word	0x2000127c

08006b00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b088      	sub	sp, #32
 8006b04:	af02      	add	r7, sp, #8
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b0a:	4b23      	ldr	r3, [pc, #140]	@ (8006b98 <prvProcessExpiredTimer+0x98>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	3304      	adds	r3, #4
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fd fef7 	bl	800490c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b24:	f003 0304 	and.w	r3, r3, #4
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d023      	beq.n	8006b74 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	699a      	ldr	r2, [r3, #24]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	18d1      	adds	r1, r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	6978      	ldr	r0, [r7, #20]
 8006b3a:	f000 f8d5 	bl	8006ce8 <prvInsertTimerInActiveList>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d020      	beq.n	8006b86 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b44:	2300      	movs	r3, #0
 8006b46:	9300      	str	r3, [sp, #0]
 8006b48:	2300      	movs	r3, #0
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	6978      	ldr	r0, [r7, #20]
 8006b50:	f7ff ff88 	bl	8006a64 <xTimerGenericCommand>
 8006b54:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d114      	bne.n	8006b86 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	60fb      	str	r3, [r7, #12]
}
 8006b6e:	bf00      	nop
 8006b70:	bf00      	nop
 8006b72:	e7fd      	b.n	8006b70 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b7a:	f023 0301 	bic.w	r3, r3, #1
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	6978      	ldr	r0, [r7, #20]
 8006b8c:	4798      	blx	r3
}
 8006b8e:	bf00      	nop
 8006b90:	3718      	adds	r7, #24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	20001274 	.word	0x20001274

08006b9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ba4:	f107 0308 	add.w	r3, r7, #8
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 f859 	bl	8006c60 <prvGetNextExpireTime>
 8006bae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 f805 	bl	8006bc4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006bba:	f000 f8d7 	bl	8006d6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006bbe:	bf00      	nop
 8006bc0:	e7f0      	b.n	8006ba4 <prvTimerTask+0x8>
	...

08006bc4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006bce:	f7ff f937 	bl	8005e40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bd2:	f107 0308 	add.w	r3, r7, #8
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 f866 	bl	8006ca8 <prvSampleTimeNow>
 8006bdc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d130      	bne.n	8006c46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10a      	bne.n	8006c00 <prvProcessTimerOrBlockTask+0x3c>
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d806      	bhi.n	8006c00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006bf2:	f7ff f933 	bl	8005e5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006bf6:	68f9      	ldr	r1, [r7, #12]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7ff ff81 	bl	8006b00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006bfe:	e024      	b.n	8006c4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d008      	beq.n	8006c18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006c06:	4b13      	ldr	r3, [pc, #76]	@ (8006c54 <prvProcessTimerOrBlockTask+0x90>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <prvProcessTimerOrBlockTask+0x50>
 8006c10:	2301      	movs	r3, #1
 8006c12:	e000      	b.n	8006c16 <prvProcessTimerOrBlockTask+0x52>
 8006c14:	2300      	movs	r3, #0
 8006c16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006c18:	4b0f      	ldr	r3, [pc, #60]	@ (8006c58 <prvProcessTimerOrBlockTask+0x94>)
 8006c1a:	6818      	ldr	r0, [r3, #0]
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	4619      	mov	r1, r3
 8006c26:	f7fe fe93 	bl	8005950 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006c2a:	f7ff f917 	bl	8005e5c <xTaskResumeAll>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10a      	bne.n	8006c4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006c34:	4b09      	ldr	r3, [pc, #36]	@ (8006c5c <prvProcessTimerOrBlockTask+0x98>)
 8006c36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c3a:	601a      	str	r2, [r3, #0]
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	f3bf 8f6f 	isb	sy
}
 8006c44:	e001      	b.n	8006c4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006c46:	f7ff f909 	bl	8005e5c <xTaskResumeAll>
}
 8006c4a:	bf00      	nop
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	20001278 	.word	0x20001278
 8006c58:	2000127c 	.word	0x2000127c
 8006c5c:	e000ed04 	.word	0xe000ed04

08006c60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006c68:	4b0e      	ldr	r3, [pc, #56]	@ (8006ca4 <prvGetNextExpireTime+0x44>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <prvGetNextExpireTime+0x16>
 8006c72:	2201      	movs	r2, #1
 8006c74:	e000      	b.n	8006c78 <prvGetNextExpireTime+0x18>
 8006c76:	2200      	movs	r2, #0
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d105      	bne.n	8006c90 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c84:	4b07      	ldr	r3, [pc, #28]	@ (8006ca4 <prvGetNextExpireTime+0x44>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	60fb      	str	r3, [r7, #12]
 8006c8e:	e001      	b.n	8006c94 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006c90:	2300      	movs	r3, #0
 8006c92:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006c94:	68fb      	ldr	r3, [r7, #12]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	20001274 	.word	0x20001274

08006ca8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006cb0:	f7ff f972 	bl	8005f98 <xTaskGetTickCount>
 8006cb4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce4 <prvSampleTimeNow+0x3c>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d205      	bcs.n	8006ccc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006cc0:	f000 f93a 	bl	8006f38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	601a      	str	r2, [r3, #0]
 8006cca:	e002      	b.n	8006cd2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006cd2:	4a04      	ldr	r2, [pc, #16]	@ (8006ce4 <prvSampleTimeNow+0x3c>)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	20001284 	.word	0x20001284

08006ce8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
 8006cf4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d812      	bhi.n	8006d34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	1ad2      	subs	r2, r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d302      	bcc.n	8006d22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	617b      	str	r3, [r7, #20]
 8006d20:	e01b      	b.n	8006d5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d22:	4b10      	ldr	r3, [pc, #64]	@ (8006d64 <prvInsertTimerInActiveList+0x7c>)
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	3304      	adds	r3, #4
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	4610      	mov	r0, r2
 8006d2e:	f7fd fdb4 	bl	800489a <vListInsert>
 8006d32:	e012      	b.n	8006d5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d206      	bcs.n	8006d4a <prvInsertTimerInActiveList+0x62>
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d302      	bcc.n	8006d4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006d44:	2301      	movs	r3, #1
 8006d46:	617b      	str	r3, [r7, #20]
 8006d48:	e007      	b.n	8006d5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d4a:	4b07      	ldr	r3, [pc, #28]	@ (8006d68 <prvInsertTimerInActiveList+0x80>)
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3304      	adds	r3, #4
 8006d52:	4619      	mov	r1, r3
 8006d54:	4610      	mov	r0, r2
 8006d56:	f7fd fda0 	bl	800489a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006d5a:	697b      	ldr	r3, [r7, #20]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3718      	adds	r7, #24
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	20001278 	.word	0x20001278
 8006d68:	20001274 	.word	0x20001274

08006d6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08e      	sub	sp, #56	@ 0x38
 8006d70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d72:	e0ce      	b.n	8006f12 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	da19      	bge.n	8006dae <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006d7a:	1d3b      	adds	r3, r7, #4
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10b      	bne.n	8006d9e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	61fb      	str	r3, [r7, #28]
}
 8006d98:	bf00      	nop
 8006d9a:	bf00      	nop
 8006d9c:	e7fd      	b.n	8006d9a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006da4:	6850      	ldr	r0, [r2, #4]
 8006da6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006da8:	6892      	ldr	r2, [r2, #8]
 8006daa:	4611      	mov	r1, r2
 8006dac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f2c0 80ae 	blt.w	8006f12 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d004      	beq.n	8006dcc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7fd fda0 	bl	800490c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006dcc:	463b      	mov	r3, r7
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7ff ff6a 	bl	8006ca8 <prvSampleTimeNow>
 8006dd4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b09      	cmp	r3, #9
 8006dda:	f200 8097 	bhi.w	8006f0c <prvProcessReceivedCommands+0x1a0>
 8006dde:	a201      	add	r2, pc, #4	@ (adr r2, 8006de4 <prvProcessReceivedCommands+0x78>)
 8006de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de4:	08006e0d 	.word	0x08006e0d
 8006de8:	08006e0d 	.word	0x08006e0d
 8006dec:	08006e0d 	.word	0x08006e0d
 8006df0:	08006e83 	.word	0x08006e83
 8006df4:	08006e97 	.word	0x08006e97
 8006df8:	08006ee3 	.word	0x08006ee3
 8006dfc:	08006e0d 	.word	0x08006e0d
 8006e00:	08006e0d 	.word	0x08006e0d
 8006e04:	08006e83 	.word	0x08006e83
 8006e08:	08006e97 	.word	0x08006e97
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e12:	f043 0301 	orr.w	r3, r3, #1
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	18d1      	adds	r1, r2, r3
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e2c:	f7ff ff5c 	bl	8006ce8 <prvInsertTimerInActiveList>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d06c      	beq.n	8006f10 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e44:	f003 0304 	and.w	r3, r3, #4
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d061      	beq.n	8006f10 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	441a      	add	r2, r3
 8006e54:	2300      	movs	r3, #0
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	2300      	movs	r3, #0
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e5e:	f7ff fe01 	bl	8006a64 <xTimerGenericCommand>
 8006e62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006e64:	6a3b      	ldr	r3, [r7, #32]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d152      	bne.n	8006f10 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6e:	f383 8811 	msr	BASEPRI, r3
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	61bb      	str	r3, [r7, #24]
}
 8006e7c:	bf00      	nop
 8006e7e:	bf00      	nop
 8006e80:	e7fd      	b.n	8006e7e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e88:	f023 0301 	bic.w	r3, r3, #1
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e90:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006e94:	e03d      	b.n	8006f12 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e9c:	f043 0301 	orr.w	r3, r3, #1
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10b      	bne.n	8006ece <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	617b      	str	r3, [r7, #20]
}
 8006ec8:	bf00      	nop
 8006eca:	bf00      	nop
 8006ecc:	e7fd      	b.n	8006eca <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed0:	699a      	ldr	r2, [r3, #24]
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed4:	18d1      	adds	r1, r2, r3
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006edc:	f7ff ff04 	bl	8006ce8 <prvInsertTimerInActiveList>
					break;
 8006ee0:	e017      	b.n	8006f12 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d103      	bne.n	8006ef8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006ef0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ef2:	f000 fbe9 	bl	80076c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006ef6:	e00c      	b.n	8006f12 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006efa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006efe:	f023 0301 	bic.w	r3, r3, #1
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006f0a:	e002      	b.n	8006f12 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006f0c:	bf00      	nop
 8006f0e:	e000      	b.n	8006f12 <prvProcessReceivedCommands+0x1a6>
					break;
 8006f10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f12:	4b08      	ldr	r3, [pc, #32]	@ (8006f34 <prvProcessReceivedCommands+0x1c8>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	1d39      	adds	r1, r7, #4
 8006f18:	2200      	movs	r2, #0
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7fe f904 	bl	8005128 <xQueueReceive>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f47f af26 	bne.w	8006d74 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006f28:	bf00      	nop
 8006f2a:	bf00      	nop
 8006f2c:	3730      	adds	r7, #48	@ 0x30
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	2000127c 	.word	0x2000127c

08006f38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b088      	sub	sp, #32
 8006f3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f3e:	e049      	b.n	8006fd4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f40:	4b2e      	ldr	r3, [pc, #184]	@ (8006ffc <prvSwitchTimerLists+0xc4>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f4a:	4b2c      	ldr	r3, [pc, #176]	@ (8006ffc <prvSwitchTimerLists+0xc4>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	3304      	adds	r3, #4
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7fd fcd7 	bl	800490c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f6c:	f003 0304 	and.w	r3, r3, #4
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d02f      	beq.n	8006fd4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d90e      	bls.n	8006fa4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f92:	4b1a      	ldr	r3, [pc, #104]	@ (8006ffc <prvSwitchTimerLists+0xc4>)
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	3304      	adds	r3, #4
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	4610      	mov	r0, r2
 8006f9e:	f7fd fc7c 	bl	800489a <vListInsert>
 8006fa2:	e017      	b.n	8006fd4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	2300      	movs	r3, #0
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	2100      	movs	r1, #0
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f7ff fd58 	bl	8006a64 <xTimerGenericCommand>
 8006fb4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10b      	bne.n	8006fd4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc0:	f383 8811 	msr	BASEPRI, r3
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	f3bf 8f4f 	dsb	sy
 8006fcc:	603b      	str	r3, [r7, #0]
}
 8006fce:	bf00      	nop
 8006fd0:	bf00      	nop
 8006fd2:	e7fd      	b.n	8006fd0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006fd4:	4b09      	ldr	r3, [pc, #36]	@ (8006ffc <prvSwitchTimerLists+0xc4>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1b0      	bne.n	8006f40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006fde:	4b07      	ldr	r3, [pc, #28]	@ (8006ffc <prvSwitchTimerLists+0xc4>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006fe4:	4b06      	ldr	r3, [pc, #24]	@ (8007000 <prvSwitchTimerLists+0xc8>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a04      	ldr	r2, [pc, #16]	@ (8006ffc <prvSwitchTimerLists+0xc4>)
 8006fea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006fec:	4a04      	ldr	r2, [pc, #16]	@ (8007000 <prvSwitchTimerLists+0xc8>)
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	6013      	str	r3, [r2, #0]
}
 8006ff2:	bf00      	nop
 8006ff4:	3718      	adds	r7, #24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20001274 	.word	0x20001274
 8007000:	20001278 	.word	0x20001278

08007004 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800700a:	f000 f96d 	bl	80072e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800700e:	4b15      	ldr	r3, [pc, #84]	@ (8007064 <prvCheckForValidListAndQueue+0x60>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d120      	bne.n	8007058 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007016:	4814      	ldr	r0, [pc, #80]	@ (8007068 <prvCheckForValidListAndQueue+0x64>)
 8007018:	f7fd fbee 	bl	80047f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800701c:	4813      	ldr	r0, [pc, #76]	@ (800706c <prvCheckForValidListAndQueue+0x68>)
 800701e:	f7fd fbeb 	bl	80047f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007022:	4b13      	ldr	r3, [pc, #76]	@ (8007070 <prvCheckForValidListAndQueue+0x6c>)
 8007024:	4a10      	ldr	r2, [pc, #64]	@ (8007068 <prvCheckForValidListAndQueue+0x64>)
 8007026:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007028:	4b12      	ldr	r3, [pc, #72]	@ (8007074 <prvCheckForValidListAndQueue+0x70>)
 800702a:	4a10      	ldr	r2, [pc, #64]	@ (800706c <prvCheckForValidListAndQueue+0x68>)
 800702c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800702e:	2300      	movs	r3, #0
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	4b11      	ldr	r3, [pc, #68]	@ (8007078 <prvCheckForValidListAndQueue+0x74>)
 8007034:	4a11      	ldr	r2, [pc, #68]	@ (800707c <prvCheckForValidListAndQueue+0x78>)
 8007036:	2110      	movs	r1, #16
 8007038:	200a      	movs	r0, #10
 800703a:	f7fd fcfb 	bl	8004a34 <xQueueGenericCreateStatic>
 800703e:	4603      	mov	r3, r0
 8007040:	4a08      	ldr	r2, [pc, #32]	@ (8007064 <prvCheckForValidListAndQueue+0x60>)
 8007042:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007044:	4b07      	ldr	r3, [pc, #28]	@ (8007064 <prvCheckForValidListAndQueue+0x60>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d005      	beq.n	8007058 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800704c:	4b05      	ldr	r3, [pc, #20]	@ (8007064 <prvCheckForValidListAndQueue+0x60>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	490b      	ldr	r1, [pc, #44]	@ (8007080 <prvCheckForValidListAndQueue+0x7c>)
 8007052:	4618      	mov	r0, r3
 8007054:	f7fe fc28 	bl	80058a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007058:	f000 f978 	bl	800734c <vPortExitCritical>
}
 800705c:	bf00      	nop
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	2000127c 	.word	0x2000127c
 8007068:	2000124c 	.word	0x2000124c
 800706c:	20001260 	.word	0x20001260
 8007070:	20001274 	.word	0x20001274
 8007074:	20001278 	.word	0x20001278
 8007078:	20001328 	.word	0x20001328
 800707c:	20001288 	.word	0x20001288
 8007080:	08014478 	.word	0x08014478

08007084 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	3b04      	subs	r3, #4
 8007094:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800709c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	3b04      	subs	r3, #4
 80070a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f023 0201 	bic.w	r2, r3, #1
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	3b04      	subs	r3, #4
 80070b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80070b4:	4a0c      	ldr	r2, [pc, #48]	@ (80070e8 <pxPortInitialiseStack+0x64>)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	3b14      	subs	r3, #20
 80070be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	3b04      	subs	r3, #4
 80070ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f06f 0202 	mvn.w	r2, #2
 80070d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	3b20      	subs	r3, #32
 80070d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80070da:	68fb      	ldr	r3, [r7, #12]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3714      	adds	r7, #20
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	080070ed 	.word	0x080070ed

080070ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80070f2:	2300      	movs	r3, #0
 80070f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80070f6:	4b13      	ldr	r3, [pc, #76]	@ (8007144 <prvTaskExitError+0x58>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fe:	d00b      	beq.n	8007118 <prvTaskExitError+0x2c>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	60fb      	str	r3, [r7, #12]
}
 8007112:	bf00      	nop
 8007114:	bf00      	nop
 8007116:	e7fd      	b.n	8007114 <prvTaskExitError+0x28>
	__asm volatile
 8007118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	60bb      	str	r3, [r7, #8]
}
 800712a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800712c:	bf00      	nop
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d0fc      	beq.n	800712e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007134:	bf00      	nop
 8007136:	bf00      	nop
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	2000000c 	.word	0x2000000c
	...

08007150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007150:	4b07      	ldr	r3, [pc, #28]	@ (8007170 <pxCurrentTCBConst2>)
 8007152:	6819      	ldr	r1, [r3, #0]
 8007154:	6808      	ldr	r0, [r1, #0]
 8007156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800715a:	f380 8809 	msr	PSP, r0
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f04f 0000 	mov.w	r0, #0
 8007166:	f380 8811 	msr	BASEPRI, r0
 800716a:	4770      	bx	lr
 800716c:	f3af 8000 	nop.w

08007170 <pxCurrentTCBConst2>:
 8007170:	20000d4c 	.word	0x20000d4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007174:	bf00      	nop
 8007176:	bf00      	nop

08007178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007178:	4808      	ldr	r0, [pc, #32]	@ (800719c <prvPortStartFirstTask+0x24>)
 800717a:	6800      	ldr	r0, [r0, #0]
 800717c:	6800      	ldr	r0, [r0, #0]
 800717e:	f380 8808 	msr	MSP, r0
 8007182:	f04f 0000 	mov.w	r0, #0
 8007186:	f380 8814 	msr	CONTROL, r0
 800718a:	b662      	cpsie	i
 800718c:	b661      	cpsie	f
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	df00      	svc	0
 8007198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800719a:	bf00      	nop
 800719c:	e000ed08 	.word	0xe000ed08

080071a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80071a6:	4b47      	ldr	r3, [pc, #284]	@ (80072c4 <xPortStartScheduler+0x124>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a47      	ldr	r2, [pc, #284]	@ (80072c8 <xPortStartScheduler+0x128>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d10b      	bne.n	80071c8 <xPortStartScheduler+0x28>
	__asm volatile
 80071b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b4:	f383 8811 	msr	BASEPRI, r3
 80071b8:	f3bf 8f6f 	isb	sy
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	613b      	str	r3, [r7, #16]
}
 80071c2:	bf00      	nop
 80071c4:	bf00      	nop
 80071c6:	e7fd      	b.n	80071c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80071c8:	4b3e      	ldr	r3, [pc, #248]	@ (80072c4 <xPortStartScheduler+0x124>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a3f      	ldr	r2, [pc, #252]	@ (80072cc <xPortStartScheduler+0x12c>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d10b      	bne.n	80071ea <xPortStartScheduler+0x4a>
	__asm volatile
 80071d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	60fb      	str	r3, [r7, #12]
}
 80071e4:	bf00      	nop
 80071e6:	bf00      	nop
 80071e8:	e7fd      	b.n	80071e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80071ea:	4b39      	ldr	r3, [pc, #228]	@ (80072d0 <xPortStartScheduler+0x130>)
 80071ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	22ff      	movs	r2, #255	@ 0xff
 80071fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	b2db      	uxtb	r3, r3
 8007202:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007204:	78fb      	ldrb	r3, [r7, #3]
 8007206:	b2db      	uxtb	r3, r3
 8007208:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800720c:	b2da      	uxtb	r2, r3
 800720e:	4b31      	ldr	r3, [pc, #196]	@ (80072d4 <xPortStartScheduler+0x134>)
 8007210:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007212:	4b31      	ldr	r3, [pc, #196]	@ (80072d8 <xPortStartScheduler+0x138>)
 8007214:	2207      	movs	r2, #7
 8007216:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007218:	e009      	b.n	800722e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800721a:	4b2f      	ldr	r3, [pc, #188]	@ (80072d8 <xPortStartScheduler+0x138>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3b01      	subs	r3, #1
 8007220:	4a2d      	ldr	r2, [pc, #180]	@ (80072d8 <xPortStartScheduler+0x138>)
 8007222:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007224:	78fb      	ldrb	r3, [r7, #3]
 8007226:	b2db      	uxtb	r3, r3
 8007228:	005b      	lsls	r3, r3, #1
 800722a:	b2db      	uxtb	r3, r3
 800722c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800722e:	78fb      	ldrb	r3, [r7, #3]
 8007230:	b2db      	uxtb	r3, r3
 8007232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007236:	2b80      	cmp	r3, #128	@ 0x80
 8007238:	d0ef      	beq.n	800721a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800723a:	4b27      	ldr	r3, [pc, #156]	@ (80072d8 <xPortStartScheduler+0x138>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f1c3 0307 	rsb	r3, r3, #7
 8007242:	2b04      	cmp	r3, #4
 8007244:	d00b      	beq.n	800725e <xPortStartScheduler+0xbe>
	__asm volatile
 8007246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800724a:	f383 8811 	msr	BASEPRI, r3
 800724e:	f3bf 8f6f 	isb	sy
 8007252:	f3bf 8f4f 	dsb	sy
 8007256:	60bb      	str	r3, [r7, #8]
}
 8007258:	bf00      	nop
 800725a:	bf00      	nop
 800725c:	e7fd      	b.n	800725a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800725e:	4b1e      	ldr	r3, [pc, #120]	@ (80072d8 <xPortStartScheduler+0x138>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	021b      	lsls	r3, r3, #8
 8007264:	4a1c      	ldr	r2, [pc, #112]	@ (80072d8 <xPortStartScheduler+0x138>)
 8007266:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007268:	4b1b      	ldr	r3, [pc, #108]	@ (80072d8 <xPortStartScheduler+0x138>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007270:	4a19      	ldr	r2, [pc, #100]	@ (80072d8 <xPortStartScheduler+0x138>)
 8007272:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	b2da      	uxtb	r2, r3
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800727c:	4b17      	ldr	r3, [pc, #92]	@ (80072dc <xPortStartScheduler+0x13c>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a16      	ldr	r2, [pc, #88]	@ (80072dc <xPortStartScheduler+0x13c>)
 8007282:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007286:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007288:	4b14      	ldr	r3, [pc, #80]	@ (80072dc <xPortStartScheduler+0x13c>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a13      	ldr	r2, [pc, #76]	@ (80072dc <xPortStartScheduler+0x13c>)
 800728e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007292:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007294:	f000 f8da 	bl	800744c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007298:	4b11      	ldr	r3, [pc, #68]	@ (80072e0 <xPortStartScheduler+0x140>)
 800729a:	2200      	movs	r2, #0
 800729c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800729e:	f000 f8f9 	bl	8007494 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80072a2:	4b10      	ldr	r3, [pc, #64]	@ (80072e4 <xPortStartScheduler+0x144>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a0f      	ldr	r2, [pc, #60]	@ (80072e4 <xPortStartScheduler+0x144>)
 80072a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80072ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80072ae:	f7ff ff63 	bl	8007178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80072b2:	f7fe ff3b 	bl	800612c <vTaskSwitchContext>
	prvTaskExitError();
 80072b6:	f7ff ff19 	bl	80070ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3718      	adds	r7, #24
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	e000ed00 	.word	0xe000ed00
 80072c8:	410fc271 	.word	0x410fc271
 80072cc:	410fc270 	.word	0x410fc270
 80072d0:	e000e400 	.word	0xe000e400
 80072d4:	20001378 	.word	0x20001378
 80072d8:	2000137c 	.word	0x2000137c
 80072dc:	e000ed20 	.word	0xe000ed20
 80072e0:	2000000c 	.word	0x2000000c
 80072e4:	e000ef34 	.word	0xe000ef34

080072e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
	__asm volatile
 80072ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f2:	f383 8811 	msr	BASEPRI, r3
 80072f6:	f3bf 8f6f 	isb	sy
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	607b      	str	r3, [r7, #4]
}
 8007300:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007302:	4b10      	ldr	r3, [pc, #64]	@ (8007344 <vPortEnterCritical+0x5c>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	3301      	adds	r3, #1
 8007308:	4a0e      	ldr	r2, [pc, #56]	@ (8007344 <vPortEnterCritical+0x5c>)
 800730a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800730c:	4b0d      	ldr	r3, [pc, #52]	@ (8007344 <vPortEnterCritical+0x5c>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d110      	bne.n	8007336 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007314:	4b0c      	ldr	r3, [pc, #48]	@ (8007348 <vPortEnterCritical+0x60>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00b      	beq.n	8007336 <vPortEnterCritical+0x4e>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	603b      	str	r3, [r7, #0]
}
 8007330:	bf00      	nop
 8007332:	bf00      	nop
 8007334:	e7fd      	b.n	8007332 <vPortEnterCritical+0x4a>
	}
}
 8007336:	bf00      	nop
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	2000000c 	.word	0x2000000c
 8007348:	e000ed04 	.word	0xe000ed04

0800734c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007352:	4b12      	ldr	r3, [pc, #72]	@ (800739c <vPortExitCritical+0x50>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10b      	bne.n	8007372 <vPortExitCritical+0x26>
	__asm volatile
 800735a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	607b      	str	r3, [r7, #4]
}
 800736c:	bf00      	nop
 800736e:	bf00      	nop
 8007370:	e7fd      	b.n	800736e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007372:	4b0a      	ldr	r3, [pc, #40]	@ (800739c <vPortExitCritical+0x50>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	3b01      	subs	r3, #1
 8007378:	4a08      	ldr	r2, [pc, #32]	@ (800739c <vPortExitCritical+0x50>)
 800737a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800737c:	4b07      	ldr	r3, [pc, #28]	@ (800739c <vPortExitCritical+0x50>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d105      	bne.n	8007390 <vPortExitCritical+0x44>
 8007384:	2300      	movs	r3, #0
 8007386:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	f383 8811 	msr	BASEPRI, r3
}
 800738e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	2000000c 	.word	0x2000000c

080073a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80073a0:	f3ef 8009 	mrs	r0, PSP
 80073a4:	f3bf 8f6f 	isb	sy
 80073a8:	4b15      	ldr	r3, [pc, #84]	@ (8007400 <pxCurrentTCBConst>)
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	f01e 0f10 	tst.w	lr, #16
 80073b0:	bf08      	it	eq
 80073b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80073b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ba:	6010      	str	r0, [r2, #0]
 80073bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80073c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80073c4:	f380 8811 	msr	BASEPRI, r0
 80073c8:	f3bf 8f4f 	dsb	sy
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f7fe feac 	bl	800612c <vTaskSwitchContext>
 80073d4:	f04f 0000 	mov.w	r0, #0
 80073d8:	f380 8811 	msr	BASEPRI, r0
 80073dc:	bc09      	pop	{r0, r3}
 80073de:	6819      	ldr	r1, [r3, #0]
 80073e0:	6808      	ldr	r0, [r1, #0]
 80073e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e6:	f01e 0f10 	tst.w	lr, #16
 80073ea:	bf08      	it	eq
 80073ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80073f0:	f380 8809 	msr	PSP, r0
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	f3af 8000 	nop.w

08007400 <pxCurrentTCBConst>:
 8007400:	20000d4c 	.word	0x20000d4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007404:	bf00      	nop
 8007406:	bf00      	nop

08007408 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
	__asm volatile
 800740e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	607b      	str	r3, [r7, #4]
}
 8007420:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007422:	f7fe fdc9 	bl	8005fb8 <xTaskIncrementTick>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d003      	beq.n	8007434 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800742c:	4b06      	ldr	r3, [pc, #24]	@ (8007448 <xPortSysTickHandler+0x40>)
 800742e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007432:	601a      	str	r2, [r3, #0]
 8007434:	2300      	movs	r3, #0
 8007436:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	f383 8811 	msr	BASEPRI, r3
}
 800743e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007440:	bf00      	nop
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	e000ed04 	.word	0xe000ed04

0800744c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800744c:	b480      	push	{r7}
 800744e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007450:	4b0b      	ldr	r3, [pc, #44]	@ (8007480 <vPortSetupTimerInterrupt+0x34>)
 8007452:	2200      	movs	r2, #0
 8007454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007456:	4b0b      	ldr	r3, [pc, #44]	@ (8007484 <vPortSetupTimerInterrupt+0x38>)
 8007458:	2200      	movs	r2, #0
 800745a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800745c:	4b0a      	ldr	r3, [pc, #40]	@ (8007488 <vPortSetupTimerInterrupt+0x3c>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a0a      	ldr	r2, [pc, #40]	@ (800748c <vPortSetupTimerInterrupt+0x40>)
 8007462:	fba2 2303 	umull	r2, r3, r2, r3
 8007466:	099b      	lsrs	r3, r3, #6
 8007468:	4a09      	ldr	r2, [pc, #36]	@ (8007490 <vPortSetupTimerInterrupt+0x44>)
 800746a:	3b01      	subs	r3, #1
 800746c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800746e:	4b04      	ldr	r3, [pc, #16]	@ (8007480 <vPortSetupTimerInterrupt+0x34>)
 8007470:	2207      	movs	r2, #7
 8007472:	601a      	str	r2, [r3, #0]
}
 8007474:	bf00      	nop
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	e000e010 	.word	0xe000e010
 8007484:	e000e018 	.word	0xe000e018
 8007488:	20000000 	.word	0x20000000
 800748c:	10624dd3 	.word	0x10624dd3
 8007490:	e000e014 	.word	0xe000e014

08007494 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007494:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80074a4 <vPortEnableVFP+0x10>
 8007498:	6801      	ldr	r1, [r0, #0]
 800749a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800749e:	6001      	str	r1, [r0, #0]
 80074a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80074a2:	bf00      	nop
 80074a4:	e000ed88 	.word	0xe000ed88

080074a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80074ae:	f3ef 8305 	mrs	r3, IPSR
 80074b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2b0f      	cmp	r3, #15
 80074b8:	d915      	bls.n	80074e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80074ba:	4a18      	ldr	r2, [pc, #96]	@ (800751c <vPortValidateInterruptPriority+0x74>)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	4413      	add	r3, r2
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80074c4:	4b16      	ldr	r3, [pc, #88]	@ (8007520 <vPortValidateInterruptPriority+0x78>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	7afa      	ldrb	r2, [r7, #11]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d20b      	bcs.n	80074e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	607b      	str	r3, [r7, #4]
}
 80074e0:	bf00      	nop
 80074e2:	bf00      	nop
 80074e4:	e7fd      	b.n	80074e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80074e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007524 <vPortValidateInterruptPriority+0x7c>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80074ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007528 <vPortValidateInterruptPriority+0x80>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d90b      	bls.n	800750e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80074f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fa:	f383 8811 	msr	BASEPRI, r3
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	603b      	str	r3, [r7, #0]
}
 8007508:	bf00      	nop
 800750a:	bf00      	nop
 800750c:	e7fd      	b.n	800750a <vPortValidateInterruptPriority+0x62>
	}
 800750e:	bf00      	nop
 8007510:	3714      	adds	r7, #20
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	e000e3f0 	.word	0xe000e3f0
 8007520:	20001378 	.word	0x20001378
 8007524:	e000ed0c 	.word	0xe000ed0c
 8007528:	2000137c 	.word	0x2000137c

0800752c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b08a      	sub	sp, #40	@ 0x28
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007534:	2300      	movs	r3, #0
 8007536:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007538:	f7fe fc82 	bl	8005e40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800753c:	4b5c      	ldr	r3, [pc, #368]	@ (80076b0 <pvPortMalloc+0x184>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007544:	f000 f924 	bl	8007790 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007548:	4b5a      	ldr	r3, [pc, #360]	@ (80076b4 <pvPortMalloc+0x188>)
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4013      	ands	r3, r2
 8007550:	2b00      	cmp	r3, #0
 8007552:	f040 8095 	bne.w	8007680 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d01e      	beq.n	800759a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800755c:	2208      	movs	r2, #8
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4413      	add	r3, r2
 8007562:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f003 0307 	and.w	r3, r3, #7
 800756a:	2b00      	cmp	r3, #0
 800756c:	d015      	beq.n	800759a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f023 0307 	bic.w	r3, r3, #7
 8007574:	3308      	adds	r3, #8
 8007576:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f003 0307 	and.w	r3, r3, #7
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00b      	beq.n	800759a <pvPortMalloc+0x6e>
	__asm volatile
 8007582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007586:	f383 8811 	msr	BASEPRI, r3
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	617b      	str	r3, [r7, #20]
}
 8007594:	bf00      	nop
 8007596:	bf00      	nop
 8007598:	e7fd      	b.n	8007596 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d06f      	beq.n	8007680 <pvPortMalloc+0x154>
 80075a0:	4b45      	ldr	r3, [pc, #276]	@ (80076b8 <pvPortMalloc+0x18c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d86a      	bhi.n	8007680 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80075aa:	4b44      	ldr	r3, [pc, #272]	@ (80076bc <pvPortMalloc+0x190>)
 80075ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80075ae:	4b43      	ldr	r3, [pc, #268]	@ (80076bc <pvPortMalloc+0x190>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075b4:	e004      	b.n	80075c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80075b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80075ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d903      	bls.n	80075d2 <pvPortMalloc+0xa6>
 80075ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1f1      	bne.n	80075b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80075d2:	4b37      	ldr	r3, [pc, #220]	@ (80076b0 <pvPortMalloc+0x184>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075d8:	429a      	cmp	r2, r3
 80075da:	d051      	beq.n	8007680 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2208      	movs	r2, #8
 80075e2:	4413      	add	r3, r2
 80075e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80075e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80075ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f0:	685a      	ldr	r2, [r3, #4]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	1ad2      	subs	r2, r2, r3
 80075f6:	2308      	movs	r3, #8
 80075f8:	005b      	lsls	r3, r3, #1
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d920      	bls.n	8007640 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80075fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4413      	add	r3, r2
 8007604:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	f003 0307 	and.w	r3, r3, #7
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00b      	beq.n	8007628 <pvPortMalloc+0xfc>
	__asm volatile
 8007610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007614:	f383 8811 	msr	BASEPRI, r3
 8007618:	f3bf 8f6f 	isb	sy
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	613b      	str	r3, [r7, #16]
}
 8007622:	bf00      	nop
 8007624:	bf00      	nop
 8007626:	e7fd      	b.n	8007624 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	1ad2      	subs	r2, r2, r3
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800763a:	69b8      	ldr	r0, [r7, #24]
 800763c:	f000 f90a 	bl	8007854 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007640:	4b1d      	ldr	r3, [pc, #116]	@ (80076b8 <pvPortMalloc+0x18c>)
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	4a1b      	ldr	r2, [pc, #108]	@ (80076b8 <pvPortMalloc+0x18c>)
 800764c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800764e:	4b1a      	ldr	r3, [pc, #104]	@ (80076b8 <pvPortMalloc+0x18c>)
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	4b1b      	ldr	r3, [pc, #108]	@ (80076c0 <pvPortMalloc+0x194>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	429a      	cmp	r2, r3
 8007658:	d203      	bcs.n	8007662 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800765a:	4b17      	ldr	r3, [pc, #92]	@ (80076b8 <pvPortMalloc+0x18c>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a18      	ldr	r2, [pc, #96]	@ (80076c0 <pvPortMalloc+0x194>)
 8007660:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	4b13      	ldr	r3, [pc, #76]	@ (80076b4 <pvPortMalloc+0x188>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	431a      	orrs	r2, r3
 800766c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007672:	2200      	movs	r2, #0
 8007674:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007676:	4b13      	ldr	r3, [pc, #76]	@ (80076c4 <pvPortMalloc+0x198>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	3301      	adds	r3, #1
 800767c:	4a11      	ldr	r2, [pc, #68]	@ (80076c4 <pvPortMalloc+0x198>)
 800767e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007680:	f7fe fbec 	bl	8005e5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	f003 0307 	and.w	r3, r3, #7
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00b      	beq.n	80076a6 <pvPortMalloc+0x17a>
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	60fb      	str	r3, [r7, #12]
}
 80076a0:	bf00      	nop
 80076a2:	bf00      	nop
 80076a4:	e7fd      	b.n	80076a2 <pvPortMalloc+0x176>
	return pvReturn;
 80076a6:	69fb      	ldr	r3, [r7, #28]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3728      	adds	r7, #40	@ 0x28
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	20003a98 	.word	0x20003a98
 80076b4:	20003aac 	.word	0x20003aac
 80076b8:	20003a9c 	.word	0x20003a9c
 80076bc:	20003a90 	.word	0x20003a90
 80076c0:	20003aa0 	.word	0x20003aa0
 80076c4:	20003aa4 	.word	0x20003aa4

080076c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d04f      	beq.n	800777a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80076da:	2308      	movs	r3, #8
 80076dc:	425b      	negs	r3, r3
 80076de:	697a      	ldr	r2, [r7, #20]
 80076e0:	4413      	add	r3, r2
 80076e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	4b25      	ldr	r3, [pc, #148]	@ (8007784 <vPortFree+0xbc>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4013      	ands	r3, r2
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10b      	bne.n	800770e <vPortFree+0x46>
	__asm volatile
 80076f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	60fb      	str	r3, [r7, #12]
}
 8007708:	bf00      	nop
 800770a:	bf00      	nop
 800770c:	e7fd      	b.n	800770a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00b      	beq.n	800772e <vPortFree+0x66>
	__asm volatile
 8007716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771a:	f383 8811 	msr	BASEPRI, r3
 800771e:	f3bf 8f6f 	isb	sy
 8007722:	f3bf 8f4f 	dsb	sy
 8007726:	60bb      	str	r3, [r7, #8]
}
 8007728:	bf00      	nop
 800772a:	bf00      	nop
 800772c:	e7fd      	b.n	800772a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	685a      	ldr	r2, [r3, #4]
 8007732:	4b14      	ldr	r3, [pc, #80]	@ (8007784 <vPortFree+0xbc>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4013      	ands	r3, r2
 8007738:	2b00      	cmp	r3, #0
 800773a:	d01e      	beq.n	800777a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d11a      	bne.n	800777a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	685a      	ldr	r2, [r3, #4]
 8007748:	4b0e      	ldr	r3, [pc, #56]	@ (8007784 <vPortFree+0xbc>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	43db      	mvns	r3, r3
 800774e:	401a      	ands	r2, r3
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007754:	f7fe fb74 	bl	8005e40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	4b0a      	ldr	r3, [pc, #40]	@ (8007788 <vPortFree+0xc0>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4413      	add	r3, r2
 8007762:	4a09      	ldr	r2, [pc, #36]	@ (8007788 <vPortFree+0xc0>)
 8007764:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007766:	6938      	ldr	r0, [r7, #16]
 8007768:	f000 f874 	bl	8007854 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800776c:	4b07      	ldr	r3, [pc, #28]	@ (800778c <vPortFree+0xc4>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	3301      	adds	r3, #1
 8007772:	4a06      	ldr	r2, [pc, #24]	@ (800778c <vPortFree+0xc4>)
 8007774:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007776:	f7fe fb71 	bl	8005e5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800777a:	bf00      	nop
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	20003aac 	.word	0x20003aac
 8007788:	20003a9c 	.word	0x20003a9c
 800778c:	20003aa8 	.word	0x20003aa8

08007790 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007796:	f242 7310 	movw	r3, #10000	@ 0x2710
 800779a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800779c:	4b27      	ldr	r3, [pc, #156]	@ (800783c <prvHeapInit+0xac>)
 800779e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f003 0307 	and.w	r3, r3, #7
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00c      	beq.n	80077c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	3307      	adds	r3, #7
 80077ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f023 0307 	bic.w	r3, r3, #7
 80077b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	4a1f      	ldr	r2, [pc, #124]	@ (800783c <prvHeapInit+0xac>)
 80077c0:	4413      	add	r3, r2
 80077c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80077c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007840 <prvHeapInit+0xb0>)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80077ce:	4b1c      	ldr	r3, [pc, #112]	@ (8007840 <prvHeapInit+0xb0>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	4413      	add	r3, r2
 80077da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80077dc:	2208      	movs	r2, #8
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	1a9b      	subs	r3, r3, r2
 80077e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f023 0307 	bic.w	r3, r3, #7
 80077ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4a15      	ldr	r2, [pc, #84]	@ (8007844 <prvHeapInit+0xb4>)
 80077f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80077f2:	4b14      	ldr	r3, [pc, #80]	@ (8007844 <prvHeapInit+0xb4>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2200      	movs	r2, #0
 80077f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80077fa:	4b12      	ldr	r3, [pc, #72]	@ (8007844 <prvHeapInit+0xb4>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2200      	movs	r2, #0
 8007800:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	1ad2      	subs	r2, r2, r3
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007810:	4b0c      	ldr	r3, [pc, #48]	@ (8007844 <prvHeapInit+0xb4>)
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	4a0a      	ldr	r2, [pc, #40]	@ (8007848 <prvHeapInit+0xb8>)
 800781e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	4a09      	ldr	r2, [pc, #36]	@ (800784c <prvHeapInit+0xbc>)
 8007826:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007828:	4b09      	ldr	r3, [pc, #36]	@ (8007850 <prvHeapInit+0xc0>)
 800782a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800782e:	601a      	str	r2, [r3, #0]
}
 8007830:	bf00      	nop
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	20001380 	.word	0x20001380
 8007840:	20003a90 	.word	0x20003a90
 8007844:	20003a98 	.word	0x20003a98
 8007848:	20003aa0 	.word	0x20003aa0
 800784c:	20003a9c 	.word	0x20003a9c
 8007850:	20003aac 	.word	0x20003aac

08007854 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800785c:	4b28      	ldr	r3, [pc, #160]	@ (8007900 <prvInsertBlockIntoFreeList+0xac>)
 800785e:	60fb      	str	r3, [r7, #12]
 8007860:	e002      	b.n	8007868 <prvInsertBlockIntoFreeList+0x14>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	60fb      	str	r3, [r7, #12]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	429a      	cmp	r2, r3
 8007870:	d8f7      	bhi.n	8007862 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	4413      	add	r3, r2
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	429a      	cmp	r2, r3
 8007882:	d108      	bne.n	8007896 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	441a      	add	r2, r3
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	441a      	add	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d118      	bne.n	80078dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	4b15      	ldr	r3, [pc, #84]	@ (8007904 <prvInsertBlockIntoFreeList+0xb0>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d00d      	beq.n	80078d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	441a      	add	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	601a      	str	r2, [r3, #0]
 80078d0:	e008      	b.n	80078e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80078d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007904 <prvInsertBlockIntoFreeList+0xb0>)
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	601a      	str	r2, [r3, #0]
 80078da:	e003      	b.n	80078e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d002      	beq.n	80078f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078f2:	bf00      	nop
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	20003a90 	.word	0x20003a90
 8007904:	20003a98 	.word	0x20003a98

08007908 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 8007908:	b480      	push	{r7}
 800790a:	af00      	add	r7, sp, #0
}
 800790c:	bf00      	nop
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 800791a:	f003 fb57 	bl	800afcc <touchgfx_components_init>
  touchgfx_init();
 800791e:	f003 fb2b 	bl	800af78 <touchgfx_init>
}
 8007922:	bf00      	nop
 8007924:	bd80      	pop	{r7, pc}

08007926 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800792a:	f003 fb57 	bl	800afdc <touchgfx_taskEntry>
}
 800792e:	bf00      	nop
 8007930:	bd80      	pop	{r7, pc}
	...

08007934 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
    {
 800793c:	4a04      	ldr	r2, [pc, #16]	@ (8007950 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	601a      	str	r2, [r3, #0]
    }
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4618      	mov	r0, r3
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	08014f30 	.word	0x08014f30

08007954 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
    }
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f7ff ffe9 	bl	8007934 <_ZN8touchgfx12FontProviderD1Ev>
 8007962:	2104      	movs	r1, #4
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f00b fd29 	bl	80133bc <_ZdlPvj>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4618      	mov	r0, r3
 800796e:	3708      	adds	r7, #8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	460b      	mov	r3, r1
 800797e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8007980:	887b      	ldrh	r3, [r7, #2]
 8007982:	2b02      	cmp	r3, #2
 8007984:	d010      	beq.n	80079a8 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 8007986:	2b02      	cmp	r3, #2
 8007988:	dc13      	bgt.n	80079b2 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800798e:	2b01      	cmp	r3, #1
 8007990:	d005      	beq.n	800799e <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8007992:	e00e      	b.n	80079b2 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_1bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8007994:	f002 f8da 	bl	8009b4c <_ZN17TypedTextDatabase8getFontsEv>
 8007998:	4603      	mov	r3, r0
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	e00a      	b.n	80079b4 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_1bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800799e:	f002 f8d5 	bl	8009b4c <_ZN17TypedTextDatabase8getFontsEv>
 80079a2:	4603      	mov	r3, r0
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	e005      	b.n	80079b4 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_1bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80079a8:	f002 f8d0 	bl	8009b4c <_ZN17TypedTextDatabase8getFontsEv>
 80079ac:	4603      	mov	r3, r0
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	e000      	b.n	80079b4 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 80079b2:	2300      	movs	r3, #0
    }
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_1bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_1bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	4a05      	ldr	r2, [pc, #20]	@ (80079dc <_ZN23ApplicationFontProviderD1Ev+0x20>)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7ff ffb1 	bl	8007934 <_ZN8touchgfx12FontProviderD1Ev>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4618      	mov	r0, r3
 80079d6:	3708      	adds	r7, #8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	08014f1c 	.word	0x08014f1c

080079e0 <_ZN23ApplicationFontProviderD0Ev>:
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7ff ffe7 	bl	80079bc <_ZN23ApplicationFontProviderD1Ev>
 80079ee:	2104      	movs	r1, #4
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f00b fce3 	bl	80133bc <_ZdlPvj>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4618      	mov	r0, r3
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
    {
 8007a08:	4a04      	ldr	r2, [pc, #16]	@ (8007a1c <_ZN8touchgfx4FontD1Ev+0x1c>)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	601a      	str	r2, [r3, #0]
    }
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4618      	mov	r0, r3
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	08015260 	.word	0x08015260

08007a20 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
    }
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7ff ffe9 	bl	8007a00 <_ZN8touchgfx4FontD1Ev>
 8007a2e:	2114      	movs	r1, #20
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f00b fcc3 	bl	80133bc <_ZdlPvj>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8007a40:	b590      	push	{r4, r7, lr}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8007a4c:	887b      	ldrh	r3, [r7, #2]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d101      	bne.n	8007a56 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8007a52:	2300      	movs	r3, #0
 8007a54:	e010      	b.n	8007a78 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8007a56:	2300      	movs	r3, #0
 8007a58:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3308      	adds	r3, #8
 8007a64:	681c      	ldr	r4, [r3, #0]
 8007a66:	f107 030f 	add.w	r3, r7, #15
 8007a6a:	f107 0210 	add.w	r2, r7, #16
 8007a6e:	8879      	ldrh	r1, [r7, #2]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	47a0      	blx	r4
 8007a74:	6178      	str	r0, [r7, #20]
        return glyph;
 8007a76:	697b      	ldr	r3, [r7, #20]
    }
 8007a78:	4618      	mov	r0, r3
 8007a7a:	371c      	adds	r7, #28
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd90      	pop	{r4, r7, pc}

08007a80 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	89db      	ldrh	r3, [r3, #14]
    }
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	8a1b      	ldrh	r3, [r3, #16]
    }
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	88db      	ldrh	r3, [r3, #6]
    }
 8007abc:	4618      	mov	r0, r3
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	889b      	ldrh	r3, [r3, #4]
    }
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	7a9b      	ldrb	r3, [r3, #10]
 8007aec:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8007af0:	b2db      	uxtb	r3, r3
    }
 8007af2:	4618      	mov	r0, r3
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8007afe:	b480      	push	{r7}
 8007b00:	b083      	sub	sp, #12
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	7a9b      	ldrb	r3, [r3, #10]
 8007b0a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007b0e:	b2db      	uxtb	r3, r3
    }
 8007b10:	4618      	mov	r0, r3
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	4a05      	ldr	r2, [pc, #20]	@ (8007b3c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	601a      	str	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7ff ff67 	bl	8007a00 <_ZN8touchgfx4FontD1Ev>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4618      	mov	r0, r3
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	08015d80 	.word	0x08015d80

08007b40 <_ZN8touchgfx9ConstFontD0Ev>:
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7ff ffe7 	bl	8007b1c <_ZN8touchgfx9ConstFontD1Ev>
 8007b4e:	211c      	movs	r1, #28
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f00b fc33 	bl	80133bc <_ZdlPvj>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	4a05      	ldr	r2, [pc, #20]	@ (8007b80 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	601a      	str	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7ff ffd3 	bl	8007b1c <_ZN8touchgfx9ConstFontD1Ev>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	08014f54 	.word	0x08014f54

08007b84 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7ff ffe7 	bl	8007b60 <_ZN8touchgfx13GeneratedFontD1Ev>
 8007b92:	212c      	movs	r1, #44	@ 0x2c
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f00b fc11 	bl	80133bc <_ZdlPvj>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3708      	adds	r7, #8
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
    {
 8007bac:	4a04      	ldr	r2, [pc, #16]	@ (8007bc0 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	601a      	str	r2, [r3, #0]
    }
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	08014f44 	.word	0x08014f44

08007bc4 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
    }
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f7ff ffe9 	bl	8007ba4 <_ZN8touchgfx9TypedTextD1Ev>
 8007bd2:	2108      	movs	r1, #8
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f00b fbf1 	bl	80133bc <_ZdlPvj>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 8007c08:	4618      	mov	r0, r3
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b08e      	sub	sp, #56	@ 0x38
 8007c18:	af0a      	add	r7, sp, #40	@ 0x28
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	4611      	mov	r1, r2
 8007c20:	461a      	mov	r2, r3
 8007c22:	460b      	mov	r3, r1
 8007c24:	80fb      	strh	r3, [r7, #6]
 8007c26:	4613      	mov	r3, r2
 8007c28:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	88b9      	ldrh	r1, [r7, #4]
 8007c2e:	88fa      	ldrh	r2, [r7, #6]
 8007c30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007c34:	9308      	str	r3, [sp, #32]
 8007c36:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007c38:	9307      	str	r3, [sp, #28]
 8007c3a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8007c3e:	9306      	str	r3, [sp, #24]
 8007c40:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007c44:	9305      	str	r3, [sp, #20]
 8007c46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007c4a:	9304      	str	r3, [sp, #16]
 8007c4c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007c50:	9303      	str	r3, [sp, #12]
 8007c52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c56:	9302      	str	r3, [sp, #8]
 8007c58:	7f3b      	ldrb	r3, [r7, #28]
 8007c5a:	9301      	str	r3, [sp, #4]
 8007c5c:	8b3b      	ldrh	r3, [r7, #24]
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	460b      	mov	r3, r1
 8007c62:	68b9      	ldr	r1, [r7, #8]
 8007c64:	f008 fb98 	bl	8010398 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8007c68:	4a09      	ldr	r2, [pc, #36]	@ (8007c90 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c72:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c78:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c7e:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c84:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	08014f54 	.word	0x08014f54

08007c94 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	69db      	ldr	r3, [r3, #28]
 8007ca2:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	889b      	ldrh	r3, [r3, #4]
 8007ca8:	0adb      	lsrs	r3, r3, #11
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4413      	add	r3, r2
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b089      	sub	sp, #36	@ 0x24
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	60f8      	str	r0, [r7, #12]
 8007cce:	460b      	mov	r3, r1
 8007cd0:	607a      	str	r2, [r7, #4]
 8007cd2:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d003      	beq.n	8007ce2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	7b1b      	ldrb	r3, [r3, #12]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	e031      	b.n	8007d4a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6a1a      	ldr	r2, [r3, #32]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	7b5b      	ldrb	r3, [r3, #13]
 8007cf2:	021b      	lsls	r3, r3, #8
 8007cf4:	b21b      	sxth	r3, r3
 8007cf6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007cfa:	b219      	sxth	r1, r3
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	7adb      	ldrb	r3, [r3, #11]
 8007d00:	b21b      	sxth	r3, r3
 8007d02:	430b      	orrs	r3, r1
 8007d04:	b21b      	sxth	r3, r3
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	7b1b      	ldrb	r3, [r3, #12]
 8007d12:	837b      	strh	r3, [r7, #26]
 8007d14:	e013      	b.n	8007d3e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	881b      	ldrh	r3, [r3, #0]
 8007d1a:	897a      	ldrh	r2, [r7, #10]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d103      	bne.n	8007d28 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8007d26:	e010      	b.n	8007d4a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	881b      	ldrh	r3, [r3, #0]
 8007d2c:	897a      	ldrh	r2, [r7, #10]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d309      	bcc.n	8007d46 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8007d32:	8b7b      	ldrh	r3, [r7, #26]
 8007d34:	3b01      	subs	r3, #1
 8007d36:	837b      	strh	r3, [r7, #26]
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	3304      	adds	r3, #4
 8007d3c:	61fb      	str	r3, [r7, #28]
 8007d3e:	8b7b      	ldrh	r3, [r7, #26]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1e8      	bne.n	8007d16 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 8007d44:	e000      	b.n	8007d48 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 8007d46:	bf00      	nop
        }
    }
    return 0;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3724      	adds	r7, #36	@ 0x24
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
	...

08007d58 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_1bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_1bpp();

touchgfx::GeneratedFont& getFont_verdana_10_1bpp()
{
    static touchgfx::GeneratedFont verdana_10_1bpp(glyphs_verdana_10_1bpp, 16, 10, 10, 0, 0, 1, 0, 0, 0, unicodes_verdana_10_1bpp, kerning_verdana_10_1bpp, 63, 0, 0, 0);
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	4801      	ldr	r0, [pc, #4]	@ (8007d64 <__tcf_0+0xc>)
 8007d5e:	f7ff feff 	bl	8007b60 <_ZN8touchgfx13GeneratedFontD1Ev>
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	20003ab0 	.word	0x20003ab0

08007d68 <_Z23getFont_verdana_10_1bppv>:
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b08e      	sub	sp, #56	@ 0x38
 8007d6c:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_10_1bpp(glyphs_verdana_10_1bpp, 16, 10, 10, 0, 0, 1, 0, 0, 0, unicodes_verdana_10_1bpp, kerning_verdana_10_1bpp, 63, 0, 0, 0);
 8007d6e:	4b21      	ldr	r3, [pc, #132]	@ (8007df4 <_Z23getFont_verdana_10_1bppv+0x8c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f3bf 8f5b 	dmb	ish
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	bf0c      	ite	eq
 8007d7e:	2301      	moveq	r3, #1
 8007d80:	2300      	movne	r3, #0
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d030      	beq.n	8007dea <_Z23getFont_verdana_10_1bppv+0x82>
 8007d88:	481a      	ldr	r0, [pc, #104]	@ (8007df4 <_Z23getFont_verdana_10_1bppv+0x8c>)
 8007d8a:	f00b fb19 	bl	80133c0 <__cxa_guard_acquire>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	bf14      	ite	ne
 8007d94:	2301      	movne	r3, #1
 8007d96:	2300      	moveq	r3, #0
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d025      	beq.n	8007dea <_Z23getFont_verdana_10_1bppv+0x82>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	930c      	str	r3, [sp, #48]	@ 0x30
 8007da2:	2300      	movs	r3, #0
 8007da4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007da6:	2300      	movs	r3, #0
 8007da8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007daa:	233f      	movs	r3, #63	@ 0x3f
 8007dac:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dae:	4b12      	ldr	r3, [pc, #72]	@ (8007df8 <_Z23getFont_verdana_10_1bppv+0x90>)
 8007db0:	9308      	str	r3, [sp, #32]
 8007db2:	4b12      	ldr	r3, [pc, #72]	@ (8007dfc <_Z23getFont_verdana_10_1bppv+0x94>)
 8007db4:	9307      	str	r3, [sp, #28]
 8007db6:	2300      	movs	r3, #0
 8007db8:	9306      	str	r3, [sp, #24]
 8007dba:	2300      	movs	r3, #0
 8007dbc:	9305      	str	r3, [sp, #20]
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	9304      	str	r3, [sp, #16]
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	9303      	str	r3, [sp, #12]
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	9302      	str	r3, [sp, #8]
 8007dca:	2300      	movs	r3, #0
 8007dcc:	9301      	str	r3, [sp, #4]
 8007dce:	230a      	movs	r3, #10
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	230a      	movs	r3, #10
 8007dd4:	2210      	movs	r2, #16
 8007dd6:	490a      	ldr	r1, [pc, #40]	@ (8007e00 <_Z23getFont_verdana_10_1bppv+0x98>)
 8007dd8:	480a      	ldr	r0, [pc, #40]	@ (8007e04 <_Z23getFont_verdana_10_1bppv+0x9c>)
 8007dda:	f7ff ff1b 	bl	8007c14 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007dde:	480a      	ldr	r0, [pc, #40]	@ (8007e08 <_Z23getFont_verdana_10_1bppv+0xa0>)
 8007de0:	f00b fb38 	bl	8013454 <atexit>
 8007de4:	4803      	ldr	r0, [pc, #12]	@ (8007df4 <_Z23getFont_verdana_10_1bppv+0x8c>)
 8007de6:	f00b faf7 	bl	80133d8 <__cxa_guard_release>
    return verdana_10_1bpp;
 8007dea:	4b06      	ldr	r3, [pc, #24]	@ (8007e04 <_Z23getFont_verdana_10_1bppv+0x9c>)
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	20003adc 	.word	0x20003adc
 8007df8:	080160b0 	.word	0x080160b0
 8007dfc:	080160bc 	.word	0x080160bc
 8007e00:	08015fb0 	.word	0x08015fb0
 8007e04:	20003ab0 	.word	0x20003ab0
 8007e08:	08007d59 	.word	0x08007d59

08007e0c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_1bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_1bpp();

touchgfx::GeneratedFont& getFont_verdana_20_1bpp()
{
    static touchgfx::GeneratedFont verdana_20_1bpp(glyphs_verdana_20_1bpp, 1, 20, 20, 0, 0, 1, 0, 0, 0, unicodes_verdana_20_1bpp, kerning_verdana_20_1bpp, 63, 0, 0, 0);
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	4801      	ldr	r0, [pc, #4]	@ (8007e18 <__tcf_0+0xc>)
 8007e12:	f7ff fea5 	bl	8007b60 <_ZN8touchgfx13GeneratedFontD1Ev>
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	20003ae0 	.word	0x20003ae0

08007e1c <_Z23getFont_verdana_20_1bppv>:
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b08e      	sub	sp, #56	@ 0x38
 8007e20:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_20_1bpp(glyphs_verdana_20_1bpp, 1, 20, 20, 0, 0, 1, 0, 0, 0, unicodes_verdana_20_1bpp, kerning_verdana_20_1bpp, 63, 0, 0, 0);
 8007e22:	4b21      	ldr	r3, [pc, #132]	@ (8007ea8 <_Z23getFont_verdana_20_1bppv+0x8c>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f3bf 8f5b 	dmb	ish
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	bf0c      	ite	eq
 8007e32:	2301      	moveq	r3, #1
 8007e34:	2300      	movne	r3, #0
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d030      	beq.n	8007e9e <_Z23getFont_verdana_20_1bppv+0x82>
 8007e3c:	481a      	ldr	r0, [pc, #104]	@ (8007ea8 <_Z23getFont_verdana_20_1bppv+0x8c>)
 8007e3e:	f00b fabf 	bl	80133c0 <__cxa_guard_acquire>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	bf14      	ite	ne
 8007e48:	2301      	movne	r3, #1
 8007e4a:	2300      	moveq	r3, #0
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d025      	beq.n	8007e9e <_Z23getFont_verdana_20_1bppv+0x82>
 8007e52:	2300      	movs	r3, #0
 8007e54:	930c      	str	r3, [sp, #48]	@ 0x30
 8007e56:	2300      	movs	r3, #0
 8007e58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e5e:	233f      	movs	r3, #63	@ 0x3f
 8007e60:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e62:	4b12      	ldr	r3, [pc, #72]	@ (8007eac <_Z23getFont_verdana_20_1bppv+0x90>)
 8007e64:	9308      	str	r3, [sp, #32]
 8007e66:	4b12      	ldr	r3, [pc, #72]	@ (8007eb0 <_Z23getFont_verdana_20_1bppv+0x94>)
 8007e68:	9307      	str	r3, [sp, #28]
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	9306      	str	r3, [sp, #24]
 8007e6e:	2300      	movs	r3, #0
 8007e70:	9305      	str	r3, [sp, #20]
 8007e72:	2300      	movs	r3, #0
 8007e74:	9304      	str	r3, [sp, #16]
 8007e76:	2301      	movs	r3, #1
 8007e78:	9303      	str	r3, [sp, #12]
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	9302      	str	r3, [sp, #8]
 8007e7e:	2300      	movs	r3, #0
 8007e80:	9301      	str	r3, [sp, #4]
 8007e82:	2314      	movs	r3, #20
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	2314      	movs	r3, #20
 8007e88:	2201      	movs	r2, #1
 8007e8a:	490a      	ldr	r1, [pc, #40]	@ (8007eb4 <_Z23getFont_verdana_20_1bppv+0x98>)
 8007e8c:	480a      	ldr	r0, [pc, #40]	@ (8007eb8 <_Z23getFont_verdana_20_1bppv+0x9c>)
 8007e8e:	f7ff fec1 	bl	8007c14 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007e92:	480a      	ldr	r0, [pc, #40]	@ (8007ebc <_Z23getFont_verdana_20_1bppv+0xa0>)
 8007e94:	f00b fade 	bl	8013454 <atexit>
 8007e98:	4803      	ldr	r0, [pc, #12]	@ (8007ea8 <_Z23getFont_verdana_20_1bppv+0x8c>)
 8007e9a:	f00b fa9d 	bl	80133d8 <__cxa_guard_release>
    return verdana_20_1bpp;
 8007e9e:	4b06      	ldr	r3, [pc, #24]	@ (8007eb8 <_Z23getFont_verdana_20_1bppv+0x9c>)
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	20003b0c 	.word	0x20003b0c
 8007eac:	080160b4 	.word	0x080160b4
 8007eb0:	080160c0 	.word	0x080160c0
 8007eb4:	08016090 	.word	0x08016090
 8007eb8:	20003ae0 	.word	0x20003ae0
 8007ebc:	08007e0d 	.word	0x08007e0d

08007ec0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_1bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_1bpp();

touchgfx::GeneratedFont& getFont_verdana_40_1bpp()
{
    static touchgfx::GeneratedFont verdana_40_1bpp(glyphs_verdana_40_1bpp, 1, 40, 40, 0, 0, 1, 0, 0, 0, unicodes_verdana_40_1bpp, kerning_verdana_40_1bpp, 63, 0, 0, 0);
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	4801      	ldr	r0, [pc, #4]	@ (8007ecc <__tcf_0+0xc>)
 8007ec6:	f7ff fe4b 	bl	8007b60 <_ZN8touchgfx13GeneratedFontD1Ev>
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	20003b10 	.word	0x20003b10

08007ed0 <_Z23getFont_verdana_40_1bppv>:
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b08e      	sub	sp, #56	@ 0x38
 8007ed4:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_40_1bpp(glyphs_verdana_40_1bpp, 1, 40, 40, 0, 0, 1, 0, 0, 0, unicodes_verdana_40_1bpp, kerning_verdana_40_1bpp, 63, 0, 0, 0);
 8007ed6:	4b21      	ldr	r3, [pc, #132]	@ (8007f5c <_Z23getFont_verdana_40_1bppv+0x8c>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f3bf 8f5b 	dmb	ish
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	bf0c      	ite	eq
 8007ee6:	2301      	moveq	r3, #1
 8007ee8:	2300      	movne	r3, #0
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d030      	beq.n	8007f52 <_Z23getFont_verdana_40_1bppv+0x82>
 8007ef0:	481a      	ldr	r0, [pc, #104]	@ (8007f5c <_Z23getFont_verdana_40_1bppv+0x8c>)
 8007ef2:	f00b fa65 	bl	80133c0 <__cxa_guard_acquire>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	bf14      	ite	ne
 8007efc:	2301      	movne	r3, #1
 8007efe:	2300      	moveq	r3, #0
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d025      	beq.n	8007f52 <_Z23getFont_verdana_40_1bppv+0x82>
 8007f06:	2300      	movs	r3, #0
 8007f08:	930c      	str	r3, [sp, #48]	@ 0x30
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f0e:	2300      	movs	r3, #0
 8007f10:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f12:	233f      	movs	r3, #63	@ 0x3f
 8007f14:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f16:	4b12      	ldr	r3, [pc, #72]	@ (8007f60 <_Z23getFont_verdana_40_1bppv+0x90>)
 8007f18:	9308      	str	r3, [sp, #32]
 8007f1a:	4b12      	ldr	r3, [pc, #72]	@ (8007f64 <_Z23getFont_verdana_40_1bppv+0x94>)
 8007f1c:	9307      	str	r3, [sp, #28]
 8007f1e:	2300      	movs	r3, #0
 8007f20:	9306      	str	r3, [sp, #24]
 8007f22:	2300      	movs	r3, #0
 8007f24:	9305      	str	r3, [sp, #20]
 8007f26:	2300      	movs	r3, #0
 8007f28:	9304      	str	r3, [sp, #16]
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	9303      	str	r3, [sp, #12]
 8007f2e:	2300      	movs	r3, #0
 8007f30:	9302      	str	r3, [sp, #8]
 8007f32:	2300      	movs	r3, #0
 8007f34:	9301      	str	r3, [sp, #4]
 8007f36:	2328      	movs	r3, #40	@ 0x28
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	2328      	movs	r3, #40	@ 0x28
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	490a      	ldr	r1, [pc, #40]	@ (8007f68 <_Z23getFont_verdana_40_1bppv+0x98>)
 8007f40:	480a      	ldr	r0, [pc, #40]	@ (8007f6c <_Z23getFont_verdana_40_1bppv+0x9c>)
 8007f42:	f7ff fe67 	bl	8007c14 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007f46:	480a      	ldr	r0, [pc, #40]	@ (8007f70 <_Z23getFont_verdana_40_1bppv+0xa0>)
 8007f48:	f00b fa84 	bl	8013454 <atexit>
 8007f4c:	4803      	ldr	r0, [pc, #12]	@ (8007f5c <_Z23getFont_verdana_40_1bppv+0x8c>)
 8007f4e:	f00b fa43 	bl	80133d8 <__cxa_guard_release>
    return verdana_40_1bpp;
 8007f52:	4b06      	ldr	r3, [pc, #24]	@ (8007f6c <_Z23getFont_verdana_40_1bppv+0x9c>)
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	20003b3c 	.word	0x20003b3c
 8007f60:	080160b8 	.word	0x080160b8
 8007f64:	080160c4 	.word	0x080160c4
 8007f68:	080160a0 	.word	0x080160a0
 8007f6c:	20003b10 	.word	0x20003b10
 8007f70:	08007ec1 	.word	0x08007ec1

08007f74 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	4618      	mov	r0, r3
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8007f96:	bf00      	nop
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr

08007fa2 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8007fa2:	b480      	push	{r7}
 8007fa4:	b083      	sub	sp, #12
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8007fc2:	bf00      	nop
 8007fc4:	370c      	adds	r7, #12
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr

08007fce <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8007fce:	b480      	push	{r7}
 8007fd0:	b083      	sub	sp, #12
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 8007fda:	bf00      	nop
 8007fdc:	370c      	adds	r7, #12
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8007fe6:	b480      	push	{r7}
 8007fe8:	b083      	sub	sp, #12
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
    {
    }
 8007fee:	bf00      	nop
 8007ff0:	370c      	adds	r7, #12
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8007ffa:	b480      	push	{r7}
 8007ffc:	b083      	sub	sp, #12
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
    {
    }
 8008002:	bf00      	nop
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
	...

08008010 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
    {
 8008018:	4a04      	ldr	r2, [pc, #16]	@ (800802c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	601a      	str	r2, [r3, #0]
    }
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4618      	mov	r0, r3
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr
 800802c:	080150c4 	.word	0x080150c4

08008030 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
    }
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f7ff ffe9 	bl	8008010 <_ZN8touchgfx15UIEventListenerD1Ev>
 800803e:	2104      	movs	r1, #4
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f00b f9bb 	bl	80133bc <_ZdlPvj>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4618      	mov	r0, r3
 800804a:	3708      	adds	r7, #8
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
    {
    }
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	683a      	ldr	r2, [r7, #0]
 800808a:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800808e:	6810      	ldr	r0, [r2, #0]
 8008090:	6851      	ldr	r1, [r2, #4]
 8008092:	c303      	stmia	r3!, {r0, r1}
    }
 8008094:	bf00      	nop
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	3304      	adds	r3, #4
 80080ac:	4618      	mov	r0, r3
 80080ae:	f007 f8a6 	bl	800f1fe <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 80080b2:	bf00      	nop
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
	...

080080bc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
    {
 80080c4:	4a04      	ldr	r2, [pc, #16]	@ (80080d8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	601a      	str	r2, [r3, #0]
    }
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4618      	mov	r0, r3
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr
 80080d8:	080150ac 	.word	0x080150ac

080080dc <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
    }
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f7ff ffe9 	bl	80080bc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80080ea:	2104      	movs	r1, #4
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f00b f965 	bl	80133bc <_ZdlPvj>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4618      	mov	r0, r3
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 80080fc:	b480      	push	{r7}
 80080fe:	af00      	add	r7, sp, #0
    {
        return instance;
 8008100:	4b03      	ldr	r3, [pc, #12]	@ (8008110 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8008102:	681b      	ldr	r3, [r3, #0]
    }
 8008104:	4618      	mov	r0, r3
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	20004354 	.word	0x20004354

08008114 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800811c:	4a07      	ldr	r2, [pc, #28]	@ (800813c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	601a      	str	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	605a      	str	r2, [r3, #4]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	721a      	strb	r2, [r3, #8]
    {
    }
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4618      	mov	r0, r3
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr
 800813c:	08015088 	.word	0x08015088

08008140 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
    {
 8008148:	4a04      	ldr	r2, [pc, #16]	@ (800815c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	601a      	str	r2, [r3, #0]
    }
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4618      	mov	r0, r3
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	08015088 	.word	0x08015088

08008160 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
    }
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f7ff ffe9 	bl	8008140 <_ZN8touchgfx10TransitionD1Ev>
 800816e:	210c      	movs	r1, #12
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f00b f923 	bl	80133bc <_ZdlPvj>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4618      	mov	r0, r3
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
    {
    }
 8008188:	bf00      	nop
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
    {
    }
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
    {
    }
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 80081c4:	f006 fff6 	bl	800f1b4 <_ZN8touchgfx11Application11getInstanceEv>
 80081c8:	4603      	mov	r3, r0
 80081ca:	4618      	mov	r0, r3
 80081cc:	f007 fc3a 	bl	800fa44 <_ZN8touchgfx11Application10invalidateEv>
    }
 80081d0:	bf00      	nop
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	683a      	ldr	r2, [r7, #0]
 80081e6:	605a      	str	r2, [r3, #4]
    }
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	4a05      	ldr	r2, [pc, #20]	@ (8008214 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	601a      	str	r2, [r3, #0]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4618      	mov	r0, r3
 8008206:	f7ff ff03 	bl	8008010 <_ZN8touchgfx15UIEventListenerD1Ev>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4618      	mov	r0, r3
 800820e:	3708      	adds	r7, #8
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	08015ccc 	.word	0x08015ccc

08008218 <_ZN8touchgfx11ApplicationD0Ev>:
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f7ff ffe7 	bl	80081f4 <_ZN8touchgfx11ApplicationD1Ev>
 8008226:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f00b f8c6 	bl	80133bc <_ZdlPvj>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4618      	mov	r0, r3
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
	...

0800823c <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4618      	mov	r0, r3
 8008248:	f007 f876 	bl	800f338 <_ZN8touchgfx11ApplicationC1Ev>
 800824c:	4a09      	ldr	r2, [pc, #36]	@ (8008274 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
          pendingScreenTransitionCallback(0)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    {
        instance = this;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a04      	ldr	r2, [pc, #16]	@ (8008278 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8008266:	6013      	str	r3, [r2, #0]
    }
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4618      	mov	r0, r3
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	0801503c 	.word	0x0801503c
 8008278:	200043a0 	.word	0x200043a0

0800827c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f804 	bl	8008292 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800828a:	bf00      	nop
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8008292:	b580      	push	{r7, lr}
 8008294:	b082      	sub	sp, #8
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00f      	beq.n	80082c4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	330c      	adds	r3, #12
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4610      	mov	r0, r2
 80082b8:	4798      	blx	r3
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d001      	beq.n	80082c4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80082c0:	2301      	movs	r3, #1
 80082c2:	e000      	b.n	80082c6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 80082c4:	2300      	movs	r3, #0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00e      	beq.n	80082e8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	3308      	adds	r3, #8
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4610      	mov	r0, r2
 80082de:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        }
    }
 80082e8:	bf00      	nop
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	683a      	ldr	r2, [r7, #0]
 80082fe:	601a      	str	r2, [r3, #0]
    }
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	4a05      	ldr	r2, [pc, #20]	@ (800832c <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	601a      	str	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4618      	mov	r0, r3
 800831e:	f7ff ff69 	bl	80081f4 <_ZN8touchgfx11ApplicationD1Ev>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4618      	mov	r0, r3
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	0801503c 	.word	0x0801503c

08008330 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f7ff ffe7 	bl	800830c <_ZN8touchgfx14MVPApplicationD1Ev>
 800833e:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f00b f83a 	bl	80133bc <_ZdlPvj>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4618      	mov	r0, r3
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
	...

08008354 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	4a08      	ldr	r2, [pc, #32]	@ (8008380 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	601a      	str	r2, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8008368:	4618      	mov	r0, r3
 800836a:	f000 fac1 	bl	80088f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4618      	mov	r0, r3
 8008372:	f7ff ffcb 	bl	800830c <_ZN8touchgfx14MVPApplicationD1Ev>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4618      	mov	r0, r3
 800837a:	3708      	adds	r7, #8
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	08014fd8 	.word	0x08014fd8

08008384 <_ZN23FrontendApplicationBaseD0Ev>:
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f7ff ffe1 	bl	8008354 <_ZN23FrontendApplicationBaseD1Ev>
 8008392:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f00b f810 	bl	80133bc <_ZdlPvj>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4618      	mov	r0, r3
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b082      	sub	sp, #8
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
    {
        gotoscreenScreenNoTransition();
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f876 	bl	80084a0 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 80083b4:	bf00      	nop
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	721a      	strb	r2, [r3, #8]
    }
 80083ca:	bf00      	nop
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 80083d6:	b480      	push	{r7}
 80083d8:	b083      	sub	sp, #12
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	6039      	str	r1, [r7, #0]
    {
        model = m;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	683a      	ldr	r2, [r7, #0]
 80083e4:	605a      	str	r2, [r3, #4]
    }
 80083e6:	bf00      	nop
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
	...

080083f4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	4618      	mov	r0, r3
 8008404:	f7ff ff1a 	bl	800823c <_ZN8touchgfx14MVPApplicationC1Ev>
 8008408:	4a10      	ldr	r2, [pc, #64]	@ (800844c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8008414:	4618      	mov	r0, r3
 8008416:	f000 f899 	bl	800854c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
      model(m)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800842a:	f7ff fe67 	bl	80080fc <_ZN8touchgfx3HAL11getInstanceEv>
 800842e:	4603      	mov	r3, r0
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	3208      	adds	r2, #8
 8008434:	6812      	ldr	r2, [r2, #0]
 8008436:	2100      	movs	r1, #0
 8008438:	4618      	mov	r0, r3
 800843a:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800843c:	2000      	movs	r0, #0
 800843e:	f001 fb0d 	bl	8009a5c <_ZN8touchgfx5Texts11setLanguageEt>
}
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	08014fd8 	.word	0x08014fd8

08008450 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4618      	mov	r0, r3
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	683a      	ldr	r2, [r7, #0]
 8008476:	4611      	mov	r1, r2
 8008478:	4618      	mov	r0, r3
 800847a:	f7ff ffe9 	bl	8008450 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	685a      	ldr	r2, [r3, #4]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	605a      	str	r2, [r3, #4]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	683a      	ldr	r2, [r7, #0]
 800848a:	3308      	adds	r3, #8
 800848c:	3208      	adds	r2, #8
 800848e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008492:	e883 0003 	stmia.w	r3, {r0, r1}
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4618      	mov	r0, r3
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 80084a0:	b590      	push	{r4, r7, lr}
 80084a2:	b089      	sub	sp, #36	@ 0x24
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenNoTransitionImpl);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 80084ae:	4b10      	ldr	r3, [pc, #64]	@ (80084f0 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 80084b0:	61bb      	str	r3, [r7, #24]
 80084b2:	2300      	movs	r3, #0
 80084b4:	61fb      	str	r3, [r7, #28]
 80084b6:	f107 0008 	add.w	r0, r7, #8
 80084ba:	f107 0318 	add.w	r3, r7, #24
 80084be:	cb0c      	ldmia	r3, {r2, r3}
 80084c0:	6879      	ldr	r1, [r7, #4]
 80084c2:	f000 f85f 	bl	8008584 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80084c6:	f107 0308 	add.w	r3, r7, #8
 80084ca:	4619      	mov	r1, r3
 80084cc:	4620      	mov	r0, r4
 80084ce:	f7ff ffcb 	bl	8008468 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80084d2:	f107 0308 	add.w	r3, r7, #8
 80084d6:	4618      	mov	r0, r3
 80084d8:	f000 fa0a 	bl	80088f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 80084e8:	bf00      	nop
 80084ea:	3724      	adds	r7, #36	@ 0x24
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd90      	pop	{r4, r7, pc}
 80084f0:	080084f5 	.word	0x080084f5

080084f4 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af02      	add	r7, sp, #8
 80084fa:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8008508:	461a      	mov	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8008510:	9300      	str	r3, [sp, #0]
 8008512:	4b04      	ldr	r3, [pc, #16]	@ (8008524 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 8008514:	4804      	ldr	r0, [pc, #16]	@ (8008528 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 8008516:	f000 f867 	bl	80085e8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800851a:	bf00      	nop
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	20004394 	.word	0x20004394
 8008528:	20004390 	.word	0x20004390

0800852c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	4a04      	ldr	r2, [pc, #16]	@ (8008548 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	601a      	str	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4618      	mov	r0, r3
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr
 8008548:	080150ac 	.word	0x080150ac

0800854c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4618      	mov	r0, r3
 8008558:	f7ff ffe8 	bl	800852c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800855c:	4a08      	ldr	r2, [pc, #32]	@ (8008580 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	601a      	str	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	605a      	str	r2, [r3, #4]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	609a      	str	r2, [r3, #8]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	60da      	str	r2, [r3, #12]
    {
    }
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4618      	mov	r0, r3
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	08015024 	.word	0x08015024

08008584 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	4639      	mov	r1, r7
 8008590:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	4618      	mov	r0, r3
 8008598:	f7ff ffc8 	bl	800852c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800859c:	4a08      	ldr	r2, [pc, #32]	@ (80085c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	601a      	str	r2, [r3, #0]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	605a      	str	r2, [r3, #4]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	3308      	adds	r3, #8
 80085ac:	463a      	mov	r2, r7
 80085ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80085b2:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	4618      	mov	r0, r3
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	08015024 	.word	0x08015024

080085c4 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7ff fda0 	bl	8008114 <_ZN8touchgfx10TransitionC1Ev>
 80085d4:	4a03      	ldr	r2, [pc, #12]	@ (80085e4 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4618      	mov	r0, r3
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	08014fb4 	.word	0x08014fb4

080085e8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80085e8:	b590      	push	{r4, r7, lr}
 80085ea:	b08f      	sub	sp, #60	@ 0x3c
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
 80085f4:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	689a      	ldr	r2, [r3, #8]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	3320      	adds	r3, #32
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4610      	mov	r0, r2
 8008606:	4798      	blx	r3
 8008608:	4603      	mov	r3, r0
 800860a:	f5b3 7fb0 	cmp.w	r3, #352	@ 0x160
 800860e:	d205      	bcs.n	800861c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8008610:	4b7d      	ldr	r3, [pc, #500]	@ (8008808 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8008612:	4a7e      	ldr	r2, [pc, #504]	@ (800880c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8008614:	21a3      	movs	r1, #163	@ 0xa3
 8008616:	487e      	ldr	r0, [pc, #504]	@ (8008810 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8008618:	f00a fefe 	bl	8013418 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685a      	ldr	r2, [r3, #4]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	3320      	adds	r3, #32
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4610      	mov	r0, r2
 800862c:	4798      	blx	r3
 800862e:	4603      	mov	r3, r0
 8008630:	2b0f      	cmp	r3, #15
 8008632:	d805      	bhi.n	8008640 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8008634:	4b77      	ldr	r3, [pc, #476]	@ (8008814 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8008636:	4a75      	ldr	r2, [pc, #468]	@ (800880c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8008638:	21a4      	movs	r1, #164	@ 0xa4
 800863a:	4875      	ldr	r0, [pc, #468]	@ (8008810 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800863c:	f00a feec 	bl	8013418 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	68da      	ldr	r2, [r3, #12]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	3320      	adds	r3, #32
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4610      	mov	r0, r2
 8008650:	4798      	blx	r3
 8008652:	4603      	mov	r3, r0
 8008654:	2b0b      	cmp	r3, #11
 8008656:	d805      	bhi.n	8008664 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 8008658:	4b6f      	ldr	r3, [pc, #444]	@ (8008818 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800865a:	4a6c      	ldr	r2, [pc, #432]	@ (800880c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800865c:	21a5      	movs	r1, #165	@ 0xa5
 800865e:	486c      	ldr	r0, [pc, #432]	@ (8008810 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8008660:	f00a feda 	bl	8013418 <__assert_func>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	627b      	str	r3, [r7, #36]	@ 0x24
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8008670:	f006 fda0 	bl	800f1b4 <_ZN8touchgfx11Application11getInstanceEv>
 8008674:	4603      	mov	r3, r0
 8008676:	4618      	mov	r0, r3
 8008678:	f7ff fd12 	bl	80080a0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800867c:	6a3b      	ldr	r3, [r7, #32]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d008      	beq.n	8008696 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 8008684:	6a3b      	ldr	r3, [r7, #32]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	6a3b      	ldr	r3, [r7, #32]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	330c      	adds	r3, #12
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4610      	mov	r0, r2
 8008694:	4798      	blx	r3
    if (*currentTrans)
 8008696:	6a3b      	ldr	r3, [r7, #32]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d007      	beq.n	80086ae <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 800869e:	6a3b      	ldr	r3, [r7, #32]
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	6a3b      	ldr	r3, [r7, #32]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4610      	mov	r0, r2
 80086ac:	4798      	blx	r3
    if (*currentScreen)
 80086ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d008      	beq.n	80086c8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 80086b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	3314      	adds	r3, #20
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4610      	mov	r0, r2
 80086c6:	4798      	blx	r3
    if (*currentPresenter)
 80086c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d008      	beq.n	80086e2 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 80086d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3304      	adds	r3, #4
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4610      	mov	r0, r2
 80086e0:	4798      	blx	r3
    if (*currentScreen)
 80086e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d007      	beq.n	80086fa <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 80086ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4610      	mov	r0, r2
 80086f8:	4798      	blx	r3
    if (*currentPresenter)
 80086fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d008      	beq.n	8008714 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 8008702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	3308      	adds	r3, #8
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4610      	mov	r0, r2
 8008712:	4798      	blx	r3
}
 8008714:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	2100      	movs	r1, #0
 800871c:	4618      	mov	r0, r3
 800871e:	f000 f87d 	bl	800881c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8008722:	4603      	mov	r3, r0
 8008724:	4619      	mov	r1, r3
 8008726:	200c      	movs	r0, #12
 8008728:	f7ff fc24 	bl	8007f74 <_ZnwjPv>
 800872c:	4604      	mov	r4, r0
 800872e:	4620      	mov	r0, r4
 8008730:	f7ff ff48 	bl	80085c4 <_ZN8touchgfx12NoTransitionC1Ev>
 8008734:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	2100      	movs	r1, #0
 800873c:	4618      	mov	r0, r3
 800873e:	f000 f880 	bl	8008842 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 8008742:	4603      	mov	r3, r0
 8008744:	4619      	mov	r1, r3
 8008746:	f44f 70b0 	mov.w	r0, #352	@ 0x160
 800874a:	f7ff fc13 	bl	8007f74 <_ZnwjPv>
 800874e:	4604      	mov	r4, r0
 8008750:	4620      	mov	r0, r4
 8008752:	f001 fb97 	bl	8009e84 <_ZN10screenViewC1Ev>
 8008756:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	2100      	movs	r1, #0
 800875e:	4618      	mov	r0, r3
 8008760:	f000 f882 	bl	8008868 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 8008764:	4603      	mov	r3, r0
 8008766:	4619      	mov	r1, r3
 8008768:	2010      	movs	r0, #16
 800876a:	f7ff fc03 	bl	8007f74 <_ZnwjPv>
 800876e:	4604      	mov	r4, r0
 8008770:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008772:	4620      	mov	r0, r4
 8008774:	f001 fb2e 	bl	8009dd4 <_ZN15screenPresenterC1ER10screenView>
 8008778:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800877e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008784:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800878a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800878c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800878e:	2b00      	cmp	r3, #0
 8008790:	d002      	beq.n	8008798 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 8008792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008794:	3304      	adds	r3, #4
 8008796:	e000      	b.n	800879a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8008798:	2300      	movs	r3, #0
 800879a:	4619      	mov	r1, r3
 800879c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800879e:	f7ff fda7 	bl	80082f0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80087a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087a4:	3304      	adds	r3, #4
 80087a6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7ff fe14 	bl	80083d6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80087ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087b2:	4618      	mov	r0, r3
 80087b4:	f000 f86b 	bl	800888e <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 80087b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ba:	61fb      	str	r3, [r7, #28]
 80087bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087be:	61bb      	str	r3, [r7, #24]
 80087c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087c2:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	330c      	adds	r3, #12
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	69f8      	ldr	r0, [r7, #28]
 80087ce:	4798      	blx	r3
    newPresenter->activate();
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	69b8      	ldr	r0, [r7, #24]
 80087d8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80087da:	6979      	ldr	r1, [r7, #20]
 80087dc:	69f8      	ldr	r0, [r7, #28]
 80087de:	f008 f979 	bl	8010ad4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	3310      	adds	r3, #16
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	6978      	ldr	r0, [r7, #20]
 80087ec:	4798      	blx	r3
    newTransition->invalidate();
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	3314      	adds	r3, #20
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	6978      	ldr	r0, [r7, #20]
 80087f8:	4798      	blx	r3
}
 80087fa:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 80087fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80087fe:	4618      	mov	r0, r3
 8008800:	373c      	adds	r7, #60	@ 0x3c
 8008802:	46bd      	mov	sp, r7
 8008804:	bd90      	pop	{r4, r7, pc}
 8008806:	bf00      	nop
 8008808:	08014480 	.word	0x08014480
 800880c:	08014510 	.word	0x08014510
 8008810:	080145e0 	.word	0x080145e0
 8008814:	08014624 	.word	0x08014624
 8008818:	080146c8 	.word	0x080146c8

0800881c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	460b      	mov	r3, r1
 8008826:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	3324      	adds	r3, #36	@ 0x24
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	887a      	ldrh	r2, [r7, #2]
 8008832:	4611      	mov	r1, r2
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	4798      	blx	r3
 8008838:	4603      	mov	r3, r0
    }
 800883a:	4618      	mov	r0, r3
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 8008842:	b580      	push	{r7, lr}
 8008844:	b082      	sub	sp, #8
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	460b      	mov	r3, r1
 800884c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	3324      	adds	r3, #36	@ 0x24
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	887a      	ldrh	r2, [r7, #2]
 8008858:	4611      	mov	r1, r2
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	4798      	blx	r3
 800885e:	4603      	mov	r3, r0
    }
 8008860:	4618      	mov	r0, r3
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	460b      	mov	r3, r1
 8008872:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	3324      	adds	r3, #36	@ 0x24
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	887a      	ldrh	r2, [r7, #2]
 800887e:	4611      	mov	r1, r2
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	4798      	blx	r3
 8008884:	4603      	mov	r3, r0
    }
 8008886:	4618      	mov	r0, r3
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800888e:	b480      	push	{r7}
 8008890:	b083      	sub	sp, #12
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	683a      	ldr	r2, [r7, #0]
 800889c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800889e:	bf00      	nop
 80088a0:	370c      	adds	r7, #12
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr
	...

080088ac <_ZN8touchgfx12NoTransitionD1Ev>:
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	4a05      	ldr	r2, [pc, #20]	@ (80088cc <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	601a      	str	r2, [r3, #0]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4618      	mov	r0, r3
 80088be:	f7ff fc3f 	bl	8008140 <_ZN8touchgfx10TransitionD1Ev>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4618      	mov	r0, r3
 80088c6:	3708      	adds	r7, #8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	08014fb4 	.word	0x08014fb4

080088d0 <_ZN8touchgfx12NoTransitionD0Ev>:
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7ff ffe7 	bl	80088ac <_ZN8touchgfx12NoTransitionD1Ev>
 80088de:	210c      	movs	r1, #12
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f00a fd6b 	bl	80133bc <_ZdlPvj>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4618      	mov	r0, r3
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	4a05      	ldr	r2, [pc, #20]	@ (8008910 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	601a      	str	r2, [r3, #0]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4618      	mov	r0, r3
 8008902:	f7ff fbdb 	bl	80080bc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4618      	mov	r0, r3
 800890a:	3708      	adds	r7, #8
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}
 8008910:	08015024 	.word	0x08015024

08008914 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f7ff ffe7 	bl	80088f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8008922:	2110      	movs	r1, #16
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f00a fd49 	bl	80133bc <_ZdlPvj>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4618      	mov	r0, r3
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	68d2      	ldr	r2, [r2, #12]
 8008944:	1052      	asrs	r2, r2, #1
 8008946:	1899      	adds	r1, r3, r2
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	f003 0301 	and.w	r3, r3, #1
 8008950:	2b00      	cmp	r3, #0
 8008952:	d102      	bne.n	800895a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	e00a      	b.n	8008970 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	68d2      	ldr	r2, [r2, #12]
 8008962:	1052      	asrs	r2, r2, #1
 8008964:	4413      	add	r3, r2
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	6892      	ldr	r2, [r2, #8]
 800896c:	4413      	add	r3, r2
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4608      	mov	r0, r1
 8008972:	4798      	blx	r3
    }
 8008974:	bf00      	nop
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d010      	beq.n	80089ae <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d107      	bne.n	80089a4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	f003 0301 	and.w	r3, r3, #1
 800899c:	2b00      	cmp	r3, #0
 800899e:	d101      	bne.n	80089a4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80089a0:	2301      	movs	r3, #1
 80089a2:	e000      	b.n	80089a6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80089a4:	2300      	movs	r3, #0
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d001      	beq.n	80089ae <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80089aa:	2301      	movs	r3, #1
 80089ac:	e000      	b.n	80089b0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80089ae:	2300      	movs	r3, #0
    }
 80089b0:	4618      	mov	r0, r3
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
        : color(col)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	683a      	ldr	r2, [r7, #0]
 80089ca:	601a      	str	r2, [r3, #0]
    {
    }
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4618      	mov	r0, r3
 80089d0:	370c      	adds	r7, #12
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr

080089da <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 80089da:	b480      	push	{r7}
 80089dc:	b083      	sub	sp, #12
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	801a      	strh	r2, [r3, #0]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	805a      	strh	r2, [r3, #2]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	809a      	strh	r2, [r3, #4]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	80da      	strh	r2, [r3, #6]
    {
    }
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4618      	mov	r0, r3
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	4608      	mov	r0, r1
 8008a12:	4611      	mov	r1, r2
 8008a14:	461a      	mov	r2, r3
 8008a16:	4603      	mov	r3, r0
 8008a18:	817b      	strh	r3, [r7, #10]
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	813b      	strh	r3, [r7, #8]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	897a      	ldrh	r2, [r7, #10]
 8008a26:	801a      	strh	r2, [r3, #0]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	893a      	ldrh	r2, [r7, #8]
 8008a2c:	805a      	strh	r2, [r3, #2]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	88fa      	ldrh	r2, [r7, #6]
 8008a32:	809a      	strh	r2, [r3, #4]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	8b3a      	ldrh	r2, [r7, #24]
 8008a38:	80da      	strh	r2, [r3, #6]
    {
    }
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	460b      	mov	r3, r1
 8008a52:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	887a      	ldrh	r2, [r7, #2]
 8008a58:	801a      	strh	r2, [r3, #0]
    {
    }
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8008a70:	4a14      	ldr	r2, [pc, #80]	@ (8008ac4 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	601a      	str	r2, [r3, #0]
        : rect(),
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	3304      	adds	r3, #4
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7ff ffad 	bl	80089da <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	330c      	adds	r3, #12
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7ff ffa8 	bl	80089da <_ZN8touchgfx4RectC1Ev>
          parent(0),
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	845a      	strh	r2, [r3, #34]	@ 0x22
          touchable(false),
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          visible(true)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    {
    }
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4618      	mov	r0, r3
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	08015d18 	.word	0x08015d18

08008ac8 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
    {
 8008ad0:	4a04      	ldr	r2, [pc, #16]	@ (8008ae4 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	601a      	str	r2, [r3, #0]
    }
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr
 8008ae4:	08015d18 	.word	0x08015d18

08008ae8 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
    }
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f7ff ffe9 	bl	8008ac8 <_ZN8touchgfx8DrawableD1Ev>
 8008af6:	2128      	movs	r1, #40	@ 0x28
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f00a fc5f 	bl	80133bc <_ZdlPvj>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4618      	mov	r0, r3
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d005      	beq.n	8008b26 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	3314      	adds	r3, #20
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	4798      	blx	r3
        }
    }
 8008b26:	bf00      	nop
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8008b2e:	b480      	push	{r7}
 8008b30:	b083      	sub	sp, #12
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8008b36:	2300      	movs	r3, #0
    }
 8008b38:	4618      	mov	r0, r3
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	4608      	mov	r0, r1
 8008b4e:	4611      	mov	r1, r2
 8008b50:	461a      	mov	r2, r3
 8008b52:	4603      	mov	r3, r0
 8008b54:	817b      	strh	r3, [r7, #10]
 8008b56:	460b      	mov	r3, r1
 8008b58:	813b      	strh	r3, [r7, #8]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8008b5e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008b62:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008b66:	4619      	mov	r1, r3
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f000 f82a 	bl	8008bc2 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8008b6e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8008b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b76:	4619      	mov	r1, r3
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f000 f87e 	bl	8008c7a <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8008b7e:	bf00      	nop
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8008b86:	b480      	push	{r7}
 8008b88:	b083      	sub	sp, #12
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	460b      	mov	r3, r1
 8008b90:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	887a      	ldrh	r2, [r7, #2]
 8008b96:	809a      	strh	r2, [r3, #4]
    }
 8008b98:	bf00      	nop
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	460b      	mov	r3, r1
 8008bae:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	887a      	ldrh	r2, [r7, #2]
 8008bb4:	80da      	strh	r2, [r3, #6]
    }
 8008bb6:	bf00      	nop
 8008bb8:	370c      	adds	r7, #12
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr

08008bc2 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b082      	sub	sp, #8
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	460b      	mov	r3, r1
 8008bcc:	807b      	strh	r3, [r7, #2]
 8008bce:	4613      	mov	r3, r2
 8008bd0:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	3330      	adds	r3, #48	@ 0x30
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8008bde:	4611      	mov	r1, r2
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	4798      	blx	r3
        setY(y);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	3334      	adds	r3, #52	@ 0x34
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f9b7 2000 	ldrsh.w	r2, [r7]
 8008bf0:	4611      	mov	r1, r2
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	4798      	blx	r3
    }
 8008bf6:	bf00      	nop
 8008bf8:	3708      	adds	r7, #8
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8008bfe:	b480      	push	{r7}
 8008c00:	b083      	sub	sp, #12
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
 8008c06:	460b      	mov	r3, r1
 8008c08:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	887a      	ldrh	r2, [r7, #2]
 8008c0e:	811a      	strh	r2, [r3, #8]
    }
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	460b      	mov	r3, r1
 8008c26:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	887a      	ldrh	r2, [r7, #2]
 8008c2c:	815a      	strh	r2, [r3, #10]
    }
 8008c2e:	bf00      	nop
 8008c30:	370c      	adds	r7, #12
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr

08008c3a <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8008c3a:	b480      	push	{r7}
 8008c3c:	b083      	sub	sp, #12
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
    {
    }
 8008c42:	bf00      	nop
 8008c44:	370c      	adds	r7, #12
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8008c4e:	b480      	push	{r7}
 8008c50:	b083      	sub	sp, #12
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
 8008c56:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8008c58:	bf00      	nop
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8008c6e:	bf00      	nop
 8008c70:	370c      	adds	r7, #12
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr

08008c7a <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b082      	sub	sp, #8
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
 8008c82:	460b      	mov	r3, r1
 8008c84:	807b      	strh	r3, [r7, #2]
 8008c86:	4613      	mov	r3, r2
 8008c88:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	3338      	adds	r3, #56	@ 0x38
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8008c96:	4611      	mov	r1, r2
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	4798      	blx	r3
        setHeight(height);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	333c      	adds	r3, #60	@ 0x3c
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f9b7 2000 	ldrsh.w	r2, [r7]
 8008ca8:	4611      	mov	r1, r2
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	4798      	blx	r3
    }
 8008cae:	bf00      	nop
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8008cb6:	b480      	push	{r7}
 8008cb8:	b083      	sub	sp, #12
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
    {
    }
 8008cd4:	bf00      	nop
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
    }
 8008cee:	4618      	mov	r0, r3
 8008cf0:	370c      	adds	r7, #12
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr

08008cfa <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8008cfa:	b480      	push	{r7}
 8008cfc:	b083      	sub	sp, #12
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    }
 8008d08:	4618      	mov	r0, r3
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	807b      	strh	r3, [r7, #2]
 8008d20:	4613      	mov	r3, r2
 8008d22:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3354      	adds	r3, #84	@ 0x54
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	8879      	ldrh	r1, [r7, #2]
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8008d34:	b292      	uxth	r2, r2
 8008d36:	1a8a      	subs	r2, r1, r2
 8008d38:	b292      	uxth	r2, r2
 8008d3a:	b210      	sxth	r0, r2
 8008d3c:	8839      	ldrh	r1, [r7, #0]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8008d44:	b292      	uxth	r2, r2
 8008d46:	1a8a      	subs	r2, r1, r2
 8008d48:	b292      	uxth	r2, r2
 8008d4a:	b212      	sxth	r2, r2
 8008d4c:	4601      	mov	r1, r0
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	4798      	blx	r3
    }
 8008d52:	bf00      	nop
 8008d54:	3708      	adds	r7, #8
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8008d5a:	b480      	push	{r7}
 8008d5c:	b083      	sub	sp, #12
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008d68:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008d70:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008d78:	845a      	strh	r2, [r3, #34]	@ 0x22
    }
 8008d7a:	bf00      	nop
 8008d7c:	370c      	adds	r7, #12
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	60f8      	str	r0, [r7, #12]
 8008d8e:	60b9      	str	r1, [r7, #8]
 8008d90:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f7ff ffe1 	bl	8008d5a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	601a      	str	r2, [r3, #0]
    }
 8008da6:	bf00      	nop
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
	...

08008db0 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
    {
 8008db8:	4a06      	ldr	r2, [pc, #24]	@ (8008dd4 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	601a      	str	r2, [r3, #0]
    }
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	3304      	adds	r3, #4
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f000 fc4c 	bl	8009660 <_ZN8touchgfx9ContainerD1Ev>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	08015e1c 	.word	0x08015e1c

08008dd8 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
    }
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f7ff ffe5 	bl	8008db0 <_ZN8touchgfx6ScreenD1Ev>
 8008de6:	213c      	movs	r1, #60	@ 0x3c
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f00a fae7 	bl	80133bc <_ZdlPvj>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4618      	mov	r0, r3
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
    {
    }
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
    {
    }
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
    {
    }
 8008e28:	bf00      	nop
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
    {
    }
 8008e3c:	bf00      	nop
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	460b      	mov	r3, r1
 8008e52:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 8008e54:	bf00      	nop
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	6839      	ldr	r1, [r7, #0]
 8008e70:	4618      	mov	r0, r3
 8008e72:	f002 fee3 	bl	800bc3c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8008e76:	bf00      	nop
 8008e78:	3708      	adds	r7, #8
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b084      	sub	sp, #16
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	60f8      	str	r0, [r7, #12]
 8008e86:	607b      	str	r3, [r7, #4]
 8008e88:	460b      	mov	r3, r1
 8008e8a:	817b      	strh	r3, [r7, #10]
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7ff ff24 	bl	8008ce0 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d008      	beq.n	8008eb0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7ff ff2a 	bl	8008cfa <_ZNK8touchgfx8Drawable11isTouchableEv>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d001      	beq.n	8008eb0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8008eac:	2301      	movs	r3, #1
 8008eae:	e000      	b.n	8008eb2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d002      	beq.n	8008ebc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	601a      	str	r2, [r3, #0]
        }
    }
 8008ebc:	bf00      	nop
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7ff fdca 	bl	8008a68 <_ZN8touchgfx8DrawableC1Ev>
 8008ed4:	4a03      	ldr	r2, [pc, #12]	@ (8008ee4 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	601a      	str	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4618      	mov	r0, r3
 8008ede:	3708      	adds	r7, #8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	080151e4 	.word	0x080151e4

08008ee8 <_ZN8touchgfx6WidgetD1Ev>:
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	4a05      	ldr	r2, [pc, #20]	@ (8008f08 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	601a      	str	r2, [r3, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7ff fde5 	bl	8008ac8 <_ZN8touchgfx8DrawableD1Ev>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4618      	mov	r0, r3
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	080151e4 	.word	0x080151e4

08008f0c <_ZN8touchgfx6WidgetD0Ev>:
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f7ff ffe7 	bl	8008ee8 <_ZN8touchgfx6WidgetD1Ev>
 8008f1a:	2128      	movs	r1, #40	@ 0x28
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f00a fa4d 	bl	80133bc <_ZdlPvj>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4618      	mov	r0, r3
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4618      	mov	r0, r3
 8008f38:	2326      	movs	r3, #38	@ 0x26
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	f00a fc64 	bl	801380a <memset>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7ff ffbd 	bl	8008ec4 <_ZN8touchgfx6WidgetC1Ev>
 8008f4a:	4a09      	ldr	r2, [pc, #36]	@ (8008f70 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	601a      	str	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	22ff      	movs	r2, #255	@ 0xff
 8008f54:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	3328      	adds	r3, #40	@ 0x28
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7ff fd2c 	bl	80089bc <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4618      	mov	r0, r3
 8008f68:	3708      	adds	r7, #8
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	08015b10 	.word	0x08015b10

08008f74 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	683a      	ldr	r2, [r7, #0]
 8008f82:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 8008f84:	bf00      	nop
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	2326      	movs	r3, #38	@ 0x26
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	f00a fc31 	bl	801380a <memset>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7ff ff8a 	bl	8008ec4 <_ZN8touchgfx6WidgetC1Ev>
 8008fb0:	4a09      	ldr	r2, [pc, #36]	@ (8008fd8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	601a      	str	r2, [r3, #0]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	683a      	ldr	r2, [r7, #0]
 8008fba:	8812      	ldrh	r2, [r2, #0]
 8008fbc:	84da      	strh	r2, [r3, #38]	@ 0x26
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	22ff      	movs	r2, #255	@ 0xff
 8008fc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    {
        Image::setBitmap(bmp);
 8008fc6:	6839      	ldr	r1, [r7, #0]
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f004 fbd5 	bl	800d778 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	08015c08 	.word	0x08015c08

08008fdc <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8008fe8:	4a06      	ldr	r2, [pc, #24]	@ (8009004 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	601a      	str	r2, [r3, #0]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	887a      	ldrh	r2, [r7, #2]
 8008ff2:	809a      	strh	r2, [r3, #4]
    }
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	08014f44 	.word	0x08014f44

08009008 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 8009008:	b590      	push	{r4, r7, lr}
 800900a:	b087      	sub	sp, #28
 800900c:	af00      	add	r7, sp, #0
 800900e:	6178      	str	r0, [r7, #20]
 8009010:	460b      	mov	r3, r1
 8009012:	827b      	strh	r3, [r7, #18]
    {
        Widget::setWidth(width);
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800901a:	4611      	mov	r1, r2
 800901c:	4618      	mov	r0, r3
 800901e:	f7ff fdee 	bl	8008bfe <_ZN8touchgfx8Drawable8setWidthEs>
        boundingArea = calculateBoundingArea();
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	3384      	adds	r3, #132	@ 0x84
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	697c      	ldr	r4, [r7, #20]
 800902c:	463a      	mov	r2, r7
 800902e:	6979      	ldr	r1, [r7, #20]
 8009030:	4610      	mov	r0, r2
 8009032:	4798      	blx	r3
 8009034:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 8009038:	463a      	mov	r2, r7
 800903a:	ca07      	ldmia	r2, {r0, r1, r2}
 800903c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8009040:	bf00      	nop
 8009042:	371c      	adds	r7, #28
 8009044:	46bd      	mov	sp, r7
 8009046:	bd90      	pop	{r4, r7, pc}

08009048 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 8009048:	b590      	push	{r4, r7, lr}
 800904a:	b087      	sub	sp, #28
 800904c:	af00      	add	r7, sp, #0
 800904e:	6178      	str	r0, [r7, #20]
 8009050:	460b      	mov	r3, r1
 8009052:	827b      	strh	r3, [r7, #18]
    {
        Widget::setHeight(height);
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800905a:	4611      	mov	r1, r2
 800905c:	4618      	mov	r0, r3
 800905e:	f7ff fddd 	bl	8008c1c <_ZN8touchgfx8Drawable9setHeightEs>
        boundingArea = calculateBoundingArea();
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3384      	adds	r3, #132	@ 0x84
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	697c      	ldr	r4, [r7, #20]
 800906c:	463a      	mov	r2, r7
 800906e:	6979      	ldr	r1, [r7, #20]
 8009070:	4610      	mov	r0, r2
 8009072:	4798      	blx	r3
 8009074:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 8009078:	463a      	mov	r2, r7
 800907a:	ca07      	ldmia	r2, {r0, r1, r2}
 800907c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8009080:	bf00      	nop
 8009082:	371c      	adds	r7, #28
 8009084:	46bd      	mov	sp, r7
 8009086:	bd90      	pop	{r4, r7, pc}

08009088 <_ZNK8touchgfx8TextArea12getSolidRectEv>:

    virtual Rect getSolidRect() const
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f7ff fca1 	bl	80089da <_ZN8touchgfx4RectC1Ev>
    }
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	3708      	adds	r7, #8
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	460b      	mov	r3, r1
 80090aa:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	78fa      	ldrb	r2, [r7, #3]
 80090b0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    }
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 80090c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	460b      	mov	r3, r1
 80090ca:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80090cc:	687e      	ldr	r6, [r7, #4]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	3334      	adds	r3, #52	@ 0x34
 80090d4:	681c      	ldr	r4, [r3, #0]
 80090d6:	887d      	ldrh	r5, [r7, #2]
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 f867 	bl	80091ac <_ZNK8touchgfx8TextArea12getTypedTextEv>
 80090de:	4603      	mov	r3, r0
 80090e0:	60fb      	str	r3, [r7, #12]
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80090e2:	4b1c      	ldr	r3, [pc, #112]	@ (8009154 <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d105      	bne.n	80090f6 <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 80090ea:	4b1b      	ldr	r3, [pc, #108]	@ (8009158 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 80090ec:	4a1b      	ldr	r2, [pc, #108]	@ (800915c <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 80090ee:	216c      	movs	r1, #108	@ 0x6c
 80090f0:	481b      	ldr	r0, [pc, #108]	@ (8009160 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 80090f2:	f00a f991 	bl	8013418 <__assert_func>
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	60bb      	str	r3, [r7, #8]
        return typedTextId < numberOfTypedTexts;
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	889a      	ldrh	r2, [r3, #4]
 80090fe:	4b19      	ldr	r3, [pc, #100]	@ (8009164 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 8009100:	881b      	ldrh	r3, [r3, #0]
 8009102:	429a      	cmp	r2, r3
 8009104:	bf34      	ite	cc
 8009106:	2301      	movcc	r3, #1
 8009108:	2300      	movcs	r3, #0
 800910a:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800910c:	2b00      	cmp	r3, #0
 800910e:	d105      	bne.n	800911c <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>
 8009110:	4b15      	ldr	r3, [pc, #84]	@ (8009168 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 8009112:	4a12      	ldr	r2, [pc, #72]	@ (800915c <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 8009114:	216d      	movs	r1, #109	@ 0x6d
 8009116:	4812      	ldr	r0, [pc, #72]	@ (8009160 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 8009118:	f00a f97e 	bl	8013418 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 800911c:	4b13      	ldr	r3, [pc, #76]	@ (800916c <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	4b0c      	ldr	r3, [pc, #48]	@ (8009154 <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 8009122:	6819      	ldr	r1, [r3, #0]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	889b      	ldrh	r3, [r3, #4]
 8009128:	005b      	lsls	r3, r3, #1
 800912a:	440b      	add	r3, r1
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	4413      	add	r3, r2
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	3230      	adds	r2, #48	@ 0x30
 8009138:	6812      	ldr	r2, [r2, #0]
 800913a:	4618      	mov	r0, r3
 800913c:	4790      	blx	r2
 800913e:	4603      	mov	r3, r0
 8009140:	1aeb      	subs	r3, r5, r3
 8009142:	b29b      	uxth	r3, r3
 8009144:	b21b      	sxth	r3, r3
 8009146:	4619      	mov	r1, r3
 8009148:	4630      	mov	r0, r6
 800914a:	47a0      	blx	r4
    }
 800914c:	bf00      	nop
 800914e:	3714      	adds	r7, #20
 8009150:	46bd      	mov	sp, r7
 8009152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009154:	200043a4 	.word	0x200043a4
 8009158:	0801476c 	.word	0x0801476c
 800915c:	080147b0 	.word	0x080147b0
 8009160:	080147ec 	.word	0x080147ec
 8009164:	200043a8 	.word	0x200043a8
 8009168:	08014830 	.word	0x08014830
 800916c:	200043ac 	.word	0x200043ac

08009170 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	460b      	mov	r3, r1
 800917a:	807b      	strh	r3, [r7, #2]
 800917c:	4613      	mov	r3, r2
 800917e:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	3330      	adds	r3, #48	@ 0x30
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800918e:	4610      	mov	r0, r2
 8009190:	4798      	blx	r3
        setBaselineY(baselineY);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	3364      	adds	r3, #100	@ 0x64
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800919e:	4611      	mov	r1, r2
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	4798      	blx	r3
    }
 80091a4:	bf00      	nop
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    /**
     * Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    const TypedText& getTypedText() const
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	3328      	adds	r3, #40	@ 0x28
    }
 80091b8:	4618      	mov	r0, r3
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     *
     * @return A pointer to the second wildcard, if this text area has two wildcards, otherwise 0.
     *
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80091cc:	2300      	movs	r3, #0
    }
 80091ce:	4618      	mov	r0, r3
 80091d0:	370c      	adds	r7, #12
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr

080091da <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 80091da:	b580      	push	{r7, lr}
 80091dc:	b084      	sub	sp, #16
 80091de:	af02      	add	r7, sp, #8
 80091e0:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f04f 33ff 	mov.w	r3, #4294967295
 80091e8:	9300      	str	r3, [sp, #0]
 80091ea:	f04f 33ff 	mov.w	r3, #4294967295
 80091ee:	2200      	movs	r2, #0
 80091f0:	2100      	movs	r1, #0
 80091f2:	f7ff fc09 	bl	8008a08 <_ZN8touchgfx4RectC1Essss>
              text(0)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	609a      	str	r2, [r3, #8]
        {
        }
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4618      	mov	r0, r3
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
	...

08009208 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	4a08      	ldr	r2, [pc, #32]	@ (8009234 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	601a      	str	r2, [r3, #0]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	3328      	adds	r3, #40	@ 0x28
 800921a:	4618      	mov	r0, r3
 800921c:	f7fe fcc2 	bl	8007ba4 <_ZN8touchgfx9TypedTextD1Ev>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4618      	mov	r0, r3
 8009224:	f7ff fe60 	bl	8008ee8 <_ZN8touchgfx6WidgetD1Ev>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4618      	mov	r0, r3
 800922c:	3708      	adds	r7, #8
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	08015a80 	.word	0x08015a80

08009238 <_ZN8touchgfx8TextAreaD0Ev>:
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f7ff ffe1 	bl	8009208 <_ZN8touchgfx8TextAreaD1Ev>
 8009246:	2148      	movs	r1, #72	@ 0x48
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f00a f8b7 	bl	80133bc <_ZdlPvj>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4618      	mov	r0, r3
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    {
    }

    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
    {
        Widget::invalidateContent();
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4618      	mov	r0, r3
 8009264:	f7ff fc50 	bl	8008b08 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8009268:	bf00      	nop
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
    {
        return TextArea::BoundingArea();
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f7ff ffad 	bl	80091da <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	4a05      	ldr	r2, [pc, #20]	@ (80092a8 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	601a      	str	r2, [r3, #0]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	4618      	mov	r0, r3
 800929a:	f7ff ffb5 	bl	8009208 <_ZN8touchgfx8TextAreaD1Ev>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4618      	mov	r0, r3
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	08015b78 	.word	0x08015b78

080092ac <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f7ff ffe7 	bl	8009288 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 80092ba:	2148      	movs	r1, #72	@ 0x48
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f00a f87d 	bl	80133bc <_ZdlPvj>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	4618      	mov	r0, r3
 80092c6:	3708      	adds	r7, #8
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    void setWildcard1(const Unicode::UnicodeChar* value)
    {
        wc1 = value;
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
    {
        return wc1;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    }
 80092d8:	4618      	mov	r0, r3
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>:
     *
     * @param  dm The new display mode.
     *
     * @see DisplayMode, getDisplayMode
     */
    virtual void setDisplayMode(DisplayMode dm)
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	460b      	mov	r3, r1
 80092ee:	70fb      	strb	r3, [r7, #3]
    {
        displayMode = dm;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	78fa      	ldrb	r2, [r7, #3]
 80092f4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
    }
 80092f8:	bf00      	nop
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	4a05      	ldr	r2, [pc, #20]	@ (8009324 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	601a      	str	r2, [r3, #0]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	4618      	mov	r0, r3
 8009316:	f7ff fd4b 	bl	8008db0 <_ZN8touchgfx6ScreenD1Ev>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4618      	mov	r0, r3
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	08015120 	.word	0x08015120

08009328 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f7ff ffe7 	bl	8009304 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8009336:	2140      	movs	r1, #64	@ 0x40
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f00a f83f 	bl	80133bc <_ZdlPvj>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4618      	mov	r0, r3
 8009342:	3708      	adds	r7, #8
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <_ZN14screenViewBaseC1Ev>:
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

screenViewBase::screenViewBase()
 8009348:	b590      	push	{r4, r7, lr}
 800934a:	b08f      	sub	sp, #60	@ 0x3c
 800934c:	af02      	add	r7, sp, #8
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4618      	mov	r0, r3
 8009354:	f000 f94c 	bl	80095f0 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 8009358:	4a83      	ldr	r2, [pc, #524]	@ (8009568 <_ZN14screenViewBaseC1Ev+0x220>)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	601a      	str	r2, [r3, #0]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	3340      	adds	r3, #64	@ 0x40
 8009362:	4618      	mov	r0, r3
 8009364:	f7ff fde2 	bl	8008f2c <_ZN8touchgfx3BoxC1Ev>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	336c      	adds	r3, #108	@ 0x6c
 800936c:	4618      	mov	r0, r3
 800936e:	f7ff fddd 	bl	8008f2c <_ZN8touchgfx3BoxC1Ev>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 8009378:	f107 0308 	add.w	r3, r7, #8
 800937c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8009380:	4618      	mov	r0, r3
 8009382:	f7ff fb61 	bl	8008a48 <_ZN8touchgfx6BitmapC1Et>
 8009386:	f107 0308 	add.w	r3, r7, #8
 800938a:	4619      	mov	r1, r3
 800938c:	4620      	mov	r0, r4
 800938e:	f7ff fdff 	bl	8008f90 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	33c4      	adds	r3, #196	@ 0xc4
 8009396:	4618      	mov	r0, r3
 8009398:	f002 fb8e 	bl	800bab8 <_ZN8touchgfx12DigitalClockC1Ev>
{
    __background.setPosition(0, 0, 128, 64);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80093a2:	2340      	movs	r3, #64	@ 0x40
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	2380      	movs	r3, #128	@ 0x80
 80093a8:	2200      	movs	r2, #0
 80093aa:	2100      	movs	r1, #0
 80093ac:	f7ff fbca 	bl	8008b44 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80093b6:	2300      	movs	r3, #0
 80093b8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80093bc:	2300      	movs	r3, #0
 80093be:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80093c2:	2300      	movs	r3, #0
 80093c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80093c8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80093cc:	041a      	lsls	r2, r3, #16
 80093ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80093d2:	021b      	lsls	r3, r3, #8
 80093d4:	431a      	orrs	r2, r3
 80093d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80093da:	4313      	orrs	r3, r2
 80093dc:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80093e0:	f107 0320 	add.w	r3, r7, #32
 80093e4:	4611      	mov	r1, r2
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7ff fae8 	bl	80089bc <_ZN8touchgfx9colortypeC1Em>
 80093ec:	6a3b      	ldr	r3, [r7, #32]
 80093ee:	4619      	mov	r1, r3
 80093f0:	4620      	mov	r0, r4
 80093f2:	f7ff fdbf 	bl	8008f74 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	3340      	adds	r3, #64	@ 0x40
 80093fc:	4619      	mov	r1, r3
 80093fe:	4610      	mov	r0, r2
 8009400:	f7ff fd2e 	bl	8008e60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 128, 64);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 800940a:	2340      	movs	r3, #64	@ 0x40
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	2380      	movs	r3, #128	@ 0x80
 8009410:	2200      	movs	r2, #0
 8009412:	2100      	movs	r1, #0
 8009414:	f7ff fb96 	bl	8008b44 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 800941e:	2300      	movs	r3, #0
 8009420:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8009424:	2300      	movs	r3, #0
 8009426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800942a:	2300      	movs	r3, #0
 800942c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009430:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009434:	041a      	lsls	r2, r3, #16
 8009436:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800943a:	021b      	lsls	r3, r3, #8
 800943c:	431a      	orrs	r2, r3
 800943e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009442:	4313      	orrs	r3, r2
 8009444:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8009448:	f107 031c 	add.w	r3, r7, #28
 800944c:	4611      	mov	r1, r2
 800944e:	4618      	mov	r0, r3
 8009450:	f7ff fab4 	bl	80089bc <_ZN8touchgfx9colortypeC1Em>
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	4619      	mov	r1, r3
 8009458:	4620      	mov	r0, r4
 800945a:	f7ff fd8b 	bl	8008f74 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	336c      	adds	r3, #108	@ 0x6c
 8009464:	4619      	mov	r1, r3
 8009466:	4610      	mov	r0, r2
 8009468:	f7ff fcfa 	bl	8008e60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    image1.setXY(0, 0);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	3398      	adds	r3, #152	@ 0x98
 8009470:	2200      	movs	r2, #0
 8009472:	2100      	movs	r1, #0
 8009474:	4618      	mov	r0, r3
 8009476:	f7ff fba4 	bl	8008bc2 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_E9D911696DB83E404D5FBDEAE586241_IMAGEONLINE_CO_3777416_ID));
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 8009480:	f107 030c 	add.w	r3, r7, #12
 8009484:	2100      	movs	r1, #0
 8009486:	4618      	mov	r0, r3
 8009488:	f7ff fade 	bl	8008a48 <_ZN8touchgfx6BitmapC1Et>
 800948c:	f107 030c 	add.w	r3, r7, #12
 8009490:	4619      	mov	r1, r3
 8009492:	4620      	mov	r0, r4
 8009494:	f004 f970 	bl	800d778 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(image1);
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	3398      	adds	r3, #152	@ 0x98
 800949e:	4619      	mov	r1, r3
 80094a0:	4610      	mov	r0, r2
 80094a2:	f7ff fcdd 	bl	8008e60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    digitalClock1.setPosition(72, 3, 93, 29);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f103 00c4 	add.w	r0, r3, #196	@ 0xc4
 80094ac:	231d      	movs	r3, #29
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	235d      	movs	r3, #93	@ 0x5d
 80094b2:	2203      	movs	r2, #3
 80094b4:	2148      	movs	r1, #72	@ 0x48
 80094b6:	f7ff fb45 	bl	8008b44 <_ZN8touchgfx8Drawable11setPositionEssss>
    digitalClock1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 80094c0:	23ff      	movs	r3, #255	@ 0xff
 80094c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80094c6:	23ff      	movs	r3, #255	@ 0xff
 80094c8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80094cc:	23ff      	movs	r3, #255	@ 0xff
 80094ce:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80094d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80094d6:	041a      	lsls	r2, r3, #16
 80094d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80094dc:	021b      	lsls	r3, r3, #8
 80094de:	431a      	orrs	r2, r3
 80094e0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80094e4:	4313      	orrs	r3, r2
 80094e6:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80094ea:	f107 0318 	add.w	r3, r7, #24
 80094ee:	4611      	mov	r1, r2
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7ff fa63 	bl	80089bc <_ZN8touchgfx9colortypeC1Em>
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	4619      	mov	r1, r3
 80094fa:	4620      	mov	r0, r4
 80094fc:	f002 fa22 	bl	800b944 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>
    digitalClock1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ODR9));
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 8009506:	f107 0310 	add.w	r3, r7, #16
 800950a:	2100      	movs	r1, #0
 800950c:	4618      	mov	r0, r3
 800950e:	f7ff fd65 	bl	8008fdc <_ZN8touchgfx9TypedTextC1Et>
 8009512:	f107 0310 	add.w	r3, r7, #16
 8009516:	4619      	mov	r1, r3
 8009518:	4620      	mov	r0, r4
 800951a:	f002 fa1e 	bl	800b95a <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>
 800951e:	f107 0310 	add.w	r3, r7, #16
 8009522:	4618      	mov	r0, r3
 8009524:	f7fe fb3e 	bl	8007ba4 <_ZN8touchgfx9TypedTextD1Ev>
    digitalClock1.displayLeadingZeroForHourIndicator(true);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	33c4      	adds	r3, #196	@ 0xc4
 800952c:	2101      	movs	r1, #1
 800952e:	4618      	mov	r0, r3
 8009530:	f002 fb10 	bl	800bb54 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>
    digitalClock1.setDisplayMode(touchgfx::DigitalClock::DISPLAY_24_HOUR);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	33c4      	adds	r3, #196	@ 0xc4
 8009538:	2103      	movs	r1, #3
 800953a:	4618      	mov	r0, r3
 800953c:	f7ff fed2 	bl	80092e4 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>
    digitalClock1.setTime24Hour(10, 10, 0);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f103 00c4 	add.w	r0, r3, #196	@ 0xc4
 8009546:	2300      	movs	r3, #0
 8009548:	220a      	movs	r2, #10
 800954a:	210a      	movs	r1, #10
 800954c:	f002 fb05 	bl	800bb5a <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
    add(digitalClock1);
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	33c4      	adds	r3, #196	@ 0xc4
 8009556:	4619      	mov	r1, r3
 8009558:	4610      	mov	r0, r2
 800955a:	f7ff fc81 	bl	8008e60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4618      	mov	r0, r3
 8009562:	3734      	adds	r7, #52	@ 0x34
 8009564:	46bd      	mov	sp, r7
 8009566:	bd90      	pop	{r4, r7, pc}
 8009568:	080150ec 	.word	0x080150ec

0800956c <_ZN14screenViewBaseD1Ev>:

screenViewBase::~screenViewBase()
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	4a0f      	ldr	r2, [pc, #60]	@ (80095b4 <_ZN14screenViewBaseD1Ev+0x48>)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	601a      	str	r2, [r3, #0]
{

}
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	33c4      	adds	r3, #196	@ 0xc4
 800957e:	4618      	mov	r0, r3
 8009580:	f000 f8f6 	bl	8009770 <_ZN8touchgfx12DigitalClockD1Ev>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	3398      	adds	r3, #152	@ 0x98
 8009588:	4618      	mov	r0, r3
 800958a:	f000 f8ad 	bl	80096e8 <_ZN8touchgfx5ImageD1Ev>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	336c      	adds	r3, #108	@ 0x6c
 8009592:	4618      	mov	r0, r3
 8009594:	f000 f886 	bl	80096a4 <_ZN8touchgfx3BoxD1Ev>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	3340      	adds	r3, #64	@ 0x40
 800959c:	4618      	mov	r0, r3
 800959e:	f000 f881 	bl	80096a4 <_ZN8touchgfx3BoxD1Ev>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7ff fead 	bl	8009304 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4618      	mov	r0, r3
 80095ae:	3708      	adds	r7, #8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	080150ec 	.word	0x080150ec

080095b8 <_ZN14screenViewBaseD0Ev>:
screenViewBase::~screenViewBase()
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
}
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f7ff ffd3 	bl	800956c <_ZN14screenViewBaseD1Ev>
 80095c6:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f009 fef6 	bl	80133bc <_ZdlPvj>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4618      	mov	r0, r3
 80095d4:	3708      	adds	r7, #8
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 80095da:	b480      	push	{r7}
 80095dc:	b083      	sub	sp, #12
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]

}
 80095e2:	bf00      	nop
 80095e4:	370c      	adds	r7, #12
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr
	...

080095f0 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4618      	mov	r0, r3
 80095fc:	f007 f8be 	bl	801077c <_ZN8touchgfx6ScreenC1Ev>
 8009600:	4a05      	ldr	r2, [pc, #20]	@ (8009618 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	601a      	str	r2, [r3, #0]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4618      	mov	r0, r3
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	08015120 	.word	0x08015120

0800961c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	4a05      	ldr	r2, [pc, #20]	@ (800963c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	601a      	str	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4618      	mov	r0, r3
 800962e:	f7ff fe2b 	bl	8009288 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4618      	mov	r0, r3
 8009636:	3708      	adds	r7, #8
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}
 800963c:	08015154 	.word	0x08015154

08009640 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f7ff ffe7 	bl	800961c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800964e:	214c      	movs	r1, #76	@ 0x4c
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f009 feb3 	bl	80133bc <_ZdlPvj>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4618      	mov	r0, r3
 800965a:	3708      	adds	r7, #8
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	4a05      	ldr	r2, [pc, #20]	@ (8009680 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	601a      	str	r2, [r3, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4618      	mov	r0, r3
 8009672:	f7ff fa29 	bl	8008ac8 <_ZN8touchgfx8DrawableD1Ev>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4618      	mov	r0, r3
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	08015898 	.word	0x08015898

08009684 <_ZN8touchgfx9ContainerD0Ev>:
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f7ff ffe7 	bl	8009660 <_ZN8touchgfx9ContainerD1Ev>
 8009692:	212c      	movs	r1, #44	@ 0x2c
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f009 fe91 	bl	80133bc <_ZdlPvj>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4618      	mov	r0, r3
 800969e:	3708      	adds	r7, #8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	4a05      	ldr	r2, [pc, #20]	@ (80096c4 <_ZN8touchgfx3BoxD1Ev+0x20>)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	601a      	str	r2, [r3, #0]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7ff fc17 	bl	8008ee8 <_ZN8touchgfx6WidgetD1Ev>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4618      	mov	r0, r3
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	08015b10 	.word	0x08015b10

080096c8 <_ZN8touchgfx3BoxD0Ev>:
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f7ff ffe7 	bl	80096a4 <_ZN8touchgfx3BoxD1Ev>
 80096d6:	212c      	movs	r1, #44	@ 0x2c
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f009 fe6f 	bl	80133bc <_ZdlPvj>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4618      	mov	r0, r3
 80096e2:	3708      	adds	r7, #8
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	4a05      	ldr	r2, [pc, #20]	@ (8009708 <_ZN8touchgfx5ImageD1Ev+0x20>)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	601a      	str	r2, [r3, #0]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7ff fbf5 	bl	8008ee8 <_ZN8touchgfx6WidgetD1Ev>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4618      	mov	r0, r3
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}
 8009708:	08015c08 	.word	0x08015c08

0800970c <_ZN8touchgfx5ImageD0Ev>:
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f7ff ffe7 	bl	80096e8 <_ZN8touchgfx5ImageD1Ev>
 800971a:	212c      	movs	r1, #44	@ 0x2c
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f009 fe4d 	bl	80133bc <_ZdlPvj>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4618      	mov	r0, r3
 8009726:	3708      	adds	r7, #8
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <_ZN8touchgfx13AbstractClockD1Ev>:
 * Superclass of clock widgets. Allows the hour, minute and second of the clock to be set and
 * read.
 *
 * @see AnalogClock, DigitalClock
 */
class AbstractClock : public Container
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	4a05      	ldr	r2, [pc, #20]	@ (800974c <_ZN8touchgfx13AbstractClockD1Ev+0x20>)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	601a      	str	r2, [r3, #0]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4618      	mov	r0, r3
 800973e:	f7ff ff8f 	bl	8009660 <_ZN8touchgfx9ContainerD1Ev>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4618      	mov	r0, r3
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	080157fc 	.word	0x080157fc

08009750 <_ZN8touchgfx13AbstractClockD0Ev>:
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f7ff ffe7 	bl	800972c <_ZN8touchgfx13AbstractClockD1Ev>
 800975e:	2130      	movs	r1, #48	@ 0x30
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f009 fe2b 	bl	80133bc <_ZdlPvj>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4618      	mov	r0, r3
 800976a:	3708      	adds	r7, #8
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <_ZN8touchgfx12DigitalClockD1Ev>:
class DigitalClock : public AbstractClock
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	4a08      	ldr	r2, [pc, #32]	@ (800979c <_ZN8touchgfx12DigitalClockD1Ev+0x2c>)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	601a      	str	r2, [r3, #0]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	3334      	adds	r3, #52	@ 0x34
 8009782:	4618      	mov	r0, r3
 8009784:	f7ff ff4a 	bl	800961c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4618      	mov	r0, r3
 800978c:	f7ff ffce 	bl	800972c <_ZN8touchgfx13AbstractClockD1Ev>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4618      	mov	r0, r3
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	0801573c 	.word	0x0801573c

080097a0 <_ZN8touchgfx12DigitalClockD0Ev>:
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f7ff ffe1 	bl	8009770 <_ZN8touchgfx12DigitalClockD1Ev>
 80097ae:	2198      	movs	r1, #152	@ 0x98
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f009 fe03 	bl	80133bc <_ZdlPvj>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	4618      	mov	r0, r3
 80097ba:	3708      	adds	r7, #8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80097c0:	b480      	push	{r7}
 80097c2:	af00      	add	r7, sp, #0
    return bitmap_database;
 80097c4:	4b02      	ldr	r3, [pc, #8]	@ (80097d0 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr
 80097d0:	08015244 	.word	0x08015244

080097d4 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 80097d4:	b480      	push	{r7}
 80097d6:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 80097d8:	2301      	movs	r3, #1
}
 80097da:	4618      	mov	r0, r3
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	460b      	mov	r3, r1
 80097ee:	607a      	str	r2, [r7, #4]
 80097f0:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 80097f2:	2300      	movs	r3, #0
    }
 80097f4:	4618      	mov	r0, r3
 80097f6:	3714      	adds	r7, #20
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8009808:	2300      	movs	r3, #0
    }
 800980a:	4618      	mov	r0, r3
 800980c:	370c      	adds	r7, #12
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr

08009816 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8009816:	b480      	push	{r7}
 8009818:	b083      	sub	sp, #12
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800981e:	2300      	movs	r3, #0
    }
 8009820:	4618      	mov	r0, r3
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	4613      	mov	r3, r2
 8009838:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 800983a:	4a07      	ldr	r2, [pc, #28]	@ (8009858 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6013      	str	r3, [r2, #0]
        fonts = f;
 8009840:	4a06      	ldr	r2, [pc, #24]	@ (800985c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8009846:	4a06      	ldr	r2, [pc, #24]	@ (8009860 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8009848:	88fb      	ldrh	r3, [r7, #6]
 800984a:	8013      	strh	r3, [r2, #0]
    }
 800984c:	bf00      	nop
 800984e:	3714      	adds	r7, #20
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr
 8009858:	200043a4 	.word	0x200043a4
 800985c:	200043ac 	.word	0x200043ac
 8009860:	200043a8 	.word	0x200043a8

08009864 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8009864:	b40e      	push	{r1, r2, r3}
 8009866:	b580      	push	{r7, lr}
 8009868:	b085      	sub	sp, #20
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800986e:	f107 0320 	add.w	r3, r7, #32
 8009872:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	69fa      	ldr	r2, [r7, #28]
 8009878:	2100      	movs	r1, #0
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f006 fbb4 	bl	800ffe8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8009880:	4603      	mov	r3, r0
 8009882:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8009884:	89fb      	ldrh	r3, [r7, #14]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009890:	b003      	add	sp, #12
 8009892:	4770      	bx	lr

08009894 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8009894:	b40c      	push	{r2, r3}
 8009896:	b580      	push	{r7, lr}
 8009898:	b084      	sub	sp, #16
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	460b      	mov	r3, r1
 80098a0:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 80098a2:	f107 031c 	add.w	r3, r7, #28
 80098a6:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80098a8:	78f9      	ldrb	r1, [r7, #3]
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	69ba      	ldr	r2, [r7, #24]
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f006 fb9a 	bl	800ffe8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80098b4:	4603      	mov	r3, r0
 80098b6:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80098b8:	89fb      	ldrh	r3, [r7, #14]
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3710      	adds	r7, #16
 80098be:	46bd      	mov	sp, r7
 80098c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098c4:	b002      	add	sp, #8
 80098c6:	4770      	bx	lr

080098c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b08a      	sub	sp, #40	@ 0x28
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	460b      	mov	r3, r1
 80098d2:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d016      	beq.n	800990a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	3322      	adds	r3, #34	@ 0x22
 80098e0:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80098e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098e4:	8adb      	ldrh	r3, [r3, #22]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d105      	bne.n	80098f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 80098ea:	4b43      	ldr	r3, [pc, #268]	@ (80099f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80098ec:	4a43      	ldr	r2, [pc, #268]	@ (80099fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80098ee:	21c5      	movs	r1, #197	@ 0xc5
 80098f0:	4843      	ldr	r0, [pc, #268]	@ (8009a00 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80098f2:	f009 fd91 	bl	8013418 <__assert_func>
            return buffer[pos];
 80098f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f8:	8a9b      	ldrh	r3, [r3, #20]
 80098fa:	461a      	mov	r2, r3
 80098fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d001      	beq.n	800990a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8009906:	2301      	movs	r3, #1
 8009908:	e000      	b.n	800990c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800990a:	2300      	movs	r3, #0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d06a      	beq.n	80099e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f007 fe0e 	bl	8011532 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	3322      	adds	r3, #34	@ 0x22
 800991a:	623b      	str	r3, [r7, #32]
 800991c:	2301      	movs	r3, #1
 800991e:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8009920:	6a3b      	ldr	r3, [r7, #32]
 8009922:	8adb      	ldrh	r3, [r3, #22]
 8009924:	8bfa      	ldrh	r2, [r7, #30]
 8009926:	429a      	cmp	r2, r3
 8009928:	d305      	bcc.n	8009936 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800992a:	4b36      	ldr	r3, [pc, #216]	@ (8009a04 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800992c:	4a36      	ldr	r2, [pc, #216]	@ (8009a08 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800992e:	21cb      	movs	r1, #203	@ 0xcb
 8009930:	4833      	ldr	r0, [pc, #204]	@ (8009a00 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009932:	f009 fd71 	bl	8013418 <__assert_func>
            const uint16_t index = pos + offset;
 8009936:	6a3b      	ldr	r3, [r7, #32]
 8009938:	8a9a      	ldrh	r2, [r3, #20]
 800993a:	8bfb      	ldrh	r3, [r7, #30]
 800993c:	4413      	add	r3, r2
 800993e:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8009940:	8bbb      	ldrh	r3, [r7, #28]
 8009942:	2b09      	cmp	r3, #9
 8009944:	d801      	bhi.n	800994a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8009946:	8bbb      	ldrh	r3, [r7, #28]
 8009948:	e001      	b.n	800994e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800994a:	8bbb      	ldrh	r3, [r7, #28]
 800994c:	3b0a      	subs	r3, #10
 800994e:	6a3a      	ldr	r2, [r7, #32]
 8009950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009954:	f640 123f 	movw	r2, #2367	@ 0x93f
 8009958:	4293      	cmp	r3, r2
 800995a:	bf0c      	ite	eq
 800995c:	2301      	moveq	r3, #1
 800995e:	2300      	movne	r3, #0
 8009960:	b2db      	uxtb	r3, r3
 8009962:	2b00      	cmp	r3, #0
 8009964:	d03f      	beq.n	80099e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	3322      	adds	r3, #34	@ 0x22
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	3222      	adds	r2, #34	@ 0x22
 800996e:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8009970:	68ba      	ldr	r2, [r7, #8]
 8009972:	8ad2      	ldrh	r2, [r2, #22]
 8009974:	2a00      	cmp	r2, #0
 8009976:	d105      	bne.n	8009984 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8009978:	4b1f      	ldr	r3, [pc, #124]	@ (80099f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800997a:	4a20      	ldr	r2, [pc, #128]	@ (80099fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800997c:	21c5      	movs	r1, #197	@ 0xc5
 800997e:	4820      	ldr	r0, [pc, #128]	@ (8009a00 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009980:	f009 fd4a 	bl	8013418 <__assert_func>
            return buffer[pos];
 8009984:	68ba      	ldr	r2, [r7, #8]
 8009986:	8a92      	ldrh	r2, [r2, #20]
 8009988:	4611      	mov	r1, r2
 800998a:	68ba      	ldr	r2, [r7, #8]
 800998c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8009990:	613b      	str	r3, [r7, #16]
 8009992:	4613      	mov	r3, r2
 8009994:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	8adb      	ldrh	r3, [r3, #22]
 800999a:	2b01      	cmp	r3, #1
 800999c:	d806      	bhi.n	80099ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800999e:	4b1b      	ldr	r3, [pc, #108]	@ (8009a0c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 80099a0:	4a1b      	ldr	r2, [pc, #108]	@ (8009a10 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 80099a2:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 80099a6:	4816      	ldr	r0, [pc, #88]	@ (8009a00 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80099a8:	f009 fd36 	bl	8013418 <__assert_func>
            const uint16_t index = pos + 1;
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	8a9b      	ldrh	r3, [r3, #20]
 80099b0:	3301      	adds	r3, #1
 80099b2:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 80099b4:	89bb      	ldrh	r3, [r7, #12]
 80099b6:	2b09      	cmp	r3, #9
 80099b8:	d801      	bhi.n	80099be <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 80099ba:	89bb      	ldrh	r3, [r7, #12]
 80099bc:	e000      	b.n	80099c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 80099be:	2300      	movs	r3, #0
 80099c0:	693a      	ldr	r2, [r7, #16]
 80099c2:	89f9      	ldrh	r1, [r7, #14]
 80099c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 80099c8:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	3322      	adds	r3, #34	@ 0x22
 80099ce:	61bb      	str	r3, [r7, #24]
 80099d0:	f640 133f 	movw	r3, #2367	@ 0x93f
 80099d4:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	8a9b      	ldrh	r3, [r3, #20]
 80099da:	4619      	mov	r1, r3
 80099dc:	69bb      	ldr	r3, [r7, #24]
 80099de:	8afa      	ldrh	r2, [r7, #22]
 80099e0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 80099e4:	bf00      	nop
        }
    }
    return getNextChar();
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f007 fca6 	bl	8011338 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80099ec:	4603      	mov	r3, r0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3728      	adds	r7, #40	@ 0x28
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	08014870 	.word	0x08014870
 80099fc:	0801487c 	.word	0x0801487c
 8009a00:	08014928 	.word	0x08014928
 8009a04:	08014970 	.word	0x08014970
 8009a08:	08014980 	.word	0x08014980
 8009a0c:	08014a54 	.word	0x08014a54
 8009a10:	08014a60 	.word	0x08014a60

08009a14 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f007 fc52 	bl	80112c6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8009a22:	bf00      	nop
 8009a24:	3708      	adds	r7, #8
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b088      	sub	sp, #32
 8009a2e:	af02      	add	r7, sp, #8
 8009a30:	60f8      	str	r0, [r7, #12]
 8009a32:	1d38      	adds	r0, r7, #4
 8009a34:	e880 0006 	stmia.w	r0, {r1, r2}
 8009a38:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8009a3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009a3e:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8009a40:	1d39      	adds	r1, r7, #4
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	9301      	str	r3, [sp, #4]
 8009a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a48:	9300      	str	r3, [sp, #0]
 8009a4a:	6a3b      	ldr	r3, [r7, #32]
 8009a4c:	683a      	ldr	r2, [r7, #0]
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f004 ff78 	bl	800e944 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8009a54:	bf00      	nop
 8009a56:	3718      	adds	r7, #24
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8009a5c:	b590      	push	{r4, r7, lr}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	4603      	mov	r3, r0
 8009a64:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8009a66:	2300      	movs	r3, #0
 8009a68:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8009a6a:	88fb      	ldrh	r3, [r7, #6]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d127      	bne.n	8009ac0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8009a70:	88fb      	ldrh	r3, [r7, #6]
 8009a72:	4a1e      	ldr	r2, [pc, #120]	@ (8009aec <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8009a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d016      	beq.n	8009aaa <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8009a7c:	88fb      	ldrh	r3, [r7, #6]
 8009a7e:	4a1b      	ldr	r2, [pc, #108]	@ (8009aec <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8009a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a84:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68ba      	ldr	r2, [r7, #8]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	4a18      	ldr	r2, [pc, #96]	@ (8009af0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8009a90:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	4413      	add	r3, r2
 8009a9a:	4a16      	ldr	r2, [pc, #88]	@ (8009af4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8009a9c:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	68ba      	ldr	r2, [r7, #8]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	60fb      	str	r3, [r7, #12]
 8009aa8:	e00a      	b.n	8009ac0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8009aaa:	4b11      	ldr	r3, [pc, #68]	@ (8009af0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8009aac:	4a12      	ldr	r2, [pc, #72]	@ (8009af8 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8009aae:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8009ab0:	4a12      	ldr	r2, [pc, #72]	@ (8009afc <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8009ab2:	4b10      	ldr	r3, [pc, #64]	@ (8009af4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8009ab4:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8009ab6:	88fb      	ldrh	r3, [r7, #6]
 8009ab8:	4a11      	ldr	r2, [pc, #68]	@ (8009b00 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8009aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009abe:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00d      	beq.n	8009ae2 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8009ac6:	4a0f      	ldr	r2, [pc, #60]	@ (8009b04 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8009ac8:	88fb      	ldrh	r3, [r7, #6]
 8009aca:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8009acc:	f000 f83e 	bl	8009b4c <_ZN17TypedTextDatabase8getFontsEv>
 8009ad0:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8009ad2:	f000 f833 	bl	8009b3c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	461a      	mov	r2, r3
 8009ada:	4621      	mov	r1, r4
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	f7ff fea5 	bl	800982c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8009ae2:	bf00      	nop
 8009ae4:	3714      	adds	r7, #20
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd90      	pop	{r4, r7, pc}
 8009aea:	bf00      	nop
 8009aec:	20003b40 	.word	0x20003b40
 8009af0:	20003b48 	.word	0x20003b48
 8009af4:	20003b4c 	.word	0x20003b4c
 8009af8:	0801638c 	.word	0x0801638c
 8009afc:	08016388 	.word	0x08016388
 8009b00:	08016394 	.word	0x08016394
 8009b04:	20003b44 	.word	0x20003b44

08009b08 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	460b      	mov	r3, r1
 8009b12:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8009b14:	4b07      	ldr	r3, [pc, #28]	@ (8009b34 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	4b07      	ldr	r3, [pc, #28]	@ (8009b38 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8009b1a:	6819      	ldr	r1, [r3, #0]
 8009b1c:	887b      	ldrh	r3, [r7, #2]
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	440b      	add	r3, r1
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	005b      	lsls	r3, r3, #1
 8009b26:	4413      	add	r3, r2
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr
 8009b34:	20003b48 	.word	0x20003b48
 8009b38:	20003b4c 	.word	0x20003b4c

08009b3c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8009b40:	2301      	movs	r3, #1
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8009b50:	4b02      	ldr	r3, [pc, #8]	@ (8009b5c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr
 8009b5c:	20003b50 	.word	0x20003b50

08009b60 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_1bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d113      	bne.n	8009b98 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d10e      	bne.n	8009b98 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_1bpp()),
 8009b7a:	f7fe f94f 	bl	8007e1c <_Z23getFont_verdana_20_1bppv>
 8009b7e:	4603      	mov	r3, r0
};
 8009b80:	4a07      	ldr	r2, [pc, #28]	@ (8009ba0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8009b82:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_1bpp()),
 8009b84:	f7fe f9a4 	bl	8007ed0 <_Z23getFont_verdana_40_1bppv>
 8009b88:	4603      	mov	r3, r0
};
 8009b8a:	4a05      	ldr	r2, [pc, #20]	@ (8009ba0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8009b8c:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_1bpp())
 8009b8e:	f7fe f8eb 	bl	8007d68 <_Z23getFont_verdana_10_1bppv>
 8009b92:	4603      	mov	r3, r0
};
 8009b94:	4a02      	ldr	r2, [pc, #8]	@ (8009ba0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8009b96:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8009b98:	bf00      	nop
 8009b9a:	3708      	adds	r7, #8
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	20003b50 	.word	0x20003b50

08009ba4 <_GLOBAL__sub_I_touchgfx_fonts>:
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8009bac:	2001      	movs	r0, #1
 8009bae:	f7ff ffd7 	bl	8009b60 <_Z41__static_initialization_and_destruction_0ii>
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	4a05      	ldr	r2, [pc, #20]	@ (8009bd4 <_ZN19FrontendApplicationD1Ev+0x20>)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	601a      	str	r2, [r3, #0]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7fe fbc5 	bl	8008354 <_ZN23FrontendApplicationBaseD1Ev>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	080152bc 	.word	0x080152bc

08009bd8 <_ZN19FrontendApplicationD0Ev>:
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f7ff ffe7 	bl	8009bb4 <_ZN19FrontendApplicationD1Ev>
 8009be6:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f009 fbe6 	bl	80133bc <_ZdlPvj>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3708      	adds	r7, #8
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b082      	sub	sp, #8
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f000 f82d 	bl	8009c68 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f005 fb51 	bl	800f2b8 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8009c16:	bf00      	nop
 8009c18:	3708      	adds	r7, #8
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
	...

08009c20 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	68b9      	ldr	r1, [r7, #8]
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7fe fbde 	bl	80083f4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8009c38:	4a03      	ldr	r2, [pc, #12]	@ (8009c48 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	601a      	str	r2, [r3, #0]
{

}
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	4618      	mov	r0, r3
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	080152bc 	.word	0x080152bc

08009c4c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	601a      	str	r2, [r3, #0]
{

}
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <_ZN5Model4tickEv>:

void Model::tick()
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]

}
 8009c70:	bf00      	nop
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
    {
    }
 8009c84:	bf00      	nop
 8009c86:	370c      	adds	r7, #12
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
    {
    }
 8009c98:	bf00      	nop
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
    {
 8009cac:	4a04      	ldr	r2, [pc, #16]	@ (8009cc0 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	601a      	str	r2, [r3, #0]
    }
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	370c      	adds	r7, #12
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr
 8009cc0:	08015340 	.word	0x08015340

08009cc4 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
    }
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f7ff ffe9 	bl	8009ca4 <_ZN8touchgfx9PresenterD1Ev>
 8009cd2:	2104      	movs	r1, #4
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f009 fb71 	bl	80133bc <_ZdlPvj>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3708      	adds	r7, #8
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
    {
 8009cec:	4a04      	ldr	r2, [pc, #16]	@ (8009d00 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	601a      	str	r2, [r3, #0]
    }
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr
 8009d00:	08015340 	.word	0x08015340

08009d04 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	4a06      	ldr	r2, [pc, #24]	@ (8009d28 <_ZN13ModelListenerC1Ev+0x24>)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	601a      	str	r2, [r3, #0]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	605a      	str	r2, [r3, #4]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	370c      	adds	r7, #12
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr
 8009d26:	bf00      	nop
 8009d28:	08015330 	.word	0x08015330

08009d2c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	4a04      	ldr	r2, [pc, #16]	@ (8009d48 <_ZN13ModelListenerD1Ev+0x1c>)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	601a      	str	r2, [r3, #0]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr
 8009d48:	08015330 	.word	0x08015330

08009d4c <_ZN13ModelListenerD0Ev>:
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f7ff ffe9 	bl	8009d2c <_ZN13ModelListenerD1Ev>
 8009d5a:	2108      	movs	r1, #8
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f009 fb2d 	bl	80133bc <_ZdlPvj>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4618      	mov	r0, r3
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {};
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b082      	sub	sp, #8
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	4a09      	ldr	r2, [pc, #36]	@ (8009d9c <_ZN15screenPresenterD1Ev+0x30>)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	601a      	str	r2, [r3, #0]
 8009d7a:	4a09      	ldr	r2, [pc, #36]	@ (8009da0 <_ZN15screenPresenterD1Ev+0x34>)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	605a      	str	r2, [r3, #4]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	3304      	adds	r3, #4
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7ff ffd1 	bl	8009d2c <_ZN13ModelListenerD1Ev>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7ff ff89 	bl	8009ca4 <_ZN8touchgfx9PresenterD1Ev>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4618      	mov	r0, r3
 8009d96:	3708      	adds	r7, #8
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	08015308 	.word	0x08015308
 8009da0:	08015320 	.word	0x08015320

08009da4 <_ZThn4_N15screenPresenterD1Ev>:
 8009da4:	f1a0 0004 	sub.w	r0, r0, #4
 8009da8:	e7e0      	b.n	8009d6c <_ZN15screenPresenterD1Ev>
 8009daa:	bf00      	nop

08009dac <_ZN15screenPresenterD0Ev>:
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f7ff ffd9 	bl	8009d6c <_ZN15screenPresenterD1Ev>
 8009dba:	2110      	movs	r1, #16
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f009 fafd 	bl	80133bc <_ZdlPvj>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3708      	adds	r7, #8
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <_ZThn4_N15screenPresenterD0Ev>:
 8009dcc:	f1a0 0004 	sub.w	r0, r0, #4
 8009dd0:	e7ec      	b.n	8009dac <_ZN15screenPresenterD0Ev>
	...

08009dd4 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
    : view(v)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	4618      	mov	r0, r3
 8009de2:	f7ff ff7f 	bl	8009ce4 <_ZN8touchgfx9PresenterC1Ev>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	3304      	adds	r3, #4
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7ff ff8a 	bl	8009d04 <_ZN13ModelListenerC1Ev>
 8009df0:	4a06      	ldr	r2, [pc, #24]	@ (8009e0c <_ZN15screenPresenterC1ER10screenView+0x38>)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	601a      	str	r2, [r3, #0]
 8009df6:	4a06      	ldr	r2, [pc, #24]	@ (8009e10 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	605a      	str	r2, [r3, #4]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	683a      	ldr	r2, [r7, #0]
 8009e00:	60da      	str	r2, [r3, #12]
{

}
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4618      	mov	r0, r3
 8009e06:	3708      	adds	r7, #8
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	08015308 	.word	0x08015308
 8009e10:	08015320 	.word	0x08015320

08009e14 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]

}
 8009e1c:	bf00      	nop
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]

}
 8009e30:	bf00      	nop
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	4a05      	ldr	r2, [pc, #20]	@ (8009e5c <_ZN10screenViewD1Ev+0x20>)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	601a      	str	r2, [r3, #0]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7ff fb8d 	bl	800956c <_ZN14screenViewBaseD1Ev>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4618      	mov	r0, r3
 8009e56:	3708      	adds	r7, #8
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	08015358 	.word	0x08015358

08009e60 <_ZN10screenViewD0Ev>:
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f7ff ffe7 	bl	8009e3c <_ZN10screenViewD1Ev>
 8009e6e:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f009 faa2 	bl	80133bc <_ZdlPvj>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3708      	adds	r7, #8
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
	...

08009e84 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7ff fa5a 	bl	8009348 <_ZN14screenViewBaseC1Ev>
 8009e94:	4a05      	ldr	r2, [pc, #20]	@ (8009eac <_ZN10screenViewC1Ev+0x28>)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	601a      	str	r2, [r3, #0]
{

 tickcount = 0 ;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
}
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3708      	adds	r7, #8
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	08015358 	.word	0x08015358

08009eb0 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7ff fb8d 	bl	80095da <_ZN14screenViewBase11setupScreenEv>
}
 8009ec0:	bf00      	nop
 8009ec2:	3708      	adds	r7, #8
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fe ffa4 	bl	8008e20 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8009ed8:	bf00      	nop
 8009eda:	3708      	adds	r7, #8
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <_ZN10screenView15handleTickEventEv>:
extern int seconds ;
extern int minutes;
extern int hours;

void screenView::handleTickEvent()
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
    tickcount++;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8009eee:	1c5a      	adds	r2, r3, #1
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c

    if (tickcount % 20 == 0)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8d3 115c 	ldr.w	r1, [r3, #348]	@ 0x15c
 8009efc:	4b0f      	ldr	r3, [pc, #60]	@ (8009f3c <_ZN10screenView15handleTickEventEv+0x5c>)
 8009efe:	fb83 2301 	smull	r2, r3, r3, r1
 8009f02:	10da      	asrs	r2, r3, #3
 8009f04:	17cb      	asrs	r3, r1, #31
 8009f06:	1ad2      	subs	r2, r2, r3
 8009f08:	4613      	mov	r3, r2
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	4413      	add	r3, r2
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	1aca      	subs	r2, r1, r3
 8009f12:	2a00      	cmp	r2, #0
 8009f14:	d10d      	bne.n	8009f32 <_ZN10screenView15handleTickEventEv+0x52>
    {
        // Update the clocks
        digitalClock1.setTime24Hour(hours, minutes, seconds);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f103 00c4 	add.w	r0, r3, #196	@ 0xc4
 8009f1c:	4b08      	ldr	r3, [pc, #32]	@ (8009f40 <_ZN10screenView15handleTickEventEv+0x60>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	b2d9      	uxtb	r1, r3
 8009f22:	4b08      	ldr	r3, [pc, #32]	@ (8009f44 <_ZN10screenView15handleTickEventEv+0x64>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	b2da      	uxtb	r2, r3
 8009f28:	4b07      	ldr	r3, [pc, #28]	@ (8009f48 <_ZN10screenView15handleTickEventEv+0x68>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	f001 fe14 	bl	800bb5a <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
    }
}
 8009f32:	bf00      	nop
 8009f34:	3708      	adds	r7, #8
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	66666667 	.word	0x66666667
 8009f40:	20000524 	.word	0x20000524
 8009f44:	20000520 	.word	0x20000520
 8009f48:	2000051c 	.word	0x2000051c

08009f4c <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
    {
 8009f54:	4a04      	ldr	r2, [pc, #16]	@ (8009f68 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	601a      	str	r2, [r3, #0]
    }
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr
 8009f68:	080153a4 	.word	0x080153a4

08009f6c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
    }
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f7ff ffe9 	bl	8009f4c <_ZN8touchgfx15TouchControllerD1Ev>
 8009f7a:	2104      	movs	r1, #4
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f009 fa1d 	bl	80133bc <_ZdlPvj>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4618      	mov	r0, r3
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8009f94:	bf00      	nop
 8009f96:	370c      	adds	r7, #12
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8009fac:	2300      	movs	r3, #0
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3714      	adds	r7, #20
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr
	...

08009fbc <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	4a05      	ldr	r2, [pc, #20]	@ (8009fdc <_ZN20STM32TouchControllerD1Ev+0x20>)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	601a      	str	r2, [r3, #0]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7ff ffbd 	bl	8009f4c <_ZN8touchgfx15TouchControllerD1Ev>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3708      	adds	r7, #8
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	0801538c 	.word	0x0801538c

08009fe0 <_ZN20STM32TouchControllerD0Ev>:
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f7ff ffe7 	bl	8009fbc <_ZN20STM32TouchControllerD1Ev>
 8009fee:	2104      	movs	r1, #4
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f009 f9e3 	bl	80133bc <_ZdlPvj>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3708      	adds	r7, #8
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 800a000:	b480      	push	{r7}
 800a002:	af00      	add	r7, sp, #0

}
 800a004:	bf00      	nop
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr
	...

0800a010 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	4603      	mov	r3, r0
 800a018:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800a01a:	79fb      	ldrb	r3, [r7, #7]
 800a01c:	2b03      	cmp	r3, #3
 800a01e:	d80c      	bhi.n	800a03a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 800a020:	a201      	add	r2, pc, #4	@ (adr r2, 800a028 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 800a022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a026:	bf00      	nop
 800a028:	0800a039 	.word	0x0800a039
 800a02c:	0800a039 	.word	0x0800a039
 800a030:	0800a039 	.word	0x0800a039
 800a034:	0800a039 	.word	0x0800a039
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 800a038:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 800a03a:	bf00      	nop
 800a03c:	370c      	adds	r7, #12
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr
 800a046:	bf00      	nop

0800a048 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800a048:	b480      	push	{r7}
 800a04a:	b083      	sub	sp, #12
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	4603      	mov	r3, r0
 800a050:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800a052:	79fb      	ldrb	r3, [r7, #7]
 800a054:	2b03      	cmp	r3, #3
 800a056:	d80c      	bhi.n	800a072 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 800a058:	a201      	add	r2, pc, #4	@ (adr r2, 800a060 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 800a05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a05e:	bf00      	nop
 800a060:	0800a071 	.word	0x0800a071
 800a064:	0800a071 	.word	0x0800a071
 800a068:	0800a071 	.word	0x0800a071
 800a06c:	0800a071 	.word	0x0800a071
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 800a070:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 800a072:	bf00      	nop
 800a074:	370c      	adds	r7, #12
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr
 800a07e:	bf00      	nop

0800a080 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	4603      	mov	r3, r0
 800a088:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800a08a:	79fb      	ldrb	r3, [r7, #7]
 800a08c:	2b03      	cmp	r3, #3
 800a08e:	d80c      	bhi.n	800a0aa <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 800a090:	a201      	add	r2, pc, #4	@ (adr r2, 800a098 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800a092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a096:	bf00      	nop
 800a098:	0800a0a9 	.word	0x0800a0a9
 800a09c:	0800a0a9 	.word	0x0800a0a9
 800a0a0:	0800a0a9 	.word	0x0800a0a9
 800a0a4:	0800a0a9 	.word	0x0800a0a9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 800a0a8:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 800a0aa:	bf00      	nop
 800a0ac:	370c      	adds	r7, #12
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop

0800a0b8 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
    {
 800a0c0:	4a04      	ldr	r2, [pc, #16]	@ (800a0d4 <_ZN8touchgfx3HALD1Ev+0x1c>)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	601a      	str	r2, [r3, #0]
    }
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr
 800a0d4:	08015934 	.word	0x08015934

0800a0d8 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
    }
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f7ff ffe9 	bl	800a0b8 <_ZN8touchgfx3HALD1Ev>
 800a0e6:	217c      	movs	r1, #124	@ 0x7c
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f009 f967 	bl	80133bc <_ZdlPvj>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3708      	adds	r7, #8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	460b      	mov	r3, r1
 800a102:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	78fa      	ldrb	r2, [r7, #3]
 800a108:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
        displayOrientationChangeRequested = true;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2201      	movs	r2, #1
 800a110:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
    }
 800a114:	bf00      	nop
 800a116:	370c      	adds	r7, #12
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	460b      	mov	r3, r1
 800a12a:	807b      	strh	r3, [r7, #2]
 800a12c:	4613      	mov	r3, r2
 800a12e:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800a130:	4b0c      	ldr	r3, [pc, #48]	@ (800a164 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800a132:	881b      	ldrh	r3, [r3, #0]
 800a134:	887a      	ldrh	r2, [r7, #2]
 800a136:	429a      	cmp	r2, r3
 800a138:	d304      	bcc.n	800a144 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 800a13a:	4b0b      	ldr	r3, [pc, #44]	@ (800a168 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 800a13c:	881b      	ldrh	r3, [r3, #0]
 800a13e:	883a      	ldrh	r2, [r7, #0]
 800a140:	429a      	cmp	r2, r3
 800a142:	d205      	bcs.n	800a150 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 800a144:	4b09      	ldr	r3, [pc, #36]	@ (800a16c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 800a146:	4a0a      	ldr	r2, [pc, #40]	@ (800a170 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 800a148:	219e      	movs	r1, #158	@ 0x9e
 800a14a:	480a      	ldr	r0, [pc, #40]	@ (800a174 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 800a14c:	f009 f964 	bl	8013418 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800a150:	4a09      	ldr	r2, [pc, #36]	@ (800a178 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800a152:	887b      	ldrh	r3, [r7, #2]
 800a154:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 800a156:	4a09      	ldr	r2, [pc, #36]	@ (800a17c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 800a158:	883b      	ldrh	r3, [r7, #0]
 800a15a:	8013      	strh	r3, [r2, #0]
    }
 800a15c:	bf00      	nop
 800a15e:	3708      	adds	r7, #8
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	20004346 	.word	0x20004346
 800a168:	20004348 	.word	0x20004348
 800a16c:	08014b14 	.word	0x08014b14
 800a170:	08014b78 	.word	0x08014b78
 800a174:	08014bbc 	.word	0x08014bbc
 800a178:	2000434c 	.word	0x2000434c
 800a17c:	2000434e 	.word	0x2000434e

0800a180 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800a180:	b580      	push	{r7, lr}
 800a182:	b082      	sub	sp, #8
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d009      	beq.n	800a1a6 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	685a      	ldr	r2, [r3, #4]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4610      	mov	r0, r2
 800a1a0:	4798      	blx	r3
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	e000      	b.n	800a1a8 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 800a1a6:	2300      	movs	r3, #0
    }
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3708      	adds	r7, #8
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <_ZN8touchgfx3HAL5vSyncEv>:
    /**
     * Called by the VSync interrupt.
     *
     * Called by the VSync interrupt for counting of LCD refreshes.
     */
    void vSync()
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
    {
        vSyncCnt++;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 800a1be:	3301      	adds	r3, #1
 800a1c0:	b2da      	uxtb	r2, r3
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
    }
 800a1c8:	bf00      	nop
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f002 fd51 	bl	800cc84 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	33ac      	adds	r3, #172	@ 0xac
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	4798      	blx	r3
    }
 800a1ee:	bf00      	nop
 800a1f0:	3708      	adds	r7, #8
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800a1f6:	b480      	push	{r7}
 800a1f8:	b083      	sub	sp, #12
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
 800a1fe:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 800a200:	2300      	movs	r3, #0
    }
 800a202:	4618      	mov	r0, r3
 800a204:	370c      	adds	r7, #12
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
	...

0800a210 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	607a      	str	r2, [r7, #4]
 800a21c:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d106      	bne.n	800a232 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800a224:	4b0f      	ldr	r3, [pc, #60]	@ (800a264 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 800a226:	4a10      	ldr	r2, [pc, #64]	@ (800a268 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 800a228:	f240 21d2 	movw	r1, #722	@ 0x2d2
 800a22c:	480f      	ldr	r0, [pc, #60]	@ (800a26c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800a22e:	f009 f8f3 	bl	8013418 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	68ba      	ldr	r2, [r7, #8]
 800a236:	63da      	str	r2, [r3, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	641a      	str	r2, [r3, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2b00      	cmp	r3, #0
 800a242:	bf14      	ite	ne
 800a244:	2301      	movne	r3, #1
 800a246:	2300      	moveq	r3, #0
 800a248:	b2da      	uxtb	r2, r3
 800a24a:	4b09      	ldr	r3, [pc, #36]	@ (800a270 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800a24c:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	338c      	adds	r3, #140	@ 0x8c
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	6839      	ldr	r1, [r7, #0]
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	4798      	blx	r3
    }
 800a25c:	bf00      	nop
 800a25e:	3710      	adds	r7, #16
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	08014c00 	.word	0x08014c00
 800a268:	08014c38 	.word	0x08014c38
 800a26c:	08014bbc 	.word	0x08014bbc
 800a270:	20004350 	.word	0x20004350

0800a274 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	683a      	ldr	r2, [r7, #0]
 800a282:	645a      	str	r2, [r3, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	bf14      	ite	ne
 800a28a:	2301      	movne	r3, #1
 800a28c:	2300      	moveq	r3, #0
 800a28e:	b2da      	uxtb	r2, r3
 800a290:	4b03      	ldr	r3, [pc, #12]	@ (800a2a0 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 800a292:	701a      	strb	r2, [r3, #0]
    }
 800a294:	bf00      	nop
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr
 800a2a0:	20004351 	.word	0x20004351

0800a2a4 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800a2ac:	2300      	movs	r3, #0
    }
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	370c      	adds	r7, #12
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b082      	sub	sp, #8
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d004      	beq.n	800a2d8 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2d2:	887a      	ldrh	r2, [r7, #2]
 800a2d4:	4610      	mov	r0, r2
 800a2d6:	4798      	blx	r3
        }
    }
 800a2d8:	bf00      	nop
 800a2da:	3708      	adds	r7, #8
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 800a2e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    }
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	685a      	ldr	r2, [r3, #4]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	3318      	adds	r3, #24
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4610      	mov	r0, r2
 800a310:	4798      	blx	r3
 800a312:	4603      	mov	r3, r0
    }
 800a314:	4618      	mov	r0, r3
 800a316:	3708      	adds	r7, #8
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
    /**
     * Gets client framebuffer.
     *
     * @return The address of the framebuffer currently used by the framework to draw in.
     */
    uint16_t* getClientFrameBuffer()
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
    {
        if (USE_DOUBLE_BUFFERING && getTFTFrameBuffer() == frameBuffer0)
 800a324:	4b0e      	ldr	r3, [pc, #56]	@ (800a360 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x44>)
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d00c      	beq.n	800a346 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	3330      	adds	r3, #48	@ 0x30
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	4798      	blx	r3
 800a338:	4602      	mov	r2, r0
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a33e:	429a      	cmp	r2, r3
 800a340:	d101      	bne.n	800a346 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 800a342:	2301      	movs	r3, #1
 800a344:	e000      	b.n	800a348 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2c>
 800a346:	2300      	movs	r3, #0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d002      	beq.n	800a352 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x36>
        {
            return frameBuffer1;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a350:	e001      	b.n	800a356 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x3a>
        }
        return frameBuffer0;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 800a356:	4618      	mov	r0, r3
 800a358:	3708      	adds	r7, #8
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	20004350 	.word	0x20004350

0800a364 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f893 2074 	ldrb.w	r2, [r3, #116]	@ 0x74
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a378:	429a      	cmp	r2, r3
 800a37a:	d011      	beq.n	800a3a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 800a37c:	4b14      	ldr	r3, [pc, #80]	@ (800a3d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d11e      	bne.n	800a3c2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800a384:	4b13      	ldr	r3, [pc, #76]	@ (800a3d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800a386:	881b      	ldrh	r3, [r3, #0]
 800a388:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800a38a:	4b13      	ldr	r3, [pc, #76]	@ (800a3d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800a38c:	881a      	ldrh	r2, [r3, #0]
 800a38e:	4b11      	ldr	r3, [pc, #68]	@ (800a3d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800a390:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 800a392:	4a11      	ldr	r2, [pc, #68]	@ (800a3d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800a394:	89bb      	ldrh	r3, [r7, #12]
 800a396:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800a398:	4b0d      	ldr	r3, [pc, #52]	@ (800a3d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800a39a:	2201      	movs	r2, #1
 800a39c:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800a39e:	e010      	b.n	800a3c2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 800a3a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a3d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d00c      	beq.n	800a3c2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 800a3a8:	4b0a      	ldr	r3, [pc, #40]	@ (800a3d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800a3aa:	881b      	ldrh	r3, [r3, #0]
 800a3ac:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800a3ae:	4b0a      	ldr	r3, [pc, #40]	@ (800a3d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800a3b0:	881a      	ldrh	r2, [r3, #0]
 800a3b2:	4b08      	ldr	r3, [pc, #32]	@ (800a3d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800a3b4:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 800a3b6:	4a08      	ldr	r2, [pc, #32]	@ (800a3d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800a3b8:	89fb      	ldrh	r3, [r7, #14]
 800a3ba:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 800a3bc:	4b04      	ldr	r3, [pc, #16]	@ (800a3d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800a3be:	2200      	movs	r2, #0
 800a3c0:	701a      	strb	r2, [r3, #0]
    }
 800a3c2:	bf00      	nop
 800a3c4:	3714      	adds	r7, #20
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr
 800a3ce:	bf00      	nop
 800a3d0:	2000434a 	.word	0x2000434a
 800a3d4:	20004348 	.word	0x20004348
 800a3d8:	20004346 	.word	0x20004346

0800a3dc <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
    {
    }
 800a3e4:	bf00      	nop
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
    {
    }
 800a3f8:	bf00      	nop
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	4618      	mov	r0, r3
 800a410:	f001 fea2 	bl	800c158 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800a414:	bf00      	nop
 800a416:	3708      	adds	r7, #8
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	4a05      	ldr	r2, [pc, #20]	@ (800a43c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	601a      	str	r2, [r3, #0]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7ff fe43 	bl	800a0b8 <_ZN8touchgfx3HALD1Ev>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4618      	mov	r0, r3
 800a436:	3708      	adds	r7, #8
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	080155dc 	.word	0x080155dc

0800a440 <_ZN20TouchGFXGeneratedHALD0Ev>:
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f7ff ffe7 	bl	800a41c <_ZN20TouchGFXGeneratedHALD1Ev>
 800a44e:	217c      	movs	r1, #124	@ 0x7c
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f008 ffb3 	bl	80133bc <_ZdlPvj>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	4618      	mov	r0, r3
 800a45a:	3708      	adds	r7, #8
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7ff ffca 	bl	800a404 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800a470:	bf00      	nop
 800a472:	3708      	adds	r7, #8
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <_ZN11TouchGFXHAL10initializeEv>:
#include <touchgfx/hal/OSWrappers.hpp>

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	4618      	mov	r0, r3
 800a484:	f000 ff84 	bl	800b390 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 800a488:	bf00      	nop
 800a48a:	3708      	adds	r7, #8
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 ffdc 	bl	800b458 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800a4a0:	4603      	mov	r3, r0
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3708      	adds	r7, #8
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b082      	sub	sp, #8
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
 800a4b2:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6839      	ldr	r1, [r7, #0]
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f000 ffdb 	bl	800b474 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800a4be:	bf00      	nop
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b086      	sub	sp, #24
 800a4ca:	af02      	add	r7, sp, #8
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6839      	ldr	r1, [r7, #0]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f000 ffd8 	bl	800b48a <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    const unsigned char* bitmap = (const unsigned char*) getClientFrameBuffer();
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7ff ff1d 	bl	800a31c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a4e2:	60f8      	str	r0, [r7, #12]
    ssd1306_Fill(Black);
 800a4e4:	2000      	movs	r0, #0
 800a4e6:	f001 f893 	bl	800b610 <ssd1306_Fill>
    ssd1306_DrawBitmap(0, 0, bitmap, 128, 64, White);
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	9301      	str	r3, [sp, #4]
 800a4ee:	2340      	movs	r3, #64	@ 0x40
 800a4f0:	9300      	str	r3, [sp, #0]
 800a4f2:	2380      	movs	r3, #128	@ 0x80
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	2100      	movs	r1, #0
 800a4f8:	2000      	movs	r0, #0
 800a4fa:	f001 f91d 	bl	800b738 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 800a4fe:	f001 f89f 	bl	800b640 <ssd1306_UpdateScreen>

}
 800a502:	bf00      	nop
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b084      	sub	sp, #16
 800a50e:	af00      	add	r7, sp, #0
 800a510:	60f8      	str	r0, [r7, #12]
 800a512:	60b9      	str	r1, [r7, #8]
 800a514:	607a      	str	r2, [r7, #4]
 800a516:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800a518:	68f8      	ldr	r0, [r7, #12]
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	68b9      	ldr	r1, [r7, #8]
 800a520:	f000 ffc1 	bl	800b4a6 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 800a524:	4603      	mov	r3, r0
}
 800a526:	4618      	mov	r0, r3
 800a528:	3710      	adds	r7, #16
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b082      	sub	sp, #8
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4618      	mov	r0, r3
 800a53a:	f000 ff4b 	bl	800b3d4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800a53e:	bf00      	nop
 800a540:	3708      	adds	r7, #8
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b082      	sub	sp, #8
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4618      	mov	r0, r3
 800a552:	f000 ff49 	bl	800b3e8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800a556:	bf00      	nop
 800a558:	3708      	adds	r7, #8
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b082      	sub	sp, #8
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4618      	mov	r0, r3
 800a56a:	f000 ff47 	bl	800b3fc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800a56e:	bf00      	nop
 800a570:	3708      	adds	r7, #8
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b082      	sub	sp, #8
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	4618      	mov	r0, r3
 800a582:	f000 ff45 	bl	800b410 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800a586:	bf00      	nop
 800a588:	3708      	adds	r7, #8
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b082      	sub	sp, #8
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4618      	mov	r0, r3
 800a59a:	f000 ff43 	bl	800b424 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 800a59e:	4603      	mov	r3, r0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f000 ff43 	bl	800b43e <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 800a5b8:	bf00      	nop
 800a5ba:	3708      	adds	r7, #8
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <touchgfxSignalVSync>:
extern "C"
void touchgfxSignalVSync(void)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	af00      	add	r7, sp, #0
	/* VSync has occurred, increment TouchGFX engine vsync counter */
	touchgfx::HAL::getInstance()->vSync();
 800a5c4:	f7fd fd9a 	bl	80080fc <_ZN8touchgfx3HAL11getInstanceEv>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7ff fdf0 	bl	800a1b0 <_ZN8touchgfx3HAL5vSyncEv>
	/* VSync has occurred, signal TouchGFX engine */
	touchgfx::OSWrappers::signalVSync();
 800a5d0:	f000 f88a 	bl	800a6e8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
}
 800a5d4:	bf00      	nop
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	4a05      	ldr	r2, [pc, #20]	@ (800a5f8 <_ZN11TouchGFXHALD1Ev+0x20>)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	601a      	str	r2, [r3, #0]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7ff ff17 	bl	800a41c <_ZN20TouchGFXGeneratedHALD1Ev>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3708      	adds	r7, #8
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	080153bc 	.word	0x080153bc

0800a5fc <_ZN11TouchGFXHALD0Ev>:
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f7ff ffe7 	bl	800a5d8 <_ZN11TouchGFXHALD1Ev>
 800a60a:	217c      	movs	r1, #124	@ 0x7c
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f008 fed5 	bl	80133bc <_ZdlPvj>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	4618      	mov	r0, r3
 800a616:	3708      	adds	r7, #8
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800a620:	2200      	movs	r2, #0
 800a622:	2101      	movs	r1, #1
 800a624:	2001      	movs	r0, #1
 800a626:	f7f9 fe62 	bl	80042ee <osSemaphoreNew>
 800a62a:	4603      	mov	r3, r0
 800a62c:	4a0f      	ldr	r2, [pc, #60]	@ (800a66c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800a62e:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800a630:	4b0e      	ldr	r3, [pc, #56]	@ (800a66c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d105      	bne.n	800a644 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 800a638:	4b0d      	ldr	r3, [pc, #52]	@ (800a670 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 800a63a:	4a0e      	ldr	r2, [pc, #56]	@ (800a674 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800a63c:	2128      	movs	r1, #40	@ 0x28
 800a63e:	480e      	ldr	r0, [pc, #56]	@ (800a678 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800a640:	f008 feea 	bl	8013418 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800a644:	2200      	movs	r2, #0
 800a646:	2104      	movs	r1, #4
 800a648:	2001      	movs	r0, #1
 800a64a:	f7f9 ff6f 	bl	800452c <osMessageQueueNew>
 800a64e:	4603      	mov	r3, r0
 800a650:	4a0a      	ldr	r2, [pc, #40]	@ (800a67c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800a652:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800a654:	4b09      	ldr	r3, [pc, #36]	@ (800a67c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d105      	bne.n	800a668 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 800a65c:	4b08      	ldr	r3, [pc, #32]	@ (800a680 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 800a65e:	4a05      	ldr	r2, [pc, #20]	@ (800a674 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800a660:	212c      	movs	r1, #44	@ 0x2c
 800a662:	4805      	ldr	r0, [pc, #20]	@ (800a678 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800a664:	f008 fed8 	bl	8013418 <__assert_func>
}
 800a668:	bf00      	nop
 800a66a:	bd80      	pop	{r7, pc}
 800a66c:	20003b5c 	.word	0x20003b5c
 800a670:	08014c88 	.word	0x08014c88
 800a674:	08014cd4 	.word	0x08014cd4
 800a678:	08014d04 	.word	0x08014d04
 800a67c:	20003b60 	.word	0x20003b60
 800a680:	08014d30 	.word	0x08014d30

0800a684 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800a684:	b580      	push	{r7, lr}
 800a686:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800a688:	4b04      	ldr	r3, [pc, #16]	@ (800a69c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f04f 31ff 	mov.w	r1, #4294967295
 800a690:	4618      	mov	r0, r3
 800a692:	f7f9 feb5 	bl	8004400 <osSemaphoreAcquire>
}
 800a696:	bf00      	nop
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	20003b5c 	.word	0x20003b5c

0800a6a0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800a6a4:	4b03      	ldr	r3, [pc, #12]	@ (800a6b4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7f9 fefb 	bl	80044a4 <osSemaphoreRelease>
}
 800a6ae:	bf00      	nop
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	20003b5c 	.word	0x20003b5c

0800a6b8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 800a6bc:	4b03      	ldr	r3, [pc, #12]	@ (800a6cc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7f9 fe9c 	bl	8004400 <osSemaphoreAcquire>
}
 800a6c8:	bf00      	nop
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	20003b5c 	.word	0x20003b5c

0800a6d0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800a6d4:	4b03      	ldr	r3, [pc, #12]	@ (800a6e4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7f9 fee3 	bl	80044a4 <osSemaphoreRelease>
}
 800a6de:	bf00      	nop
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	20003b5c 	.word	0x20003b5c

0800a6e8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 800a6ec:	4b04      	ldr	r3, [pc, #16]	@ (800a700 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800a6ee:	6818      	ldr	r0, [r3, #0]
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	4903      	ldr	r1, [pc, #12]	@ (800a704 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 800a6f6:	f7f9 ff8d 	bl	8004614 <osMessageQueuePut>
}
 800a6fa:	bf00      	nop
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	20003b60 	.word	0x20003b60
 800a704:	20000010 	.word	0x20000010

0800a708 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800a70e:	4b09      	ldr	r3, [pc, #36]	@ (800a734 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800a710:	6818      	ldr	r0, [r3, #0]
 800a712:	1d39      	adds	r1, r7, #4
 800a714:	2300      	movs	r3, #0
 800a716:	2200      	movs	r2, #0
 800a718:	f7f9 ffdc 	bl	80046d4 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 800a71c:	4b05      	ldr	r3, [pc, #20]	@ (800a734 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800a71e:	6818      	ldr	r0, [r3, #0]
 800a720:	1d39      	adds	r1, r7, #4
 800a722:	f04f 33ff 	mov.w	r3, #4294967295
 800a726:	2200      	movs	r2, #0
 800a728:	f7f9 ffd4 	bl	80046d4 <osMessageQueueGet>
}
 800a72c:	bf00      	nop
 800a72e:	3708      	adds	r7, #8
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}
 800a734:	20003b60 	.word	0x20003b60

0800a738 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
        : color(0)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2200      	movs	r2, #0
 800a744:	601a      	str	r2, [r3, #0]
    }
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	4618      	mov	r0, r3
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
    {
 800a75c:	4a04      	ldr	r2, [pc, #16]	@ (800a770 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	601a      	str	r2, [r3, #0]
    }
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	4618      	mov	r0, r3
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr
 800a770:	080154e4 	.word	0x080154e4

0800a774 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
    }
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f7ff ffe9 	bl	800a754 <_ZN8touchgfx9DMA_QueueD1Ev>
 800a782:	2104      	movs	r1, #4
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f008 fe19 	bl	80133bc <_ZdlPvj>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4618      	mov	r0, r3
 800a78e:	3708      	adds	r7, #8
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <_ZN8touchgfx13DMA_Interface10initializeEv>:
    {
        waitForFrameBufferSemaphore();
    }

    /** Perform initialization. Does nothing in this base class. */
    virtual void initialize()
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
    {
    }
 800a79c:	bf00      	nop
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 800a7b0:	2300      	movs	r3, #0
    }
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	370c      	adds	r7, #12
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr
	...

0800a7c0 <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
    {
 800a7c8:	4a04      	ldr	r2, [pc, #16]	@ (800a7dc <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	601a      	str	r2, [r3, #0]
    }
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	08015a0c 	.word	0x08015a0c

0800a7e0 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
    }
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f7ff ffe9 	bl	800a7c0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800a7ee:	210c      	movs	r1, #12
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f008 fde3 	bl	80133bc <_ZdlPvj>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800a80a:	4a09      	ldr	r2, [pc, #36]	@ (800a830 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	601a      	str	r2, [r3, #0]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	683a      	ldr	r2, [r7, #0]
 800a814:	605a      	str	r2, [r3, #4]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	721a      	strb	r2, [r3, #8]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	725a      	strb	r2, [r3, #9]
    {
    }
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4618      	mov	r0, r3
 800a826:	370c      	adds	r7, #12
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr
 800a830:	08015a0c 	.word	0x08015a0c

0800a834 <_ZN8STM32DMA18signalDMAInterruptEv>:
    /**
     * @fn virtual void STM32DMA::signalDMAInterrupt();
     *
     * @brief Does nothing.
     */
    virtual void signalDMAInterrupt()
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
    {
    }
 800a83c:	bf00      	nop
 800a83e:	370c      	adds	r7, #12
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <_ZN8STM32DMA5flushEv>:
     * @fn virtual void STM32DMA::flush();
     *
     * @brief Block until all DMA transfers are complete. Since this particular DMA does not do
     * anything, return immediately.
     */
    virtual void flush()
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
    {
    }
 800a850:	bf00      	nop
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	330c      	adds	r3, #12
 800a868:	4618      	mov	r0, r3
 800a86a:	f7ff ff65 	bl	800a738 <_ZN8touchgfx9colortypeC1Ev>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	4618      	mov	r0, r3
 800a872:	3708      	adds	r7, #8
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <_ZN8STM32DMAC1Ev>:
  */

#include <STM32DMA.hpp>
#include <assert.h>

STM32DMA::STM32DMA()
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(q), q(&b, 1)
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	330c      	adds	r3, #12
 800a886:	4619      	mov	r1, r3
 800a888:	4610      	mov	r0, r2
 800a88a:	f7ff ffb9 	bl	800a800 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800a88e:	4a0b      	ldr	r2, [pc, #44]	@ (800a8bc <_ZN8STM32DMAC1Ev+0x44>)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	601a      	str	r2, [r3, #0]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f103 000c 	add.w	r0, r3, #12
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	3320      	adds	r3, #32
 800a89e:	2201      	movs	r2, #1
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	f002 fb29 	bl	800cef8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	3320      	adds	r3, #32
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7ff ffd6 	bl	800a85c <_ZN8touchgfx6BlitOpC1Ev>
{
}
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3708      	adds	r7, #8
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	08015494 	.word	0x08015494

0800a8c0 <_ZN8STM32DMA11getBlitCapsEv>:

touchgfx::BlitOperations STM32DMA::getBlitCaps()
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
    return static_cast<touchgfx::BlitOperations>(0);
 800a8c8:	2300      	movs	r3, #0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	370c      	adds	r7, #12
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr
	...

0800a8d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32DMA::setupDataCopy(const touchgfx::BlitOp& blitOp)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 800a8e2:	4b03      	ldr	r3, [pc, #12]	@ (800a8f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18>)
 800a8e4:	4a03      	ldr	r2, [pc, #12]	@ (800a8f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c>)
 800a8e6:	2122      	movs	r1, #34	@ 0x22
 800a8e8:	4803      	ldr	r0, [pc, #12]	@ (800a8f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20>)
 800a8ea:	f008 fd95 	bl	8013418 <__assert_func>
 800a8ee:	bf00      	nop
 800a8f0:	08014d74 	.word	0x08014d74
 800a8f4:	08014d98 	.word	0x08014d98
 800a8f8:	08014dd8 	.word	0x08014dd8

0800a8fc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
}

void STM32DMA::setupDataFill(const touchgfx::BlitOp& blitOp)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 800a906:	4b03      	ldr	r3, [pc, #12]	@ (800a914 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x18>)
 800a908:	4a03      	ldr	r2, [pc, #12]	@ (800a918 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>)
 800a90a:	2127      	movs	r1, #39	@ 0x27
 800a90c:	4803      	ldr	r0, [pc, #12]	@ (800a91c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x20>)
 800a90e:	f008 fd83 	bl	8013418 <__assert_func>
 800a912:	bf00      	nop
 800a914:	08014d74 	.word	0x08014d74
 800a918:	08014e04 	.word	0x08014e04
 800a91c:	08014dd8 	.word	0x08014dd8

0800a920 <_ZN8STM32DMAD1Ev>:
class STM32DMA : public touchgfx::DMA_Interface
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	4a08      	ldr	r2, [pc, #32]	@ (800a94c <_ZN8STM32DMAD1Ev+0x2c>)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	601a      	str	r2, [r3, #0]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	330c      	adds	r3, #12
 800a932:	4618      	mov	r0, r3
 800a934:	f000 f81c 	bl	800a970 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7ff ff40 	bl	800a7c0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4618      	mov	r0, r3
 800a944:	3708      	adds	r7, #8
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	08015494 	.word	0x08015494

0800a950 <_ZN8STM32DMAD0Ev>:
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f7ff ffe1 	bl	800a920 <_ZN8STM32DMAD1Ev>
 800a95e:	2144      	movs	r1, #68	@ 0x44
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f008 fd2b 	bl	80133bc <_ZdlPvj>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4618      	mov	r0, r3
 800a96a:	3708      	adds	r7, #8
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	4a05      	ldr	r2, [pc, #20]	@ (800a990 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	601a      	str	r2, [r3, #0]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	4618      	mov	r0, r3
 800a982:	f7ff fee7 	bl	800a754 <_ZN8touchgfx9DMA_QueueD1Ev>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	4618      	mov	r0, r3
 800a98a:	3708      	adds	r7, #8
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}
 800a990:	08015a5c 	.word	0x08015a5c

0800a994 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f7ff ffe7 	bl	800a970 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800a9a2:	2114      	movs	r1, #20
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f008 fd09 	bl	80133bc <_ZdlPvj>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3708      	adds	r7, #8
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 800a9bc:	4a04      	ldr	r2, [pc, #16]	@ (800a9d0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6013      	str	r3, [r2, #0]
    }
 800a9c2:	bf00      	nop
 800a9c4:	370c      	adds	r7, #12
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr
 800a9ce:	bf00      	nop
 800a9d0:	200043b0 	.word	0x200043b0

0800a9d4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
 800a9e0:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800a9e2:	4a0b      	ldr	r2, [pc, #44]	@ (800aa10 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	68ba      	ldr	r2, [r7, #8]
 800a9ec:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	683a      	ldr	r2, [r7, #0]
 800a9f8:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	69ba      	ldr	r2, [r7, #24]
 800a9fe:	611a      	str	r2, [r3, #16]
    {
    }
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	4618      	mov	r0, r3
 800aa04:	3714      	adds	r7, #20
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr
 800aa0e:	bf00      	nop
 800aa10:	080155cc 	.word	0x080155cc

0800aa14 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
    {
 800aa1c:	4a04      	ldr	r2, [pc, #16]	@ (800aa30 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	601a      	str	r2, [r3, #0]
    }
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	4618      	mov	r0, r3
 800aa26:	370c      	adds	r7, #12
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr
 800aa30:	080155cc 	.word	0x080155cc

0800aa34 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b082      	sub	sp, #8
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
    }
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f7ff ffe9 	bl	800aa14 <_ZN8touchgfx7MVPHeapD1Ev>
 800aa42:	2114      	movs	r1, #20
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f008 fcb9 	bl	80133bc <_ZdlPvj>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3708      	adds	r7, #8
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <_ZN8touchgfx3LCDC1Ev>:
 */
class LCD
{
public:
    /** Initializes a new instance of the LCD class. */
    LCD()
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
        : textureMapperClass(0)
 800aa5c:	4a06      	ldr	r2, [pc, #24]	@ (800aa78 <_ZN8touchgfx3LCDC1Ev+0x24>)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	601a      	str	r2, [r3, #0]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2200      	movs	r2, #0
 800aa66:	605a      	str	r2, [r3, #4]
    {
    }
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	370c      	adds	r7, #12
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop
 800aa78:	08015c74 	.word	0x08015c74

0800aa7c <_ZN8touchgfx3LCDD1Ev>:

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
    {
 800aa84:	4a04      	ldr	r2, [pc, #16]	@ (800aa98 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	601a      	str	r2, [r3, #0]
    }
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	370c      	adds	r7, #12
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr
 800aa98:	08015c74 	.word	0x08015c74

0800aa9c <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
    }
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f7ff ffe9 	bl	800aa7c <_ZN8touchgfx3LCDD1Ev>
 800aaaa:	2108      	movs	r1, #8
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f008 fc85 	bl	80133bc <_ZdlPvj>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	4618      	mov	r0, r3
 800aab6:	3708      	adds	r7, #8
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
            : startX(0),
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2200      	movs	r2, #0
 800aac8:	801a      	strh	r2, [r3, #0]
              startY(0),
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	805a      	strh	r2, [r3, #2]
              downX(0),
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	809a      	strh	r2, [r3, #4]
              downY(0),
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2200      	movs	r2, #0
 800aae6:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2200      	movs	r2, #0
 800aaec:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	739a      	strb	r2, [r3, #14]
        {
        }
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	370c      	adds	r7, #12
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr

0800ab02 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b082      	sub	sp, #8
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7ff ffd5 	bl	800aabc <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2200      	movs	r2, #0
 800ab16:	611a      	str	r2, [r3, #16]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	829a      	strh	r2, [r3, #20]
    {
    }
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4618      	mov	r0, r3
 800ab22:	3708      	adds	r7, #8
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	60b9      	str	r1, [r7, #8]
 800ab32:	607a      	str	r2, [r7, #4]
 800ab34:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 800ab36:	4a55      	ldr	r2, [pc, #340]	@ (800ac8c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	68ba      	ldr	r2, [r7, #8]
 800ab40:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	683a      	ldr	r2, [r7, #0]
 800ab4c:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2200      	movs	r2, #0
 800ab52:	611a      	str	r2, [r3, #16]
          buttonController(0),
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2200      	movs	r2, #0
 800ab58:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	619a      	str	r2, [r3, #24]
          gestures(),
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	331c      	adds	r3, #28
 800ab64:	4618      	mov	r0, r3
 800ab66:	f7ff ffcc 	bl	800ab02 <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          taskDelayFunc(0),
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2200      	movs	r2, #0
 800ab76:	639a      	str	r2, [r3, #56]	@ 0x38
          frameBuffer0(0),
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	63da      	str	r2, [r3, #60]	@ 0x3c
          frameBuffer1(0),
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2200      	movs	r2, #0
 800ab82:	641a      	str	r2, [r3, #64]	@ 0x40
          frameBuffer2(0),
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2200      	movs	r2, #0
 800ab88:	645a      	str	r2, [r3, #68]	@ 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
          fingerSize(1),
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2201      	movs	r2, #1
 800ab96:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
          lockDMAToPorch(false),
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
          frameBufferUpdatedThisFrame(false),
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2200      	movs	r2, #0
 800aba6:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
          auxiliaryLCD(0),
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2200      	movs	r2, #0
 800abae:	64da      	str	r2, [r3, #76]	@ 0x4c
          partialFrameBufferRect(),
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	3350      	adds	r3, #80	@ 0x50
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7fd ff10 	bl	80089da <_ZN8touchgfx4RectC1Ev>
          listener(0),
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2200      	movs	r2, #0
 800abbe:	659a      	str	r2, [r3, #88]	@ 0x58
          lastX(0),
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2200      	movs	r2, #0
 800abc4:	65da      	str	r2, [r3, #92]	@ 0x5c
          lastY(0),
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2200      	movs	r2, #0
 800abca:	661a      	str	r2, [r3, #96]	@ 0x60
          touchSampleRate(1),
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2201      	movs	r2, #1
 800abd0:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
          mcuLoadPct(0),
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2200      	movs	r2, #0
 800abd8:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
          vSyncCnt(0),
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2200      	movs	r2, #0
 800abe0:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
          vSyncForFrame(1),
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
          vSyncCompensationEnabled(false),
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2200      	movs	r2, #0
 800abf0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
          clientDirty(false),
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2200      	movs	r2, #0
 800abf8:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
          swapRequested(false),
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2200      	movs	r2, #0
 800ac00:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
          lastTouched(false),
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
          updateMCULoad(0),
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
          cc_begin(0),
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2200      	movs	r2, #0
 800ac18:	671a      	str	r2, [r3, #112]	@ 0x70
          requestedOrientation(ORIENTATION_LANDSCAPE),
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
          displayOrientationChangeRequested(false),
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2200      	movs	r2, #0
 800ac26:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
          useAuxiliaryLCD(false),
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
          useDMAAcceleration(true),
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2201      	movs	r2, #1
 800ac36:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
          lastRenderMethod(HARDWARE)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        instance = this;
 800ac42:	4a13      	ldr	r2, [pc, #76]	@ (800ac90 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800ac48:	4a12      	ldr	r2, [pc, #72]	@ (800ac94 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800ac4a:	8b3b      	ldrh	r3, [r7, #24]
 800ac4c:	8013      	strh	r3, [r2, #0]
 800ac4e:	4b11      	ldr	r3, [pc, #68]	@ (800ac94 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800ac50:	881a      	ldrh	r2, [r3, #0]
 800ac52:	4b11      	ldr	r3, [pc, #68]	@ (800ac98 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 800ac54:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800ac56:	4a11      	ldr	r2, [pc, #68]	@ (800ac9c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800ac58:	8bbb      	ldrh	r3, [r7, #28]
 800ac5a:	8013      	strh	r3, [r2, #0]
 800ac5c:	4b0f      	ldr	r3, [pc, #60]	@ (800ac9c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800ac5e:	881a      	ldrh	r2, [r3, #0]
 800ac60:	4b0f      	ldr	r3, [pc, #60]	@ (800aca0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 800ac62:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 800ac64:	4b0f      	ldr	r3, [pc, #60]	@ (800aca4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 800ac66:	2200      	movs	r2, #0
 800ac68:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800ac6a:	8b3a      	ldrh	r2, [r7, #24]
 800ac6c:	8bbb      	ldrh	r3, [r7, #28]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	bf34      	ite	cc
 800ac72:	2301      	movcc	r3, #1
 800ac74:	2300      	movcs	r3, #0
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	461a      	mov	r2, r3
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	4618      	mov	r0, r3
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	08015934 	.word	0x08015934
 800ac90:	20004354 	.word	0x20004354
 800ac94:	20004346 	.word	0x20004346
 800ac98:	2000434c 	.word	0x2000434c
 800ac9c:	20004348 	.word	0x20004348
 800aca0:	2000434e 	.word	0x2000434e
 800aca4:	2000434a 	.word	0x2000434a

0800aca8 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7fd fbf3 	bl	80084a0 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 800acba:	bf00      	nop
 800acbc:	3708      	adds	r7, #8
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
	...

0800acc4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b086      	sub	sp, #24
 800acc8:	af02      	add	r7, sp, #8
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	60b9      	str	r1, [r7, #8]
 800acce:	607a      	str	r2, [r7, #4]
 800acd0:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800acd2:	68f8      	ldr	r0, [r7, #12]
 800acd4:	69bb      	ldr	r3, [r7, #24]
 800acd6:	9300      	str	r3, [sp, #0]
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	68b9      	ldr	r1, [r7, #8]
 800acde:	f7ff fe79 	bl	800a9d4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800ace2:	4a04      	ldr	r2, [pc, #16]	@ (800acf4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	601a      	str	r2, [r3, #0]
    {

    }
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	4618      	mov	r0, r3
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	080155b8 	.word	0x080155b8

0800acf8 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800acf8:	b580      	push	{r7, lr}
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	4801      	ldr	r0, [pc, #4]	@ (800ad04 <__tcf_0+0xc>)
 800acfe:	f000 f977 	bl	800aff0 <_ZN12FrontendHeapD1Ev>
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	20003b64 	.word	0x20003b64

0800ad08 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800ad0c:	4b11      	ldr	r3, [pc, #68]	@ (800ad54 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f3bf 8f5b 	dmb	ish
 800ad14:	f003 0301 	and.w	r3, r3, #1
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	bf0c      	ite	eq
 800ad1c:	2301      	moveq	r3, #1
 800ad1e:	2300      	movne	r3, #0
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d013      	beq.n	800ad4e <_ZN12FrontendHeap11getInstanceEv+0x46>
 800ad26:	480b      	ldr	r0, [pc, #44]	@ (800ad54 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800ad28:	f008 fb4a 	bl	80133c0 <__cxa_guard_acquire>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	bf14      	ite	ne
 800ad32:	2301      	movne	r3, #1
 800ad34:	2300      	moveq	r3, #0
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d008      	beq.n	800ad4e <_ZN12FrontendHeap11getInstanceEv+0x46>
 800ad3c:	4806      	ldr	r0, [pc, #24]	@ (800ad58 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800ad3e:	f000 f867 	bl	800ae10 <_ZN12FrontendHeapC1Ev>
 800ad42:	4806      	ldr	r0, [pc, #24]	@ (800ad5c <_ZN12FrontendHeap11getInstanceEv+0x54>)
 800ad44:	f008 fb86 	bl	8013454 <atexit>
 800ad48:	4802      	ldr	r0, [pc, #8]	@ (800ad54 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800ad4a:	f008 fb45 	bl	80133d8 <__cxa_guard_release>
        return instance;
 800ad4e:	4b02      	ldr	r3, [pc, #8]	@ (800ad58 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 800ad50:	4618      	mov	r0, r3
 800ad52:	bd80      	pop	{r7, pc}
 800ad54:	20003e6c 	.word	0x20003e6c
 800ad58:	20003b64 	.word	0x20003b64
 800ad5c:	0800acf9 	.word	0x0800acf9

0800ad60 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	4a05      	ldr	r2, [pc, #20]	@ (800ad80 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	601a      	str	r2, [r3, #0]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	4618      	mov	r0, r3
 800ad72:	f7ff fe4f 	bl	800aa14 <_ZN8touchgfx7MVPHeapD1Ev>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3708      	adds	r7, #8
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	080155b8 	.word	0x080155b8

0800ad84 <_ZN16FrontendHeapBaseD0Ev>:
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b082      	sub	sp, #8
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f7ff ffe7 	bl	800ad60 <_ZN16FrontendHeapBaseD1Ev>
 800ad92:	2114      	movs	r1, #20
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f008 fb11 	bl	80133bc <_ZdlPvj>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3708      	adds	r7, #8
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	4618      	mov	r0, r3
 800adb0:	f000 fd72 	bl	800b898 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800adb4:	4a03      	ldr	r2, [pc, #12]	@ (800adc4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	601a      	str	r2, [r3, #0]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	4618      	mov	r0, r3
 800adbe:	3708      	adds	r7, #8
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}
 800adc4:	08015584 	.word	0x08015584

0800adc8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	4618      	mov	r0, r3
 800add4:	f000 fd60 	bl	800b898 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800add8:	4a03      	ldr	r2, [pc, #12]	@ (800ade8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	601a      	str	r2, [r3, #0]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	4618      	mov	r0, r3
 800ade2:	3708      	adds	r7, #8
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}
 800ade8:	08015550 	.word	0x08015550

0800adec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	4618      	mov	r0, r3
 800adf8:	f000 fd4e 	bl	800b898 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800adfc:	4a03      	ldr	r2, [pc, #12]	@ (800ae0c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	601a      	str	r2, [r3, #0]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	4618      	mov	r0, r3
 800ae06:	3708      	adds	r7, #8
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}
 800ae0c:	0801551c 	.word	0x0801551c

0800ae10 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800ae10:	b590      	push	{r4, r7, lr}
 800ae12:	b085      	sub	sp, #20
 800ae14:	af02      	add	r7, sp, #8
 800ae16:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f103 0114 	add.w	r1, r3, #20
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f503 74ca 	add.w	r4, r3, #404	@ 0x194
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
                     app(model, *this)
 800ae32:	9300      	str	r3, [sp, #0]
 800ae34:	4623      	mov	r3, r4
 800ae36:	f7ff ff45 	bl	800acc4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800ae3a:	4a18      	ldr	r2, [pc, #96]	@ (800ae9c <_ZN12FrontendHeapC1Ev+0x8c>)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	601a      	str	r2, [r3, #0]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	3314      	adds	r3, #20
 800ae44:	4618      	mov	r0, r3
 800ae46:	f7ff ffad 	bl	800ada4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	332c      	adds	r3, #44	@ 0x2c
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7ff ffba 	bl	800adc8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7ff ffc6 	bl	800adec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7fe fef0 	bl	8009c4c <_ZN5ModelC1Ev>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	f7fe fed0 	bl	8009c20 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 800ae88:	4619      	mov	r1, r3
 800ae8a:	4610      	mov	r0, r2
 800ae8c:	f7ff ff0c 	bl	800aca8 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	4618      	mov	r0, r3
 800ae94:	370c      	adds	r7, #12
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd90      	pop	{r4, r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	08015508 	.word	0x08015508

0800aea0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b086      	sub	sp, #24
 800aea4:	af02      	add	r7, sp, #8
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
 800aeac:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800aeae:	68f8      	ldr	r0, [r7, #12]
 800aeb0:	8bbb      	ldrh	r3, [r7, #28]
 800aeb2:	9301      	str	r3, [sp, #4]
 800aeb4:	8b3b      	ldrh	r3, [r7, #24]
 800aeb6:	9300      	str	r3, [sp, #0]
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	68b9      	ldr	r1, [r7, #8]
 800aebe:	f7ff fe33 	bl	800ab28 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800aec2:	4a04      	ldr	r2, [pc, #16]	@ (800aed4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	601a      	str	r2, [r3, #0]
    }
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	4618      	mov	r0, r3
 800aecc:	3710      	adds	r7, #16
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	080155dc 	.word	0x080155dc

0800aed8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b086      	sub	sp, #24
 800aedc:	af02      	add	r7, sp, #8
 800aede:	60f8      	str	r0, [r7, #12]
 800aee0:	60b9      	str	r1, [r7, #8]
 800aee2:	607a      	str	r2, [r7, #4]
 800aee4:	603b      	str	r3, [r7, #0]
 800aee6:	68f8      	ldr	r0, [r7, #12]
 800aee8:	8bbb      	ldrh	r3, [r7, #28]
 800aeea:	9301      	str	r3, [sp, #4]
 800aeec:	8b3b      	ldrh	r3, [r7, #24]
 800aeee:	9300      	str	r3, [sp, #0]
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	68b9      	ldr	r1, [r7, #8]
 800aef6:	f7ff ffd3 	bl	800aea0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800aefa:	4a04      	ldr	r2, [pc, #16]	@ (800af0c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	601a      	str	r2, [r3, #0]
    }
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	4618      	mov	r0, r3
 800af04:	3710      	adds	r7, #16
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	080153bc 	.word	0x080153bc

0800af10 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800af10:	b480      	push	{r7}
 800af12:	b083      	sub	sp, #12
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	4a04      	ldr	r2, [pc, #16]	@ (800af2c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	601a      	str	r2, [r3, #0]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	4618      	mov	r0, r3
 800af22:	370c      	adds	r7, #12
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr
 800af2c:	080153a4 	.word	0x080153a4

0800af30 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7ff ffe8 	bl	800af10 <_ZN8touchgfx15TouchControllerC1Ev>
 800af40:	4a03      	ldr	r2, [pc, #12]	@ (800af50 <_ZN20STM32TouchControllerC1Ev+0x20>)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	601a      	str	r2, [r3, #0]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	4618      	mov	r0, r3
 800af4a:	3708      	adds	r7, #8
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	0801538c 	.word	0x0801538c

0800af54 <_ZN8touchgfx7LCD1bppC1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD1bpp : public LCD
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	4618      	mov	r0, r3
 800af60:	f7ff fd78 	bl	800aa54 <_ZN8touchgfx3LCDC1Ev>
 800af64:	4a03      	ldr	r2, [pc, #12]	@ (800af74 <_ZN8touchgfx7LCD1bppC1Ev+0x20>)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	601a      	str	r2, [r3, #0]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4618      	mov	r0, r3
 800af6e:	3708      	adds	r7, #8
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}
 800af74:	08015e50 	.word	0x08015e50

0800af78 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 128, 64);

void touchgfx_init()
{
 800af78:	b590      	push	{r4, r7, lr}
 800af7a:	b085      	sub	sp, #20
 800af7c:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800af7e:	f7fe fc1f 	bl	80097c0 <_ZN14BitmapDatabase11getInstanceEv>
 800af82:	4604      	mov	r4, r0
 800af84:	f7fe fc26 	bl	80097d4 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800af88:	4603      	mov	r3, r0
 800af8a:	4619      	mov	r1, r3
 800af8c:	2300      	movs	r3, #0
 800af8e:	9300      	str	r3, [sp, #0]
 800af90:	2300      	movs	r3, #0
 800af92:	2200      	movs	r2, #0
 800af94:	4620      	mov	r0, r4
 800af96:	f007 f921 	bl	80121dc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 800af9a:	4809      	ldr	r0, [pc, #36]	@ (800afc0 <touchgfx_init+0x48>)
 800af9c:	f7ff fd0a 	bl	800a9b4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 800afa0:	2000      	movs	r0, #0
 800afa2:	f7fe fd5b 	bl	8009a5c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 800afa6:	4807      	ldr	r0, [pc, #28]	@ (800afc4 <touchgfx_init+0x4c>)
 800afa8:	f007 f880 	bl	80120ac <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 800afac:	f7ff feac 	bl	800ad08 <_ZN12FrontendHeap11getInstanceEv>
 800afb0:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800afb2:	4805      	ldr	r0, [pc, #20]	@ (800afc8 <touchgfx_init+0x50>)
 800afb4:	f7ff fa60 	bl	800a478 <_ZN11TouchGFXHAL10initializeEv>
}
 800afb8:	bf00      	nop
 800afba:	370c      	adds	r7, #12
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd90      	pop	{r4, r7, pc}
 800afc0:	20003ec0 	.word	0x20003ec0
 800afc4:	20000014 	.word	0x20000014
 800afc8:	20003ec4 	.word	0x20003ec4

0800afcc <touchgfx_components_init>:

void touchgfx_components_init()
{
 800afcc:	b480      	push	{r7}
 800afce:	af00      	add	r7, sp, #0
}
 800afd0:	bf00      	nop
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr
	...

0800afdc <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800afe0:	4802      	ldr	r0, [pc, #8]	@ (800afec <touchgfx_taskEntry+0x10>)
 800afe2:	f001 f922 	bl	800c22a <_ZN8touchgfx3HAL9taskEntryEv>
}
 800afe6:	bf00      	nop
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	20003ec4 	.word	0x20003ec4

0800aff0 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	4a10      	ldr	r2, [pc, #64]	@ (800b03c <_ZN12FrontendHeapD1Ev+0x4c>)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	601a      	str	r2, [r3, #0]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 800b004:	4618      	mov	r0, r3
 800b006:	f7fe fdd5 	bl	8009bb4 <_ZN19FrontendApplicationD1Ev>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800b010:	4618      	mov	r0, r3
 800b012:	f000 f827 	bl	800b064 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	332c      	adds	r3, #44	@ 0x2c
 800b01a:	4618      	mov	r0, r3
 800b01c:	f000 f844 	bl	800b0a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	3314      	adds	r3, #20
 800b024:	4618      	mov	r0, r3
 800b026:	f000 f863 	bl	800b0f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	4618      	mov	r0, r3
 800b02e:	f7ff fe97 	bl	800ad60 <_ZN16FrontendHeapBaseD1Ev>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	4618      	mov	r0, r3
 800b036:	3708      	adds	r7, #8
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	08015508 	.word	0x08015508

0800b040 <_ZN12FrontendHeapD0Ev>:
 800b040:	b580      	push	{r7, lr}
 800b042:	b082      	sub	sp, #8
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f7ff ffd1 	bl	800aff0 <_ZN12FrontendHeapD1Ev>
 800b04e:	f44f 7142 	mov.w	r1, #776	@ 0x308
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f008 f9b2 	bl	80133bc <_ZdlPvj>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4618      	mov	r0, r3
 800b05c:	3708      	adds	r7, #8
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
	...

0800b064 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	4a05      	ldr	r2, [pc, #20]	@ (800b084 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	601a      	str	r2, [r3, #0]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	4618      	mov	r0, r3
 800b076:	f000 fc0e 	bl	800b896 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	4618      	mov	r0, r3
 800b07e:	3708      	adds	r7, #8
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}
 800b084:	0801551c 	.word	0x0801551c

0800b088 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f7ff ffe7 	bl	800b064 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800b096:	2114      	movs	r1, #20
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f008 f98f 	bl	80133bc <_ZdlPvj>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3708      	adds	r7, #8
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	4a05      	ldr	r2, [pc, #20]	@ (800b0c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	601a      	str	r2, [r3, #0]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f000 fbec 	bl	800b896 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3708      	adds	r7, #8
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}
 800b0c8:	08015550 	.word	0x08015550

0800b0cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b082      	sub	sp, #8
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f7ff ffe7 	bl	800b0a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800b0da:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f008 f96c 	bl	80133bc <_ZdlPvj>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3708      	adds	r7, #8
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
	...

0800b0f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	4a05      	ldr	r2, [pc, #20]	@ (800b110 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	601a      	str	r2, [r3, #0]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	4618      	mov	r0, r3
 800b102:	f000 fbc8 	bl	800b896 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	4618      	mov	r0, r3
 800b10a:	3708      	adds	r7, #8
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	08015584 	.word	0x08015584

0800b114 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f7ff ffe7 	bl	800b0f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800b122:	2118      	movs	r1, #24
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f008 f949 	bl	80133bc <_ZdlPvj>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4618      	mov	r0, r3
 800b12e:	3708      	adds	r7, #8
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <_ZN8touchgfx7LCD1bppD1Ev>:
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	4a05      	ldr	r2, [pc, #20]	@ (800b154 <_ZN8touchgfx7LCD1bppD1Ev+0x20>)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	601a      	str	r2, [r3, #0]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4618      	mov	r0, r3
 800b146:	f7ff fc99 	bl	800aa7c <_ZN8touchgfx3LCDD1Ev>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	4618      	mov	r0, r3
 800b14e:	3708      	adds	r7, #8
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}
 800b154:	08015e50 	.word	0x08015e50

0800b158 <_ZN8touchgfx7LCD1bppD0Ev>:
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f7ff ffe7 	bl	800b134 <_ZN8touchgfx7LCD1bppD1Ev>
 800b166:	2108      	movs	r1, #8
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f008 f927 	bl	80133bc <_ZdlPvj>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	4618      	mov	r0, r3
 800b172:	3708      	adds	r7, #8
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <_Z41__static_initialization_and_destruction_0ii>:
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af02      	add	r7, sp, #8
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2b01      	cmp	r3, #1
 800b186:	d117      	bne.n	800b1b8 <_Z41__static_initialization_and_destruction_0ii+0x40>
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b18e:	4293      	cmp	r3, r2
 800b190:	d112      	bne.n	800b1b8 <_Z41__static_initialization_and_destruction_0ii+0x40>
static STM32TouchController tc;
 800b192:	4817      	ldr	r0, [pc, #92]	@ (800b1f0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800b194:	f7ff fecc 	bl	800af30 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 800b198:	4816      	ldr	r0, [pc, #88]	@ (800b1f4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800b19a:	f7ff fb6d 	bl	800a878 <_ZN8STM32DMAC1Ev>
static LCD1bpp display;
 800b19e:	4816      	ldr	r0, [pc, #88]	@ (800b1f8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800b1a0:	f7ff fed8 	bl	800af54 <_ZN8touchgfx7LCD1bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 128, 64);
 800b1a4:	2340      	movs	r3, #64	@ 0x40
 800b1a6:	9301      	str	r3, [sp, #4]
 800b1a8:	2380      	movs	r3, #128	@ 0x80
 800b1aa:	9300      	str	r3, [sp, #0]
 800b1ac:	4b10      	ldr	r3, [pc, #64]	@ (800b1f0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800b1ae:	4a12      	ldr	r2, [pc, #72]	@ (800b1f8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800b1b0:	4910      	ldr	r1, [pc, #64]	@ (800b1f4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800b1b2:	4812      	ldr	r0, [pc, #72]	@ (800b1fc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800b1b4:	f7ff fe90 	bl	800aed8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d113      	bne.n	800b1e6 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d10e      	bne.n	800b1e6 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 800b1c8:	480c      	ldr	r0, [pc, #48]	@ (800b1fc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800b1ca:	f7ff fa05 	bl	800a5d8 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800b1ce:	480c      	ldr	r0, [pc, #48]	@ (800b200 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800b1d0:	f7fc fbf4 	bl	80079bc <_ZN23ApplicationFontProviderD1Ev>
static LCD1bpp display;
 800b1d4:	4808      	ldr	r0, [pc, #32]	@ (800b1f8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800b1d6:	f7ff ffad 	bl	800b134 <_ZN8touchgfx7LCD1bppD1Ev>
static STM32DMA dma;
 800b1da:	4806      	ldr	r0, [pc, #24]	@ (800b1f4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800b1dc:	f7ff fba0 	bl	800a920 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 800b1e0:	4803      	ldr	r0, [pc, #12]	@ (800b1f0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800b1e2:	f7fe feeb 	bl	8009fbc <_ZN20STM32TouchControllerD1Ev>
}
 800b1e6:	bf00      	nop
 800b1e8:	3708      	adds	r7, #8
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop
 800b1f0:	20003e70 	.word	0x20003e70
 800b1f4:	20003e74 	.word	0x20003e74
 800b1f8:	20003eb8 	.word	0x20003eb8
 800b1fc:	20003ec4 	.word	0x20003ec4
 800b200:	20000014 	.word	0x20000014

0800b204 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 800b20c:	2301      	movs	r3, #1
    }
 800b20e:	4618      	mov	r0, r3
 800b210:	370c      	adds	r7, #12
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr

0800b21a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 800b21a:	b480      	push	{r7}
 800b21c:	b083      	sub	sp, #12
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800b222:	230c      	movs	r3, #12
    }
 800b224:	4618      	mov	r0, r3
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	460b      	mov	r3, r1
 800b23a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800b23c:	887a      	ldrh	r2, [r7, #2]
 800b23e:	4613      	mov	r3, r2
 800b240:	005b      	lsls	r3, r3, #1
 800b242:	4413      	add	r3, r2
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	3308      	adds	r3, #8
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	4413      	add	r3, r2
    }
 800b24c:	4618      	mov	r0, r3
 800b24e:	370c      	adds	r7, #12
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	460b      	mov	r3, r1
 800b262:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800b264:	887a      	ldrh	r2, [r7, #2]
 800b266:	4613      	mov	r3, r2
 800b268:	005b      	lsls	r3, r3, #1
 800b26a:	4413      	add	r3, r2
 800b26c:	009b      	lsls	r3, r3, #2
 800b26e:	3308      	adds	r3, #8
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	4413      	add	r3, r2
    }
 800b274:	4618      	mov	r0, r3
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800b288:	2301      	movs	r3, #1
    }
 800b28a:	4618      	mov	r0, r3
 800b28c:	370c      	adds	r7, #12
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr

0800b296 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800b296:	b480      	push	{r7}
 800b298:	b083      	sub	sp, #12
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800b29e:	f44f 73b0 	mov.w	r3, #352	@ 0x160
    }
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	370c      	adds	r7, #12
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr

0800b2ae <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800b2ae:	b480      	push	{r7}
 800b2b0:	b083      	sub	sp, #12
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800b2ba:	887b      	ldrh	r3, [r7, #2]
 800b2bc:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 800b2c0:	fb02 f303 	mul.w	r3, r2, r3
 800b2c4:	3308      	adds	r3, #8
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	4413      	add	r3, r2
    }
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	370c      	adds	r7, #12
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr

0800b2d6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800b2d6:	b480      	push	{r7}
 800b2d8:	b083      	sub	sp, #12
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
 800b2de:	460b      	mov	r3, r1
 800b2e0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800b2e2:	887b      	ldrh	r3, [r7, #2]
 800b2e4:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 800b2e8:	fb02 f303 	mul.w	r3, r2, r3
 800b2ec:	3308      	adds	r3, #8
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	4413      	add	r3, r2
    }
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	370c      	adds	r7, #12
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr

0800b2fe <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800b2fe:	b480      	push	{r7}
 800b300:	b083      	sub	sp, #12
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800b306:	2301      	movs	r3, #1
    }
 800b308:	4618      	mov	r0, r3
 800b30a:	370c      	adds	r7, #12
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800b31c:	2310      	movs	r3, #16
    }
 800b31e:	4618      	mov	r0, r3
 800b320:	370c      	adds	r7, #12
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr

0800b32a <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800b32a:	b480      	push	{r7}
 800b32c:	b083      	sub	sp, #12
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
 800b332:	460b      	mov	r3, r1
 800b334:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800b336:	887b      	ldrh	r3, [r7, #2]
 800b338:	011b      	lsls	r3, r3, #4
 800b33a:	3308      	adds	r3, #8
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	4413      	add	r3, r2
    }
 800b340:	4618      	mov	r0, r3
 800b342:	370c      	adds	r7, #12
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	460b      	mov	r3, r1
 800b356:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800b358:	887b      	ldrh	r3, [r7, #2]
 800b35a:	011b      	lsls	r3, r3, #4
 800b35c:	3308      	adds	r3, #8
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	4413      	add	r3, r2
    }
 800b362:	4618      	mov	r0, r3
 800b364:	370c      	adds	r7, #12
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr

0800b36e <_GLOBAL__sub_I_touchgfx_init>:
 800b36e:	b580      	push	{r7, lr}
 800b370:	af00      	add	r7, sp, #0
 800b372:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800b376:	2001      	movs	r0, #1
 800b378:	f7ff fefe 	bl	800b178 <_Z41__static_initialization_and_destruction_0ii>
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <_GLOBAL__sub_D_touchgfx_init>:
 800b37e:	b580      	push	{r7, lr}
 800b380:	af00      	add	r7, sp, #0
 800b382:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800b386:	2000      	movs	r0, #0
 800b388:	f7ff fef6 	bl	800b178 <_Z41__static_initialization_and_destruction_0ii>
 800b38c:	bd80      	pop	{r7, pc}
	...

0800b390 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    LOCATION_PRAGMA_NOLOAD("TouchGFX_Framebuffer")
    uint32_t frameBuf[(((128 + 7) / 8) * 64 + 3) / 4] LOCATION_ATTRIBUTE_NOLOAD("TouchGFX_Framebuffer");
}

void TouchGFXGeneratedHAL::initialize()
{
 800b390:	b5b0      	push	{r4, r5, r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4618      	mov	r0, r3
 800b39c:	f000 ff31 	bl	800c202 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 800b3a0:	687d      	ldr	r5, [r7, #4]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	3364      	adds	r3, #100	@ 0x64
 800b3a8:	681c      	ldr	r4, [r3, #0]
 800b3aa:	f003 ff03 	bl	800f1b4 <_ZN8touchgfx11Application11getInstanceEv>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	3388      	adds	r3, #136	@ 0x88
 800b3be:	681c      	ldr	r4, [r3, #0]
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	4902      	ldr	r1, [pc, #8]	@ (800b3d0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 800b3c6:	47a0      	blx	r4
}
 800b3c8:	bf00      	nop
 800b3ca:	3708      	adds	r7, #8
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bdb0      	pop	{r4, r5, r7, pc}
 800b3d0:	20000080 	.word	0x20000080

0800b3d4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
}
 800b3dc:	bf00      	nop
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
}
 800b3f0:	bf00      	nop
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
}
 800b404:	bf00      	nop
 800b406:	370c      	adds	r7, #12
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr

0800b410 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800b410:	b480      	push	{r7}
 800b412:	b083      	sub	sp, #12
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
}
 800b418:	bf00      	nop
 800b41a:	370c      	adds	r7, #12
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr

0800b424 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b082      	sub	sp, #8
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	4618      	mov	r0, r3
 800b430:	f000 fece 	bl	800c1d0 <_ZN8touchgfx3HAL10beginFrameEv>
 800b434:	4603      	mov	r3, r0
}
 800b436:	4618      	mov	r0, r3
 800b438:	3708      	adds	r7, #8
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 800b43e:	b580      	push	{r7, lr}
 800b440:	b082      	sub	sp, #8
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	4618      	mov	r0, r3
 800b44a:	f000 fecd 	bl	800c1e8 <_ZN8touchgfx3HAL8endFrameEv>
}
 800b44e:	bf00      	nop
 800b450:	3708      	adds	r7, #8
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
	...

0800b458 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    fbPtr += rect.y * lcd().framebufferStride() + rect.x / 8;
    return fbPtr;
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800b458:	b480      	push	{r7}
 800b45a:	b083      	sub	sp, #12
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
    return (uint16_t*)frameBuf;
 800b460:	4b03      	ldr	r3, [pc, #12]	@ (800b470 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
}
 800b462:	4618      	mov	r0, r3
 800b464:	370c      	adds	r7, #12
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr
 800b46e:	bf00      	nop
 800b470:	20000080 	.word	0x20000080

0800b474 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 800b474:	b480      	push	{r7}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 800b47e:	bf00      	nop
 800b480:	370c      	adds	r7, #12
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr

0800b48a <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b082      	sub	sp, #8
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
 800b492:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6839      	ldr	r1, [r7, #0]
 800b498:	4618      	mov	r0, r3
 800b49a:	f000 fe63 	bl	800c164 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 800b49e:	bf00      	nop
 800b4a0:	3708      	adds	r7, #8
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b084      	sub	sp, #16
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	60f8      	str	r0, [r7, #12]
 800b4ae:	60b9      	str	r1, [r7, #8]
 800b4b0:	607a      	str	r2, [r7, #4]
 800b4b2:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 800b4b4:	68f8      	ldr	r0, [r7, #12]
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	68b9      	ldr	r1, [r7, #8]
 800b4bc:	f000 ffbd 	bl	800c43a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800b4c0:	4603      	mov	r3, r0
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3710      	adds	r7, #16
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}

0800b4ca <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800b4ca:	b480      	push	{r7}
 800b4cc:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800b4ce:	bf00      	nop
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b086      	sub	sp, #24
 800b4dc:	af04      	add	r7, sp, #16
 800b4de:	4603      	mov	r3, r0
 800b4e0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800b4e2:	f04f 33ff 	mov.w	r3, #4294967295
 800b4e6:	9302      	str	r3, [sp, #8]
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	9301      	str	r3, [sp, #4]
 800b4ec:	1dfb      	adds	r3, r7, #7
 800b4ee:	9300      	str	r3, [sp, #0]
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	2178      	movs	r1, #120	@ 0x78
 800b4f6:	4803      	ldr	r0, [pc, #12]	@ (800b504 <ssd1306_WriteCommand+0x2c>)
 800b4f8:	f7f6 f904 	bl	8001704 <HAL_I2C_Mem_Write>
}
 800b4fc:	bf00      	nop
 800b4fe:	3708      	adds	r7, #8
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	200004c8 	.word	0x200004c8

0800b508 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800b508:	b580      	push	{r7, lr}
 800b50a:	b086      	sub	sp, #24
 800b50c:	af04      	add	r7, sp, #16
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	b29b      	uxth	r3, r3
 800b516:	f04f 32ff 	mov.w	r2, #4294967295
 800b51a:	9202      	str	r2, [sp, #8]
 800b51c:	9301      	str	r3, [sp, #4]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	9300      	str	r3, [sp, #0]
 800b522:	2301      	movs	r3, #1
 800b524:	2240      	movs	r2, #64	@ 0x40
 800b526:	2178      	movs	r1, #120	@ 0x78
 800b528:	4803      	ldr	r0, [pc, #12]	@ (800b538 <ssd1306_WriteData+0x30>)
 800b52a:	f7f6 f8eb 	bl	8001704 <HAL_I2C_Mem_Write>
}
 800b52e:	bf00      	nop
 800b530:	3708      	adds	r7, #8
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
 800b536:	bf00      	nop
 800b538:	200004c8 	.word	0x200004c8

0800b53c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800b53c:	b580      	push	{r7, lr}
 800b53e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800b540:	f7ff ffc3 	bl	800b4ca <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800b544:	2064      	movs	r0, #100	@ 0x64
 800b546:	f7f5 fcf3 	bl	8000f30 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800b54a:	2000      	movs	r0, #0
 800b54c:	f000 f962 	bl	800b814 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800b550:	2020      	movs	r0, #32
 800b552:	f7ff ffc1 	bl	800b4d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800b556:	2000      	movs	r0, #0
 800b558:	f7ff ffbe 	bl	800b4d8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800b55c:	20b0      	movs	r0, #176	@ 0xb0
 800b55e:	f7ff ffbb 	bl	800b4d8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800b562:	20c8      	movs	r0, #200	@ 0xc8
 800b564:	f7ff ffb8 	bl	800b4d8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800b568:	2000      	movs	r0, #0
 800b56a:	f7ff ffb5 	bl	800b4d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800b56e:	2010      	movs	r0, #16
 800b570:	f7ff ffb2 	bl	800b4d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800b574:	2040      	movs	r0, #64	@ 0x40
 800b576:	f7ff ffaf 	bl	800b4d8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800b57a:	20ff      	movs	r0, #255	@ 0xff
 800b57c:	f000 f937 	bl	800b7ee <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800b580:	20a1      	movs	r0, #161	@ 0xa1
 800b582:	f7ff ffa9 	bl	800b4d8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800b586:	20a6      	movs	r0, #166	@ 0xa6
 800b588:	f7ff ffa6 	bl	800b4d8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800b58c:	20a8      	movs	r0, #168	@ 0xa8
 800b58e:	f7ff ffa3 	bl	800b4d8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800b592:	203f      	movs	r0, #63	@ 0x3f
 800b594:	f7ff ffa0 	bl	800b4d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800b598:	20a4      	movs	r0, #164	@ 0xa4
 800b59a:	f7ff ff9d 	bl	800b4d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800b59e:	20d3      	movs	r0, #211	@ 0xd3
 800b5a0:	f7ff ff9a 	bl	800b4d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800b5a4:	2000      	movs	r0, #0
 800b5a6:	f7ff ff97 	bl	800b4d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800b5aa:	20d5      	movs	r0, #213	@ 0xd5
 800b5ac:	f7ff ff94 	bl	800b4d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800b5b0:	20f0      	movs	r0, #240	@ 0xf0
 800b5b2:	f7ff ff91 	bl	800b4d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800b5b6:	20d9      	movs	r0, #217	@ 0xd9
 800b5b8:	f7ff ff8e 	bl	800b4d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800b5bc:	2022      	movs	r0, #34	@ 0x22
 800b5be:	f7ff ff8b 	bl	800b4d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800b5c2:	20da      	movs	r0, #218	@ 0xda
 800b5c4:	f7ff ff88 	bl	800b4d8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800b5c8:	2012      	movs	r0, #18
 800b5ca:	f7ff ff85 	bl	800b4d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800b5ce:	20db      	movs	r0, #219	@ 0xdb
 800b5d0:	f7ff ff82 	bl	800b4d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800b5d4:	2020      	movs	r0, #32
 800b5d6:	f7ff ff7f 	bl	800b4d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800b5da:	208d      	movs	r0, #141	@ 0x8d
 800b5dc:	f7ff ff7c 	bl	800b4d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800b5e0:	2014      	movs	r0, #20
 800b5e2:	f7ff ff79 	bl	800b4d8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800b5e6:	2001      	movs	r0, #1
 800b5e8:	f000 f914 	bl	800b814 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800b5ec:	2000      	movs	r0, #0
 800b5ee:	f000 f80f 	bl	800b610 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800b5f2:	f000 f825 	bl	800b640 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800b5f6:	4b05      	ldr	r3, [pc, #20]	@ (800b60c <ssd1306_Init+0xd0>)
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800b5fc:	4b03      	ldr	r3, [pc, #12]	@ (800b60c <ssd1306_Init+0xd0>)
 800b5fe:	2200      	movs	r2, #0
 800b600:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800b602:	4b02      	ldr	r3, [pc, #8]	@ (800b60c <ssd1306_Init+0xd0>)
 800b604:	2201      	movs	r2, #1
 800b606:	711a      	strb	r2, [r3, #4]
}
 800b608:	bf00      	nop
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	20004340 	.word	0x20004340

0800b610 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	4603      	mov	r3, r0
 800b618:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800b61a:	79fb      	ldrb	r3, [r7, #7]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d101      	bne.n	800b624 <ssd1306_Fill+0x14>
 800b620:	2300      	movs	r3, #0
 800b622:	e000      	b.n	800b626 <ssd1306_Fill+0x16>
 800b624:	23ff      	movs	r3, #255	@ 0xff
 800b626:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b62a:	4619      	mov	r1, r3
 800b62c:	4803      	ldr	r0, [pc, #12]	@ (800b63c <ssd1306_Fill+0x2c>)
 800b62e:	f008 f8ec 	bl	801380a <memset>
}
 800b632:	bf00      	nop
 800b634:	3708      	adds	r7, #8
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	20003f40 	.word	0x20003f40

0800b640 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800b646:	2300      	movs	r3, #0
 800b648:	71fb      	strb	r3, [r7, #7]
 800b64a:	e016      	b.n	800b67a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800b64c:	79fb      	ldrb	r3, [r7, #7]
 800b64e:	3b50      	subs	r3, #80	@ 0x50
 800b650:	b2db      	uxtb	r3, r3
 800b652:	4618      	mov	r0, r3
 800b654:	f7ff ff40 	bl	800b4d8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800b658:	2000      	movs	r0, #0
 800b65a:	f7ff ff3d 	bl	800b4d8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800b65e:	2010      	movs	r0, #16
 800b660:	f7ff ff3a 	bl	800b4d8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800b664:	79fb      	ldrb	r3, [r7, #7]
 800b666:	01db      	lsls	r3, r3, #7
 800b668:	4a08      	ldr	r2, [pc, #32]	@ (800b68c <ssd1306_UpdateScreen+0x4c>)
 800b66a:	4413      	add	r3, r2
 800b66c:	2180      	movs	r1, #128	@ 0x80
 800b66e:	4618      	mov	r0, r3
 800b670:	f7ff ff4a 	bl	800b508 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800b674:	79fb      	ldrb	r3, [r7, #7]
 800b676:	3301      	adds	r3, #1
 800b678:	71fb      	strb	r3, [r7, #7]
 800b67a:	79fb      	ldrb	r3, [r7, #7]
 800b67c:	2b07      	cmp	r3, #7
 800b67e:	d9e5      	bls.n	800b64c <ssd1306_UpdateScreen+0xc>
    }
}
 800b680:	bf00      	nop
 800b682:	bf00      	nop
 800b684:	3708      	adds	r7, #8
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	20003f40 	.word	0x20003f40

0800b690 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800b690:	b480      	push	{r7}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	4603      	mov	r3, r0
 800b698:	71fb      	strb	r3, [r7, #7]
 800b69a:	460b      	mov	r3, r1
 800b69c:	71bb      	strb	r3, [r7, #6]
 800b69e:	4613      	mov	r3, r2
 800b6a0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800b6a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	db3d      	blt.n	800b726 <ssd1306_DrawPixel+0x96>
 800b6aa:	79bb      	ldrb	r3, [r7, #6]
 800b6ac:	2b3f      	cmp	r3, #63	@ 0x3f
 800b6ae:	d83a      	bhi.n	800b726 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800b6b0:	797b      	ldrb	r3, [r7, #5]
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d11a      	bne.n	800b6ec <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800b6b6:	79fa      	ldrb	r2, [r7, #7]
 800b6b8:	79bb      	ldrb	r3, [r7, #6]
 800b6ba:	08db      	lsrs	r3, r3, #3
 800b6bc:	b2d8      	uxtb	r0, r3
 800b6be:	4603      	mov	r3, r0
 800b6c0:	01db      	lsls	r3, r3, #7
 800b6c2:	4413      	add	r3, r2
 800b6c4:	4a1b      	ldr	r2, [pc, #108]	@ (800b734 <ssd1306_DrawPixel+0xa4>)
 800b6c6:	5cd3      	ldrb	r3, [r2, r3]
 800b6c8:	b25a      	sxtb	r2, r3
 800b6ca:	79bb      	ldrb	r3, [r7, #6]
 800b6cc:	f003 0307 	and.w	r3, r3, #7
 800b6d0:	2101      	movs	r1, #1
 800b6d2:	fa01 f303 	lsl.w	r3, r1, r3
 800b6d6:	b25b      	sxtb	r3, r3
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	b259      	sxtb	r1, r3
 800b6dc:	79fa      	ldrb	r2, [r7, #7]
 800b6de:	4603      	mov	r3, r0
 800b6e0:	01db      	lsls	r3, r3, #7
 800b6e2:	4413      	add	r3, r2
 800b6e4:	b2c9      	uxtb	r1, r1
 800b6e6:	4a13      	ldr	r2, [pc, #76]	@ (800b734 <ssd1306_DrawPixel+0xa4>)
 800b6e8:	54d1      	strb	r1, [r2, r3]
 800b6ea:	e01d      	b.n	800b728 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800b6ec:	79fa      	ldrb	r2, [r7, #7]
 800b6ee:	79bb      	ldrb	r3, [r7, #6]
 800b6f0:	08db      	lsrs	r3, r3, #3
 800b6f2:	b2d8      	uxtb	r0, r3
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	01db      	lsls	r3, r3, #7
 800b6f8:	4413      	add	r3, r2
 800b6fa:	4a0e      	ldr	r2, [pc, #56]	@ (800b734 <ssd1306_DrawPixel+0xa4>)
 800b6fc:	5cd3      	ldrb	r3, [r2, r3]
 800b6fe:	b25a      	sxtb	r2, r3
 800b700:	79bb      	ldrb	r3, [r7, #6]
 800b702:	f003 0307 	and.w	r3, r3, #7
 800b706:	2101      	movs	r1, #1
 800b708:	fa01 f303 	lsl.w	r3, r1, r3
 800b70c:	b25b      	sxtb	r3, r3
 800b70e:	43db      	mvns	r3, r3
 800b710:	b25b      	sxtb	r3, r3
 800b712:	4013      	ands	r3, r2
 800b714:	b259      	sxtb	r1, r3
 800b716:	79fa      	ldrb	r2, [r7, #7]
 800b718:	4603      	mov	r3, r0
 800b71a:	01db      	lsls	r3, r3, #7
 800b71c:	4413      	add	r3, r2
 800b71e:	b2c9      	uxtb	r1, r1
 800b720:	4a04      	ldr	r2, [pc, #16]	@ (800b734 <ssd1306_DrawPixel+0xa4>)
 800b722:	54d1      	strb	r1, [r2, r3]
 800b724:	e000      	b.n	800b728 <ssd1306_DrawPixel+0x98>
        return;
 800b726:	bf00      	nop
    }
}
 800b728:	370c      	adds	r7, #12
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr
 800b732:	bf00      	nop
 800b734:	20003f40 	.word	0x20003f40

0800b738 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	603a      	str	r2, [r7, #0]
 800b740:	461a      	mov	r2, r3
 800b742:	4603      	mov	r3, r0
 800b744:	71fb      	strb	r3, [r7, #7]
 800b746:	460b      	mov	r3, r1
 800b748:	71bb      	strb	r3, [r7, #6]
 800b74a:	4613      	mov	r3, r2
 800b74c:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800b74e:	797b      	ldrb	r3, [r7, #5]
 800b750:	3307      	adds	r3, #7
 800b752:	2b00      	cmp	r3, #0
 800b754:	da00      	bge.n	800b758 <ssd1306_DrawBitmap+0x20>
 800b756:	3307      	adds	r3, #7
 800b758:	10db      	asrs	r3, r3, #3
 800b75a:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 800b75c:	2300      	movs	r3, #0
 800b75e:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800b760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b764:	2b00      	cmp	r3, #0
 800b766:	db3e      	blt.n	800b7e6 <ssd1306_DrawBitmap+0xae>
 800b768:	79bb      	ldrb	r3, [r7, #6]
 800b76a:	2b3f      	cmp	r3, #63	@ 0x3f
 800b76c:	d83b      	bhi.n	800b7e6 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 800b76e:	2300      	movs	r3, #0
 800b770:	73bb      	strb	r3, [r7, #14]
 800b772:	e033      	b.n	800b7dc <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 800b774:	2300      	movs	r3, #0
 800b776:	737b      	strb	r3, [r7, #13]
 800b778:	e026      	b.n	800b7c8 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 800b77a:	7b7b      	ldrb	r3, [r7, #13]
 800b77c:	f003 0307 	and.w	r3, r3, #7
 800b780:	2b00      	cmp	r3, #0
 800b782:	d003      	beq.n	800b78c <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 800b784:	7bfb      	ldrb	r3, [r7, #15]
 800b786:	005b      	lsls	r3, r3, #1
 800b788:	73fb      	strb	r3, [r7, #15]
 800b78a:	e00d      	b.n	800b7a8 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800b78c:	7bbb      	ldrb	r3, [r7, #14]
 800b78e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800b792:	fb02 f303 	mul.w	r3, r2, r3
 800b796:	7b7a      	ldrb	r2, [r7, #13]
 800b798:	08d2      	lsrs	r2, r2, #3
 800b79a:	b2d2      	uxtb	r2, r2
 800b79c:	4413      	add	r3, r2
 800b79e:	461a      	mov	r2, r3
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	4413      	add	r3, r2
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 800b7a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	da08      	bge.n	800b7c2 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 800b7b0:	79fa      	ldrb	r2, [r7, #7]
 800b7b2:	7b7b      	ldrb	r3, [r7, #13]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	7f3a      	ldrb	r2, [r7, #28]
 800b7ba:	79b9      	ldrb	r1, [r7, #6]
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f7ff ff67 	bl	800b690 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800b7c2:	7b7b      	ldrb	r3, [r7, #13]
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	737b      	strb	r3, [r7, #13]
 800b7c8:	7b7a      	ldrb	r2, [r7, #13]
 800b7ca:	797b      	ldrb	r3, [r7, #5]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d3d4      	bcc.n	800b77a <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 800b7d0:	7bbb      	ldrb	r3, [r7, #14]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	73bb      	strb	r3, [r7, #14]
 800b7d6:	79bb      	ldrb	r3, [r7, #6]
 800b7d8:	3301      	adds	r3, #1
 800b7da:	71bb      	strb	r3, [r7, #6]
 800b7dc:	7bba      	ldrb	r2, [r7, #14]
 800b7de:	7e3b      	ldrb	r3, [r7, #24]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d3c7      	bcc.n	800b774 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 800b7e4:	e000      	b.n	800b7e8 <ssd1306_DrawBitmap+0xb0>
        return;
 800b7e6:	bf00      	nop
}
 800b7e8:	3710      	adds	r7, #16
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}

0800b7ee <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800b7ee:	b580      	push	{r7, lr}
 800b7f0:	b084      	sub	sp, #16
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800b7f8:	2381      	movs	r3, #129	@ 0x81
 800b7fa:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800b7fc:	7bfb      	ldrb	r3, [r7, #15]
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7ff fe6a 	bl	800b4d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800b804:	79fb      	ldrb	r3, [r7, #7]
 800b806:	4618      	mov	r0, r3
 800b808:	f7ff fe66 	bl	800b4d8 <ssd1306_WriteCommand>
}
 800b80c:	bf00      	nop
 800b80e:	3710      	adds	r7, #16
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	4603      	mov	r3, r0
 800b81c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800b81e:	79fb      	ldrb	r3, [r7, #7]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d005      	beq.n	800b830 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800b824:	23af      	movs	r3, #175	@ 0xaf
 800b826:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800b828:	4b08      	ldr	r3, [pc, #32]	@ (800b84c <ssd1306_SetDisplayOn+0x38>)
 800b82a:	2201      	movs	r2, #1
 800b82c:	715a      	strb	r2, [r3, #5]
 800b82e:	e004      	b.n	800b83a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800b830:	23ae      	movs	r3, #174	@ 0xae
 800b832:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800b834:	4b05      	ldr	r3, [pc, #20]	@ (800b84c <ssd1306_SetDisplayOn+0x38>)
 800b836:	2200      	movs	r2, #0
 800b838:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800b83a:	7bfb      	ldrb	r3, [r7, #15]
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7ff fe4b 	bl	800b4d8 <ssd1306_WriteCommand>
}
 800b842:	bf00      	nop
 800b844:	3710      	adds	r7, #16
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	20004340 	.word	0x20004340

0800b850 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800b850:	8880      	ldrh	r0, [r0, #4]
 800b852:	4770      	bx	lr

0800b854 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800b854:	b570      	push	{r4, r5, r6, lr}
 800b856:	6803      	ldr	r3, [r0, #0]
 800b858:	4605      	mov	r5, r0
 800b85a:	460c      	mov	r4, r1
 800b85c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b85e:	2100      	movs	r1, #0
 800b860:	4798      	blx	r3
 800b862:	682b      	ldr	r3, [r5, #0]
 800b864:	4606      	mov	r6, r0
 800b866:	6a1b      	ldr	r3, [r3, #32]
 800b868:	4628      	mov	r0, r5
 800b86a:	4798      	blx	r3
 800b86c:	1ba4      	subs	r4, r4, r6
 800b86e:	b2a4      	uxth	r4, r4
 800b870:	fbb4 f0f0 	udiv	r0, r4, r0
 800b874:	bd70      	pop	{r4, r5, r6, pc}

0800b876 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800b876:	2300      	movs	r3, #0
 800b878:	8083      	strh	r3, [r0, #4]
 800b87a:	4770      	bx	lr

0800b87c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800b87c:	b510      	push	{r4, lr}
 800b87e:	6803      	ldr	r3, [r0, #0]
 800b880:	8881      	ldrh	r1, [r0, #4]
 800b882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b884:	4604      	mov	r4, r0
 800b886:	4798      	blx	r3
 800b888:	88a3      	ldrh	r3, [r4, #4]
 800b88a:	3301      	adds	r3, #1
 800b88c:	80a3      	strh	r3, [r4, #4]
 800b88e:	bd10      	pop	{r4, pc}

0800b890 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800b890:	6803      	ldr	r3, [r0, #0]
 800b892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b894:	4718      	bx	r3

0800b896 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800b896:	4770      	bx	lr

0800b898 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800b898:	4a02      	ldr	r2, [pc, #8]	@ (800b8a4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800b89a:	6002      	str	r2, [r0, #0]
 800b89c:	2200      	movs	r2, #0
 800b89e:	8082      	strh	r2, [r0, #4]
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	080156b4 	.word	0x080156b4

0800b8a8 <_ZN8touchgfx9Container13getFirstChildEv>:
 800b8a8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800b8aa:	4770      	bx	lr

0800b8ac <_ZNK8touchgfx12DigitalClock14getDisplayModeEv>:
 800b8ac:	f890 002f 	ldrb.w	r0, [r0, #47]	@ 0x2f
 800b8b0:	4770      	bx	lr

0800b8b2 <_ZNK8touchgfx12DigitalClock17invalidateContentEv>:
 800b8b2:	b510      	push	{r4, lr}
 800b8b4:	6803      	ldr	r3, [r0, #0]
 800b8b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	4798      	blx	r3
 800b8be:	b110      	cbz	r0, 800b8c6 <_ZNK8touchgfx12DigitalClock17invalidateContentEv+0x14>
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	f7fd f921 	bl	8008b08 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800b8c6:	bd10      	pop	{r4, pc}

0800b8c8 <_ZN8touchgfx12DigitalClock8setWidthEs>:
 800b8c8:	b508      	push	{r3, lr}
 800b8ca:	3034      	adds	r0, #52	@ 0x34
 800b8cc:	f820 1c2c 	strh.w	r1, [r0, #-44]
 800b8d0:	f7fd fb9a 	bl	8009008 <_ZN8touchgfx8TextArea8setWidthEs>
 800b8d4:	bd08      	pop	{r3, pc}

0800b8d6 <_ZN8touchgfx12DigitalClock9setHeightEs>:
 800b8d6:	b508      	push	{r3, lr}
 800b8d8:	3034      	adds	r0, #52	@ 0x34
 800b8da:	f820 1c2a 	strh.w	r1, [r0, #-42]
 800b8de:	f7fd fbb3 	bl	8009048 <_ZN8touchgfx8TextArea9setHeightEs>
 800b8e2:	bd08      	pop	{r3, pc}

0800b8e4 <_ZN8touchgfx12DigitalClock12setBaselineYEs>:
 800b8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8e8:	4a10      	ldr	r2, [pc, #64]	@ (800b92c <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x48>)
 800b8ea:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 800b8ee:	8812      	ldrh	r2, [r2, #0]
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	460d      	mov	r5, r1
 800b8f6:	d916      	bls.n	800b926 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x42>
 800b8f8:	6802      	ldr	r2, [r0, #0]
 800b8fa:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 800b8fe:	6d96      	ldr	r6, [r2, #88]	@ 0x58
 800b900:	4a0b      	ldr	r2, [pc, #44]	@ (800b930 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x4c>)
 800b902:	6812      	ldr	r2, [r2, #0]
 800b904:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800b908:	4b0a      	ldr	r3, [pc, #40]	@ (800b934 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x50>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b910:	6803      	ldr	r3, [r0, #0]
 800b912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b914:	4798      	blx	r3
 800b916:	1a2a      	subs	r2, r5, r0
 800b918:	4639      	mov	r1, r7
 800b91a:	4620      	mov	r0, r4
 800b91c:	4633      	mov	r3, r6
 800b91e:	b212      	sxth	r2, r2
 800b920:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b924:	4718      	bx	r3
 800b926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b92a:	bf00      	nop
 800b92c:	200043a8 	.word	0x200043a8
 800b930:	200043a4 	.word	0x200043a4
 800b934:	200043ac 	.word	0x200043ac

0800b938 <_ZN8touchgfx12DigitalClock8setAlphaEh>:
 800b938:	f880 106a 	strb.w	r1, [r0, #106]	@ 0x6a
 800b93c:	4770      	bx	lr

0800b93e <_ZNK8touchgfx12DigitalClock8getAlphaEv>:
 800b93e:	f890 006a 	ldrb.w	r0, [r0, #106]	@ 0x6a
 800b942:	4770      	bx	lr

0800b944 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>:
 800b944:	b508      	push	{r3, lr}
 800b946:	3034      	adds	r0, #52	@ 0x34
 800b948:	6301      	str	r1, [r0, #48]	@ 0x30
 800b94a:	f7fd f8dd 	bl	8008b08 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800b94e:	bd08      	pop	{r3, pc}

0800b950 <_ZNK8touchgfx12DigitalClock8getColorEv>:
 800b950:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 800b952:	4770      	bx	lr

0800b954 <_ZNK8touchgfx12DigitalClock12getTextWidthEv>:
 800b954:	3034      	adds	r0, #52	@ 0x34
 800b956:	f001 bb1d 	b.w	800cf94 <_ZNK8touchgfx8TextArea12getTextWidthEv>

0800b95a <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>:
 800b95a:	b538      	push	{r3, r4, r5, lr}
 800b95c:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 800b960:	460d      	mov	r5, r1
 800b962:	4620      	mov	r0, r4
 800b964:	f7fd f8d0 	bl	8008b08 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800b968:	4620      	mov	r0, r4
 800b96a:	4629      	mov	r1, r5
 800b96c:	f001 fe46 	bl	800d5fc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800b970:	4620      	mov	r0, r4
 800b972:	f7fd f8c9 	bl	8008b08 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800b976:	bd38      	pop	{r3, r4, r5, pc}

0800b978 <_ZN8touchgfx12DigitalClock11updateClockEv>:
 800b978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b97c:	4604      	mov	r4, r0
 800b97e:	f100 0634 	add.w	r6, r0, #52	@ 0x34
 800b982:	4630      	mov	r0, r6
 800b984:	f7fd f8c0 	bl	8008b08 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800b988:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 800b98c:	bb03      	cbnz	r3, 800b9d0 <_ZN8touchgfx12DigitalClock11updateClockEv+0x58>
 800b98e:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800b992:	4a41      	ldr	r2, [pc, #260]	@ (800ba98 <_ZN8touchgfx12DigitalClock11updateClockEv+0x120>)
 800b994:	4d41      	ldr	r5, [pc, #260]	@ (800ba9c <_ZN8touchgfx12DigitalClock11updateClockEv+0x124>)
 800b996:	4620      	mov	r0, r4
 800b998:	2b00      	cmp	r3, #0
 800b99a:	bf08      	it	eq
 800b99c:	4615      	moveq	r5, r2
 800b99e:	f000 f92a 	bl	800bbf6 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 800b9a2:	4680      	mov	r8, r0
 800b9a4:	4620      	mov	r0, r4
 800b9a6:	f000 f939 	bl	800bc1c <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 800b9aa:	4681      	mov	r9, r0
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	f000 f92e 	bl	800bc0e <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 800b9b2:	2800      	cmp	r0, #0
 800b9b4:	bf14      	ite	ne
 800b9b6:	2341      	movne	r3, #65	@ 0x41
 800b9b8:	2350      	moveq	r3, #80	@ 0x50
 800b9ba:	f104 0780 	add.w	r7, r4, #128	@ 0x80
 800b9be:	e9cd 9300 	strd	r9, r3, [sp]
 800b9c2:	462a      	mov	r2, r5
 800b9c4:	4643      	mov	r3, r8
 800b9c6:	210c      	movs	r1, #12
 800b9c8:	4638      	mov	r0, r7
 800b9ca:	f006 fb61 	bl	8012090 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800b9ce:	e017      	b.n	800ba00 <_ZN8touchgfx12DigitalClock11updateClockEv+0x88>
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d11b      	bne.n	800ba0c <_ZN8touchgfx12DigitalClock11updateClockEv+0x94>
 800b9d4:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800b9d8:	4a31      	ldr	r2, [pc, #196]	@ (800baa0 <_ZN8touchgfx12DigitalClock11updateClockEv+0x128>)
 800b9da:	4d32      	ldr	r5, [pc, #200]	@ (800baa4 <_ZN8touchgfx12DigitalClock11updateClockEv+0x12c>)
 800b9dc:	4620      	mov	r0, r4
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	bf08      	it	eq
 800b9e2:	4615      	moveq	r5, r2
 800b9e4:	f000 f904 	bl	800bbf0 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 800b9e8:	4607      	mov	r7, r0
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	f000 f916 	bl	800bc1c <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 800b9f0:	463b      	mov	r3, r7
 800b9f2:	9000      	str	r0, [sp, #0]
 800b9f4:	462a      	mov	r2, r5
 800b9f6:	210c      	movs	r1, #12
 800b9f8:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800b9fc:	f006 fb48 	bl	8012090 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800ba00:	4630      	mov	r0, r6
 800ba02:	f7fd f881 	bl	8008b08 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800ba06:	b004      	add	sp, #16
 800ba08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba0c:	2b02      	cmp	r3, #2
 800ba0e:	d126      	bne.n	800ba5e <_ZN8touchgfx12DigitalClock11updateClockEv+0xe6>
 800ba10:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800ba14:	4a24      	ldr	r2, [pc, #144]	@ (800baa8 <_ZN8touchgfx12DigitalClock11updateClockEv+0x130>)
 800ba16:	4d25      	ldr	r5, [pc, #148]	@ (800baac <_ZN8touchgfx12DigitalClock11updateClockEv+0x134>)
 800ba18:	4620      	mov	r0, r4
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	bf08      	it	eq
 800ba1e:	4615      	moveq	r5, r2
 800ba20:	f000 f8e9 	bl	800bbf6 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 800ba24:	4680      	mov	r8, r0
 800ba26:	4620      	mov	r0, r4
 800ba28:	f000 f8f8 	bl	800bc1c <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 800ba2c:	4681      	mov	r9, r0
 800ba2e:	4620      	mov	r0, r4
 800ba30:	f000 f8f7 	bl	800bc22 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 800ba34:	4682      	mov	sl, r0
 800ba36:	4620      	mov	r0, r4
 800ba38:	f000 f8e9 	bl	800bc0e <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 800ba3c:	2800      	cmp	r0, #0
 800ba3e:	bf14      	ite	ne
 800ba40:	2341      	movne	r3, #65	@ 0x41
 800ba42:	2350      	moveq	r3, #80	@ 0x50
 800ba44:	f104 0780 	add.w	r7, r4, #128	@ 0x80
 800ba48:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ba4c:	f8cd 9000 	str.w	r9, [sp]
 800ba50:	4643      	mov	r3, r8
 800ba52:	462a      	mov	r2, r5
 800ba54:	210c      	movs	r1, #12
 800ba56:	4638      	mov	r0, r7
 800ba58:	f006 fb1a 	bl	8012090 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800ba5c:	e7d0      	b.n	800ba00 <_ZN8touchgfx12DigitalClock11updateClockEv+0x88>
 800ba5e:	2b03      	cmp	r3, #3
 800ba60:	d1ce      	bne.n	800ba00 <_ZN8touchgfx12DigitalClock11updateClockEv+0x88>
 800ba62:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800ba66:	4a12      	ldr	r2, [pc, #72]	@ (800bab0 <_ZN8touchgfx12DigitalClock11updateClockEv+0x138>)
 800ba68:	4d12      	ldr	r5, [pc, #72]	@ (800bab4 <_ZN8touchgfx12DigitalClock11updateClockEv+0x13c>)
 800ba6a:	4620      	mov	r0, r4
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	bf08      	it	eq
 800ba70:	4615      	moveq	r5, r2
 800ba72:	f000 f8bd 	bl	800bbf0 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 800ba76:	4607      	mov	r7, r0
 800ba78:	4620      	mov	r0, r4
 800ba7a:	f000 f8cf 	bl	800bc1c <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 800ba7e:	4680      	mov	r8, r0
 800ba80:	4620      	mov	r0, r4
 800ba82:	f000 f8ce 	bl	800bc22 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 800ba86:	463b      	mov	r3, r7
 800ba88:	e9cd 8000 	strd	r8, r0, [sp]
 800ba8c:	462a      	mov	r2, r5
 800ba8e:	210c      	movs	r1, #12
 800ba90:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800ba94:	e799      	b.n	800b9ca <_ZN8touchgfx12DigitalClock11updateClockEv+0x52>
 800ba96:	bf00      	nop
 800ba98:	080156e0 	.word	0x080156e0
 800ba9c:	0801570a 	.word	0x0801570a
 800baa0:	080156ec 	.word	0x080156ec
 800baa4:	0801572a 	.word	0x0801572a
 800baa8:	08015707 	.word	0x08015707
 800baac:	080156f4 	.word	0x080156f4
 800bab0:	08015727 	.word	0x08015727
 800bab4:	08015718 	.word	0x08015718

0800bab8 <_ZN8touchgfx12DigitalClockC1Ev>:
 800bab8:	b510      	push	{r4, lr}
 800baba:	4604      	mov	r4, r0
 800babc:	f000 f87c 	bl	800bbb8 <_ZN8touchgfx13AbstractClockC1Ev>
 800bac0:	2201      	movs	r2, #1
 800bac2:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 800bac6:	4a20      	ldr	r2, [pc, #128]	@ (800bb48 <_ZN8touchgfx12DigitalClockC1Ev+0x90>)
 800bac8:	65e2      	str	r2, [r4, #92]	@ 0x5c
 800baca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bace:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 800bad2:	f8a4 2074 	strh.w	r2, [r4, #116]	@ 0x74
 800bad6:	f8a4 2076 	strh.w	r2, [r4, #118]	@ 0x76
 800bada:	4b1c      	ldr	r3, [pc, #112]	@ (800bb4c <_ZN8touchgfx12DigitalClockC1Ev+0x94>)
 800badc:	4a1c      	ldr	r2, [pc, #112]	@ (800bb50 <_ZN8touchgfx12DigitalClockC1Ev+0x98>)
 800bade:	6023      	str	r3, [r4, #0]
 800bae0:	6362      	str	r2, [r4, #52]	@ 0x34
 800bae2:	2303      	movs	r3, #3
 800bae4:	4622      	mov	r2, r4
 800bae6:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
 800baea:	f44f 017f 	mov.w	r1, #16711680	@ 0xff0000
 800baee:	2300      	movs	r3, #0
 800baf0:	66a1      	str	r1, [r4, #104]	@ 0x68
 800baf2:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800baf6:	8723      	strh	r3, [r4, #56]	@ 0x38
 800baf8:	8763      	strh	r3, [r4, #58]	@ 0x3a
 800bafa:	87a3      	strh	r3, [r4, #60]	@ 0x3c
 800bafc:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800bafe:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 800bb02:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 800bb06:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 800bb0a:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 800bb0e:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 800bb12:	6523      	str	r3, [r4, #80]	@ 0x50
 800bb14:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 800bb18:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
 800bb1c:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
 800bb20:	6663      	str	r3, [r4, #100]	@ 0x64
 800bb22:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
 800bb26:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800bb2a:	f8a4 3070 	strh.w	r3, [r4, #112]	@ 0x70
 800bb2e:	f8a4 3072 	strh.w	r3, [r4, #114]	@ 0x72
 800bb32:	67a3      	str	r3, [r4, #120]	@ 0x78
 800bb34:	f822 3f80 	strh.w	r3, [r2, #128]!
 800bb38:	4620      	mov	r0, r4
 800bb3a:	67e2      	str	r2, [r4, #124]	@ 0x7c
 800bb3c:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 800bb40:	f000 f87c 	bl	800bc3c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800bb44:	4620      	mov	r0, r4
 800bb46:	bd10      	pop	{r4, pc}
 800bb48:	08014f44 	.word	0x08014f44
 800bb4c:	0801573c 	.word	0x0801573c
 800bb50:	08015154 	.word	0x08015154

0800bb54 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>:
 800bb54:	f880 1030 	strb.w	r1, [r0, #48]	@ 0x30
 800bb58:	4770      	bx	lr

0800bb5a <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>:
 800bb5a:	b470      	push	{r4, r5, r6}
 800bb5c:	2518      	movs	r5, #24
 800bb5e:	fbb1 f6f5 	udiv	r6, r1, r5
 800bb62:	fb06 1115 	mls	r1, r6, r5, r1
 800bb66:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
 800bb6a:	213c      	movs	r1, #60	@ 0x3c
 800bb6c:	fbb2 f5f1 	udiv	r5, r2, r1
 800bb70:	fb05 2211 	mls	r2, r5, r1, r2
 800bb74:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
 800bb78:	fbb3 f2f1 	udiv	r2, r3, r1
 800bb7c:	fb02 3311 	mls	r3, r2, r1, r3
 800bb80:	f880 302e 	strb.w	r3, [r0, #46]	@ 0x2e
 800bb84:	6803      	ldr	r3, [r0, #0]
 800bb86:	bc70      	pop	{r4, r5, r6}
 800bb88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb8c:	4718      	bx	r3

0800bb8e <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>:
 800bb8e:	b4f0      	push	{r4, r5, r6, r7}
 800bb90:	6804      	ldr	r4, [r0, #0]
 800bb92:	f89d 6010 	ldrb.w	r6, [sp, #16]
 800bb96:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
 800bb9a:	2e00      	cmp	r6, #0
 800bb9c:	f04f 040c 	mov.w	r4, #12
 800bba0:	fbb1 f7f4 	udiv	r7, r1, r4
 800bba4:	fb07 1114 	mls	r1, r7, r4, r1
 800bba8:	bf18      	it	ne
 800bbaa:	2400      	movne	r4, #0
 800bbac:	fa54 f181 	uxtab	r1, r4, r1
 800bbb0:	46ac      	mov	ip, r5
 800bbb2:	b2c9      	uxtb	r1, r1
 800bbb4:	bcf0      	pop	{r4, r5, r6, r7}
 800bbb6:	4760      	bx	ip

0800bbb8 <_ZN8touchgfx13AbstractClockC1Ev>:
 800bbb8:	2101      	movs	r1, #1
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 800bbc0:	490a      	ldr	r1, [pc, #40]	@ (800bbec <_ZN8touchgfx13AbstractClockC1Ev+0x34>)
 800bbc2:	8082      	strh	r2, [r0, #4]
 800bbc4:	80c2      	strh	r2, [r0, #6]
 800bbc6:	8102      	strh	r2, [r0, #8]
 800bbc8:	8142      	strh	r2, [r0, #10]
 800bbca:	8182      	strh	r2, [r0, #12]
 800bbcc:	81c2      	strh	r2, [r0, #14]
 800bbce:	8202      	strh	r2, [r0, #16]
 800bbd0:	8242      	strh	r2, [r0, #18]
 800bbd2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800bbd6:	61c2      	str	r2, [r0, #28]
 800bbd8:	8402      	strh	r2, [r0, #32]
 800bbda:	8442      	strh	r2, [r0, #34]	@ 0x22
 800bbdc:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 800bbe0:	6001      	str	r1, [r0, #0]
 800bbe2:	6282      	str	r2, [r0, #40]	@ 0x28
 800bbe4:	8582      	strh	r2, [r0, #44]	@ 0x2c
 800bbe6:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
 800bbea:	4770      	bx	lr
 800bbec:	080157fc 	.word	0x080157fc

0800bbf0 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>:
 800bbf0:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800bbf4:	4770      	bx	lr

0800bbf6 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>:
 800bbf6:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800bbfa:	220c      	movs	r2, #12
 800bbfc:	f100 030b 	add.w	r3, r0, #11
 800bc00:	fb93 f0f2 	sdiv	r0, r3, r2
 800bc04:	fb02 3010 	mls	r0, r2, r0, r3
 800bc08:	3001      	adds	r0, #1
 800bc0a:	b2c0      	uxtb	r0, r0
 800bc0c:	4770      	bx	lr

0800bc0e <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>:
 800bc0e:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800bc12:	280b      	cmp	r0, #11
 800bc14:	bf8c      	ite	hi
 800bc16:	2000      	movhi	r0, #0
 800bc18:	2001      	movls	r0, #1
 800bc1a:	4770      	bx	lr

0800bc1c <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>:
 800bc1c:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 800bc20:	4770      	bx	lr

0800bc22 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>:
 800bc22:	f890 002e 	ldrb.w	r0, [r0, #46]	@ 0x2e
 800bc26:	4770      	bx	lr

0800bc28 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800bc28:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800bc2a:	2000      	movs	r0, #0
 800bc2c:	b12b      	cbz	r3, 800bc3a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800bc2e:	b920      	cbnz	r0, 800bc3a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800bc30:	1a5a      	subs	r2, r3, r1
 800bc32:	4250      	negs	r0, r2
 800bc34:	4150      	adcs	r0, r2
 800bc36:	699b      	ldr	r3, [r3, #24]
 800bc38:	e7f8      	b.n	800bc2c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800bc3a:	4770      	bx	lr

0800bc3c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	6148      	str	r0, [r1, #20]
 800bc40:	618b      	str	r3, [r1, #24]
 800bc42:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800bc44:	b913      	cbnz	r3, 800bc4c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800bc46:	6281      	str	r1, [r0, #40]	@ 0x28
 800bc48:	4770      	bx	lr
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	699a      	ldr	r2, [r3, #24]
 800bc4e:	2a00      	cmp	r2, #0
 800bc50:	d1fb      	bne.n	800bc4a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800bc52:	6199      	str	r1, [r3, #24]
 800bc54:	4770      	bx	lr

0800bc56 <_ZN8touchgfx9Container9removeAllEv>:
 800bc56:	2200      	movs	r2, #0
 800bc58:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800bc5a:	b123      	cbz	r3, 800bc66 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800bc5c:	6999      	ldr	r1, [r3, #24]
 800bc5e:	6281      	str	r1, [r0, #40]	@ 0x28
 800bc60:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800bc64:	e7f8      	b.n	800bc58 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800bc66:	4770      	bx	lr

0800bc68 <_ZN8touchgfx9Container6unlinkEv>:
 800bc68:	2300      	movs	r3, #0
 800bc6a:	6283      	str	r3, [r0, #40]	@ 0x28
 800bc6c:	4770      	bx	lr

0800bc6e <_ZNK8touchgfx9Container12getSolidRectEv>:
 800bc6e:	2200      	movs	r2, #0
 800bc70:	8002      	strh	r2, [r0, #0]
 800bc72:	8042      	strh	r2, [r0, #2]
 800bc74:	8082      	strh	r2, [r0, #4]
 800bc76:	80c2      	strh	r2, [r0, #6]
 800bc78:	4770      	bx	lr

0800bc7a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800bc7a:	b570      	push	{r4, r5, r6, lr}
 800bc7c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800bc7e:	460d      	mov	r5, r1
 800bc80:	4616      	mov	r6, r2
 800bc82:	b13c      	cbz	r4, 800bc94 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800bc84:	6823      	ldr	r3, [r4, #0]
 800bc86:	4620      	mov	r0, r4
 800bc88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc8a:	4632      	mov	r2, r6
 800bc8c:	4629      	mov	r1, r5
 800bc8e:	4798      	blx	r3
 800bc90:	69a4      	ldr	r4, [r4, #24]
 800bc92:	e7f6      	b.n	800bc82 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800bc94:	bd70      	pop	{r4, r5, r6, pc}

0800bc96 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800bc96:	b538      	push	{r3, r4, r5, lr}
 800bc98:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800bc9a:	460d      	mov	r5, r1
 800bc9c:	b134      	cbz	r4, 800bcac <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800bc9e:	682b      	ldr	r3, [r5, #0]
 800bca0:	4621      	mov	r1, r4
 800bca2:	689b      	ldr	r3, [r3, #8]
 800bca4:	4628      	mov	r0, r5
 800bca6:	4798      	blx	r3
 800bca8:	69a4      	ldr	r4, [r4, #24]
 800bcaa:	e7f7      	b.n	800bc9c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800bcac:	bd38      	pop	{r3, r4, r5, pc}

0800bcae <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800bcae:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800bcb0:	b19b      	cbz	r3, 800bcda <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800bcb2:	428b      	cmp	r3, r1
 800bcb4:	d109      	bne.n	800bcca <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800bcb6:	699a      	ldr	r2, [r3, #24]
 800bcb8:	2100      	movs	r1, #0
 800bcba:	6159      	str	r1, [r3, #20]
 800bcbc:	6282      	str	r2, [r0, #40]	@ 0x28
 800bcbe:	b902      	cbnz	r2, 800bcc2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800bcc0:	4770      	bx	lr
 800bcc2:	6199      	str	r1, [r3, #24]
 800bcc4:	4770      	bx	lr
 800bcc6:	4613      	mov	r3, r2
 800bcc8:	b13a      	cbz	r2, 800bcda <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800bcca:	699a      	ldr	r2, [r3, #24]
 800bccc:	428a      	cmp	r2, r1
 800bcce:	d1fa      	bne.n	800bcc6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800bcd0:	698a      	ldr	r2, [r1, #24]
 800bcd2:	619a      	str	r2, [r3, #24]
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800bcda:	4770      	bx	lr

0800bcdc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800bcdc:	b410      	push	{r4}
 800bcde:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800bce0:	4604      	mov	r4, r0
 800bce2:	b92b      	cbnz	r3, 800bcf0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800bce4:	6803      	ldr	r3, [r0, #0]
 800bce6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bcec:	4611      	mov	r1, r2
 800bcee:	4718      	bx	r3
 800bcf0:	b941      	cbnz	r1, 800bd04 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800bcf2:	6193      	str	r3, [r2, #24]
 800bcf4:	6282      	str	r2, [r0, #40]	@ 0x28
 800bcf6:	6154      	str	r4, [r2, #20]
 800bcf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcfc:	4770      	bx	lr
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2800      	cmp	r0, #0
 800bd02:	d0f9      	beq.n	800bcf8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800bd04:	4299      	cmp	r1, r3
 800bd06:	6998      	ldr	r0, [r3, #24]
 800bd08:	d1f9      	bne.n	800bcfe <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800bd0a:	6190      	str	r0, [r2, #24]
 800bd0c:	618a      	str	r2, [r1, #24]
 800bd0e:	e7f2      	b.n	800bcf6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800bd10 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800bd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd14:	461f      	mov	r7, r3
 800bd16:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800bd1a:	460d      	mov	r5, r1
 800bd1c:	4616      	mov	r6, r2
 800bd1e:	b103      	cbz	r3, 800bd22 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800bd20:	6038      	str	r0, [r7, #0]
 800bd22:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800bd24:	b314      	cbz	r4, 800bd6c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800bd26:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800bd2a:	b1eb      	cbz	r3, 800bd68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800bd2c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800bd30:	428d      	cmp	r5, r1
 800bd32:	db19      	blt.n	800bd68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800bd34:	8923      	ldrh	r3, [r4, #8]
 800bd36:	b289      	uxth	r1, r1
 800bd38:	440b      	add	r3, r1
 800bd3a:	b21b      	sxth	r3, r3
 800bd3c:	429d      	cmp	r5, r3
 800bd3e:	da13      	bge.n	800bd68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800bd40:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800bd44:	4296      	cmp	r6, r2
 800bd46:	db0f      	blt.n	800bd68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800bd48:	8963      	ldrh	r3, [r4, #10]
 800bd4a:	b292      	uxth	r2, r2
 800bd4c:	4413      	add	r3, r2
 800bd4e:	b21b      	sxth	r3, r3
 800bd50:	429e      	cmp	r6, r3
 800bd52:	da09      	bge.n	800bd68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800bd54:	6823      	ldr	r3, [r4, #0]
 800bd56:	1ab2      	subs	r2, r6, r2
 800bd58:	1a69      	subs	r1, r5, r1
 800bd5a:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800bd5e:	b212      	sxth	r2, r2
 800bd60:	463b      	mov	r3, r7
 800bd62:	b209      	sxth	r1, r1
 800bd64:	4620      	mov	r0, r4
 800bd66:	47c0      	blx	r8
 800bd68:	69a4      	ldr	r4, [r4, #24]
 800bd6a:	e7db      	b.n	800bd24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800bd6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bd70 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800bd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd74:	4c6e      	ldr	r4, [pc, #440]	@ (800bf30 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800bd76:	b0a1      	sub	sp, #132	@ 0x84
 800bd78:	6824      	ldr	r4, [r4, #0]
 800bd7a:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800bd7c:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 800bd80:	9303      	str	r3, [sp, #12]
 800bd82:	2400      	movs	r4, #0
 800bd84:	802c      	strh	r4, [r5, #0]
 800bd86:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800bd88:	802c      	strh	r4, [r5, #0]
 800bd8a:	601c      	str	r4, [r3, #0]
 800bd8c:	4606      	mov	r6, r0
 800bd8e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800bd92:	f7ff ffbd 	bl	800bd10 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800bd96:	f1b9 0f03 	cmp.w	r9, #3
 800bd9a:	f340 80c2 	ble.w	800bf22 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 800bd9e:	4631      	mov	r1, r6
 800bda0:	a80c      	add	r0, sp, #48	@ 0x30
 800bda2:	f004 fae7 	bl	8010374 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800bda6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800bdaa:	9306      	str	r3, [sp, #24]
 800bdac:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800bdb0:	9307      	str	r3, [sp, #28]
 800bdb2:	9b03      	ldr	r3, [sp, #12]
 800bdb4:	f8d3 a000 	ldr.w	sl, [r3]
 800bdb8:	f1ba 0f00 	cmp.w	sl, #0
 800bdbc:	f000 80b4 	beq.w	800bf28 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 800bdc0:	4651      	mov	r1, sl
 800bdc2:	a810      	add	r0, sp, #64	@ 0x40
 800bdc4:	f004 fad6 	bl	8010374 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800bdc8:	9b01      	ldr	r3, [sp, #4]
 800bdca:	9a06      	ldr	r2, [sp, #24]
 800bdcc:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 800bdd0:	189d      	adds	r5, r3, r2
 800bdd2:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 800bdd6:	9a07      	ldr	r2, [sp, #28]
 800bdd8:	2002      	movs	r0, #2
 800bdda:	fb91 f1f0 	sdiv	r1, r1, r0
 800bdde:	4419      	add	r1, r3
 800bde0:	1a6d      	subs	r5, r5, r1
 800bde2:	9b02      	ldr	r3, [sp, #8]
 800bde4:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 800bde8:	4413      	add	r3, r2
 800bdea:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 800bdee:	fb92 f2f0 	sdiv	r2, r2, r0
 800bdf2:	440a      	add	r2, r1
 800bdf4:	1a9b      	subs	r3, r3, r2
 800bdf6:	435b      	muls	r3, r3
 800bdf8:	fb05 3505 	mla	r5, r5, r5, r3
 800bdfc:	4f4d      	ldr	r7, [pc, #308]	@ (800bf34 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 800bdfe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800be00:	ac10      	add	r4, sp, #64	@ 0x40
 800be02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be04:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800be06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be08:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800be0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be0c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800be10:	f1b9 0f0c 	cmp.w	r9, #12
 800be14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800be18:	f04f 0303 	mov.w	r3, #3
 800be1c:	bfc8      	it	gt
 800be1e:	4698      	movgt	r8, r3
 800be20:	f8cd 9000 	str.w	r9, [sp]
 800be24:	f04f 0400 	mov.w	r4, #0
 800be28:	bfdc      	itt	le
 800be2a:	f109 32ff 	addle.w	r2, r9, #4294967295
 800be2e:	fb92 f8f3 	sdivle	r8, r2, r3
 800be32:	1c63      	adds	r3, r4, #1
 800be34:	aa10      	add	r2, sp, #64	@ 0x40
 800be36:	f004 0401 	and.w	r4, r4, #1
 800be3a:	9308      	str	r3, [sp, #32]
 800be3c:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800be40:	9b00      	ldr	r3, [sp, #0]
 800be42:	fb93 f3f8 	sdiv	r3, r3, r8
 800be46:	b29b      	uxth	r3, r3
 800be48:	3404      	adds	r4, #4
 800be4a:	f04f 0b00 	mov.w	fp, #0
 800be4e:	9304      	str	r3, [sp, #16]
 800be50:	9a04      	ldr	r2, [sp, #16]
 800be52:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800be56:	fb13 f302 	smulbb	r3, r3, r2
 800be5a:	9a01      	ldr	r2, [sp, #4]
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	1899      	adds	r1, r3, r2
 800be60:	9305      	str	r3, [sp, #20]
 800be62:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800be66:	b209      	sxth	r1, r1
 800be68:	4299      	cmp	r1, r3
 800be6a:	db4d      	blt.n	800bf08 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800be6c:	8932      	ldrh	r2, [r6, #8]
 800be6e:	4413      	add	r3, r2
 800be70:	b21b      	sxth	r3, r3
 800be72:	4299      	cmp	r1, r3
 800be74:	da48      	bge.n	800bf08 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800be76:	9b04      	ldr	r3, [sp, #16]
 800be78:	6827      	ldr	r7, [r4, #0]
 800be7a:	fb17 f703 	smulbb	r7, r7, r3
 800be7e:	9b02      	ldr	r3, [sp, #8]
 800be80:	b2bf      	uxth	r7, r7
 800be82:	18fa      	adds	r2, r7, r3
 800be84:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800be88:	b212      	sxth	r2, r2
 800be8a:	429a      	cmp	r2, r3
 800be8c:	db3c      	blt.n	800bf08 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800be8e:	8970      	ldrh	r0, [r6, #10]
 800be90:	4403      	add	r3, r0
 800be92:	b21b      	sxth	r3, r3
 800be94:	429a      	cmp	r2, r3
 800be96:	da37      	bge.n	800bf08 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800be98:	2300      	movs	r3, #0
 800be9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be9c:	4630      	mov	r0, r6
 800be9e:	ab0b      	add	r3, sp, #44	@ 0x2c
 800bea0:	f7ff ff36 	bl	800bd10 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800bea4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bea6:	b37a      	cbz	r2, 800bf08 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800bea8:	4552      	cmp	r2, sl
 800beaa:	d02d      	beq.n	800bf08 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800beac:	4611      	mov	r1, r2
 800beae:	a80e      	add	r0, sp, #56	@ 0x38
 800beb0:	9209      	str	r2, [sp, #36]	@ 0x24
 800beb2:	f004 fa5f 	bl	8010374 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800beb6:	9a06      	ldr	r2, [sp, #24]
 800beb8:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 800bebc:	9b01      	ldr	r3, [sp, #4]
 800bebe:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 800bec2:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 800bec6:	4413      	add	r3, r2
 800bec8:	f04f 0e02 	mov.w	lr, #2
 800becc:	fb91 f1fe 	sdiv	r1, r1, lr
 800bed0:	4401      	add	r1, r0
 800bed2:	1a58      	subs	r0, r3, r1
 800bed4:	9a07      	ldr	r2, [sp, #28]
 800bed6:	9b02      	ldr	r3, [sp, #8]
 800bed8:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 800bedc:	fb9c fcfe 	sdiv	ip, ip, lr
 800bee0:	4413      	add	r3, r2
 800bee2:	448c      	add	ip, r1
 800bee4:	eba3 030c 	sub.w	r3, r3, ip
 800bee8:	435b      	muls	r3, r3
 800beea:	fb00 3300 	mla	r3, r0, r0, r3
 800beee:	42ab      	cmp	r3, r5
 800bef0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bef2:	d208      	bcs.n	800bf06 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800bef4:	9803      	ldr	r0, [sp, #12]
 800bef6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bef8:	6001      	str	r1, [r0, #0]
 800befa:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800befc:	9805      	ldr	r0, [sp, #20]
 800befe:	8008      	strh	r0, [r1, #0]
 800bf00:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800bf02:	461d      	mov	r5, r3
 800bf04:	800f      	strh	r7, [r1, #0]
 800bf06:	4692      	mov	sl, r2
 800bf08:	f10b 0b01 	add.w	fp, fp, #1
 800bf0c:	f1bb 0f04 	cmp.w	fp, #4
 800bf10:	f104 0408 	add.w	r4, r4, #8
 800bf14:	d19c      	bne.n	800be50 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800bf16:	9b00      	ldr	r3, [sp, #0]
 800bf18:	9c08      	ldr	r4, [sp, #32]
 800bf1a:	444b      	add	r3, r9
 800bf1c:	4544      	cmp	r4, r8
 800bf1e:	9300      	str	r3, [sp, #0]
 800bf20:	d187      	bne.n	800be32 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800bf22:	b021      	add	sp, #132	@ 0x84
 800bf24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf28:	f04f 35ff 	mov.w	r5, #4294967295
 800bf2c:	e766      	b.n	800bdfc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800bf2e:	bf00      	nop
 800bf30:	20004354 	.word	0x20004354
 800bf34:	08014e44 	.word	0x08014e44

0800bf38 <_ZN8touchgfx4RectaNERKS0_>:
 800bf38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf3c:	f9b1 7000 	ldrsh.w	r7, [r1]
 800bf40:	888c      	ldrh	r4, [r1, #4]
 800bf42:	f9b0 9000 	ldrsh.w	r9, [r0]
 800bf46:	443c      	add	r4, r7
 800bf48:	b2a4      	uxth	r4, r4
 800bf4a:	fa0f f884 	sxth.w	r8, r4
 800bf4e:	45c1      	cmp	r9, r8
 800bf50:	da2f      	bge.n	800bfb2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800bf52:	8882      	ldrh	r2, [r0, #4]
 800bf54:	444a      	add	r2, r9
 800bf56:	b292      	uxth	r2, r2
 800bf58:	fa0f fe82 	sxth.w	lr, r2
 800bf5c:	4577      	cmp	r7, lr
 800bf5e:	da28      	bge.n	800bfb2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800bf60:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800bf64:	88cb      	ldrh	r3, [r1, #6]
 800bf66:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800bf6a:	442b      	add	r3, r5
 800bf6c:	b21b      	sxth	r3, r3
 800bf6e:	429e      	cmp	r6, r3
 800bf70:	da1f      	bge.n	800bfb2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800bf72:	88c3      	ldrh	r3, [r0, #6]
 800bf74:	4433      	add	r3, r6
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	fa0f fc83 	sxth.w	ip, r3
 800bf7c:	4565      	cmp	r5, ip
 800bf7e:	da18      	bge.n	800bfb2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800bf80:	454f      	cmp	r7, r9
 800bf82:	bfb8      	it	lt
 800bf84:	464f      	movlt	r7, r9
 800bf86:	42b5      	cmp	r5, r6
 800bf88:	bfb8      	it	lt
 800bf8a:	4635      	movlt	r5, r6
 800bf8c:	45f0      	cmp	r8, lr
 800bf8e:	bfd8      	it	le
 800bf90:	4622      	movle	r2, r4
 800bf92:	1bd2      	subs	r2, r2, r7
 800bf94:	8082      	strh	r2, [r0, #4]
 800bf96:	884a      	ldrh	r2, [r1, #2]
 800bf98:	88c9      	ldrh	r1, [r1, #6]
 800bf9a:	8007      	strh	r7, [r0, #0]
 800bf9c:	440a      	add	r2, r1
 800bf9e:	b292      	uxth	r2, r2
 800bfa0:	b211      	sxth	r1, r2
 800bfa2:	458c      	cmp	ip, r1
 800bfa4:	bfa8      	it	ge
 800bfa6:	4613      	movge	r3, r2
 800bfa8:	1b5b      	subs	r3, r3, r5
 800bfaa:	80c3      	strh	r3, [r0, #6]
 800bfac:	8045      	strh	r5, [r0, #2]
 800bfae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	8003      	strh	r3, [r0, #0]
 800bfb6:	8043      	strh	r3, [r0, #2]
 800bfb8:	8083      	strh	r3, [r0, #4]
 800bfba:	80c3      	strh	r3, [r0, #6]
 800bfbc:	e7f7      	b.n	800bfae <_ZN8touchgfx4RectaNERKS0_+0x76>

0800bfbe <_ZNK8touchgfx4Rect7isEmptyEv>:
 800bfbe:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	dd06      	ble.n	800bfd4 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800bfc6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800bfca:	2800      	cmp	r0, #0
 800bfcc:	bfcc      	ite	gt
 800bfce:	2000      	movgt	r0, #0
 800bfd0:	2001      	movle	r0, #1
 800bfd2:	4770      	bx	lr
 800bfd4:	2001      	movs	r0, #1
 800bfd6:	4770      	bx	lr

0800bfd8 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800bfd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfdc:	2300      	movs	r3, #0
 800bfde:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800bfe0:	8003      	strh	r3, [r0, #0]
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	8043      	strh	r3, [r0, #2]
 800bfe6:	8083      	strh	r3, [r0, #4]
 800bfe8:	80c3      	strh	r3, [r0, #6]
 800bfea:	2d00      	cmp	r5, #0
 800bfec:	d040      	beq.n	800c070 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800bfee:	1d28      	adds	r0, r5, #4
 800bff0:	f7ff ffe5 	bl	800bfbe <_ZNK8touchgfx4Rect7isEmptyEv>
 800bff4:	b988      	cbnz	r0, 800c01a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800bff6:	4620      	mov	r0, r4
 800bff8:	f7ff ffe1 	bl	800bfbe <_ZNK8touchgfx4Rect7isEmptyEv>
 800bffc:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800c000:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800c004:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800c008:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800c00c:	b138      	cbz	r0, 800c01e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800c00e:	8022      	strh	r2, [r4, #0]
 800c010:	8063      	strh	r3, [r4, #2]
 800c012:	f8a4 e004 	strh.w	lr, [r4, #4]
 800c016:	f8a4 c006 	strh.w	ip, [r4, #6]
 800c01a:	69ad      	ldr	r5, [r5, #24]
 800c01c:	e7e5      	b.n	800bfea <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800c01e:	f9b4 0000 	ldrsh.w	r0, [r4]
 800c022:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800c026:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800c02a:	4290      	cmp	r0, r2
 800c02c:	4607      	mov	r7, r0
 800c02e:	bfa8      	it	ge
 800c030:	4617      	movge	r7, r2
 800c032:	4472      	add	r2, lr
 800c034:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800c038:	8027      	strh	r7, [r4, #0]
 800c03a:	4299      	cmp	r1, r3
 800c03c:	460e      	mov	r6, r1
 800c03e:	4440      	add	r0, r8
 800c040:	bfa8      	it	ge
 800c042:	461e      	movge	r6, r3
 800c044:	4471      	add	r1, lr
 800c046:	4463      	add	r3, ip
 800c048:	b200      	sxth	r0, r0
 800c04a:	b212      	sxth	r2, r2
 800c04c:	b209      	sxth	r1, r1
 800c04e:	b21b      	sxth	r3, r3
 800c050:	4290      	cmp	r0, r2
 800c052:	bfac      	ite	ge
 800c054:	ebc7 0200 	rsbge	r2, r7, r0
 800c058:	ebc7 0202 	rsblt	r2, r7, r2
 800c05c:	4299      	cmp	r1, r3
 800c05e:	bfac      	ite	ge
 800c060:	ebc6 0301 	rsbge	r3, r6, r1
 800c064:	ebc6 0303 	rsblt	r3, r6, r3
 800c068:	8066      	strh	r6, [r4, #2]
 800c06a:	80a2      	strh	r2, [r4, #4]
 800c06c:	80e3      	strh	r3, [r4, #6]
 800c06e:	e7d4      	b.n	800c01a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800c070:	4620      	mov	r0, r4
 800c072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c076 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800c076:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c07a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800c07e:	b383      	cbz	r3, 800c0e2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800c080:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800c082:	b374      	cbz	r4, 800c0e2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800c084:	f9b1 5000 	ldrsh.w	r5, [r1]
 800c088:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800c08c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800c090:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800c094:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800c098:	b303      	cbz	r3, 800c0dc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800c09a:	4668      	mov	r0, sp
 800c09c:	1d21      	adds	r1, r4, #4
 800c09e:	f8ad 5000 	strh.w	r5, [sp]
 800c0a2:	f8ad 6002 	strh.w	r6, [sp, #2]
 800c0a6:	f8ad 7004 	strh.w	r7, [sp, #4]
 800c0aa:	f8ad 8006 	strh.w	r8, [sp, #6]
 800c0ae:	f7ff ff43 	bl	800bf38 <_ZN8touchgfx4RectaNERKS0_>
 800c0b2:	4668      	mov	r0, sp
 800c0b4:	f7ff ff83 	bl	800bfbe <_ZNK8touchgfx4Rect7isEmptyEv>
 800c0b8:	b980      	cbnz	r0, 800c0dc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800c0ba:	f8bd 3000 	ldrh.w	r3, [sp]
 800c0be:	88a2      	ldrh	r2, [r4, #4]
 800c0c0:	1a9b      	subs	r3, r3, r2
 800c0c2:	f8ad 3000 	strh.w	r3, [sp]
 800c0c6:	88e2      	ldrh	r2, [r4, #6]
 800c0c8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800c0cc:	1a9b      	subs	r3, r3, r2
 800c0ce:	f8ad 3002 	strh.w	r3, [sp, #2]
 800c0d2:	6823      	ldr	r3, [r4, #0]
 800c0d4:	4669      	mov	r1, sp
 800c0d6:	689b      	ldr	r3, [r3, #8]
 800c0d8:	4620      	mov	r0, r4
 800c0da:	4798      	blx	r3
 800c0dc:	69a4      	ldr	r4, [r4, #24]
 800c0de:	2c00      	cmp	r4, #0
 800c0e0:	d1d8      	bne.n	800c094 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800c0e2:	b002      	add	sp, #8
 800c0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c0e8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800c0e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0ea:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800c0ee:	460d      	mov	r5, r1
 800c0f0:	4616      	mov	r6, r2
 800c0f2:	b323      	cbz	r3, 800c13e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800c0f4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800c0f6:	b314      	cbz	r4, 800c13e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800c0f8:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800c0fc:	b1eb      	cbz	r3, 800c13a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800c0fe:	6828      	ldr	r0, [r5, #0]
 800c100:	6869      	ldr	r1, [r5, #4]
 800c102:	466b      	mov	r3, sp
 800c104:	c303      	stmia	r3!, {r0, r1}
 800c106:	4668      	mov	r0, sp
 800c108:	1d21      	adds	r1, r4, #4
 800c10a:	f7ff ff15 	bl	800bf38 <_ZN8touchgfx4RectaNERKS0_>
 800c10e:	4668      	mov	r0, sp
 800c110:	f7ff ff55 	bl	800bfbe <_ZNK8touchgfx4Rect7isEmptyEv>
 800c114:	b988      	cbnz	r0, 800c13a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800c116:	f8bd 3000 	ldrh.w	r3, [sp]
 800c11a:	88a2      	ldrh	r2, [r4, #4]
 800c11c:	1a9b      	subs	r3, r3, r2
 800c11e:	f8ad 3000 	strh.w	r3, [sp]
 800c122:	88e2      	ldrh	r2, [r4, #6]
 800c124:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800c128:	1a9b      	subs	r3, r3, r2
 800c12a:	f8ad 3002 	strh.w	r3, [sp, #2]
 800c12e:	6823      	ldr	r3, [r4, #0]
 800c130:	4632      	mov	r2, r6
 800c132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c134:	4669      	mov	r1, sp
 800c136:	4620      	mov	r0, r4
 800c138:	4798      	blx	r3
 800c13a:	69a4      	ldr	r4, [r4, #24]
 800c13c:	e7db      	b.n	800c0f6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800c13e:	b002      	add	sp, #8
 800c140:	bd70      	pop	{r4, r5, r6, pc}

0800c142 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800c142:	b513      	push	{r0, r1, r4, lr}
 800c144:	6803      	ldr	r3, [r0, #0]
 800c146:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 800c14a:	2300      	movs	r3, #0
 800c14c:	e9cd 3300 	strd	r3, r3, [sp]
 800c150:	466b      	mov	r3, sp
 800c152:	47a0      	blx	r4
 800c154:	b002      	add	sp, #8
 800c156:	bd10      	pop	{r4, pc}

0800c158 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800c158:	2301      	movs	r3, #1
 800c15a:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800c15e:	f880 3069 	strb.w	r3, [r0, #105]	@ 0x69
 800c162:	4770      	bx	lr

0800c164 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800c164:	2301      	movs	r3, #1
 800c166:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800c16a:	f880 3069 	strb.w	r3, [r0, #105]	@ 0x69
 800c16e:	4770      	bx	lr

0800c170 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800c170:	6843      	ldr	r3, [r0, #4]
 800c172:	2201      	movs	r2, #1
 800c174:	725a      	strb	r2, [r3, #9]
 800c176:	6840      	ldr	r0, [r0, #4]
 800c178:	6803      	ldr	r3, [r0, #0]
 800c17a:	691b      	ldr	r3, [r3, #16]
 800c17c:	4718      	bx	r3

0800c17e <_ZN8touchgfx3HAL8flushDMAEv>:
 800c17e:	6840      	ldr	r0, [r0, #4]
 800c180:	6803      	ldr	r3, [r0, #0]
 800c182:	689b      	ldr	r3, [r3, #8]
 800c184:	4718      	bx	r3

0800c186 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800c186:	b530      	push	{r4, r5, lr}
 800c188:	b08b      	sub	sp, #44	@ 0x2c
 800c18a:	6804      	ldr	r4, [r0, #0]
 800c18c:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 800c190:	9509      	str	r5, [sp, #36]	@ 0x24
 800c192:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 800c196:	9508      	str	r5, [sp, #32]
 800c198:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800c19c:	9507      	str	r5, [sp, #28]
 800c19e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 800c1a2:	9506      	str	r5, [sp, #24]
 800c1a4:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800c1a8:	9505      	str	r5, [sp, #20]
 800c1aa:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 800c1ae:	9504      	str	r5, [sp, #16]
 800c1b0:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 800c1b4:	9503      	str	r5, [sp, #12]
 800c1b6:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 800c1ba:	9502      	str	r5, [sp, #8]
 800c1bc:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800c1c0:	e9cd 3500 	strd	r3, r5, [sp]
 800c1c4:	4613      	mov	r3, r2
 800c1c6:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	47a0      	blx	r4
 800c1cc:	b00b      	add	sp, #44	@ 0x2c
 800c1ce:	bd30      	pop	{r4, r5, pc}

0800c1d0 <_ZN8touchgfx3HAL10beginFrameEv>:
 800c1d0:	4b04      	ldr	r3, [pc, #16]	@ (800c1e4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	b123      	cbz	r3, 800c1e0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800c1d6:	f890 006a 	ldrb.w	r0, [r0, #106]	@ 0x6a
 800c1da:	f080 0001 	eor.w	r0, r0, #1
 800c1de:	4770      	bx	lr
 800c1e0:	2001      	movs	r0, #1
 800c1e2:	4770      	bx	lr
 800c1e4:	20004350 	.word	0x20004350

0800c1e8 <_ZN8touchgfx3HAL8endFrameEv>:
 800c1e8:	b510      	push	{r4, lr}
 800c1ea:	4604      	mov	r4, r0
 800c1ec:	6840      	ldr	r0, [r0, #4]
 800c1ee:	6803      	ldr	r3, [r0, #0]
 800c1f0:	689b      	ldr	r3, [r3, #8]
 800c1f2:	4798      	blx	r3
 800c1f4:	f894 3069 	ldrb.w	r3, [r4, #105]	@ 0x69
 800c1f8:	b113      	cbz	r3, 800c200 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
 800c200:	bd10      	pop	{r4, pc}

0800c202 <_ZN8touchgfx3HAL10initializeEv>:
 800c202:	b510      	push	{r4, lr}
 800c204:	4604      	mov	r4, r0
 800c206:	f7fe fa09 	bl	800a61c <_ZN8touchgfx10OSWrappers10initializeEv>
 800c20a:	f7fd fef9 	bl	800a000 <_ZN8touchgfx4GPIO4initEv>
 800c20e:	6860      	ldr	r0, [r4, #4]
 800c210:	6803      	ldr	r3, [r0, #0]
 800c212:	68db      	ldr	r3, [r3, #12]
 800c214:	4798      	blx	r3
 800c216:	68e0      	ldr	r0, [r4, #12]
 800c218:	6803      	ldr	r3, [r0, #0]
 800c21a:	689b      	ldr	r3, [r3, #8]
 800c21c:	4798      	blx	r3
 800c21e:	6823      	ldr	r3, [r4, #0]
 800c220:	4620      	mov	r0, r4
 800c222:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c228:	4718      	bx	r3

0800c22a <_ZN8touchgfx3HAL9taskEntryEv>:
 800c22a:	b508      	push	{r3, lr}
 800c22c:	6803      	ldr	r3, [r0, #0]
 800c22e:	4604      	mov	r4, r0
 800c230:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c234:	4798      	blx	r3
 800c236:	6823      	ldr	r3, [r4, #0]
 800c238:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c23a:	4620      	mov	r0, r4
 800c23c:	4798      	blx	r3
 800c23e:	f7fe fa63 	bl	800a708 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800c242:	6823      	ldr	r3, [r4, #0]
 800c244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c246:	e7f8      	b.n	800c23a <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0800c248 <_ZN8touchgfx3HAL4tickEv>:
 800c248:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c24a:	6803      	ldr	r3, [r0, #0]
 800c24c:	4d5b      	ldr	r5, [pc, #364]	@ (800c3bc <_ZN8touchgfx3HAL4tickEv+0x174>)
 800c24e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c252:	4604      	mov	r4, r0
 800c254:	4798      	blx	r3
 800c256:	2800      	cmp	r0, #0
 800c258:	f000 8095 	beq.w	800c386 <_ZN8touchgfx3HAL4tickEv+0x13e>
 800c25c:	2001      	movs	r0, #1
 800c25e:	f7fd fed7 	bl	800a010 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800c262:	f894 3066 	ldrb.w	r3, [r4, #102]	@ 0x66
 800c266:	f884 3067 	strb.w	r3, [r4, #103]	@ 0x67
 800c26a:	f894 3075 	ldrb.w	r3, [r4, #117]	@ 0x75
 800c26e:	2600      	movs	r6, #0
 800c270:	f884 6066 	strb.w	r6, [r4, #102]	@ 0x66
 800c274:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 800c278:	b133      	cbz	r3, 800c288 <_ZN8touchgfx3HAL4tickEv+0x40>
 800c27a:	6823      	ldr	r3, [r4, #0]
 800c27c:	4620      	mov	r0, r4
 800c27e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c282:	4798      	blx	r3
 800c284:	f884 6075 	strb.w	r6, [r4, #117]	@ 0x75
 800c288:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 800c28c:	6862      	ldr	r2, [r4, #4]
 800c28e:	f083 0301 	eor.w	r3, r3, #1
 800c292:	7253      	strb	r3, [r2, #9]
 800c294:	2601      	movs	r6, #1
 800c296:	702e      	strb	r6, [r5, #0]
 800c298:	f002 ff8c 	bl	800f1b4 <_ZN8touchgfx11Application11getInstanceEv>
 800c29c:	6803      	ldr	r3, [r0, #0]
 800c29e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2a0:	4798      	blx	r3
 800c2a2:	f894 3067 	ldrb.w	r3, [r4, #103]	@ 0x67
 800c2a6:	b90b      	cbnz	r3, 800c2ac <_ZN8touchgfx3HAL4tickEv+0x64>
 800c2a8:	f884 6067 	strb.w	r6, [r4, #103]	@ 0x67
 800c2ac:	f002 ff82 	bl	800f1b4 <_ZN8touchgfx11Application11getInstanceEv>
 800c2b0:	6803      	ldr	r3, [r0, #0]
 800c2b2:	695b      	ldr	r3, [r3, #20]
 800c2b4:	4798      	blx	r3
 800c2b6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c2b8:	6803      	ldr	r3, [r0, #0]
 800c2ba:	691b      	ldr	r3, [r3, #16]
 800c2bc:	4798      	blx	r3
 800c2be:	f894 3067 	ldrb.w	r3, [r4, #103]	@ 0x67
 800c2c2:	f894 2068 	ldrb.w	r2, [r4, #104]	@ 0x68
 800c2c6:	3b01      	subs	r3, #1
 800c2c8:	b2db      	uxtb	r3, r3
 800c2ca:	f884 3067 	strb.w	r3, [r4, #103]	@ 0x67
 800c2ce:	b10a      	cbz	r2, 800c2d4 <_ZN8touchgfx3HAL4tickEv+0x8c>
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d1eb      	bne.n	800c2ac <_ZN8touchgfx3HAL4tickEv+0x64>
 800c2d4:	4a3a      	ldr	r2, [pc, #232]	@ (800c3c0 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800c2d6:	f994 1064 	ldrsb.w	r1, [r4, #100]	@ 0x64
 800c2da:	7813      	ldrb	r3, [r2, #0]
 800c2dc:	3301      	adds	r3, #1
 800c2de:	b25b      	sxtb	r3, r3
 800c2e0:	4299      	cmp	r1, r3
 800c2e2:	7013      	strb	r3, [r2, #0]
 800c2e4:	dc10      	bgt.n	800c308 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800c2e6:	68e0      	ldr	r0, [r4, #12]
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	7013      	strb	r3, [r2, #0]
 800c2ec:	6803      	ldr	r3, [r0, #0]
 800c2ee:	aa03      	add	r2, sp, #12
 800c2f0:	68db      	ldr	r3, [r3, #12]
 800c2f2:	a902      	add	r1, sp, #8
 800c2f4:	4798      	blx	r3
 800c2f6:	6823      	ldr	r3, [r4, #0]
 800c2f8:	2800      	cmp	r0, #0
 800c2fa:	d050      	beq.n	800c39e <_ZN8touchgfx3HAL4tickEv+0x156>
 800c2fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c300:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800c304:	4620      	mov	r0, r4
 800c306:	4798      	blx	r3
 800c308:	6960      	ldr	r0, [r4, #20]
 800c30a:	2300      	movs	r3, #0
 800c30c:	f88d 3007 	strb.w	r3, [sp, #7]
 800c310:	b158      	cbz	r0, 800c32a <_ZN8touchgfx3HAL4tickEv+0xe2>
 800c312:	6803      	ldr	r3, [r0, #0]
 800c314:	f10d 0107 	add.w	r1, sp, #7
 800c318:	68db      	ldr	r3, [r3, #12]
 800c31a:	4798      	blx	r3
 800c31c:	b128      	cbz	r0, 800c32a <_ZN8touchgfx3HAL4tickEv+0xe2>
 800c31e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c320:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800c324:	6803      	ldr	r3, [r0, #0]
 800c326:	68db      	ldr	r3, [r3, #12]
 800c328:	4798      	blx	r3
 800c32a:	f104 001c 	add.w	r0, r4, #28
 800c32e:	f006 ff95 	bl	801325c <_ZN8touchgfx8Gestures4tickEv>
 800c332:	f894 306c 	ldrb.w	r3, [r4, #108]	@ 0x6c
 800c336:	b30b      	cbz	r3, 800c37c <_ZN8touchgfx3HAL4tickEv+0x134>
 800c338:	6920      	ldr	r0, [r4, #16]
 800c33a:	6803      	ldr	r3, [r0, #0]
 800c33c:	691b      	ldr	r3, [r3, #16]
 800c33e:	4798      	blx	r3
 800c340:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c342:	4606      	mov	r6, r0
 800c344:	b903      	cbnz	r3, 800c348 <_ZN8touchgfx3HAL4tickEv+0x100>
 800c346:	6720      	str	r0, [r4, #112]	@ 0x70
 800c348:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c34a:	4a1e      	ldr	r2, [pc, #120]	@ (800c3c4 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800c34c:	1af3      	subs	r3, r6, r3
 800c34e:	4293      	cmp	r3, r2
 800c350:	d914      	bls.n	800c37c <_ZN8touchgfx3HAL4tickEv+0x134>
 800c352:	6920      	ldr	r0, [r4, #16]
 800c354:	6803      	ldr	r3, [r0, #0]
 800c356:	699b      	ldr	r3, [r3, #24]
 800c358:	4798      	blx	r3
 800c35a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c35c:	2264      	movs	r2, #100	@ 0x64
 800c35e:	1af3      	subs	r3, r6, r3
 800c360:	fbb3 f3f2 	udiv	r3, r3, r2
 800c364:	fbb0 f0f3 	udiv	r0, r0, r3
 800c368:	2800      	cmp	r0, #0
 800c36a:	dc1d      	bgt.n	800c3a8 <_ZN8touchgfx3HAL4tickEv+0x160>
 800c36c:	f884 2065 	strb.w	r2, [r4, #101]	@ 0x65
 800c370:	6920      	ldr	r0, [r4, #16]
 800c372:	6803      	ldr	r3, [r0, #0]
 800c374:	2100      	movs	r1, #0
 800c376:	69db      	ldr	r3, [r3, #28]
 800c378:	4798      	blx	r3
 800c37a:	6726      	str	r6, [r4, #112]	@ 0x70
 800c37c:	f002 ff1a 	bl	800f1b4 <_ZN8touchgfx11Application11getInstanceEv>
 800c380:	6803      	ldr	r3, [r0, #0]
 800c382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c384:	4798      	blx	r3
 800c386:	6823      	ldr	r3, [r4, #0]
 800c388:	4620      	mov	r0, r4
 800c38a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c38e:	4798      	blx	r3
 800c390:	2001      	movs	r0, #1
 800c392:	f7fd fe59 	bl	800a048 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800c396:	2300      	movs	r3, #0
 800c398:	702b      	strb	r3, [r5, #0]
 800c39a:	b004      	add	sp, #16
 800c39c:	bd70      	pop	{r4, r5, r6, pc}
 800c39e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	4798      	blx	r3
 800c3a6:	e7af      	b.n	800c308 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800c3a8:	2863      	cmp	r0, #99	@ 0x63
 800c3aa:	bfcb      	itete	gt
 800c3ac:	2300      	movgt	r3, #0
 800c3ae:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 800c3b2:	f884 3065 	strbgt.w	r3, [r4, #101]	@ 0x65
 800c3b6:	f884 0065 	strble.w	r0, [r4, #101]	@ 0x65
 800c3ba:	e7d9      	b.n	800c370 <_ZN8touchgfx3HAL4tickEv+0x128>
 800c3bc:	20004358 	.word	0x20004358
 800c3c0:	20004359 	.word	0x20004359
 800c3c4:	05f5e100 	.word	0x05f5e100

0800c3c8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800c3c8:	f7fe b96a 	b.w	800a6a0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800c3cc <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800c3cc:	6581      	str	r1, [r0, #88]	@ 0x58
 800c3ce:	301c      	adds	r0, #28
 800c3d0:	f006 bf42 	b.w	8013258 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800c3d4 <_ZN8touchgfx3HAL5touchEll>:
 800c3d4:	b530      	push	{r4, r5, lr}
 800c3d6:	b087      	sub	sp, #28
 800c3d8:	4604      	mov	r4, r0
 800c3da:	a804      	add	r0, sp, #16
 800c3dc:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800c3e0:	f002 fcf2 	bl	800edc8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800c3e4:	9b04      	ldr	r3, [sp, #16]
 800c3e6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c3ea:	a906      	add	r1, sp, #24
 800c3ec:	9b05      	ldr	r3, [sp, #20]
 800c3ee:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800c3f2:	a803      	add	r0, sp, #12
 800c3f4:	f002 fd3a 	bl	800ee6c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800c3f8:	f894 106b 	ldrb.w	r1, [r4, #107]	@ 0x6b
 800c3fc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800c400:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800c404:	f104 001c 	add.w	r0, r4, #28
 800c408:	b189      	cbz	r1, 800c42e <_ZN8touchgfx3HAL5touchEll+0x5a>
 800c40a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	@ 0x60
 800c40e:	9300      	str	r3, [sp, #0]
 800c410:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800c414:	4613      	mov	r3, r2
 800c416:	462a      	mov	r2, r5
 800c418:	f006 ff2e 	bl	8013278 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800c41c:	b128      	cbz	r0, 800c42a <_ZN8touchgfx3HAL5touchEll+0x56>
 800c41e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800c422:	65e3      	str	r3, [r4, #92]	@ 0x5c
 800c424:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800c428:	6623      	str	r3, [r4, #96]	@ 0x60
 800c42a:	b007      	add	sp, #28
 800c42c:	bd30      	pop	{r4, r5, pc}
 800c42e:	f006 ff63 	bl	80132f8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800c432:	2301      	movs	r3, #1
 800c434:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800c438:	e7f1      	b.n	800c41e <_ZN8touchgfx3HAL5touchEll+0x4a>

0800c43a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800c43a:	b510      	push	{r4, lr}
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d046      	beq.n	800c4ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800c440:	ea81 0002 	eor.w	r0, r1, r2
 800c444:	07c4      	lsls	r4, r0, #31
 800c446:	d508      	bpl.n	800c45a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800c448:	440b      	add	r3, r1
 800c44a:	3a01      	subs	r2, #1
 800c44c:	428b      	cmp	r3, r1
 800c44e:	d93e      	bls.n	800c4ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800c450:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800c454:	f801 0b01 	strb.w	r0, [r1], #1
 800c458:	e7f8      	b.n	800c44c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800c45a:	07d0      	lsls	r0, r2, #31
 800c45c:	bf42      	ittt	mi
 800c45e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800c462:	f801 0b01 	strbmi.w	r0, [r1], #1
 800c466:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800c46a:	2b01      	cmp	r3, #1
 800c46c:	d911      	bls.n	800c492 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800c46e:	ea81 0402 	eor.w	r4, r1, r2
 800c472:	07a4      	lsls	r4, r4, #30
 800c474:	4610      	mov	r0, r2
 800c476:	d022      	beq.n	800c4be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800c478:	f023 0401 	bic.w	r4, r3, #1
 800c47c:	440c      	add	r4, r1
 800c47e:	428c      	cmp	r4, r1
 800c480:	4602      	mov	r2, r0
 800c482:	d904      	bls.n	800c48e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800c484:	8812      	ldrh	r2, [r2, #0]
 800c486:	f821 2b02 	strh.w	r2, [r1], #2
 800c48a:	3002      	adds	r0, #2
 800c48c:	e7f7      	b.n	800c47e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800c48e:	f003 0301 	and.w	r3, r3, #1
 800c492:	f023 0003 	bic.w	r0, r3, #3
 800c496:	4408      	add	r0, r1
 800c498:	4288      	cmp	r0, r1
 800c49a:	4614      	mov	r4, r2
 800c49c:	d904      	bls.n	800c4a8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800c49e:	6824      	ldr	r4, [r4, #0]
 800c4a0:	f841 4b04 	str.w	r4, [r1], #4
 800c4a4:	3204      	adds	r2, #4
 800c4a6:	e7f7      	b.n	800c498 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800c4a8:	f003 0303 	and.w	r3, r3, #3
 800c4ac:	440b      	add	r3, r1
 800c4ae:	3a01      	subs	r2, #1
 800c4b0:	428b      	cmp	r3, r1
 800c4b2:	d90c      	bls.n	800c4ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800c4b4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800c4b8:	f801 0b01 	strb.w	r0, [r1], #1
 800c4bc:	e7f8      	b.n	800c4b0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800c4be:	0790      	lsls	r0, r2, #30
 800c4c0:	d0e7      	beq.n	800c492 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800c4c2:	f832 0b02 	ldrh.w	r0, [r2], #2
 800c4c6:	f821 0b02 	strh.w	r0, [r1], #2
 800c4ca:	3b02      	subs	r3, #2
 800c4cc:	e7e1      	b.n	800c492 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800c4ce:	2001      	movs	r0, #1
 800c4d0:	bd10      	pop	{r4, pc}

0800c4d2 <_ZN8touchgfx3HAL7noTouchEv>:
 800c4d2:	b510      	push	{r4, lr}
 800c4d4:	f890 306b 	ldrb.w	r3, [r0, #107]	@ 0x6b
 800c4d8:	4604      	mov	r4, r0
 800c4da:	b153      	cbz	r3, 800c4f2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800c4dc:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 800c4e0:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
 800c4e4:	2101      	movs	r1, #1
 800c4e6:	301c      	adds	r0, #28
 800c4e8:	f006 ff06 	bl	80132f8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800c4f2:	bd10      	pop	{r4, pc}

0800c4f4 <_ZN8touchgfx3HAL3lcdEv>:
 800c4f4:	4b04      	ldr	r3, [pc, #16]	@ (800c508 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
 800c4fc:	b10a      	cbz	r2, 800c502 <_ZN8touchgfx3HAL3lcdEv+0xe>
 800c4fe:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800c500:	b900      	cbnz	r0, 800c504 <_ZN8touchgfx3HAL3lcdEv+0x10>
 800c502:	6898      	ldr	r0, [r3, #8]
 800c504:	4770      	bx	lr
 800c506:	bf00      	nop
 800c508:	20004354 	.word	0x20004354

0800c50c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800c50c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c510:	b085      	sub	sp, #20
 800c512:	ad04      	add	r5, sp, #16
 800c514:	4604      	mov	r4, r0
 800c516:	2000      	movs	r0, #0
 800c518:	f845 0d04 	str.w	r0, [r5, #-4]!
 800c51c:	69a0      	ldr	r0, [r4, #24]
 800c51e:	6806      	ldr	r6, [r0, #0]
 800c520:	9501      	str	r5, [sp, #4]
 800c522:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 800c526:	9500      	str	r5, [sp, #0]
 800c528:	6835      	ldr	r5, [r6, #0]
 800c52a:	4699      	mov	r9, r3
 800c52c:	460f      	mov	r7, r1
 800c52e:	4690      	mov	r8, r2
 800c530:	47a8      	blx	r5
 800c532:	4d10      	ldr	r5, [pc, #64]	@ (800c574 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800c534:	4606      	mov	r6, r0
 800c536:	f8a5 9000 	strh.w	r9, [r5]
 800c53a:	f7ff ffdb 	bl	800c4f4 <_ZN8touchgfx3HAL3lcdEv>
 800c53e:	6803      	ldr	r3, [r0, #0]
 800c540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c542:	4798      	blx	r3
 800c544:	b128      	cbz	r0, 800c552 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800c546:	2801      	cmp	r0, #1
 800c548:	d00b      	beq.n	800c562 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800c54a:	4630      	mov	r0, r6
 800c54c:	b005      	add	sp, #20
 800c54e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c552:	882b      	ldrh	r3, [r5, #0]
 800c554:	fb08 7203 	mla	r2, r8, r3, r7
 800c558:	9b03      	ldr	r3, [sp, #12]
 800c55a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800c55e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800c560:	e7f3      	b.n	800c54a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800c562:	882a      	ldrh	r2, [r5, #0]
 800c564:	9b03      	ldr	r3, [sp, #12]
 800c566:	fb08 7202 	mla	r2, r8, r2, r7
 800c56a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800c56e:	1a9a      	subs	r2, r3, r2
 800c570:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800c572:	e7ea      	b.n	800c54a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800c574:	2000434c 	.word	0x2000434c

0800c578 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800c578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c57a:	b08b      	sub	sp, #44	@ 0x2c
 800c57c:	4617      	mov	r7, r2
 800c57e:	4604      	mov	r4, r0
 800c580:	460e      	mov	r6, r1
 800c582:	461d      	mov	r5, r3
 800c584:	f7ff ffb6 	bl	800c4f4 <_ZN8touchgfx3HAL3lcdEv>
 800c588:	6803      	ldr	r3, [r0, #0]
 800c58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c58c:	4798      	blx	r3
 800c58e:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800c592:	9007      	str	r0, [sp, #28]
 800c594:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800c598:	4b0d      	ldr	r3, [pc, #52]	@ (800c5d0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800c59a:	6822      	ldr	r2, [r4, #0]
 800c59c:	881b      	ldrh	r3, [r3, #0]
 800c59e:	9306      	str	r3, [sp, #24]
 800c5a0:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800c5a4:	9305      	str	r3, [sp, #20]
 800c5a6:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800c5aa:	9304      	str	r3, [sp, #16]
 800c5ac:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800c5b0:	9303      	str	r3, [sp, #12]
 800c5b2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800c5b6:	9302      	str	r3, [sp, #8]
 800c5b8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800c5bc:	e9cd 5300 	strd	r5, r3, [sp]
 800c5c0:	4631      	mov	r1, r6
 800c5c2:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 800c5c4:	463b      	mov	r3, r7
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	47a8      	blx	r5
 800c5cc:	b00b      	add	sp, #44	@ 0x2c
 800c5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5d0:	2000434c 	.word	0x2000434c

0800c5d4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800c5d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5d8:	4698      	mov	r8, r3
 800c5da:	6803      	ldr	r3, [r0, #0]
 800c5dc:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 800c5de:	4b15      	ldr	r3, [pc, #84]	@ (800c634 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800c5e0:	b08b      	sub	sp, #44	@ 0x2c
 800c5e2:	4617      	mov	r7, r2
 800c5e4:	f8b3 9000 	ldrh.w	r9, [r3]
 800c5e8:	460e      	mov	r6, r1
 800c5ea:	4604      	mov	r4, r0
 800c5ec:	f7ff ff82 	bl	800c4f4 <_ZN8touchgfx3HAL3lcdEv>
 800c5f0:	6803      	ldr	r3, [r0, #0]
 800c5f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5f4:	4798      	blx	r3
 800c5f6:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800c5fa:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800c5fe:	2302      	movs	r3, #2
 800c600:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800c604:	2301      	movs	r3, #1
 800c606:	9305      	str	r3, [sp, #20]
 800c608:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800c60c:	9304      	str	r3, [sp, #16]
 800c60e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800c612:	9303      	str	r3, [sp, #12]
 800c614:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800c618:	9302      	str	r3, [sp, #8]
 800c61a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800c61e:	2200      	movs	r2, #0
 800c620:	e9cd 8300 	strd	r8, r3, [sp]
 800c624:	4631      	mov	r1, r6
 800c626:	463b      	mov	r3, r7
 800c628:	4620      	mov	r0, r4
 800c62a:	47a8      	blx	r5
 800c62c:	b00b      	add	sp, #44	@ 0x2c
 800c62e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c632:	bf00      	nop
 800c634:	2000434c 	.word	0x2000434c

0800c638 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800c638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c63c:	4698      	mov	r8, r3
 800c63e:	6803      	ldr	r3, [r0, #0]
 800c640:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 800c642:	4b11      	ldr	r3, [pc, #68]	@ (800c688 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800c644:	b087      	sub	sp, #28
 800c646:	f8b3 9000 	ldrh.w	r9, [r3]
 800c64a:	460e      	mov	r6, r1
 800c64c:	4617      	mov	r7, r2
 800c64e:	4604      	mov	r4, r0
 800c650:	f7ff ff50 	bl	800c4f4 <_ZN8touchgfx3HAL3lcdEv>
 800c654:	6803      	ldr	r3, [r0, #0]
 800c656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c658:	4798      	blx	r3
 800c65a:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 800c65e:	f8cd 900c 	str.w	r9, [sp, #12]
 800c662:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800c666:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800c66a:	9302      	str	r3, [sp, #8]
 800c66c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800c670:	9301      	str	r3, [sp, #4]
 800c672:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800c676:	9300      	str	r3, [sp, #0]
 800c678:	463a      	mov	r2, r7
 800c67a:	4643      	mov	r3, r8
 800c67c:	4631      	mov	r1, r6
 800c67e:	4620      	mov	r0, r4
 800c680:	47a8      	blx	r5
 800c682:	b007      	add	sp, #28
 800c684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c688:	2000434c 	.word	0x2000434c

0800c68c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800c68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c690:	4604      	mov	r4, r0
 800c692:	b08f      	sub	sp, #60	@ 0x3c
 800c694:	4610      	mov	r0, r2
 800c696:	460d      	mov	r5, r1
 800c698:	4691      	mov	r9, r2
 800c69a:	461e      	mov	r6, r3
 800c69c:	f005 fd1e 	bl	80120dc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800c6a0:	2800      	cmp	r0, #0
 800c6a2:	f000 809d 	beq.w	800c7e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800c6a6:	6823      	ldr	r3, [r4, #0]
 800c6a8:	f8df b198 	ldr.w	fp, [pc, #408]	@ 800c844 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800c6ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6ae:	f8df a198 	ldr.w	sl, [pc, #408]	@ 800c848 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800c6b2:	4f61      	ldr	r7, [pc, #388]	@ (800c838 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	4798      	blx	r3
 800c6b8:	6823      	ldr	r3, [r4, #0]
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6be:	4798      	blx	r3
 800c6c0:	f8bb 3000 	ldrh.w	r3, [fp]
 800c6c4:	9301      	str	r3, [sp, #4]
 800c6c6:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800c6ca:	f8ba 3000 	ldrh.w	r3, [sl]
 800c6ce:	9302      	str	r3, [sp, #8]
 800c6d0:	883b      	ldrh	r3, [r7, #0]
 800c6d2:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800c6d6:	9303      	str	r3, [sp, #12]
 800c6d8:	4b58      	ldr	r3, [pc, #352]	@ (800c83c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800c6da:	9305      	str	r3, [sp, #20]
 800c6dc:	881a      	ldrh	r2, [r3, #0]
 800c6de:	9204      	str	r2, [sp, #16]
 800c6e0:	4640      	mov	r0, r8
 800c6e2:	f005 fd8f 	bl	8012204 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800c6e6:	8038      	strh	r0, [r7, #0]
 800c6e8:	4640      	mov	r0, r8
 800c6ea:	f005 fdbf 	bl	801226c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800c6ee:	9b05      	ldr	r3, [sp, #20]
 800c6f0:	b280      	uxth	r0, r0
 800c6f2:	8018      	strh	r0, [r3, #0]
 800c6f4:	4b52      	ldr	r3, [pc, #328]	@ (800c840 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d174      	bne.n	800c7e6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800c6fc:	883b      	ldrh	r3, [r7, #0]
 800c6fe:	f8ab 3000 	strh.w	r3, [fp]
 800c702:	f8aa 0000 	strh.w	r0, [sl]
 800c706:	4648      	mov	r0, r9
 800c708:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 800c70c:	f005 fce6 	bl	80120dc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800c710:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800c714:	2200      	movs	r2, #0
 800c716:	4611      	mov	r1, r2
 800c718:	4628      	mov	r0, r5
 800c71a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800c71e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800c722:	f7fc fa4e 	bl	8008bc2 <_ZN8touchgfx8Drawable5setXYEss>
 800c726:	2301      	movs	r3, #1
 800c728:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 800c72c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800c730:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800c734:	2b00      	cmp	r3, #0
 800c736:	dd5c      	ble.n	800c7f2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800c738:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	dd58      	ble.n	800c7f2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800c740:	462a      	mov	r2, r5
 800c742:	ab0a      	add	r3, sp, #40	@ 0x28
 800c744:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800c748:	6851      	ldr	r1, [r2, #4]
 800c74a:	c303      	stmia	r3!, {r0, r1}
 800c74c:	4631      	mov	r1, r6
 800c74e:	a80a      	add	r0, sp, #40	@ 0x28
 800c750:	f7ff fbf2 	bl	800bf38 <_ZN8touchgfx4RectaNERKS0_>
 800c754:	4b38      	ldr	r3, [pc, #224]	@ (800c838 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800c756:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c75a:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800c75e:	2100      	movs	r1, #0
 800c760:	aa0a      	add	r2, sp, #40	@ 0x28
 800c762:	4b36      	ldr	r3, [pc, #216]	@ (800c83c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800c764:	910c      	str	r1, [sp, #48]	@ 0x30
 800c766:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c76a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c76e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800c772:	ab08      	add	r3, sp, #32
 800c774:	e883 0003 	stmia.w	r3, {r0, r1}
 800c778:	4618      	mov	r0, r3
 800c77a:	a90c      	add	r1, sp, #48	@ 0x30
 800c77c:	f7ff fbdc 	bl	800bf38 <_ZN8touchgfx4RectaNERKS0_>
 800c780:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800c782:	2b00      	cmp	r3, #0
 800c784:	d13c      	bne.n	800c800 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800c786:	2000      	movs	r0, #0
 800c788:	f884 0076 	strb.w	r0, [r4, #118]	@ 0x76
 800c78c:	2600      	movs	r6, #0
 800c78e:	682a      	ldr	r2, [r5, #0]
 800c790:	696b      	ldr	r3, [r5, #20]
 800c792:	616e      	str	r6, [r5, #20]
 800c794:	9305      	str	r3, [sp, #20]
 800c796:	6892      	ldr	r2, [r2, #8]
 800c798:	a908      	add	r1, sp, #32
 800c79a:	4628      	mov	r0, r5
 800c79c:	4790      	blx	r2
 800c79e:	9b05      	ldr	r3, [sp, #20]
 800c7a0:	616b      	str	r3, [r5, #20]
 800c7a2:	4652      	mov	r2, sl
 800c7a4:	f884 6076 	strb.w	r6, [r4, #118]	@ 0x76
 800c7a8:	4649      	mov	r1, r9
 800c7aa:	4628      	mov	r0, r5
 800c7ac:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 800c7b0:	f7fc fa07 	bl	8008bc2 <_ZN8touchgfx8Drawable5setXYEss>
 800c7b4:	4b23      	ldr	r3, [pc, #140]	@ (800c844 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800c7b6:	9a01      	ldr	r2, [sp, #4]
 800c7b8:	801a      	strh	r2, [r3, #0]
 800c7ba:	4b23      	ldr	r3, [pc, #140]	@ (800c848 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800c7bc:	9a02      	ldr	r2, [sp, #8]
 800c7be:	801a      	strh	r2, [r3, #0]
 800c7c0:	4b1d      	ldr	r3, [pc, #116]	@ (800c838 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800c7c2:	9a03      	ldr	r2, [sp, #12]
 800c7c4:	801a      	strh	r2, [r3, #0]
 800c7c6:	4b1d      	ldr	r3, [pc, #116]	@ (800c83c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800c7c8:	9a04      	ldr	r2, [sp, #16]
 800c7ca:	801a      	strh	r2, [r3, #0]
 800c7cc:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 800c7d0:	6823      	ldr	r3, [r4, #0]
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7d6:	4798      	blx	r3
 800c7d8:	6823      	ldr	r3, [r4, #0]
 800c7da:	4620      	mov	r0, r4
 800c7dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7de:	4798      	blx	r3
 800c7e0:	b00f      	add	sp, #60	@ 0x3c
 800c7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7e6:	883b      	ldrh	r3, [r7, #0]
 800c7e8:	f8ab 0000 	strh.w	r0, [fp]
 800c7ec:	f8aa 3000 	strh.w	r3, [sl]
 800c7f0:	e789      	b.n	800c706 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800c7f2:	462a      	mov	r2, r5
 800c7f4:	ab0a      	add	r3, sp, #40	@ 0x28
 800c7f6:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800c7fa:	6851      	ldr	r1, [r2, #4]
 800c7fc:	c303      	stmia	r3!, {r0, r1}
 800c7fe:	e7a9      	b.n	800c754 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800c800:	a807      	add	r0, sp, #28
 800c802:	f005 fde3 	bl	80123cc <_ZNK8touchgfx6Bitmap9getFormatEv>
 800c806:	4606      	mov	r6, r0
 800c808:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800c80a:	6803      	ldr	r3, [r0, #0]
 800c80c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c80e:	4798      	blx	r3
 800c810:	4286      	cmp	r6, r0
 800c812:	d1b8      	bne.n	800c786 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800c814:	f7ff fe6e 	bl	800c4f4 <_ZN8touchgfx3HAL3lcdEv>
 800c818:	6803      	ldr	r3, [r0, #0]
 800c81a:	4606      	mov	r6, r0
 800c81c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c81e:	9305      	str	r3, [sp, #20]
 800c820:	a807      	add	r0, sp, #28
 800c822:	f005 fdd3 	bl	80123cc <_ZNK8touchgfx6Bitmap9getFormatEv>
 800c826:	9b05      	ldr	r3, [sp, #20]
 800c828:	4601      	mov	r1, r0
 800c82a:	4630      	mov	r0, r6
 800c82c:	4798      	blx	r3
 800c82e:	f080 0001 	eor.w	r0, r0, #1
 800c832:	b2c0      	uxtb	r0, r0
 800c834:	e7a8      	b.n	800c788 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800c836:	bf00      	nop
 800c838:	20004346 	.word	0x20004346
 800c83c:	20004348 	.word	0x20004348
 800c840:	2000434a 	.word	0x2000434a
 800c844:	2000434c 	.word	0x2000434c
 800c848:	2000434e 	.word	0x2000434e

0800c84c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800c84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c850:	b08a      	sub	sp, #40	@ 0x28
 800c852:	461d      	mov	r5, r3
 800c854:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c858:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800c85c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800c860:	f8ad 3018 	strh.w	r3, [sp, #24]
 800c864:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800c868:	f8ad 301a 	strh.w	r3, [sp, #26]
 800c86c:	2400      	movs	r4, #0
 800c86e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800c872:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 800c876:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c87a:	4690      	mov	r8, r2
 800c87c:	4607      	mov	r7, r0
 800c87e:	9404      	str	r4, [sp, #16]
 800c880:	f88d 4020 	strb.w	r4, [sp, #32]
 800c884:	f7fd fd4a 	bl	800a31c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c888:	fb06 8505 	mla	r5, r6, r5, r8
 800c88c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	9505      	str	r5, [sp, #20]
 800c894:	f8ad 601e 	strh.w	r6, [sp, #30]
 800c898:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800c89c:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 800c8a0:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800c8a4:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800c8a8:	6803      	ldr	r3, [r0, #0]
 800c8aa:	a901      	add	r1, sp, #4
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	4798      	blx	r3
 800c8b0:	b00a      	add	sp, #40	@ 0x28
 800c8b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c8b6 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800c8b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8ba:	b08b      	sub	sp, #44	@ 0x2c
 800c8bc:	2400      	movs	r4, #0
 800c8be:	461d      	mov	r5, r3
 800c8c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c8c4:	4688      	mov	r8, r1
 800c8c6:	4691      	mov	r9, r2
 800c8c8:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 800c8cc:	9404      	str	r4, [sp, #16]
 800c8ce:	4607      	mov	r7, r0
 800c8d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8d4:	f7fd fd22 	bl	800a31c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c8d8:	fb06 9505 	mla	r5, r6, r5, r9
 800c8dc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800c8e0:	f8ad 3018 	strh.w	r3, [sp, #24]
 800c8e4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800c8e8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	9505      	str	r5, [sp, #20]
 800c8f0:	f8ad 301a 	strh.w	r3, [sp, #26]
 800c8f4:	f8ad 401c 	strh.w	r4, [sp, #28]
 800c8f8:	f8ad 601e 	strh.w	r6, [sp, #30]
 800c8fc:	f8cd 8010 	str.w	r8, [sp, #16]
 800c900:	f8ad 4020 	strh.w	r4, [sp, #32]
 800c904:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800c908:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800c90c:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800c910:	6803      	ldr	r3, [r0, #0]
 800c912:	a901      	add	r1, sp, #4
 800c914:	685b      	ldr	r3, [r3, #4]
 800c916:	4798      	blx	r3
 800c918:	b00b      	add	sp, #44	@ 0x2c
 800c91a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800c920 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800c920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c924:	b08a      	sub	sp, #40	@ 0x28
 800c926:	4698      	mov	r8, r3
 800c928:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 800c92c:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 800c930:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 800c934:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 800c938:	2300      	movs	r3, #0
 800c93a:	2d0b      	cmp	r5, #11
 800c93c:	4606      	mov	r6, r0
 800c93e:	9304      	str	r3, [sp, #16]
 800c940:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 800c944:	d138      	bne.n	800c9b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 800c946:	2380      	movs	r3, #128	@ 0x80
 800c948:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800c94c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800c950:	f8ad 3018 	strh.w	r3, [sp, #24]
 800c954:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800c958:	f8ad 301a 	strh.w	r3, [sp, #26]
 800c95c:	f88d 0020 	strb.w	r0, [sp, #32]
 800c960:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800c964:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c968:	4630      	mov	r0, r6
 800c96a:	9203      	str	r2, [sp, #12]
 800c96c:	f7fd fcd6 	bl	800a31c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c970:	2c0b      	cmp	r4, #11
 800c972:	bf98      	it	ls
 800c974:	4b1b      	ldrls	r3, [pc, #108]	@ (800c9e4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800c976:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800c97a:	bf98      	it	ls
 800c97c:	5d19      	ldrbls	r1, [r3, r4]
 800c97e:	f8ad 701e 	strh.w	r7, [sp, #30]
 800c982:	bf88      	it	hi
 800c984:	2100      	movhi	r1, #0
 800c986:	fb02 8307 	mla	r3, r2, r7, r8
 800c98a:	10c9      	asrs	r1, r1, #3
 800c98c:	fb01 0003 	mla	r0, r1, r3, r0
 800c990:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 800c994:	9005      	str	r0, [sp, #20]
 800c996:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800c99a:	6870      	ldr	r0, [r6, #4]
 800c99c:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800c9a6:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800c9aa:	6803      	ldr	r3, [r0, #0]
 800c9ac:	a901      	add	r1, sp, #4
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	4798      	blx	r3
 800c9b2:	b00a      	add	sp, #40	@ 0x28
 800c9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9b8:	2d02      	cmp	r5, #2
 800c9ba:	d109      	bne.n	800c9d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 800c9bc:	28ff      	cmp	r0, #255	@ 0xff
 800c9be:	d105      	bne.n	800c9cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 800c9c0:	f1bc 0f00 	cmp.w	ip, #0
 800c9c4:	bf14      	ite	ne
 800c9c6:	2340      	movne	r3, #64	@ 0x40
 800c9c8:	2320      	moveq	r3, #32
 800c9ca:	e7bd      	b.n	800c948 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800c9cc:	2340      	movs	r3, #64	@ 0x40
 800c9ce:	e7bb      	b.n	800c948 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800c9d0:	28ff      	cmp	r0, #255	@ 0xff
 800c9d2:	d105      	bne.n	800c9e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 800c9d4:	f1bc 0f00 	cmp.w	ip, #0
 800c9d8:	bf14      	ite	ne
 800c9da:	2304      	movne	r3, #4
 800c9dc:	2301      	moveq	r3, #1
 800c9de:	e7b3      	b.n	800c948 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800c9e0:	2304      	movs	r3, #4
 800c9e2:	e7b1      	b.n	800c948 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800c9e4:	08015920 	.word	0x08015920

0800c9e8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800c9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ec:	b08b      	sub	sp, #44	@ 0x2c
 800c9ee:	461d      	mov	r5, r3
 800c9f0:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 800c9f4:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800c9f8:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 800c9fc:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800ca00:	bf14      	ite	ne
 800ca02:	2308      	movne	r3, #8
 800ca04:	2302      	moveq	r3, #2
 800ca06:	2400      	movs	r4, #0
 800ca08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca0c:	4688      	mov	r8, r1
 800ca0e:	4693      	mov	fp, r2
 800ca10:	9404      	str	r4, [sp, #16]
 800ca12:	4607      	mov	r7, r0
 800ca14:	f7fd fc82 	bl	800a31c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ca18:	2e0b      	cmp	r6, #11
 800ca1a:	bf98      	it	ls
 800ca1c:	4b15      	ldrls	r3, [pc, #84]	@ (800ca74 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800ca1e:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 800ca22:	bf98      	it	ls
 800ca24:	5d9c      	ldrbls	r4, [r3, r6]
 800ca26:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800ca2a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ca2e:	fb05 b50a 	mla	r5, r5, sl, fp
 800ca32:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800ca36:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ca3a:	10e4      	asrs	r4, r4, #3
 800ca3c:	fb04 0405 	mla	r4, r4, r5, r0
 800ca40:	2300      	movs	r3, #0
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	9405      	str	r4, [sp, #20]
 800ca46:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ca4a:	f8ad a01e 	strh.w	sl, [sp, #30]
 800ca4e:	f8cd 8010 	str.w	r8, [sp, #16]
 800ca52:	f88d 9020 	strb.w	r9, [sp, #32]
 800ca56:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 800ca5a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800ca5e:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 800ca62:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 800ca66:	6803      	ldr	r3, [r0, #0]
 800ca68:	a901      	add	r1, sp, #4
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	4798      	blx	r3
 800ca6e:	b00b      	add	sp, #44	@ 0x2c
 800ca70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca74:	08015920 	.word	0x08015920

0800ca78 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800ca78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca7c:	461e      	mov	r6, r3
 800ca7e:	4b0a      	ldr	r3, [pc, #40]	@ (800caa8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800ca80:	460f      	mov	r7, r1
 800ca82:	881d      	ldrh	r5, [r3, #0]
 800ca84:	4690      	mov	r8, r2
 800ca86:	f7ff fd35 	bl	800c4f4 <_ZN8touchgfx3HAL3lcdEv>
 800ca8a:	6803      	ldr	r3, [r0, #0]
 800ca8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca8e:	4798      	blx	r3
 800ca90:	280b      	cmp	r0, #11
 800ca92:	bf9a      	itte	ls
 800ca94:	4b05      	ldrls	r3, [pc, #20]	@ (800caac <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800ca96:	5c1c      	ldrbls	r4, [r3, r0]
 800ca98:	2400      	movhi	r4, #0
 800ca9a:	fb08 7005 	mla	r0, r8, r5, r7
 800ca9e:	10e4      	asrs	r4, r4, #3
 800caa0:	fb04 6000 	mla	r0, r4, r0, r6
 800caa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caa8:	2000434c 	.word	0x2000434c
 800caac:	08015920 	.word	0x08015920

0800cab0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800cab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cab2:	b08b      	sub	sp, #44	@ 0x2c
 800cab4:	461f      	mov	r7, r3
 800cab6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800caba:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800cabe:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800cac2:	f8ad 3018 	strh.w	r3, [sp, #24]
 800cac6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800caca:	f8ad 301a 	strh.w	r3, [sp, #26]
 800cace:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800cad2:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cad6:	2500      	movs	r5, #0
 800cad8:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800cadc:	f88d 3020 	strb.w	r3, [sp, #32]
 800cae0:	4604      	mov	r4, r0
 800cae2:	4616      	mov	r6, r2
 800cae4:	9504      	str	r5, [sp, #16]
 800cae6:	f7fd fc19 	bl	800a31c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800caea:	463a      	mov	r2, r7
 800caec:	4631      	mov	r1, r6
 800caee:	4603      	mov	r3, r0
 800caf0:	4620      	mov	r0, r4
 800caf2:	f7ff ffc1 	bl	800ca78 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800caf6:	4b0e      	ldr	r3, [pc, #56]	@ (800cb30 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800caf8:	9005      	str	r0, [sp, #20]
 800cafa:	881b      	ldrh	r3, [r3, #0]
 800cafc:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cb00:	f7ff fcf8 	bl	800c4f4 <_ZN8touchgfx3HAL3lcdEv>
 800cb04:	6803      	ldr	r3, [r0, #0]
 800cb06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb08:	4798      	blx	r3
 800cb0a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cb0c:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 800cb10:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800cb14:	9304      	str	r3, [sp, #16]
 800cb16:	6860      	ldr	r0, [r4, #4]
 800cb18:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800cb1c:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800cb20:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 800cb24:	6803      	ldr	r3, [r0, #0]
 800cb26:	a901      	add	r1, sp, #4
 800cb28:	685b      	ldr	r3, [r3, #4]
 800cb2a:	4798      	blx	r3
 800cb2c:	b00b      	add	sp, #44	@ 0x2c
 800cb2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb30:	2000434c 	.word	0x2000434c

0800cb34 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800cb34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb36:	b08d      	sub	sp, #52	@ 0x34
 800cb38:	466b      	mov	r3, sp
 800cb3a:	e883 0006 	stmia.w	r3, {r1, r2}
 800cb3e:	2300      	movs	r3, #0
 800cb40:	9306      	str	r3, [sp, #24]
 800cb42:	6803      	ldr	r3, [r0, #0]
 800cb44:	f8bd 6000 	ldrh.w	r6, [sp]
 800cb48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb4a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800cb4e:	2501      	movs	r5, #1
 800cb50:	9503      	str	r5, [sp, #12]
 800cb52:	4604      	mov	r4, r0
 800cb54:	4798      	blx	r3
 800cb56:	463a      	mov	r2, r7
 800cb58:	4631      	mov	r1, r6
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	f7ff ff8b 	bl	800ca78 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800cb62:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800cb64:	9307      	str	r3, [sp, #28]
 800cb66:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800cb6a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800cb6e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800cb72:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800cb76:	4b0f      	ldr	r3, [pc, #60]	@ (800cbb4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800cb78:	9004      	str	r0, [sp, #16]
 800cb7a:	881b      	ldrh	r3, [r3, #0]
 800cb7c:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800cb80:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800cb84:	f7ff fcb6 	bl	800c4f4 <_ZN8touchgfx3HAL3lcdEv>
 800cb88:	6803      	ldr	r3, [r0, #0]
 800cb8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb8c:	4798      	blx	r3
 800cb8e:	23ff      	movs	r3, #255	@ 0xff
 800cb90:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800cb94:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800cb98:	6860      	ldr	r0, [r4, #4]
 800cb9a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800cb9e:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800cba2:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800cba6:	6803      	ldr	r3, [r0, #0]
 800cba8:	a903      	add	r1, sp, #12
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	4798      	blx	r3
 800cbae:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800cbb0:	b00d      	add	sp, #52	@ 0x34
 800cbb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbb4:	2000434c 	.word	0x2000434c

0800cbb8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800cbb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbbc:	b08c      	sub	sp, #48	@ 0x30
 800cbbe:	461e      	mov	r6, r3
 800cbc0:	466d      	mov	r5, sp
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	e885 0006 	stmia.w	r5, {r1, r2}
 800cbc8:	9306      	str	r3, [sp, #24]
 800cbca:	6803      	ldr	r3, [r0, #0]
 800cbcc:	f8bd 7000 	ldrh.w	r7, [sp]
 800cbd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbd2:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800cbd6:	2501      	movs	r5, #1
 800cbd8:	9503      	str	r5, [sp, #12]
 800cbda:	4604      	mov	r4, r0
 800cbdc:	4798      	blx	r3
 800cbde:	4642      	mov	r2, r8
 800cbe0:	4639      	mov	r1, r7
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	4620      	mov	r0, r4
 800cbe6:	f7ff ff47 	bl	800ca78 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800cbea:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800cbee:	f8ad 3020 	strh.w	r3, [sp, #32]
 800cbf2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800cbf6:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800cbfa:	4b11      	ldr	r3, [pc, #68]	@ (800cc40 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800cbfc:	9004      	str	r0, [sp, #16]
 800cbfe:	881b      	ldrh	r3, [r3, #0]
 800cc00:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800cc04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cc06:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800cc0a:	9607      	str	r6, [sp, #28]
 800cc0c:	f7ff fc72 	bl	800c4f4 <_ZN8touchgfx3HAL3lcdEv>
 800cc10:	6803      	ldr	r3, [r0, #0]
 800cc12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc14:	4798      	blx	r3
 800cc16:	23ff      	movs	r3, #255	@ 0xff
 800cc18:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800cc1c:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800cc20:	6860      	ldr	r0, [r4, #4]
 800cc22:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800cc26:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800cc2a:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800cc2e:	6803      	ldr	r3, [r0, #0]
 800cc30:	a903      	add	r1, sp, #12
 800cc32:	685b      	ldr	r3, [r3, #4]
 800cc34:	4798      	blx	r3
 800cc36:	4630      	mov	r0, r6
 800cc38:	b00c      	add	sp, #48	@ 0x30
 800cc3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc3e:	bf00      	nop
 800cc40:	2000434c 	.word	0x2000434c

0800cc44 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800cc44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc46:	b085      	sub	sp, #20
 800cc48:	ac02      	add	r4, sp, #8
 800cc4a:	e884 0006 	stmia.w	r4, {r1, r2}
 800cc4e:	4605      	mov	r5, r0
 800cc50:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800cc54:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800cc58:	f7fd fb60 	bl	800a31c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800cc5c:	463a      	mov	r2, r7
 800cc5e:	4603      	mov	r3, r0
 800cc60:	4631      	mov	r1, r6
 800cc62:	4628      	mov	r0, r5
 800cc64:	f7ff ff08 	bl	800ca78 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800cc68:	4a05      	ldr	r2, [pc, #20]	@ (800cc80 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800cc6a:	682b      	ldr	r3, [r5, #0]
 800cc6c:	8812      	ldrh	r2, [r2, #0]
 800cc6e:	9200      	str	r2, [sp, #0]
 800cc70:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 800cc72:	e894 0006 	ldmia.w	r4, {r1, r2}
 800cc76:	4603      	mov	r3, r0
 800cc78:	4628      	mov	r0, r5
 800cc7a:	47b0      	blx	r6
 800cc7c:	b005      	add	sp, #20
 800cc7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc80:	2000434c 	.word	0x2000434c

0800cc84 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800cc84:	b570      	push	{r4, r5, r6, lr}
 800cc86:	f890 306a 	ldrb.w	r3, [r0, #106]	@ 0x6a
 800cc8a:	4604      	mov	r4, r0
 800cc8c:	b19b      	cbz	r3, 800ccb6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800cc8e:	2002      	movs	r0, #2
 800cc90:	f7fd f9f6 	bl	800a080 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800cc94:	2300      	movs	r3, #0
 800cc96:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
 800cc9a:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
 800cc9e:	6823      	ldr	r3, [r4, #0]
 800cca0:	4620      	mov	r0, r4
 800cca2:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 800cca6:	f7fd fb39 	bl	800a31c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ccaa:	462b      	mov	r3, r5
 800ccac:	4601      	mov	r1, r0
 800ccae:	4620      	mov	r0, r4
 800ccb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ccb4:	4718      	bx	r3
 800ccb6:	bd70      	pop	{r4, r5, r6, pc}

0800ccb8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800ccb8:	b538      	push	{r3, r4, r5, lr}
 800ccba:	f890 3078 	ldrb.w	r3, [r0, #120]	@ 0x78
 800ccbe:	428b      	cmp	r3, r1
 800ccc0:	4604      	mov	r4, r0
 800ccc2:	460d      	mov	r5, r1
 800ccc4:	d006      	beq.n	800ccd4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800ccc6:	6803      	ldr	r3, [r0, #0]
 800ccc8:	b929      	cbnz	r1, 800ccd6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800ccca:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800ccce:	4798      	blx	r3
 800ccd0:	f884 5078 	strb.w	r5, [r4, #120]	@ 0x78
 800ccd4:	bd38      	pop	{r3, r4, r5, pc}
 800ccd6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800ccda:	e7f8      	b.n	800ccce <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800ccdc <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800ccdc:	b510      	push	{r4, lr}
 800ccde:	4b0d      	ldr	r3, [pc, #52]	@ (800cd14 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	4604      	mov	r4, r0
 800cce4:	b95b      	cbnz	r3, 800ccfe <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800cce6:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 800ccea:	2b02      	cmp	r3, #2
 800ccec:	d007      	beq.n	800ccfe <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ccee:	6840      	ldr	r0, [r0, #4]
 800ccf0:	f000 f90e 	bl	800cf10 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800ccf4:	b118      	cbz	r0, 800ccfe <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ccf6:	6862      	ldr	r2, [r4, #4]
 800ccf8:	7a53      	ldrb	r3, [r2, #9]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d0fc      	beq.n	800ccf8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800ccfe:	f7fd fcc1 	bl	800a684 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800cd02:	4620      	mov	r0, r4
 800cd04:	2100      	movs	r1, #0
 800cd06:	f7ff ffd7 	bl	800ccb8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800cd0a:	4620      	mov	r0, r4
 800cd0c:	f7fd fb06 	bl	800a31c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800cd10:	bd10      	pop	{r4, pc}
 800cd12:	bf00      	nop
 800cd14:	20004350 	.word	0x20004350

0800cd18 <_ZN8touchgfx13DMA_Interface5flushEv>:
 800cd18:	6803      	ldr	r3, [r0, #0]
 800cd1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd1c:	4718      	bx	r3

0800cd1e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800cd1e:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800cd22:	1a13      	subs	r3, r2, r0
 800cd24:	4258      	negs	r0, r3
 800cd26:	4158      	adcs	r0, r3
 800cd28:	4770      	bx	lr

0800cd2a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800cd2a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800cd2e:	1a9b      	subs	r3, r3, r2
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	bfdc      	itt	le
 800cd34:	6882      	ldrle	r2, [r0, #8]
 800cd36:	189b      	addle	r3, r3, r2
 800cd38:	2b01      	cmp	r3, #1
 800cd3a:	bfcc      	ite	gt
 800cd3c:	2000      	movgt	r0, #0
 800cd3e:	2001      	movle	r0, #1
 800cd40:	4770      	bx	lr

0800cd42 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800cd42:	6902      	ldr	r2, [r0, #16]
 800cd44:	6843      	ldr	r3, [r0, #4]
 800cd46:	2024      	movs	r0, #36	@ 0x24
 800cd48:	fb00 3002 	mla	r0, r0, r2, r3
 800cd4c:	4770      	bx	lr

0800cd4e <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800cd4e:	6803      	ldr	r3, [r0, #0]
 800cd50:	691b      	ldr	r3, [r3, #16]
 800cd52:	4718      	bx	r3

0800cd54 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800cd54:	b570      	push	{r4, r5, r6, lr}
 800cd56:	2301      	movs	r3, #1
 800cd58:	7203      	strb	r3, [r0, #8]
 800cd5a:	4604      	mov	r4, r0
 800cd5c:	6840      	ldr	r0, [r0, #4]
 800cd5e:	6803      	ldr	r3, [r0, #0]
 800cd60:	699b      	ldr	r3, [r3, #24]
 800cd62:	4798      	blx	r3
 800cd64:	6803      	ldr	r3, [r0, #0]
 800cd66:	2b40      	cmp	r3, #64	@ 0x40
 800cd68:	4605      	mov	r5, r0
 800cd6a:	d00c      	beq.n	800cd86 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800cd6c:	d810      	bhi.n	800cd90 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800cd6e:	2b04      	cmp	r3, #4
 800cd70:	d01d      	beq.n	800cdae <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800cd72:	d804      	bhi.n	800cd7e <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	d006      	beq.n	800cd86 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800cd78:	2b02      	cmp	r3, #2
 800cd7a:	d02c      	beq.n	800cdd6 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800cd7c:	bd70      	pop	{r4, r5, r6, pc}
 800cd7e:	2b08      	cmp	r3, #8
 800cd80:	d01d      	beq.n	800cdbe <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800cd82:	2b20      	cmp	r3, #32
 800cd84:	d1fa      	bne.n	800cd7c <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800cd86:	6823      	ldr	r3, [r4, #0]
 800cd88:	4620      	mov	r0, r4
 800cd8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd8c:	4798      	blx	r3
 800cd8e:	e013      	b.n	800cdb8 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800cd90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd94:	d0f7      	beq.n	800cd86 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800cd96:	d804      	bhi.n	800cda2 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800cd98:	2b80      	cmp	r3, #128	@ 0x80
 800cd9a:	d0f4      	beq.n	800cd86 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800cd9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cda0:	e7f0      	b.n	800cd84 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800cda2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cda6:	d0ee      	beq.n	800cd86 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800cda8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cdac:	e7e5      	b.n	800cd7a <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800cdae:	6823      	ldr	r3, [r4, #0]
 800cdb0:	7f01      	ldrb	r1, [r0, #28]
 800cdb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	4798      	blx	r3
 800cdb8:	6823      	ldr	r3, [r4, #0]
 800cdba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdbc:	e006      	b.n	800cdcc <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800cdbe:	6823      	ldr	r3, [r4, #0]
 800cdc0:	7f01      	ldrb	r1, [r0, #28]
 800cdc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	4798      	blx	r3
 800cdc8:	6823      	ldr	r3, [r4, #0]
 800cdca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdcc:	4629      	mov	r1, r5
 800cdce:	4620      	mov	r0, r4
 800cdd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cdd4:	4718      	bx	r3
 800cdd6:	6823      	ldr	r3, [r4, #0]
 800cdd8:	4620      	mov	r0, r4
 800cdda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cddc:	4798      	blx	r3
 800cdde:	e7f3      	b.n	800cdc8 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800cde0 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800cde0:	4770      	bx	lr

0800cde2 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800cde2:	4770      	bx	lr

0800cde4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800cde4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800cde8:	1ad2      	subs	r2, r2, r3
 800cdea:	2a00      	cmp	r2, #0
 800cdec:	b510      	push	{r4, lr}
 800cdee:	bfdc      	itt	le
 800cdf0:	6884      	ldrle	r4, [r0, #8]
 800cdf2:	1912      	addle	r2, r2, r4
 800cdf4:	2a01      	cmp	r2, #1
 800cdf6:	dd16      	ble.n	800ce26 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800cdf8:	6842      	ldr	r2, [r0, #4]
 800cdfa:	2424      	movs	r4, #36	@ 0x24
 800cdfc:	fb04 2303 	mla	r3, r4, r3, r2
 800ce00:	f101 0220 	add.w	r2, r1, #32
 800ce04:	f851 4b04 	ldr.w	r4, [r1], #4
 800ce08:	f843 4b04 	str.w	r4, [r3], #4
 800ce0c:	4291      	cmp	r1, r2
 800ce0e:	d1f9      	bne.n	800ce04 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800ce10:	780a      	ldrb	r2, [r1, #0]
 800ce12:	701a      	strb	r2, [r3, #0]
 800ce14:	68c3      	ldr	r3, [r0, #12]
 800ce16:	6882      	ldr	r2, [r0, #8]
 800ce18:	f3bf 8f5b 	dmb	ish
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	bfd8      	it	le
 800ce22:	1a9b      	suble	r3, r3, r2
 800ce24:	60c3      	str	r3, [r0, #12]
 800ce26:	bd10      	pop	{r4, pc}

0800ce28 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800ce28:	6903      	ldr	r3, [r0, #16]
 800ce2a:	6882      	ldr	r2, [r0, #8]
 800ce2c:	f3bf 8f5b 	dmb	ish
 800ce30:	3301      	adds	r3, #1
 800ce32:	429a      	cmp	r2, r3
 800ce34:	bfd8      	it	le
 800ce36:	1a9b      	suble	r3, r3, r2
 800ce38:	6103      	str	r3, [r0, #16]
 800ce3a:	4770      	bx	lr

0800ce3c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800ce3c:	b570      	push	{r4, r5, r6, lr}
 800ce3e:	4604      	mov	r4, r0
 800ce40:	460e      	mov	r6, r1
 800ce42:	6860      	ldr	r0, [r4, #4]
 800ce44:	6803      	ldr	r3, [r0, #0]
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	4798      	blx	r3
 800ce4a:	2800      	cmp	r0, #0
 800ce4c:	d1f9      	bne.n	800ce42 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800ce4e:	4d0d      	ldr	r5, [pc, #52]	@ (800ce84 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800ce50:	6828      	ldr	r0, [r5, #0]
 800ce52:	6803      	ldr	r3, [r0, #0]
 800ce54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ce56:	4798      	blx	r3
 800ce58:	f7fd fc2e 	bl	800a6b8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800ce5c:	6828      	ldr	r0, [r5, #0]
 800ce5e:	2101      	movs	r1, #1
 800ce60:	f7ff ff2a 	bl	800ccb8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800ce64:	6860      	ldr	r0, [r4, #4]
 800ce66:	6803      	ldr	r3, [r0, #0]
 800ce68:	4631      	mov	r1, r6
 800ce6a:	689b      	ldr	r3, [r3, #8]
 800ce6c:	4798      	blx	r3
 800ce6e:	6823      	ldr	r3, [r4, #0]
 800ce70:	4620      	mov	r0, r4
 800ce72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce74:	4798      	blx	r3
 800ce76:	6828      	ldr	r0, [r5, #0]
 800ce78:	6803      	ldr	r3, [r0, #0]
 800ce7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ce7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ce80:	4718      	bx	r3
 800ce82:	bf00      	nop
 800ce84:	20004354 	.word	0x20004354

0800ce88 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800ce88:	b508      	push	{r3, lr}
 800ce8a:	f7fd fbfb 	bl	800a684 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800ce8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ce92:	f7fd bc05 	b.w	800a6a0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800ce96 <_ZN8touchgfx13DMA_Interface5startEv>:
 800ce96:	b510      	push	{r4, lr}
 800ce98:	4604      	mov	r4, r0
 800ce9a:	6840      	ldr	r0, [r0, #4]
 800ce9c:	6803      	ldr	r3, [r0, #0]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4798      	blx	r3
 800cea2:	b948      	cbnz	r0, 800ceb8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800cea4:	7a63      	ldrb	r3, [r4, #9]
 800cea6:	b13b      	cbz	r3, 800ceb8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800cea8:	7a23      	ldrb	r3, [r4, #8]
 800ceaa:	b92b      	cbnz	r3, 800ceb8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800ceac:	6823      	ldr	r3, [r4, #0]
 800ceae:	4620      	mov	r0, r4
 800ceb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ceb6:	4718      	bx	r3
 800ceb8:	bd10      	pop	{r4, pc}

0800ceba <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800ceba:	b570      	push	{r4, r5, r6, lr}
 800cebc:	4604      	mov	r4, r0
 800cebe:	6840      	ldr	r0, [r0, #4]
 800cec0:	6803      	ldr	r3, [r0, #0]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4798      	blx	r3
 800cec6:	4605      	mov	r5, r0
 800cec8:	b930      	cbnz	r0, 800ced8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800ceca:	7a23      	ldrb	r3, [r4, #8]
 800cecc:	b123      	cbz	r3, 800ced8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800cece:	6860      	ldr	r0, [r4, #4]
 800ced0:	6803      	ldr	r3, [r0, #0]
 800ced2:	695b      	ldr	r3, [r3, #20]
 800ced4:	4798      	blx	r3
 800ced6:	7225      	strb	r5, [r4, #8]
 800ced8:	6860      	ldr	r0, [r4, #4]
 800ceda:	6803      	ldr	r3, [r0, #0]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	4798      	blx	r3
 800cee0:	b928      	cbnz	r0, 800ceee <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800cee2:	6823      	ldr	r3, [r4, #0]
 800cee4:	4620      	mov	r0, r4
 800cee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ceec:	4718      	bx	r3
 800ceee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cef2:	f7fd bbed 	b.w	800a6d0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

0800cef8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800cef8:	b510      	push	{r4, lr}
 800cefa:	4c04      	ldr	r4, [pc, #16]	@ (800cf0c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800cefc:	6082      	str	r2, [r0, #8]
 800cefe:	2200      	movs	r2, #0
 800cf00:	e9c0 4100 	strd	r4, r1, [r0]
 800cf04:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800cf08:	bd10      	pop	{r4, pc}
 800cf0a:	bf00      	nop
 800cf0c:	08015a5c 	.word	0x08015a5c

0800cf10 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800cf10:	6840      	ldr	r0, [r0, #4]
 800cf12:	6803      	ldr	r3, [r0, #0]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	4718      	bx	r3

0800cf18 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 800cf18:	2000      	movs	r0, #0
 800cf1a:	4770      	bx	lr

0800cf1c <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 800cf1c:	4b07      	ldr	r3, [pc, #28]	@ (800cf3c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 800cf1e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800cf20:	881b      	ldrh	r3, [r3, #0]
 800cf22:	4293      	cmp	r3, r2
 800cf24:	bf81      	itttt	hi
 800cf26:	4b06      	ldrhi	r3, [pc, #24]	@ (800cf40 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 800cf28:	681b      	ldrhi	r3, [r3, #0]
 800cf2a:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 800cf2e:	7858      	ldrbhi	r0, [r3, #1]
 800cf30:	bf8c      	ite	hi
 800cf32:	f000 0003 	andhi.w	r0, r0, #3
 800cf36:	2000      	movls	r0, #0
 800cf38:	4770      	bx	lr
 800cf3a:	bf00      	nop
 800cf3c:	200043a8 	.word	0x200043a8
 800cf40:	200043a4 	.word	0x200043a4

0800cf44 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 800cf44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf48:	4b10      	ldr	r3, [pc, #64]	@ (800cf8c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 800cf4a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800cf4c:	881b      	ldrh	r3, [r3, #0]
 800cf4e:	428b      	cmp	r3, r1
 800cf50:	4604      	mov	r4, r0
 800cf52:	d918      	bls.n	800cf86 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 800cf54:	6803      	ldr	r3, [r0, #0]
 800cf56:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 800cf58:	4b0d      	ldr	r3, [pc, #52]	@ (800cf90 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 800cf5a:	6818      	ldr	r0, [r3, #0]
 800cf5c:	f7fc fdd4 	bl	8009b08 <_ZNK8touchgfx5Texts7getTextEt>
 800cf60:	6823      	ldr	r3, [r4, #0]
 800cf62:	4606      	mov	r6, r0
 800cf64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cf66:	4620      	mov	r0, r4
 800cf68:	4798      	blx	r3
 800cf6a:	6823      	ldr	r3, [r4, #0]
 800cf6c:	4607      	mov	r7, r0
 800cf6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf72:	4620      	mov	r0, r4
 800cf74:	4798      	blx	r3
 800cf76:	463a      	mov	r2, r7
 800cf78:	4603      	mov	r3, r0
 800cf7a:	4631      	mov	r1, r6
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	46ac      	mov	ip, r5
 800cf80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf84:	4760      	bx	ip
 800cf86:	2000      	movs	r0, #0
 800cf88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf8c:	200043a8 	.word	0x200043a8
 800cf90:	200043b0 	.word	0x200043b0

0800cf94 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800cf94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cf98:	4b17      	ldr	r3, [pc, #92]	@ (800cff8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 800cf9a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800cf9c:	881b      	ldrh	r3, [r3, #0]
 800cf9e:	428b      	cmp	r3, r1
 800cfa0:	4604      	mov	r4, r0
 800cfa2:	d926      	bls.n	800cff2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 800cfa4:	4b15      	ldr	r3, [pc, #84]	@ (800cffc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800cfac:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800cfb0:	4b13      	ldr	r3, [pc, #76]	@ (800d000 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800cfb2:	7855      	ldrb	r5, [r2, #1]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800cfba:	6833      	ldr	r3, [r6, #0]
 800cfbc:	69df      	ldr	r7, [r3, #28]
 800cfbe:	4b11      	ldr	r3, [pc, #68]	@ (800d004 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800cfc0:	6818      	ldr	r0, [r3, #0]
 800cfc2:	f7fc fda1 	bl	8009b08 <_ZNK8touchgfx5Texts7getTextEt>
 800cfc6:	6823      	ldr	r3, [r4, #0]
 800cfc8:	4680      	mov	r8, r0
 800cfca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cfcc:	4620      	mov	r0, r4
 800cfce:	4798      	blx	r3
 800cfd0:	6823      	ldr	r3, [r4, #0]
 800cfd2:	4681      	mov	r9, r0
 800cfd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfd8:	4620      	mov	r0, r4
 800cfda:	4798      	blx	r3
 800cfdc:	f3c5 0581 	ubfx	r5, r5, #2, #2
 800cfe0:	9000      	str	r0, [sp, #0]
 800cfe2:	464b      	mov	r3, r9
 800cfe4:	4642      	mov	r2, r8
 800cfe6:	4629      	mov	r1, r5
 800cfe8:	4630      	mov	r0, r6
 800cfea:	47b8      	blx	r7
 800cfec:	b003      	add	sp, #12
 800cfee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cff2:	2000      	movs	r0, #0
 800cff4:	e7fa      	b.n	800cfec <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 800cff6:	bf00      	nop
 800cff8:	200043a8 	.word	0x200043a8
 800cffc:	200043a4 	.word	0x200043a4
 800d000:	200043ac 	.word	0x200043ac
 800d004:	200043b0 	.word	0x200043b0

0800d008 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800d008:	b40e      	push	{r1, r2, r3}
 800d00a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d00e:	4b2f      	ldr	r3, [pc, #188]	@ (800d0cc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 800d010:	881a      	ldrh	r2, [r3, #0]
 800d012:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 800d014:	429a      	cmp	r2, r3
 800d016:	b09d      	sub	sp, #116	@ 0x74
 800d018:	4604      	mov	r4, r0
 800d01a:	d954      	bls.n	800d0c6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 800d01c:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 800d0d0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 800d020:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 800d0d4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 800d024:	aa26      	add	r2, sp, #152	@ 0x98
 800d026:	9202      	str	r2, [sp, #8]
 800d028:	f8d9 2000 	ldr.w	r2, [r9]
 800d02c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800d030:	f8d8 3000 	ldr.w	r3, [r8]
 800d034:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800d038:	682b      	ldr	r3, [r5, #0]
 800d03a:	4628      	mov	r0, r5
 800d03c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d03e:	4798      	blx	r3
 800d040:	b207      	sxth	r7, r0
 800d042:	4606      	mov	r6, r0
 800d044:	a803      	add	r0, sp, #12
 800d046:	f003 fd4b 	bl	8010ae0 <_ZN8touchgfx12TextProviderC1Ev>
 800d04a:	682b      	ldr	r3, [r5, #0]
 800d04c:	4628      	mov	r0, r5
 800d04e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d050:	4798      	blx	r3
 800d052:	682b      	ldr	r3, [r5, #0]
 800d054:	4682      	mov	sl, r0
 800d056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d058:	4628      	mov	r0, r5
 800d05a:	4798      	blx	r3
 800d05c:	4653      	mov	r3, sl
 800d05e:	9000      	str	r0, [sp, #0]
 800d060:	9a02      	ldr	r2, [sp, #8]
 800d062:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800d064:	a803      	add	r0, sp, #12
 800d066:	f003 fd96 	bl	8010b96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800d06a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800d06c:	f8d9 3000 	ldr.w	r3, [r9]
 800d070:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 800d074:	8925      	ldrh	r5, [r4, #8]
 800d076:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800d07a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 800d07e:	eba5 050c 	sub.w	r5, r5, ip
 800d082:	784a      	ldrb	r2, [r1, #1]
 800d084:	f8d8 3000 	ldr.w	r3, [r8]
 800d088:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 800d08c:	b22d      	sxth	r5, r5
 800d08e:	9500      	str	r5, [sp, #0]
 800d090:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d094:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800d098:	a803      	add	r0, sp, #12
 800d09a:	f001 fc23 	bl	800e8e4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800d09e:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 800d0a2:	18b9      	adds	r1, r7, r2
 800d0a4:	2900      	cmp	r1, #0
 800d0a6:	b203      	sxth	r3, r0
 800d0a8:	dd0b      	ble.n	800d0c2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 800d0aa:	3b01      	subs	r3, #1
 800d0ac:	fb13 f302 	smulbb	r3, r3, r2
 800d0b0:	fb16 3300 	smlabb	r3, r6, r0, r3
 800d0b4:	b21f      	sxth	r7, r3
 800d0b6:	4638      	mov	r0, r7
 800d0b8:	b01d      	add	sp, #116	@ 0x74
 800d0ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0be:	b003      	add	sp, #12
 800d0c0:	4770      	bx	lr
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	dcf7      	bgt.n	800d0b6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800d0c6:	2700      	movs	r7, #0
 800d0c8:	e7f5      	b.n	800d0b6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800d0ca:	bf00      	nop
 800d0cc:	200043a8 	.word	0x200043a8
 800d0d0:	200043a4 	.word	0x200043a4
 800d0d4:	200043ac 	.word	0x200043ac

0800d0d8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 800d0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0dc:	4bbc      	ldr	r3, [pc, #752]	@ (800d3d0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 800d0de:	460c      	mov	r4, r1
 800d0e0:	881b      	ldrh	r3, [r3, #0]
 800d0e2:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 800d0e4:	428b      	cmp	r3, r1
 800d0e6:	b0a9      	sub	sp, #164	@ 0xa4
 800d0e8:	4680      	mov	r8, r0
 800d0ea:	d809      	bhi.n	800d100 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	f04f 32ff 	mov.w	r2, #4294967295
 800d0f2:	e9c0 3200 	strd	r3, r2, [r0]
 800d0f6:	6083      	str	r3, [r0, #8]
 800d0f8:	4640      	mov	r0, r8
 800d0fa:	b029      	add	sp, #164	@ 0xa4
 800d0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d100:	4eb4      	ldr	r6, [pc, #720]	@ (800d3d4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 800d102:	6833      	ldr	r3, [r6, #0]
 800d104:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 800d108:	4bb3      	ldr	r3, [pc, #716]	@ (800d3d8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800d110:	4bb2      	ldr	r3, [pc, #712]	@ (800d3dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 800d112:	6818      	ldr	r0, [r3, #0]
 800d114:	f7fc fcf8 	bl	8009b08 <_ZNK8touchgfx5Texts7getTextEt>
 800d118:	682b      	ldr	r3, [r5, #0]
 800d11a:	4681      	mov	r9, r0
 800d11c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d11e:	4628      	mov	r0, r5
 800d120:	4798      	blx	r3
 800d122:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 800d124:	b203      	sxth	r3, r0
 800d126:	4407      	add	r7, r0
 800d128:	9304      	str	r3, [sp, #16]
 800d12a:	b2bb      	uxth	r3, r7
 800d12c:	9303      	str	r3, [sp, #12]
 800d12e:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 800d132:	4682      	mov	sl, r0
 800d134:	a80f      	add	r0, sp, #60	@ 0x3c
 800d136:	2b00      	cmp	r3, #0
 800d138:	f040 80a6 	bne.w	800d288 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1b0>
 800d13c:	f003 fcd0 	bl	8010ae0 <_ZN8touchgfx12TextProviderC1Ev>
 800d140:	682b      	ldr	r3, [r5, #0]
 800d142:	4628      	mov	r0, r5
 800d144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d146:	4798      	blx	r3
 800d148:	682b      	ldr	r3, [r5, #0]
 800d14a:	4606      	mov	r6, r0
 800d14c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d14e:	4628      	mov	r0, r5
 800d150:	4798      	blx	r3
 800d152:	6823      	ldr	r3, [r4, #0]
 800d154:	4607      	mov	r7, r0
 800d156:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d158:	4620      	mov	r0, r4
 800d15a:	4798      	blx	r3
 800d15c:	6823      	ldr	r3, [r4, #0]
 800d15e:	4683      	mov	fp, r0
 800d160:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d164:	4620      	mov	r0, r4
 800d166:	4798      	blx	r3
 800d168:	463b      	mov	r3, r7
 800d16a:	e9cd b000 	strd	fp, r0, [sp]
 800d16e:	4649      	mov	r1, r9
 800d170:	4632      	mov	r2, r6
 800d172:	a80f      	add	r0, sp, #60	@ 0x3c
 800d174:	f003 fd24 	bl	8010bc0 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800d178:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800d17c:	f8df b254 	ldr.w	fp, [pc, #596]	@ 800d3d4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 800d180:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800d184:	f04f 0600 	mov.w	r6, #0
 800d188:	bf0c      	ite	eq
 800d18a:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 800d18e:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 800d192:	4637      	mov	r7, r6
 800d194:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800d196:	f8db 3000 	ldr.w	r3, [fp]
 800d19a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800d19e:	4629      	mov	r1, r5
 800d1a0:	785b      	ldrb	r3, [r3, #1]
 800d1a2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d1a6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d1aa:	a80f      	add	r0, sp, #60	@ 0x3c
 800d1ac:	f001 f8b5 	bl	800e31a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800d1b0:	9b03      	ldr	r3, [sp, #12]
 800d1b2:	4286      	cmp	r6, r0
 800d1b4:	bfb8      	it	lt
 800d1b6:	4606      	movlt	r6, r0
 800d1b8:	3701      	adds	r7, #1
 800d1ba:	eba9 0903 	sub.w	r9, r9, r3
 800d1be:	a80f      	add	r0, sp, #60	@ 0x3c
 800d1c0:	b236      	sxth	r6, r6
 800d1c2:	b2bf      	uxth	r7, r7
 800d1c4:	fa0f f989 	sxth.w	r9, r9
 800d1c8:	f003 fcb1 	bl	8010b2e <_ZN8touchgfx12TextProvider11endOfStringEv>
 800d1cc:	b918      	cbnz	r0, 800d1d6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800d1ce:	7a2b      	ldrb	r3, [r5, #8]
 800d1d0:	444b      	add	r3, r9
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	dcde      	bgt.n	800d194 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xbc>
 800d1d6:	9b03      	ldr	r3, [sp, #12]
 800d1d8:	9a04      	ldr	r2, [sp, #16]
 800d1da:	f895 9009 	ldrb.w	r9, [r5, #9]
 800d1de:	fb13 f707 	smulbb	r7, r3, r7
 800d1e2:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800d1e4:	1aff      	subs	r7, r7, r3
 800d1e6:	b2bf      	uxth	r7, r7
 800d1e8:	b23b      	sxth	r3, r7
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	bfa8      	it	ge
 800d1ee:	4657      	movge	r7, sl
 800d1f0:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800d1f4:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800d1f8:	6823      	ldr	r3, [r4, #0]
 800d1fa:	bf08      	it	eq
 800d1fc:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 800d200:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d202:	bf18      	it	ne
 800d204:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 800d208:	4620      	mov	r0, r4
 800d20a:	4798      	blx	r3
 800d20c:	444f      	add	r7, r9
 800d20e:	fa1f f987 	uxth.w	r9, r7
 800d212:	2801      	cmp	r0, #1
 800d214:	fa0f f789 	sxth.w	r7, r9
 800d218:	b2b3      	uxth	r3, r6
 800d21a:	f000 80e1 	beq.w	800d3e0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 800d21e:	2802      	cmp	r0, #2
 800d220:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 800d224:	f000 80e2 	beq.w	800d3ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 800d228:	7aea      	ldrb	r2, [r5, #11]
 800d22a:	7b2d      	ldrb	r5, [r5, #12]
 800d22c:	b236      	sxth	r6, r6
 800d22e:	1ab6      	subs	r6, r6, r2
 800d230:	442a      	add	r2, r5
 800d232:	4413      	add	r3, r2
 800d234:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 800d238:	fa1f fa86 	uxth.w	sl, r6
 800d23c:	b29b      	uxth	r3, r3
 800d23e:	2a02      	cmp	r2, #2
 800d240:	fa0f fb8a 	sxth.w	fp, sl
 800d244:	b21e      	sxth	r6, r3
 800d246:	f000 80d5 	beq.w	800d3f4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 800d24a:	2a03      	cmp	r2, #3
 800d24c:	f000 80dd 	beq.w	800d40a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 800d250:	2a01      	cmp	r2, #1
 800d252:	f040 80e5 	bne.w	800d420 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 800d256:	8925      	ldrh	r5, [r4, #8]
 800d258:	4633      	mov	r3, r6
 800d25a:	eba5 0909 	sub.w	r9, r5, r9
 800d25e:	463e      	mov	r6, r7
 800d260:	465d      	mov	r5, fp
 800d262:	461f      	mov	r7, r3
 800d264:	fa0f fb89 	sxth.w	fp, r9
 800d268:	4b5c      	ldr	r3, [pc, #368]	@ (800d3dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 800d26a:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800d26c:	6818      	ldr	r0, [r3, #0]
 800d26e:	f7fc fc4b 	bl	8009b08 <_ZNK8touchgfx5Texts7getTextEt>
 800d272:	f8a8 b000 	strh.w	fp, [r8]
 800d276:	f8a8 5002 	strh.w	r5, [r8, #2]
 800d27a:	f8a8 6004 	strh.w	r6, [r8, #4]
 800d27e:	f8a8 7006 	strh.w	r7, [r8, #6]
 800d282:	f8c8 0008 	str.w	r0, [r8, #8]
 800d286:	e737      	b.n	800d0f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 800d288:	f003 fc2a 	bl	8010ae0 <_ZN8touchgfx12TextProviderC1Ev>
 800d28c:	682b      	ldr	r3, [r5, #0]
 800d28e:	4628      	mov	r0, r5
 800d290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d292:	4798      	blx	r3
 800d294:	682b      	ldr	r3, [r5, #0]
 800d296:	4607      	mov	r7, r0
 800d298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d29a:	4628      	mov	r0, r5
 800d29c:	4798      	blx	r3
 800d29e:	6823      	ldr	r3, [r4, #0]
 800d2a0:	4683      	mov	fp, r0
 800d2a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	4798      	blx	r3
 800d2a8:	6822      	ldr	r2, [r4, #0]
 800d2aa:	9005      	str	r0, [sp, #20]
 800d2ac:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	4790      	blx	r2
 800d2b4:	9b05      	ldr	r3, [sp, #20]
 800d2b6:	9001      	str	r0, [sp, #4]
 800d2b8:	463a      	mov	r2, r7
 800d2ba:	4649      	mov	r1, r9
 800d2bc:	9300      	str	r3, [sp, #0]
 800d2be:	a80f      	add	r0, sp, #60	@ 0x3c
 800d2c0:	465b      	mov	r3, fp
 800d2c2:	f003 fc7d 	bl	8010bc0 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800d2c6:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800d2ca:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 800d2ce:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800d2d0:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 800d2d4:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800d2d8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800d2dc:	bf0a      	itet	eq
 800d2de:	464a      	moveq	r2, r9
 800d2e0:	461a      	movne	r2, r3
 800d2e2:	4699      	moveq	r9, r3
 800d2e4:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 800d2e8:	1ad2      	subs	r2, r2, r3
 800d2ea:	6833      	ldr	r3, [r6, #0]
 800d2ec:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 800d2f0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800d2f4:	af0f      	add	r7, sp, #60	@ 0x3c
 800d2f6:	7859      	ldrb	r1, [r3, #1]
 800d2f8:	9707      	str	r7, [sp, #28]
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	f3c1 0181 	ubfx	r1, r1, #2, #2
 800d300:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d304:	f88d 1020 	strb.w	r1, [sp, #32]
 800d308:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800d30c:	9509      	str	r5, [sp, #36]	@ 0x24
 800d30e:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800d312:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 800d316:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 800d31a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800d31e:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 800d322:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800d326:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800d32a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800d32e:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 800d332:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800d336:	b350      	cbz	r0, 800d38e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800d338:	682b      	ldr	r3, [r5, #0]
 800d33a:	4628      	mov	r0, r5
 800d33c:	695b      	ldr	r3, [r3, #20]
 800d33e:	4798      	blx	r3
 800d340:	4607      	mov	r7, r0
 800d342:	b320      	cbz	r0, 800d38e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800d344:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d346:	6803      	ldr	r3, [r0, #0]
 800d348:	4639      	mov	r1, r7
 800d34a:	68db      	ldr	r3, [r3, #12]
 800d34c:	4798      	blx	r3
 800d34e:	4606      	mov	r6, r0
 800d350:	b1e8      	cbz	r0, 800d38e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800d352:	7b43      	ldrb	r3, [r0, #13]
 800d354:	7a82      	ldrb	r2, [r0, #10]
 800d356:	005b      	lsls	r3, r3, #1
 800d358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d35c:	4313      	orrs	r3, r2
 800d35e:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 800d362:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800d366:	2b06      	cmp	r3, #6
 800d368:	d111      	bne.n	800d38e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800d36a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d36c:	6803      	ldr	r3, [r0, #0]
 800d36e:	4632      	mov	r2, r6
 800d370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d372:	4639      	mov	r1, r7
 800d374:	4798      	blx	r3
 800d376:	7b73      	ldrb	r3, [r6, #13]
 800d378:	005b      	lsls	r3, r3, #1
 800d37a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800d37e:	7ab3      	ldrb	r3, [r6, #10]
 800d380:	4313      	orrs	r3, r2
 800d382:	4418      	add	r0, r3
 800d384:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800d388:	4418      	add	r0, r3
 800d38a:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 800d38e:	2600      	movs	r6, #0
 800d390:	4637      	mov	r7, r6
 800d392:	a806      	add	r0, sp, #24
 800d394:	f001 f9a2 	bl	800e6dc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800d398:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 800d39c:	9b03      	ldr	r3, [sp, #12]
 800d39e:	4286      	cmp	r6, r0
 800d3a0:	eba9 0903 	sub.w	r9, r9, r3
 800d3a4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800d3a8:	bfb8      	it	lt
 800d3aa:	4606      	movlt	r6, r0
 800d3ac:	3701      	adds	r7, #1
 800d3ae:	b236      	sxth	r6, r6
 800d3b0:	b2bf      	uxth	r7, r7
 800d3b2:	fa0f f989 	sxth.w	r9, r9
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	f43f af0d 	beq.w	800d1d6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800d3bc:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	f47f af08 	bne.w	800d1d6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800d3c6:	7a2b      	ldrb	r3, [r5, #8]
 800d3c8:	444b      	add	r3, r9
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	dce1      	bgt.n	800d392 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ba>
 800d3ce:	e702      	b.n	800d1d6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800d3d0:	200043a8 	.word	0x200043a8
 800d3d4:	200043a4 	.word	0x200043a4
 800d3d8:	200043ac 	.word	0x200043ac
 800d3dc:	200043b0 	.word	0x200043b0
 800d3e0:	ebaa 0606 	sub.w	r6, sl, r6
 800d3e4:	2002      	movs	r0, #2
 800d3e6:	fb96 f6f0 	sdiv	r6, r6, r0
 800d3ea:	e71d      	b.n	800d228 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 800d3ec:	441e      	add	r6, r3
 800d3ee:	ebaa 0606 	sub.w	r6, sl, r6
 800d3f2:	e719      	b.n	800d228 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 800d3f4:	8925      	ldrh	r5, [r4, #8]
 800d3f6:	1aed      	subs	r5, r5, r3
 800d3f8:	eba5 050a 	sub.w	r5, r5, sl
 800d3fc:	fa0f fb85 	sxth.w	fp, r5
 800d400:	8965      	ldrh	r5, [r4, #10]
 800d402:	eba5 0509 	sub.w	r5, r5, r9
 800d406:	b22d      	sxth	r5, r5
 800d408:	e72e      	b.n	800d268 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 800d40a:	8965      	ldrh	r5, [r4, #10]
 800d40c:	1aed      	subs	r5, r5, r3
 800d40e:	eba5 050a 	sub.w	r5, r5, sl
 800d412:	4633      	mov	r3, r6
 800d414:	b22d      	sxth	r5, r5
 800d416:	463e      	mov	r6, r7
 800d418:	f04f 0b00 	mov.w	fp, #0
 800d41c:	461f      	mov	r7, r3
 800d41e:	e723      	b.n	800d268 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 800d420:	2500      	movs	r5, #0
 800d422:	e721      	b.n	800d268 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>

0800d424 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 800d424:	b513      	push	{r0, r1, r4, lr}
 800d426:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 800d42a:	4604      	mov	r4, r0
 800d42c:	b1fb      	cbz	r3, 800d46e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800d42e:	4b16      	ldr	r3, [pc, #88]	@ (800d488 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 800d430:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800d432:	881b      	ldrh	r3, [r3, #0]
 800d434:	428b      	cmp	r3, r1
 800d436:	d91a      	bls.n	800d46e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800d438:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	dd16      	ble.n	800d46e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800d440:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800d444:	2b00      	cmp	r3, #0
 800d446:	dd12      	ble.n	800d46e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800d448:	4b10      	ldr	r3, [pc, #64]	@ (800d48c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 800d44a:	6818      	ldr	r0, [r3, #0]
 800d44c:	f7fc fb5c 	bl	8009b08 <_ZNK8touchgfx5Texts7getTextEt>
 800d450:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 800d454:	6822      	ldr	r2, [r4, #0]
 800d456:	2b00      	cmp	r3, #0
 800d458:	db06      	blt.n	800d468 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 800d45a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 800d45e:	2b00      	cmp	r3, #0
 800d460:	db02      	blt.n	800d468 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 800d462:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800d464:	4298      	cmp	r0, r3
 800d466:	d004      	beq.n	800d472 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 800d468:	6953      	ldr	r3, [r2, #20]
 800d46a:	4620      	mov	r0, r4
 800d46c:	4798      	blx	r3
 800d46e:	b002      	add	sp, #8
 800d470:	bd10      	pop	{r4, pc}
 800d472:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 800d476:	c903      	ldmia	r1, {r0, r1}
 800d478:	466b      	mov	r3, sp
 800d47a:	e883 0003 	stmia.w	r3, {r0, r1}
 800d47e:	6912      	ldr	r2, [r2, #16]
 800d480:	4619      	mov	r1, r3
 800d482:	4620      	mov	r0, r4
 800d484:	4790      	blx	r2
 800d486:	e7f2      	b.n	800d46e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800d488:	200043a8 	.word	0x200043a8
 800d48c:	200043b0 	.word	0x200043b0

0800d490 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 800d490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d494:	4b44      	ldr	r3, [pc, #272]	@ (800d5a8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 800d496:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800d498:	881b      	ldrh	r3, [r3, #0]
 800d49a:	4293      	cmp	r3, r2
 800d49c:	b08e      	sub	sp, #56	@ 0x38
 800d49e:	4604      	mov	r4, r0
 800d4a0:	d97e      	bls.n	800d5a0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800d4a2:	6808      	ldr	r0, [r1, #0]
 800d4a4:	4d41      	ldr	r5, [pc, #260]	@ (800d5ac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 800d4a6:	6849      	ldr	r1, [r1, #4]
 800d4a8:	ab05      	add	r3, sp, #20
 800d4aa:	c303      	stmia	r3!, {r0, r1}
 800d4ac:	4611      	mov	r1, r2
 800d4ae:	6828      	ldr	r0, [r5, #0]
 800d4b0:	f7fc fb2a 	bl	8009b08 <_ZNK8touchgfx5Texts7getTextEt>
 800d4b4:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	db11      	blt.n	800d4e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800d4bc:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	db0d      	blt.n	800d4e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800d4c4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800d4c6:	4298      	cmp	r0, r3
 800d4c8:	d10a      	bne.n	800d4e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800d4ca:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 800d4ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d4d2:	ab09      	add	r3, sp, #36	@ 0x24
 800d4d4:	e883 0003 	stmia.w	r3, {r0, r1}
 800d4d8:	4619      	mov	r1, r3
 800d4da:	a805      	add	r0, sp, #20
 800d4dc:	f7fe fd2c 	bl	800bf38 <_ZN8touchgfx4RectaNERKS0_>
 800d4e0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	dd5b      	ble.n	800d5a0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800d4e8:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	dd57      	ble.n	800d5a0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800d4f0:	4f2f      	ldr	r7, [pc, #188]	@ (800d5b0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 800d4f2:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800d4fa:	4b2e      	ldr	r3, [pc, #184]	@ (800d5b4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800d502:	2e00      	cmp	r6, #0
 800d504:	d04c      	beq.n	800d5a0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800d506:	6823      	ldr	r3, [r4, #0]
 800d508:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 800d50c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d50e:	4620      	mov	r0, r4
 800d510:	4798      	blx	r3
 800d512:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 800d51a:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 800d51e:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 800d522:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d524:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800d528:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 800d52c:	785b      	ldrb	r3, [r3, #1]
 800d52e:	9609      	str	r6, [sp, #36]	@ 0x24
 800d530:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d534:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d538:	4b1f      	ldr	r3, [pc, #124]	@ (800d5b8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 800d53a:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 800d544:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d546:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 800d54a:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 800d54e:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 800d552:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 800d556:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
 800d55a:	b10a      	cbz	r2, 800d560 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 800d55c:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800d55e:	b906      	cbnz	r6, 800d562 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 800d560:	689e      	ldr	r6, [r3, #8]
 800d562:	af07      	add	r7, sp, #28
 800d564:	4621      	mov	r1, r4
 800d566:	4638      	mov	r0, r7
 800d568:	f002 ff04 	bl	8010374 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d56c:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800d56e:	6828      	ldr	r0, [r5, #0]
 800d570:	f7fc faca 	bl	8009b08 <_ZNK8touchgfx5Texts7getTextEt>
 800d574:	6823      	ldr	r3, [r4, #0]
 800d576:	4605      	mov	r5, r0
 800d578:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d57a:	4620      	mov	r0, r4
 800d57c:	4798      	blx	r3
 800d57e:	6823      	ldr	r3, [r4, #0]
 800d580:	4680      	mov	r8, r0
 800d582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d586:	4620      	mov	r0, r4
 800d588:	4798      	blx	r3
 800d58a:	e9cd 8002 	strd	r8, r0, [sp, #8]
 800d58e:	ab09      	add	r3, sp, #36	@ 0x24
 800d590:	9300      	str	r3, [sp, #0]
 800d592:	9501      	str	r5, [sp, #4]
 800d594:	ab05      	add	r3, sp, #20
 800d596:	e897 0006 	ldmia.w	r7, {r1, r2}
 800d59a:	4630      	mov	r0, r6
 800d59c:	f7fc fa45 	bl	8009a2a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800d5a0:	b00e      	add	sp, #56	@ 0x38
 800d5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5a6:	bf00      	nop
 800d5a8:	200043a8 	.word	0x200043a8
 800d5ac:	200043b0 	.word	0x200043b0
 800d5b0:	200043a4 	.word	0x200043a4
 800d5b4:	200043ac 	.word	0x200043ac
 800d5b8:	20004354 	.word	0x20004354

0800d5bc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800d5bc:	b538      	push	{r3, r4, r5, lr}
 800d5be:	4b0e      	ldr	r3, [pc, #56]	@ (800d5f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 800d5c0:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800d5c2:	881b      	ldrh	r3, [r3, #0]
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	4604      	mov	r4, r0
 800d5c8:	d214      	bcs.n	800d5f4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 800d5ca:	6803      	ldr	r3, [r0, #0]
 800d5cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d5ce:	4798      	blx	r3
 800d5d0:	6823      	ldr	r3, [r4, #0]
 800d5d2:	4605      	mov	r5, r0
 800d5d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5d6:	4620      	mov	r0, r4
 800d5d8:	4798      	blx	r3
 800d5da:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800d5de:	b22d      	sxth	r5, r5
 800d5e0:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800d5e4:	4601      	mov	r1, r0
 800d5e6:	bf06      	itte	eq
 800d5e8:	4602      	moveq	r2, r0
 800d5ea:	4629      	moveq	r1, r5
 800d5ec:	462a      	movne	r2, r5
 800d5ee:	4620      	mov	r0, r4
 800d5f0:	f7fb fb43 	bl	8008c7a <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800d5f4:	bd38      	pop	{r3, r4, r5, pc}
 800d5f6:	bf00      	nop
 800d5f8:	200043a8 	.word	0x200043a8

0800d5fc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 800d5fc:	b530      	push	{r4, r5, lr}
 800d5fe:	888b      	ldrh	r3, [r1, #4]
 800d600:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800d602:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800d606:	b085      	sub	sp, #20
 800d608:	4604      	mov	r4, r0
 800d60a:	b923      	cbnz	r3, 800d616 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800d60c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800d610:	b90b      	cbnz	r3, 800d616 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800d612:	f7ff ffd3 	bl	800d5bc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800d616:	6823      	ldr	r3, [r4, #0]
 800d618:	466d      	mov	r5, sp
 800d61a:	4621      	mov	r1, r4
 800d61c:	4628      	mov	r0, r5
 800d61e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d622:	4798      	blx	r3
 800d624:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d628:	343c      	adds	r4, #60	@ 0x3c
 800d62a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d62e:	b005      	add	sp, #20
 800d630:	bd30      	pop	{r4, r5, pc}

0800d632 <_ZNK8touchgfx3Box12getSolidRectEv>:
 800d632:	2300      	movs	r3, #0
 800d634:	8083      	strh	r3, [r0, #4]
 800d636:	80c3      	strh	r3, [r0, #6]
 800d638:	8003      	strh	r3, [r0, #0]
 800d63a:	8043      	strh	r3, [r0, #2]
 800d63c:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 800d640:	2bff      	cmp	r3, #255	@ 0xff
 800d642:	bf01      	itttt	eq
 800d644:	890b      	ldrheq	r3, [r1, #8]
 800d646:	8083      	strheq	r3, [r0, #4]
 800d648:	894b      	ldrheq	r3, [r1, #10]
 800d64a:	80c3      	strheq	r3, [r0, #6]
 800d64c:	4770      	bx	lr
	...

0800d650 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800d650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d652:	4604      	mov	r4, r0
 800d654:	6808      	ldr	r0, [r1, #0]
 800d656:	6849      	ldr	r1, [r1, #4]
 800d658:	466b      	mov	r3, sp
 800d65a:	c303      	stmia	r3!, {r0, r1}
 800d65c:	6823      	ldr	r3, [r4, #0]
 800d65e:	4669      	mov	r1, sp
 800d660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d662:	4620      	mov	r0, r4
 800d664:	4798      	blx	r3
 800d666:	4b08      	ldr	r3, [pc, #32]	@ (800d688 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
 800d66e:	b10a      	cbz	r2, 800d674 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800d670:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800d672:	b900      	cbnz	r0, 800d676 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800d674:	6898      	ldr	r0, [r3, #8]
 800d676:	6803      	ldr	r3, [r0, #0]
 800d678:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800d67a:	6a1d      	ldr	r5, [r3, #32]
 800d67c:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 800d680:	4669      	mov	r1, sp
 800d682:	47a8      	blx	r5
 800d684:	b003      	add	sp, #12
 800d686:	bd30      	pop	{r4, r5, pc}
 800d688:	20004354 	.word	0x20004354

0800d68c <_ZNK8touchgfx3Box17invalidateContentEv>:
 800d68c:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 800d690:	b12a      	cbz	r2, 800d69e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800d692:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800d696:	b112      	cbz	r2, 800d69e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800d698:	6803      	ldr	r3, [r0, #0]
 800d69a:	695b      	ldr	r3, [r3, #20]
 800d69c:	4718      	bx	r3
 800d69e:	4770      	bx	lr

0800d6a0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 800d6a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6a4:	4b2f      	ldr	r3, [pc, #188]	@ (800d764 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 800d6a6:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800d6a8:	881b      	ldrh	r3, [r3, #0]
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	b08d      	sub	sp, #52	@ 0x34
 800d6ae:	4604      	mov	r4, r0
 800d6b0:	460f      	mov	r7, r1
 800d6b2:	d954      	bls.n	800d75e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800d6b4:	4b2c      	ldr	r3, [pc, #176]	@ (800d768 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 800d6b6:	6819      	ldr	r1, [r3, #0]
 800d6b8:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 800d6bc:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 800d6c0:	4a2a      	ldr	r2, [pc, #168]	@ (800d76c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 800d6c2:	6812      	ldr	r2, [r2, #0]
 800d6c4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800d6c8:	2900      	cmp	r1, #0
 800d6ca:	d048      	beq.n	800d75e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800d6cc:	785a      	ldrb	r2, [r3, #1]
 800d6ce:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 800d6d2:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800d6d6:	4b26      	ldr	r3, [pc, #152]	@ (800d770 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 800d6d8:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 800d6dc:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 800d6e0:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 800d6e4:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800d6e6:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 800d6ea:	9107      	str	r1, [sp, #28]
 800d6ec:	f3c2 0801 	ubfx	r8, r2, #0, #2
 800d6f0:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800d6f4:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 800d6f8:	681a      	ldr	r2, [r3, #0]
 800d6fa:	f88d 8020 	strb.w	r8, [sp, #32]
 800d6fe:	f892 3076 	ldrb.w	r3, [r2, #118]	@ 0x76
 800d702:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 800d706:	9609      	str	r6, [sp, #36]	@ 0x24
 800d708:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 800d70c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800d710:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 800d714:	b10b      	cbz	r3, 800d71a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 800d716:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 800d718:	b905      	cbnz	r5, 800d71c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 800d71a:	6895      	ldr	r5, [r2, #8]
 800d71c:	ae05      	add	r6, sp, #20
 800d71e:	4621      	mov	r1, r4
 800d720:	4630      	mov	r0, r6
 800d722:	f002 fe27 	bl	8010374 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d726:	4b13      	ldr	r3, [pc, #76]	@ (800d774 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 800d728:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800d72a:	6818      	ldr	r0, [r3, #0]
 800d72c:	f7fc f9ec 	bl	8009b08 <_ZNK8touchgfx5Texts7getTextEt>
 800d730:	6823      	ldr	r3, [r4, #0]
 800d732:	4680      	mov	r8, r0
 800d734:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d736:	4620      	mov	r0, r4
 800d738:	4798      	blx	r3
 800d73a:	6823      	ldr	r3, [r4, #0]
 800d73c:	4681      	mov	r9, r0
 800d73e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d742:	4620      	mov	r0, r4
 800d744:	4798      	blx	r3
 800d746:	e9cd 9002 	strd	r9, r0, [sp, #8]
 800d74a:	ab07      	add	r3, sp, #28
 800d74c:	9300      	str	r3, [sp, #0]
 800d74e:	f8cd 8004 	str.w	r8, [sp, #4]
 800d752:	463b      	mov	r3, r7
 800d754:	e896 0006 	ldmia.w	r6, {r1, r2}
 800d758:	4628      	mov	r0, r5
 800d75a:	f7fc f966 	bl	8009a2a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800d75e:	b00d      	add	sp, #52	@ 0x34
 800d760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d764:	200043a8 	.word	0x200043a8
 800d768:	200043a4 	.word	0x200043a4
 800d76c:	200043ac 	.word	0x200043ac
 800d770:	20004354 	.word	0x20004354
 800d774:	200043b0 	.word	0x200043b0

0800d778 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800d778:	b570      	push	{r4, r5, r6, lr}
 800d77a:	880b      	ldrh	r3, [r1, #0]
 800d77c:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800d77e:	4604      	mov	r4, r0
 800d780:	4608      	mov	r0, r1
 800d782:	460d      	mov	r5, r1
 800d784:	f004 fd3e 	bl	8012204 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d788:	4606      	mov	r6, r0
 800d78a:	4628      	mov	r0, r5
 800d78c:	f004 fd6e 	bl	801226c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d790:	6823      	ldr	r3, [r4, #0]
 800d792:	4605      	mov	r5, r0
 800d794:	4631      	mov	r1, r6
 800d796:	4620      	mov	r0, r4
 800d798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d79a:	4798      	blx	r3
 800d79c:	6823      	ldr	r3, [r4, #0]
 800d79e:	4629      	mov	r1, r5
 800d7a0:	4620      	mov	r0, r4
 800d7a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d7a8:	4718      	bx	r3

0800d7aa <_ZNK8touchgfx5Image12getSolidRectEv>:
 800d7aa:	b510      	push	{r4, lr}
 800d7ac:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 800d7b0:	2bff      	cmp	r3, #255	@ 0xff
 800d7b2:	4604      	mov	r4, r0
 800d7b4:	d006      	beq.n	800d7c4 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	8003      	strh	r3, [r0, #0]
 800d7ba:	8043      	strh	r3, [r0, #2]
 800d7bc:	8083      	strh	r3, [r0, #4]
 800d7be:	80c3      	strh	r3, [r0, #6]
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	bd10      	pop	{r4, pc}
 800d7c4:	3126      	adds	r1, #38	@ 0x26
 800d7c6:	f004 fd85 	bl	80122d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800d7ca:	e7f9      	b.n	800d7c0 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800d7cc <_ZNK8touchgfx5Image17invalidateContentEv>:
 800d7cc:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 800d7d0:	b12a      	cbz	r2, 800d7de <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800d7d2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800d7d6:	b112      	cbz	r2, 800d7de <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800d7d8:	6803      	ldr	r3, [r0, #0]
 800d7da:	695b      	ldr	r3, [r3, #20]
 800d7dc:	4718      	bx	r3
 800d7de:	4770      	bx	lr

0800d7e0 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800d7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7e4:	4604      	mov	r4, r0
 800d7e6:	b088      	sub	sp, #32
 800d7e8:	f854 3b26 	ldr.w	r3, [r4], #38
 800d7ec:	2500      	movs	r5, #0
 800d7ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7f0:	460f      	mov	r7, r1
 800d7f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d7f6:	a904      	add	r1, sp, #16
 800d7f8:	4606      	mov	r6, r0
 800d7fa:	4798      	blx	r3
 800d7fc:	4620      	mov	r0, r4
 800d7fe:	f004 fd01 	bl	8012204 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d802:	4680      	mov	r8, r0
 800d804:	4620      	mov	r0, r4
 800d806:	f004 fd31 	bl	801226c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d80a:	9506      	str	r5, [sp, #24]
 800d80c:	ad06      	add	r5, sp, #24
 800d80e:	f8ad 001e 	strh.w	r0, [sp, #30]
 800d812:	4639      	mov	r1, r7
 800d814:	4628      	mov	r0, r5
 800d816:	f8ad 801c 	strh.w	r8, [sp, #28]
 800d81a:	f7fe fb8d 	bl	800bf38 <_ZN8touchgfx4RectaNERKS0_>
 800d81e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800d822:	2b00      	cmp	r3, #0
 800d824:	dd19      	ble.n	800d85a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800d826:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	dd15      	ble.n	800d85a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800d82e:	4b0c      	ldr	r3, [pc, #48]	@ (800d860 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
 800d836:	b10a      	cbz	r2, 800d83c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800d838:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800d83a:	b900      	cbnz	r0, 800d83e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800d83c:	6898      	ldr	r0, [r3, #8]
 800d83e:	6801      	ldr	r1, [r0, #0]
 800d840:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800d844:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800d848:	2701      	movs	r7, #1
 800d84a:	9702      	str	r7, [sp, #8]
 800d84c:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 800d850:	e9cd 5600 	strd	r5, r6, [sp]
 800d854:	688d      	ldr	r5, [r1, #8]
 800d856:	4621      	mov	r1, r4
 800d858:	47a8      	blx	r5
 800d85a:	b008      	add	sp, #32
 800d85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d860:	20004354 	.word	0x20004354

0800d864 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800d864:	b510      	push	{r4, lr}
 800d866:	6803      	ldr	r3, [r0, #0]
 800d868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d86a:	460c      	mov	r4, r1
 800d86c:	4798      	blx	r3
 800d86e:	1b03      	subs	r3, r0, r4
 800d870:	4258      	negs	r0, r3
 800d872:	4158      	adcs	r0, r3
 800d874:	bd10      	pop	{r4, pc}
	...

0800d878 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800d878:	4b01      	ldr	r3, [pc, #4]	@ (800d880 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800d87a:	6019      	str	r1, [r3, #0]
 800d87c:	4770      	bx	lr
 800d87e:	bf00      	nop
 800d880:	2000435c 	.word	0x2000435c

0800d884 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800d884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d888:	4696      	mov	lr, r2
 800d88a:	4605      	mov	r5, r0
 800d88c:	4614      	mov	r4, r2
 800d88e:	460e      	mov	r6, r1
 800d890:	461f      	mov	r7, r3
 800d892:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d896:	b097      	sub	sp, #92	@ 0x5c
 800d898:	f10d 0c1c 	add.w	ip, sp, #28
 800d89c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d8a0:	f8de 3000 	ldr.w	r3, [lr]
 800d8a4:	f8cc 3000 	str.w	r3, [ip]
 800d8a8:	f104 0e14 	add.w	lr, r4, #20
 800d8ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d8b0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800d8b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d8b8:	f8de 3000 	ldr.w	r3, [lr]
 800d8bc:	f8cc 3000 	str.w	r3, [ip]
 800d8c0:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 800d8c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d8c8:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800d8cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d8d0:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 800d8d4:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 800d8d8:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 800d8dc:	f8de 3000 	ldr.w	r3, [lr]
 800d8e0:	f8cc 3000 	str.w	r3, [ip]
 800d8e4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d8e6:	682b      	ldr	r3, [r5, #0]
 800d8e8:	9201      	str	r2, [sp, #4]
 800d8ea:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800d8ee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d8f0:	9200      	str	r2, [sp, #0]
 800d8f2:	f8cd 8008 	str.w	r8, [sp, #8]
 800d8f6:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 800d8fa:	aa07      	add	r2, sp, #28
 800d8fc:	463b      	mov	r3, r7
 800d8fe:	4631      	mov	r1, r6
 800d900:	4628      	mov	r0, r5
 800d902:	47d8      	blx	fp
 800d904:	46a6      	mov	lr, r4
 800d906:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d90a:	f10d 0c1c 	add.w	ip, sp, #28
 800d90e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d912:	f8de 3000 	ldr.w	r3, [lr]
 800d916:	f8cc 3000 	str.w	r3, [ip]
 800d91a:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 800d91e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d922:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800d926:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d92a:	343c      	adds	r4, #60	@ 0x3c
 800d92c:	f8de 3000 	ldr.w	r3, [lr]
 800d930:	f8cc 3000 	str.w	r3, [ip]
 800d934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d936:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800d93a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d93e:	6823      	ldr	r3, [r4, #0]
 800d940:	f8cc 3000 	str.w	r3, [ip]
 800d944:	682b      	ldr	r3, [r5, #0]
 800d946:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800d94a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d94c:	9201      	str	r2, [sp, #4]
 800d94e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d950:	9200      	str	r2, [sp, #0]
 800d952:	f8cd 8008 	str.w	r8, [sp, #8]
 800d956:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 800d958:	aa07      	add	r2, sp, #28
 800d95a:	463b      	mov	r3, r7
 800d95c:	4631      	mov	r1, r6
 800d95e:	4628      	mov	r0, r5
 800d960:	47a0      	blx	r4
 800d962:	b017      	add	sp, #92	@ 0x5c
 800d964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d968 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800d968:	2000      	movs	r0, #0
 800d96a:	4770      	bx	lr

0800d96c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800d96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d970:	b08d      	sub	sp, #52	@ 0x34
 800d972:	4688      	mov	r8, r1
 800d974:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800d976:	f8d3 c000 	ldr.w	ip, [r3]
 800d97a:	680f      	ldr	r7, [r1, #0]
 800d97c:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 800d980:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 800d984:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 800d988:	edd3 6a07 	vldr	s13, [r3, #28]
 800d98c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800d98e:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 800d992:	f9b1 9000 	ldrsh.w	r9, [r1]
 800d996:	f9ba 1000 	ldrsh.w	r1, [sl]
 800d99a:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 800d99e:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 800d9a2:	eba7 070c 	sub.w	r7, r7, ip
 800d9a6:	42bc      	cmp	r4, r7
 800d9a8:	bfa8      	it	ge
 800d9aa:	463c      	movge	r4, r7
 800d9ac:	ee07 4a90 	vmov	s15, r4
 800d9b0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800d9b4:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 800d9b8:	ee25 4a04 	vmul.f32	s8, s10, s8
 800d9bc:	ee65 4a24 	vmul.f32	s9, s10, s9
 800d9c0:	ee25 5a27 	vmul.f32	s10, s10, s15
 800d9c4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d9c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d9cc:	eb09 0e0c 	add.w	lr, r9, ip
 800d9d0:	4571      	cmp	r1, lr
 800d9d2:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800d9d6:	ee32 1a05 	vadd.f32	s2, s4, s10
 800d9da:	ee36 0a84 	vadd.f32	s0, s13, s8
 800d9de:	ee61 1a87 	vmul.f32	s3, s3, s14
 800d9e2:	ee22 2a07 	vmul.f32	s4, s4, s14
 800d9e6:	f340 808d 	ble.w	800db04 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 800d9ea:	eba1 060e 	sub.w	r6, r1, lr
 800d9ee:	fb96 f5f4 	sdiv	r5, r6, r4
 800d9f2:	ee07 5a10 	vmov	s14, r5
 800d9f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d9fa:	2d00      	cmp	r5, #0
 800d9fc:	fb04 6615 	mls	r6, r4, r5, r6
 800da00:	eea7 0a04 	vfma.f32	s0, s14, s8
 800da04:	eee7 0a24 	vfma.f32	s1, s14, s9
 800da08:	eea7 1a05 	vfma.f32	s2, s14, s10
 800da0c:	dd13      	ble.n	800da36 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 800da0e:	ee70 6a44 	vsub.f32	s13, s0, s8
 800da12:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800da16:	eef5 6a40 	vcmp.f32	s13, #0.0
 800da1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da1e:	bf18      	it	ne
 800da20:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800da24:	ee31 2a45 	vsub.f32	s4, s2, s10
 800da28:	bf08      	it	eq
 800da2a:	eeb0 7a67 	vmoveq.f32	s14, s15
 800da2e:	ee61 1a87 	vmul.f32	s3, s3, s14
 800da32:	ee22 2a07 	vmul.f32	s4, s4, s14
 800da36:	fb05 f204 	mul.w	r2, r5, r4
 800da3a:	1abf      	subs	r7, r7, r2
 800da3c:	4494      	add	ip, r2
 800da3e:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800da42:	4411      	add	r1, r2
 800da44:	eb09 020c 	add.w	r2, r9, ip
 800da48:	443a      	add	r2, r7
 800da4a:	b209      	sxth	r1, r1
 800da4c:	428a      	cmp	r2, r1
 800da4e:	bfc4      	itt	gt
 800da50:	eba1 0209 	subgt.w	r2, r1, r9
 800da54:	eba2 070c 	subgt.w	r7, r2, ip
 800da58:	2f00      	cmp	r7, #0
 800da5a:	dd50      	ble.n	800dafe <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 800da5c:	fb97 f1f4 	sdiv	r1, r7, r4
 800da60:	fb04 7211 	mls	r2, r4, r1, r7
 800da64:	b90a      	cbnz	r2, 800da6a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 800da66:	3901      	subs	r1, #1
 800da68:	4622      	mov	r2, r4
 800da6a:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800da6e:	6840      	ldr	r0, [r0, #4]
 800da70:	900b      	str	r0, [sp, #44]	@ 0x2c
 800da72:	f8d0 a000 	ldr.w	sl, [r0]
 800da76:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800da78:	9008      	str	r0, [sp, #32]
 800da7a:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 800da7e:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800da80:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800da84:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800da88:	695b      	ldr	r3, [r3, #20]
 800da8a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800da8c:	445b      	add	r3, fp
 800da8e:	eef0 6a42 	vmov.f32	s13, s4
 800da92:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800da96:	ee21 3a23 	vmul.f32	s6, s2, s7
 800da9a:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800da9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800daa2:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800daa6:	9307      	str	r3, [sp, #28]
 800daa8:	ee17 7a90 	vmov	r7, s15
 800daac:	ee73 7a42 	vsub.f32	s15, s6, s4
 800dab0:	eeb0 7a61 	vmov.f32	s14, s3
 800dab4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800dab8:	ee16 3a90 	vmov	r3, s13
 800dabc:	fb97 f7f4 	sdiv	r7, r7, r4
 800dac0:	ee17 ca90 	vmov	ip, s15
 800dac4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800dac8:	fb9c fcf4 	sdiv	ip, ip, r4
 800dacc:	fb0c 3306 	mla	r3, ip, r6, r3
 800dad0:	9302      	str	r3, [sp, #8]
 800dad2:	ee17 3a10 	vmov	r3, s14
 800dad6:	44b6      	add	lr, r6
 800dad8:	fb04 e505 	mla	r5, r4, r5, lr
 800dadc:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800dae0:	fb07 3706 	mla	r7, r7, r6, r3
 800dae4:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800dae8:	e9cd 4700 	strd	r4, r7, [sp]
 800daec:	2900      	cmp	r1, #0
 800daee:	bfcc      	ite	gt
 800daf0:	46a1      	movgt	r9, r4
 800daf2:	4691      	movle	r9, r2
 800daf4:	eba9 0306 	sub.w	r3, r9, r6
 800daf8:	f8da 4008 	ldr.w	r4, [sl, #8]
 800dafc:	47a0      	blx	r4
 800dafe:	b00d      	add	sp, #52	@ 0x34
 800db00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db04:	2500      	movs	r5, #0
 800db06:	462e      	mov	r6, r5
 800db08:	e799      	b.n	800da3e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

0800db0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800db0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db10:	b0db      	sub	sp, #364	@ 0x16c
 800db12:	461d      	mov	r5, r3
 800db14:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 800db18:	930a      	str	r3, [sp, #40]	@ 0x28
 800db1a:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 800db1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db20:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 800db24:	9310      	str	r3, [sp, #64]	@ 0x40
 800db26:	6803      	ldr	r3, [r0, #0]
 800db28:	910f      	str	r1, [sp, #60]	@ 0x3c
 800db2a:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 800db2c:	9009      	str	r0, [sp, #36]	@ 0x24
 800db2e:	4614      	mov	r4, r2
 800db30:	4629      	mov	r1, r5
 800db32:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800db36:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 800db3a:	47b8      	blx	r7
 800db3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db3e:	6058      	str	r0, [r3, #4]
 800db40:	2800      	cmp	r0, #0
 800db42:	f000 83a1 	beq.w	800e288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800db46:	682b      	ldr	r3, [r5, #0]
 800db48:	9314      	str	r3, [sp, #80]	@ 0x50
 800db4a:	686b      	ldr	r3, [r5, #4]
 800db4c:	9315      	str	r3, [sp, #84]	@ 0x54
 800db4e:	4bc4      	ldr	r3, [pc, #784]	@ (800de60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800db50:	ed94 7a02 	vldr	s14, [r4, #8]
 800db54:	7819      	ldrb	r1, [r3, #0]
 800db56:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800db5a:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 800db5e:	2900      	cmp	r1, #0
 800db60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db64:	bf16      	itet	ne
 800db66:	4619      	movne	r1, r3
 800db68:	4611      	moveq	r1, r2
 800db6a:	4613      	movne	r3, r2
 800db6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db70:	9116      	str	r1, [sp, #88]	@ 0x58
 800db72:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 800db76:	f240 8387 	bls.w	800e288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800db7a:	ed94 7a07 	vldr	s14, [r4, #28]
 800db7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db86:	f240 837f 	bls.w	800e288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800db8a:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 800db8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db96:	f240 8377 	bls.w	800e288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800db9a:	6822      	ldr	r2, [r4, #0]
 800db9c:	4bb1      	ldr	r3, [pc, #708]	@ (800de64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800db9e:	429a      	cmp	r2, r3
 800dba0:	f2c0 8372 	blt.w	800e288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800dba4:	49b0      	ldr	r1, [pc, #704]	@ (800de68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800dba6:	6963      	ldr	r3, [r4, #20]
 800dba8:	428a      	cmp	r2, r1
 800dbaa:	f300 836d 	bgt.w	800e288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800dbae:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800dbb2:	48ae      	ldr	r0, [pc, #696]	@ (800de6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800dbb4:	33ff      	adds	r3, #255	@ 0xff
 800dbb6:	4283      	cmp	r3, r0
 800dbb8:	f200 8366 	bhi.w	800e288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800dbbc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800dbbe:	4dac      	ldr	r5, [pc, #688]	@ (800de70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800dbc0:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800dbc4:	33ff      	adds	r3, #255	@ 0xff
 800dbc6:	42ab      	cmp	r3, r5
 800dbc8:	f200 835e 	bhi.w	800e288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800dbcc:	6862      	ldr	r2, [r4, #4]
 800dbce:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 800dbd2:	33ff      	adds	r3, #255	@ 0xff
 800dbd4:	4283      	cmp	r3, r0
 800dbd6:	f200 8357 	bhi.w	800e288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800dbda:	69a1      	ldr	r1, [r4, #24]
 800dbdc:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 800dbe0:	33ff      	adds	r3, #255	@ 0xff
 800dbe2:	4283      	cmp	r3, r0
 800dbe4:	f200 8350 	bhi.w	800e288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800dbe8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800dbea:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 800dbee:	30ff      	adds	r0, #255	@ 0xff
 800dbf0:	42a8      	cmp	r0, r5
 800dbf2:	f200 8349 	bhi.w	800e288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800dbf6:	428a      	cmp	r2, r1
 800dbf8:	f280 8110 	bge.w	800de1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800dbfc:	429a      	cmp	r2, r3
 800dbfe:	f300 8119 	bgt.w	800de34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800dc02:	4299      	cmp	r1, r3
 800dc04:	f280 811d 	bge.w	800de42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800dc08:	2502      	movs	r5, #2
 800dc0a:	2701      	movs	r7, #1
 800dc0c:	46a9      	mov	r9, r5
 800dc0e:	46b8      	mov	r8, r7
 800dc10:	f04f 0a00 	mov.w	sl, #0
 800dc14:	4621      	mov	r1, r4
 800dc16:	a849      	add	r0, sp, #292	@ 0x124
 800dc18:	f003 fcaa 	bl	8011570 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800dc1c:	4622      	mov	r2, r4
 800dc1e:	4653      	mov	r3, sl
 800dc20:	a949      	add	r1, sp, #292	@ 0x124
 800dc22:	f8cd 9000 	str.w	r9, [sp]
 800dc26:	a819      	add	r0, sp, #100	@ 0x64
 800dc28:	f003 fdd2 	bl	80117d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800dc2c:	4622      	mov	r2, r4
 800dc2e:	4653      	mov	r3, sl
 800dc30:	a949      	add	r1, sp, #292	@ 0x124
 800dc32:	f8cd 8000 	str.w	r8, [sp]
 800dc36:	a829      	add	r0, sp, #164	@ 0xa4
 800dc38:	f003 fdca 	bl	80117d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800dc3c:	4643      	mov	r3, r8
 800dc3e:	4622      	mov	r2, r4
 800dc40:	a949      	add	r1, sp, #292	@ 0x124
 800dc42:	f8cd 9000 	str.w	r9, [sp]
 800dc46:	a839      	add	r0, sp, #228	@ 0xe4
 800dc48:	f003 fdc2 	bl	80117d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800dc4c:	42af      	cmp	r7, r5
 800dc4e:	bfb5      	itete	lt
 800dc50:	2300      	movlt	r3, #0
 800dc52:	2301      	movge	r3, #1
 800dc54:	930e      	strlt	r3, [sp, #56]	@ 0x38
 800dc56:	930e      	strge	r3, [sp, #56]	@ 0x38
 800dc58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dc5e:	af12      	add	r7, sp, #72	@ 0x48
 800dc60:	bfb9      	ittee	lt
 800dc62:	ad29      	addlt	r5, sp, #164	@ 0xa4
 800dc64:	ac19      	addlt	r4, sp, #100	@ 0x64
 800dc66:	ad19      	addge	r5, sp, #100	@ 0x64
 800dc68:	ac29      	addge	r4, sp, #164	@ 0xa4
 800dc6a:	e887 0003 	stmia.w	r7, {r0, r1}
 800dc6e:	b928      	cbnz	r0, 800dc7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800dc70:	4b80      	ldr	r3, [pc, #512]	@ (800de74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800dc72:	6818      	ldr	r0, [r3, #0]
 800dc74:	6803      	ldr	r3, [r0, #0]
 800dc76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc78:	4798      	blx	r3
 800dc7a:	6038      	str	r0, [r7, #0]
 800dc7c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800dc7e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800dc82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dc86:	930c      	str	r3, [sp, #48]	@ 0x30
 800dc88:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800dc8a:	6963      	ldr	r3, [r4, #20]
 800dc8c:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 800dc8e:	440b      	add	r3, r1
 800dc90:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800dc94:	4408      	add	r0, r1
 800dc96:	b200      	sxth	r0, r0
 800dc98:	4283      	cmp	r3, r0
 800dc9a:	900d      	str	r0, [sp, #52]	@ 0x34
 800dc9c:	f280 80dd 	bge.w	800de5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800dca0:	428b      	cmp	r3, r1
 800dca2:	da08      	bge.n	800dcb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800dca4:	2a00      	cmp	r2, #0
 800dca6:	dd06      	ble.n	800dcb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800dca8:	1acb      	subs	r3, r1, r3
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	f2c0 80e4 	blt.w	800de78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	f300 80e2 	bgt.w	800de7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800dcb6:	6967      	ldr	r7, [r4, #20]
 800dcb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dcba:	443b      	add	r3, r7
 800dcbc:	461f      	mov	r7, r3
 800dcbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dcc0:	1bdf      	subs	r7, r3, r7
 800dcc2:	4297      	cmp	r7, r2
 800dcc4:	bfa8      	it	ge
 800dcc6:	4617      	movge	r7, r2
 800dcc8:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 800dccc:	2f00      	cmp	r7, #0
 800dcce:	f340 8166 	ble.w	800df9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800dcd2:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800dcd4:	6829      	ldr	r1, [r5, #0]
 800dcd6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800dcda:	f9bb 3000 	ldrsh.w	r3, [fp]
 800dcde:	6820      	ldr	r0, [r4, #0]
 800dce0:	4411      	add	r1, r2
 800dce2:	4299      	cmp	r1, r3
 800dce4:	dd1a      	ble.n	800dd1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800dce6:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800dcea:	440b      	add	r3, r1
 800dcec:	4402      	add	r2, r0
 800dcee:	b21b      	sxth	r3, r3
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	dc13      	bgt.n	800dd1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800dcf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcf6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	9206      	str	r2, [sp, #24]
 800dcfc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dcfe:	9205      	str	r2, [sp, #20]
 800dd00:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dd02:	9500      	str	r5, [sp, #0]
 800dd04:	e9cd b203 	strd	fp, r2, [sp, #12]
 800dd08:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800dd0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dd0c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800dd10:	a912      	add	r1, sp, #72	@ 0x48
 800dd12:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 800dd16:	aa49      	add	r2, sp, #292	@ 0x124
 800dd18:	4623      	mov	r3, r4
 800dd1a:	47c8      	blx	r9
 800dd1c:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dd20:	441a      	add	r2, r3
 800dd22:	6963      	ldr	r3, [r4, #20]
 800dd24:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 800dd28:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800dd2c:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 800dd30:	68a1      	ldr	r1, [r4, #8]
 800dd32:	ed94 6a08 	vldr	s12, [r4, #32]
 800dd36:	6022      	str	r2, [r4, #0]
 800dd38:	3301      	adds	r3, #1
 800dd3a:	6163      	str	r3, [r4, #20]
 800dd3c:	69a3      	ldr	r3, [r4, #24]
 800dd3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dd42:	3b01      	subs	r3, #1
 800dd44:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 800dd48:	61a3      	str	r3, [r4, #24]
 800dd4a:	6923      	ldr	r3, [r4, #16]
 800dd4c:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800dd50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd54:	edd4 6a07 	vldr	s13, [r4, #28]
 800dd58:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800dd5c:	440b      	add	r3, r1
 800dd5e:	68e1      	ldr	r1, [r4, #12]
 800dd60:	6123      	str	r3, [r4, #16]
 800dd62:	ee76 6a86 	vadd.f32	s13, s13, s12
 800dd66:	428b      	cmp	r3, r1
 800dd68:	edc4 6a07 	vstr	s13, [r4, #28]
 800dd6c:	db15      	blt.n	800dd9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800dd6e:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 800dd72:	ee76 6a26 	vadd.f32	s13, s12, s13
 800dd76:	3201      	adds	r2, #1
 800dd78:	edc4 6a07 	vstr	s13, [r4, #28]
 800dd7c:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 800dd80:	6022      	str	r2, [r4, #0]
 800dd82:	ee36 7a87 	vadd.f32	s14, s13, s14
 800dd86:	1a5b      	subs	r3, r3, r1
 800dd88:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800dd8c:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 800dd90:	6123      	str	r3, [r4, #16]
 800dd92:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dd96:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800dd9a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dd9e:	441a      	add	r2, r3
 800dda0:	696b      	ldr	r3, [r5, #20]
 800dda2:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 800dda6:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 800ddaa:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 800ddae:	68a9      	ldr	r1, [r5, #8]
 800ddb0:	ed95 6a08 	vldr	s12, [r5, #32]
 800ddb4:	602a      	str	r2, [r5, #0]
 800ddb6:	3301      	adds	r3, #1
 800ddb8:	616b      	str	r3, [r5, #20]
 800ddba:	69ab      	ldr	r3, [r5, #24]
 800ddbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ddc0:	3b01      	subs	r3, #1
 800ddc2:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 800ddc6:	61ab      	str	r3, [r5, #24]
 800ddc8:	692b      	ldr	r3, [r5, #16]
 800ddca:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800ddce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ddd2:	edd5 6a07 	vldr	s13, [r5, #28]
 800ddd6:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800ddda:	440b      	add	r3, r1
 800dddc:	68e9      	ldr	r1, [r5, #12]
 800ddde:	612b      	str	r3, [r5, #16]
 800dde0:	ee76 6a86 	vadd.f32	s13, s13, s12
 800dde4:	428b      	cmp	r3, r1
 800dde6:	edc5 6a07 	vstr	s13, [r5, #28]
 800ddea:	db15      	blt.n	800de18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800ddec:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800ddf0:	ee76 6a26 	vadd.f32	s13, s12, s13
 800ddf4:	3201      	adds	r2, #1
 800ddf6:	edc5 6a07 	vstr	s13, [r5, #28]
 800ddfa:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 800ddfe:	602a      	str	r2, [r5, #0]
 800de00:	ee36 7a87 	vadd.f32	s14, s13, s14
 800de04:	1a5b      	subs	r3, r3, r1
 800de06:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800de0a:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 800de0e:	612b      	str	r3, [r5, #16]
 800de10:	ee77 7a27 	vadd.f32	s15, s14, s15
 800de14:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800de18:	3f01      	subs	r7, #1
 800de1a:	e757      	b.n	800dccc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800de1c:	4299      	cmp	r1, r3
 800de1e:	dc13      	bgt.n	800de48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800de20:	429a      	cmp	r2, r3
 800de22:	da14      	bge.n	800de4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800de24:	2502      	movs	r5, #2
 800de26:	2703      	movs	r7, #3
 800de28:	46a9      	mov	r9, r5
 800de2a:	f04f 0800 	mov.w	r8, #0
 800de2e:	f04f 0a01 	mov.w	sl, #1
 800de32:	e6ef      	b.n	800dc14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800de34:	2501      	movs	r5, #1
 800de36:	2700      	movs	r7, #0
 800de38:	46a9      	mov	r9, r5
 800de3a:	46b8      	mov	r8, r7
 800de3c:	f04f 0a02 	mov.w	sl, #2
 800de40:	e6e8      	b.n	800dc14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800de42:	2501      	movs	r5, #1
 800de44:	2702      	movs	r7, #2
 800de46:	e6e1      	b.n	800dc0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800de48:	2500      	movs	r5, #0
 800de4a:	2701      	movs	r7, #1
 800de4c:	e7f4      	b.n	800de38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800de4e:	2702      	movs	r7, #2
 800de50:	2503      	movs	r5, #3
 800de52:	f04f 0900 	mov.w	r9, #0
 800de56:	46b8      	mov	r8, r7
 800de58:	e7e9      	b.n	800de2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800de5a:	4613      	mov	r3, r2
 800de5c:	e728      	b.n	800dcb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800de5e:	bf00      	nop
 800de60:	2000434a 	.word	0x2000434a
 800de64:	fffd8f01 	.word	0xfffd8f01
 800de68:	00027100 	.word	0x00027100
 800de6c:	0004e1ff 	.word	0x0004e1ff
 800de70:	0004e1fe 	.word	0x0004e1fe
 800de74:	20004354 	.word	0x20004354
 800de78:	4613      	mov	r3, r2
 800de7a:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800de7c:	9111      	str	r1, [sp, #68]	@ 0x44
 800de7e:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 800de82:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 800de86:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 800de88:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 800de8c:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 800de90:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 800de94:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 800de98:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 800de9c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800dea0:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 800dea4:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 800dea8:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 800deac:	469e      	mov	lr, r3
 800deae:	469c      	mov	ip, r3
 800deb0:	f04f 0900 	mov.w	r9, #0
 800deb4:	f1bc 0f00 	cmp.w	ip, #0
 800deb8:	d147      	bne.n	800df4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800deba:	eb03 0c07 	add.w	ip, r3, r7
 800debe:	1ad7      	subs	r7, r2, r3
 800dec0:	f1b9 0f00 	cmp.w	r9, #0
 800dec4:	d009      	beq.n	800deda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800dec6:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 800deca:	9029      	str	r0, [sp, #164]	@ 0xa4
 800decc:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 800ded0:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 800ded4:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 800ded8:	912d      	str	r1, [sp, #180]	@ 0xb4
 800deda:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800dedc:	9111      	str	r1, [sp, #68]	@ 0x44
 800dede:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800dee2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800dee6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 800deea:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800deee:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800def2:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800def6:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 800defa:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800defe:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800df02:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800df06:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 800df0a:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800df0e:	f04f 0800 	mov.w	r8, #0
 800df12:	f1be 0f00 	cmp.w	lr, #0
 800df16:	d031      	beq.n	800df7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800df18:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800df1a:	4431      	add	r1, r6
 800df1c:	4549      	cmp	r1, r9
 800df1e:	4450      	add	r0, sl
 800df20:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800df24:	ee37 7a04 	vadd.f32	s14, s14, s8
 800df28:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800df2c:	db08      	blt.n	800df40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800df2e:	ee77 7a85 	vadd.f32	s15, s15, s10
 800df32:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800df36:	ee37 7a06 	vadd.f32	s14, s14, s12
 800df3a:	3001      	adds	r0, #1
 800df3c:	eba1 0109 	sub.w	r1, r1, r9
 800df40:	f10e 3eff 	add.w	lr, lr, #4294967295
 800df44:	f04f 0801 	mov.w	r8, #1
 800df48:	e7e3      	b.n	800df12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800df4a:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800df4c:	4431      	add	r1, r6
 800df4e:	4541      	cmp	r1, r8
 800df50:	4450      	add	r0, sl
 800df52:	ee37 7a24 	vadd.f32	s14, s14, s9
 800df56:	ee77 7a84 	vadd.f32	s15, s15, s8
 800df5a:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800df5e:	db08      	blt.n	800df72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800df60:	ee76 6a85 	vadd.f32	s13, s13, s10
 800df64:	ee37 7a25 	vadd.f32	s14, s14, s11
 800df68:	ee77 7a86 	vadd.f32	s15, s15, s12
 800df6c:	3001      	adds	r0, #1
 800df6e:	eba1 0108 	sub.w	r1, r1, r8
 800df72:	f10c 3cff 	add.w	ip, ip, #4294967295
 800df76:	f04f 0901 	mov.w	r9, #1
 800df7a:	e79b      	b.n	800deb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800df7c:	449c      	add	ip, r3
 800df7e:	1aff      	subs	r7, r7, r3
 800df80:	f1b8 0f00 	cmp.w	r8, #0
 800df84:	d009      	beq.n	800df9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800df86:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 800df8a:	9019      	str	r0, [sp, #100]	@ 0x64
 800df8c:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 800df90:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 800df94:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 800df98:	911d      	str	r1, [sp, #116]	@ 0x74
 800df9a:	1ad2      	subs	r2, r2, r3
 800df9c:	e68b      	b.n	800dcb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800df9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dfa0:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	f000 80d1 	beq.w	800e14a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800dfa8:	ad19      	add	r5, sp, #100	@ 0x64
 800dfaa:	ac39      	add	r4, sp, #228	@ 0xe4
 800dfac:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800dfae:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800dfb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dfb6:	930c      	str	r3, [sp, #48]	@ 0x30
 800dfb8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800dfba:	6963      	ldr	r3, [r4, #20]
 800dfbc:	440b      	add	r3, r1
 800dfbe:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800dfc2:	4408      	add	r0, r1
 800dfc4:	b200      	sxth	r0, r0
 800dfc6:	4283      	cmp	r3, r0
 800dfc8:	900d      	str	r0, [sp, #52]	@ 0x34
 800dfca:	f280 80c1 	bge.w	800e150 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800dfce:	428b      	cmp	r3, r1
 800dfd0:	da08      	bge.n	800dfe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800dfd2:	2a00      	cmp	r2, #0
 800dfd4:	dd06      	ble.n	800dfe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800dfd6:	1acb      	subs	r3, r1, r3
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	f2c0 80bb 	blt.w	800e154 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	f300 80b9 	bgt.w	800e156 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800dfe4:	6967      	ldr	r7, [r4, #20]
 800dfe6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dfe8:	443b      	add	r3, r7
 800dfea:	461f      	mov	r7, r3
 800dfec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dfee:	1bdf      	subs	r7, r3, r7
 800dff0:	4297      	cmp	r7, r2
 800dff2:	bfa8      	it	ge
 800dff4:	4617      	movge	r7, r2
 800dff6:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 800dffa:	2f00      	cmp	r7, #0
 800dffc:	f340 813c 	ble.w	800e278 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800e000:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800e002:	6829      	ldr	r1, [r5, #0]
 800e004:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e008:	f9bb 3000 	ldrsh.w	r3, [fp]
 800e00c:	6820      	ldr	r0, [r4, #0]
 800e00e:	4411      	add	r1, r2
 800e010:	4299      	cmp	r1, r3
 800e012:	dd1a      	ble.n	800e04a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800e014:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800e018:	440b      	add	r3, r1
 800e01a:	4402      	add	r2, r0
 800e01c:	b21b      	sxth	r3, r3
 800e01e:	429a      	cmp	r2, r3
 800e020:	dc13      	bgt.n	800e04a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800e022:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e024:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	9206      	str	r2, [sp, #24]
 800e02a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e02c:	9205      	str	r2, [sp, #20]
 800e02e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e030:	9500      	str	r5, [sp, #0]
 800e032:	e9cd b203 	strd	fp, r2, [sp, #12]
 800e036:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800e038:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e03a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800e03e:	a912      	add	r1, sp, #72	@ 0x48
 800e040:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 800e044:	aa49      	add	r2, sp, #292	@ 0x124
 800e046:	4623      	mov	r3, r4
 800e048:	47c8      	blx	r9
 800e04a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e04e:	441a      	add	r2, r3
 800e050:	6963      	ldr	r3, [r4, #20]
 800e052:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 800e056:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800e05a:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 800e05e:	68a1      	ldr	r1, [r4, #8]
 800e060:	ed94 6a08 	vldr	s12, [r4, #32]
 800e064:	6022      	str	r2, [r4, #0]
 800e066:	3301      	adds	r3, #1
 800e068:	6163      	str	r3, [r4, #20]
 800e06a:	69a3      	ldr	r3, [r4, #24]
 800e06c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e070:	3b01      	subs	r3, #1
 800e072:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 800e076:	61a3      	str	r3, [r4, #24]
 800e078:	6923      	ldr	r3, [r4, #16]
 800e07a:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800e07e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e082:	edd4 6a07 	vldr	s13, [r4, #28]
 800e086:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800e08a:	440b      	add	r3, r1
 800e08c:	68e1      	ldr	r1, [r4, #12]
 800e08e:	6123      	str	r3, [r4, #16]
 800e090:	ee76 6a86 	vadd.f32	s13, s13, s12
 800e094:	428b      	cmp	r3, r1
 800e096:	edc4 6a07 	vstr	s13, [r4, #28]
 800e09a:	db15      	blt.n	800e0c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800e09c:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 800e0a0:	ee76 6a26 	vadd.f32	s13, s12, s13
 800e0a4:	3201      	adds	r2, #1
 800e0a6:	edc4 6a07 	vstr	s13, [r4, #28]
 800e0aa:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 800e0ae:	6022      	str	r2, [r4, #0]
 800e0b0:	ee36 7a87 	vadd.f32	s14, s13, s14
 800e0b4:	1a5b      	subs	r3, r3, r1
 800e0b6:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800e0ba:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 800e0be:	6123      	str	r3, [r4, #16]
 800e0c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e0c4:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800e0c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e0cc:	441a      	add	r2, r3
 800e0ce:	696b      	ldr	r3, [r5, #20]
 800e0d0:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 800e0d4:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 800e0d8:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 800e0dc:	68a9      	ldr	r1, [r5, #8]
 800e0de:	ed95 6a08 	vldr	s12, [r5, #32]
 800e0e2:	602a      	str	r2, [r5, #0]
 800e0e4:	3301      	adds	r3, #1
 800e0e6:	616b      	str	r3, [r5, #20]
 800e0e8:	69ab      	ldr	r3, [r5, #24]
 800e0ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e0ee:	3b01      	subs	r3, #1
 800e0f0:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 800e0f4:	61ab      	str	r3, [r5, #24]
 800e0f6:	692b      	ldr	r3, [r5, #16]
 800e0f8:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800e0fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e100:	edd5 6a07 	vldr	s13, [r5, #28]
 800e104:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800e108:	440b      	add	r3, r1
 800e10a:	68e9      	ldr	r1, [r5, #12]
 800e10c:	612b      	str	r3, [r5, #16]
 800e10e:	ee76 6a86 	vadd.f32	s13, s13, s12
 800e112:	428b      	cmp	r3, r1
 800e114:	edc5 6a07 	vstr	s13, [r5, #28]
 800e118:	db15      	blt.n	800e146 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800e11a:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800e11e:	ee76 6a26 	vadd.f32	s13, s12, s13
 800e122:	3201      	adds	r2, #1
 800e124:	edc5 6a07 	vstr	s13, [r5, #28]
 800e128:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 800e12c:	602a      	str	r2, [r5, #0]
 800e12e:	ee36 7a87 	vadd.f32	s14, s13, s14
 800e132:	1a5b      	subs	r3, r3, r1
 800e134:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800e138:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 800e13c:	612b      	str	r3, [r5, #16]
 800e13e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e142:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800e146:	3f01      	subs	r7, #1
 800e148:	e757      	b.n	800dffa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800e14a:	ad39      	add	r5, sp, #228	@ 0xe4
 800e14c:	ac19      	add	r4, sp, #100	@ 0x64
 800e14e:	e72d      	b.n	800dfac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800e150:	4613      	mov	r3, r2
 800e152:	e744      	b.n	800dfde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800e154:	4613      	mov	r3, r2
 800e156:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 800e15a:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 800e15c:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 800e160:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 800e164:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 800e168:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 800e16c:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 800e170:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 800e174:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 800e178:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 800e17a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 800e17e:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 800e182:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 800e186:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 800e18a:	960e      	str	r6, [sp, #56]	@ 0x38
 800e18c:	469e      	mov	lr, r3
 800e18e:	461f      	mov	r7, r3
 800e190:	f04f 0900 	mov.w	r9, #0
 800e194:	2f00      	cmp	r7, #0
 800e196:	d146      	bne.n	800e226 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800e198:	449c      	add	ip, r3
 800e19a:	1ad7      	subs	r7, r2, r3
 800e19c:	f1b9 0f00 	cmp.w	r9, #0
 800e1a0:	d009      	beq.n	800e1b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800e1a2:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 800e1a6:	9039      	str	r0, [sp, #228]	@ 0xe4
 800e1a8:	913d      	str	r1, [sp, #244]	@ 0xf4
 800e1aa:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 800e1ae:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 800e1b2:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 800e1b6:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800e1b8:	910e      	str	r1, [sp, #56]	@ 0x38
 800e1ba:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800e1be:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800e1c2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 800e1c6:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800e1ca:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800e1ce:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800e1d2:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 800e1d6:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800e1da:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800e1de:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800e1e2:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 800e1e6:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800e1ea:	f04f 0800 	mov.w	r8, #0
 800e1ee:	f1be 0f00 	cmp.w	lr, #0
 800e1f2:	d030      	beq.n	800e256 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800e1f4:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800e1f6:	4431      	add	r1, r6
 800e1f8:	4549      	cmp	r1, r9
 800e1fa:	4450      	add	r0, sl
 800e1fc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800e200:	ee37 7a04 	vadd.f32	s14, s14, s8
 800e204:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800e208:	db08      	blt.n	800e21c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800e20a:	ee77 7a85 	vadd.f32	s15, s15, s10
 800e20e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800e212:	ee37 7a06 	vadd.f32	s14, s14, s12
 800e216:	3001      	adds	r0, #1
 800e218:	eba1 0109 	sub.w	r1, r1, r9
 800e21c:	f10e 3eff 	add.w	lr, lr, #4294967295
 800e220:	f04f 0801 	mov.w	r8, #1
 800e224:	e7e3      	b.n	800e1ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800e226:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800e228:	4431      	add	r1, r6
 800e22a:	4541      	cmp	r1, r8
 800e22c:	4450      	add	r0, sl
 800e22e:	ee37 7a24 	vadd.f32	s14, s14, s9
 800e232:	ee77 7a84 	vadd.f32	s15, s15, s8
 800e236:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800e23a:	db08      	blt.n	800e24e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800e23c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800e240:	ee37 7a25 	vadd.f32	s14, s14, s11
 800e244:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e248:	3001      	adds	r0, #1
 800e24a:	eba1 0108 	sub.w	r1, r1, r8
 800e24e:	3f01      	subs	r7, #1
 800e250:	f04f 0901 	mov.w	r9, #1
 800e254:	e79e      	b.n	800e194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800e256:	449c      	add	ip, r3
 800e258:	1aff      	subs	r7, r7, r3
 800e25a:	f1b8 0f00 	cmp.w	r8, #0
 800e25e:	d009      	beq.n	800e274 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800e260:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 800e264:	9019      	str	r0, [sp, #100]	@ 0x64
 800e266:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 800e26a:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 800e26e:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 800e272:	911d      	str	r1, [sp, #116]	@ 0x74
 800e274:	1ad2      	subs	r2, r2, r3
 800e276:	e6b5      	b.n	800dfe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800e278:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	b923      	cbnz	r3, 800e288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e27e:	4b04      	ldr	r3, [pc, #16]	@ (800e290 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800e280:	6818      	ldr	r0, [r3, #0]
 800e282:	6803      	ldr	r3, [r0, #0]
 800e284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e286:	4798      	blx	r3
 800e288:	b05b      	add	sp, #364	@ 0x16c
 800e28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e28e:	bf00      	nop
 800e290:	20004354 	.word	0x20004354

0800e294 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 800e294:	b570      	push	{r4, r5, r6, lr}
 800e296:	4604      	mov	r4, r0
 800e298:	f89d 601c 	ldrb.w	r6, [sp, #28]
 800e29c:	9805      	ldr	r0, [sp, #20]
 800e29e:	6061      	str	r1, [r4, #4]
 800e2a0:	2500      	movs	r5, #0
 800e2a2:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800e2a6:	8263      	strh	r3, [r4, #18]
 800e2a8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800e2ac:	8025      	strh	r5, [r4, #0]
 800e2ae:	7221      	strb	r1, [r4, #8]
 800e2b0:	7266      	strb	r6, [r4, #9]
 800e2b2:	60e0      	str	r0, [r4, #12]
 800e2b4:	8222      	strh	r2, [r4, #16]
 800e2b6:	82a3      	strh	r3, [r4, #20]
 800e2b8:	82e5      	strh	r5, [r4, #22]
 800e2ba:	8325      	strh	r5, [r4, #24]
 800e2bc:	8365      	strh	r5, [r4, #26]
 800e2be:	83a5      	strh	r5, [r4, #28]
 800e2c0:	83e5      	strh	r5, [r4, #30]
 800e2c2:	8425      	strh	r5, [r4, #32]
 800e2c4:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 800e2c8:	b32e      	cbz	r6, 800e316 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800e2ca:	6803      	ldr	r3, [r0, #0]
 800e2cc:	695b      	ldr	r3, [r3, #20]
 800e2ce:	4798      	blx	r3
 800e2d0:	4606      	mov	r6, r0
 800e2d2:	b300      	cbz	r0, 800e316 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800e2d4:	68e0      	ldr	r0, [r4, #12]
 800e2d6:	6803      	ldr	r3, [r0, #0]
 800e2d8:	4631      	mov	r1, r6
 800e2da:	68db      	ldr	r3, [r3, #12]
 800e2dc:	4798      	blx	r3
 800e2de:	4605      	mov	r5, r0
 800e2e0:	b1c8      	cbz	r0, 800e316 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800e2e2:	7b43      	ldrb	r3, [r0, #13]
 800e2e4:	7a82      	ldrb	r2, [r0, #10]
 800e2e6:	005b      	lsls	r3, r3, #1
 800e2e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e2ec:	4313      	orrs	r3, r2
 800e2ee:	8423      	strh	r3, [r4, #32]
 800e2f0:	7a63      	ldrb	r3, [r4, #9]
 800e2f2:	2b06      	cmp	r3, #6
 800e2f4:	d10f      	bne.n	800e316 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800e2f6:	68e0      	ldr	r0, [r4, #12]
 800e2f8:	6803      	ldr	r3, [r0, #0]
 800e2fa:	462a      	mov	r2, r5
 800e2fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2fe:	4631      	mov	r1, r6
 800e300:	4798      	blx	r3
 800e302:	7b6b      	ldrb	r3, [r5, #13]
 800e304:	005b      	lsls	r3, r3, #1
 800e306:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e30a:	7aab      	ldrb	r3, [r5, #10]
 800e30c:	4313      	orrs	r3, r2
 800e30e:	4418      	add	r0, r3
 800e310:	8c23      	ldrh	r3, [r4, #32]
 800e312:	4418      	add	r0, r3
 800e314:	8420      	strh	r0, [r4, #32]
 800e316:	4620      	mov	r0, r4
 800e318:	bd70      	pop	{r4, r5, r6, pc}

0800e31a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800e31a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e31e:	2400      	movs	r4, #0
 800e320:	b085      	sub	sp, #20
 800e322:	4681      	mov	r9, r0
 800e324:	4688      	mov	r8, r1
 800e326:	4692      	mov	sl, r2
 800e328:	469b      	mov	fp, r3
 800e32a:	4627      	mov	r7, r4
 800e32c:	4625      	mov	r5, r4
 800e32e:	4626      	mov	r6, r4
 800e330:	4554      	cmp	r4, sl
 800e332:	da2a      	bge.n	800e38a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800e334:	2300      	movs	r3, #0
 800e336:	9303      	str	r3, [sp, #12]
 800e338:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800e33c:	429d      	cmp	r5, r3
 800e33e:	d004      	beq.n	800e34a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 800e340:	f242 030b 	movw	r3, #8203	@ 0x200b
 800e344:	429d      	cmp	r5, r3
 800e346:	bf18      	it	ne
 800e348:	462f      	movne	r7, r5
 800e34a:	ab03      	add	r3, sp, #12
 800e34c:	4642      	mov	r2, r8
 800e34e:	4659      	mov	r1, fp
 800e350:	4648      	mov	r0, r9
 800e352:	f002 ff23 	bl	801119c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e356:	4605      	mov	r5, r0
 800e358:	b1b8      	cbz	r0, 800e38a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800e35a:	280a      	cmp	r0, #10
 800e35c:	d015      	beq.n	800e38a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800e35e:	9a03      	ldr	r2, [sp, #12]
 800e360:	b18a      	cbz	r2, 800e386 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 800e362:	7b50      	ldrb	r0, [r2, #13]
 800e364:	7a93      	ldrb	r3, [r2, #10]
 800e366:	8895      	ldrh	r5, [r2, #4]
 800e368:	0040      	lsls	r0, r0, #1
 800e36a:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800e36e:	4303      	orrs	r3, r0
 800e370:	9301      	str	r3, [sp, #4]
 800e372:	f8d8 3000 	ldr.w	r3, [r8]
 800e376:	4639      	mov	r1, r7
 800e378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e37a:	4640      	mov	r0, r8
 800e37c:	4798      	blx	r3
 800e37e:	9b01      	ldr	r3, [sp, #4]
 800e380:	4418      	add	r0, r3
 800e382:	4406      	add	r6, r0
 800e384:	b2b6      	uxth	r6, r6
 800e386:	3401      	adds	r4, #1
 800e388:	e7d2      	b.n	800e330 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 800e38a:	4630      	mov	r0, r6
 800e38c:	b005      	add	sp, #20
 800e38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e392 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800e392:	2a02      	cmp	r2, #2
 800e394:	b530      	push	{r4, r5, lr}
 800e396:	d011      	beq.n	800e3bc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800e398:	2a03      	cmp	r2, #3
 800e39a:	d01c      	beq.n	800e3d6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800e39c:	2a01      	cmp	r2, #1
 800e39e:	d10c      	bne.n	800e3ba <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800e3a0:	888b      	ldrh	r3, [r1, #4]
 800e3a2:	8801      	ldrh	r1, [r0, #0]
 800e3a4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800e3a8:	8844      	ldrh	r4, [r0, #2]
 800e3aa:	8004      	strh	r4, [r0, #0]
 800e3ac:	1a5b      	subs	r3, r3, r1
 800e3ae:	1a9b      	subs	r3, r3, r2
 800e3b0:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800e3b4:	8043      	strh	r3, [r0, #2]
 800e3b6:	8081      	strh	r1, [r0, #4]
 800e3b8:	80c2      	strh	r2, [r0, #6]
 800e3ba:	bd30      	pop	{r4, r5, pc}
 800e3bc:	88cb      	ldrh	r3, [r1, #6]
 800e3be:	8842      	ldrh	r2, [r0, #2]
 800e3c0:	1a9b      	subs	r3, r3, r2
 800e3c2:	88c2      	ldrh	r2, [r0, #6]
 800e3c4:	1a9b      	subs	r3, r3, r2
 800e3c6:	888a      	ldrh	r2, [r1, #4]
 800e3c8:	8801      	ldrh	r1, [r0, #0]
 800e3ca:	8043      	strh	r3, [r0, #2]
 800e3cc:	1a52      	subs	r2, r2, r1
 800e3ce:	8881      	ldrh	r1, [r0, #4]
 800e3d0:	1a52      	subs	r2, r2, r1
 800e3d2:	8002      	strh	r2, [r0, #0]
 800e3d4:	e7f1      	b.n	800e3ba <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800e3d6:	88cb      	ldrh	r3, [r1, #6]
 800e3d8:	8841      	ldrh	r1, [r0, #2]
 800e3da:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800e3de:	f9b0 5000 	ldrsh.w	r5, [r0]
 800e3e2:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800e3e6:	8045      	strh	r5, [r0, #2]
 800e3e8:	1a5b      	subs	r3, r3, r1
 800e3ea:	1a9b      	subs	r3, r3, r2
 800e3ec:	8003      	strh	r3, [r0, #0]
 800e3ee:	8082      	strh	r2, [r0, #4]
 800e3f0:	80c4      	strh	r4, [r0, #6]
 800e3f2:	e7e2      	b.n	800e3ba <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0800e3f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800e3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3f8:	b09f      	sub	sp, #124	@ 0x7c
 800e3fa:	9116      	str	r1, [sp, #88]	@ 0x58
 800e3fc:	9317      	str	r3, [sp, #92]	@ 0x5c
 800e3fe:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 800e400:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800e402:	8809      	ldrh	r1, [r1, #0]
 800e404:	889b      	ldrh	r3, [r3, #4]
 800e406:	f8dd 80a8 	ldr.w	r8, [sp, #168]	@ 0xa8
 800e40a:	9212      	str	r2, [sp, #72]	@ 0x48
 800e40c:	440b      	add	r3, r1
 800e40e:	b21b      	sxth	r3, r3
 800e410:	9310      	str	r3, [sp, #64]	@ 0x40
 800e412:	f8d8 3000 	ldr.w	r3, [r8]
 800e416:	f89d 20b8 	ldrb.w	r2, [sp, #184]	@ 0xb8
 800e41a:	7b19      	ldrb	r1, [r3, #12]
 800e41c:	7adb      	ldrb	r3, [r3, #11]
 800e41e:	9011      	str	r0, [sp, #68]	@ 0x44
 800e420:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 800e424:	9114      	str	r1, [sp, #80]	@ 0x50
 800e426:	9315      	str	r3, [sp, #84]	@ 0x54
 800e428:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 800e42c:	2a00      	cmp	r2, #0
 800e42e:	d06a      	beq.n	800e506 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 800e430:	f898 3010 	ldrb.w	r3, [r8, #16]
 800e434:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 800e436:	2b06      	cmp	r3, #6
 800e438:	bf14      	ite	ne
 800e43a:	2301      	movne	r3, #1
 800e43c:	2302      	moveq	r3, #2
 800e43e:	4413      	add	r3, r2
 800e440:	f04f 0900 	mov.w	r9, #0
 800e444:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e446:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
 800e44a:	464c      	mov	r4, r9
 800e44c:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 800e450:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
 800e454:	4293      	cmp	r3, r2
 800e456:	f280 808f 	bge.w	800e578 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 800e45a:	2300      	movs	r3, #0
 800e45c:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 800e460:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 800e464:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800e468:	429c      	cmp	r4, r3
 800e46a:	d006      	beq.n	800e47a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 800e46c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e46e:	f242 020b 	movw	r2, #8203	@ 0x200b
 800e472:	4294      	cmp	r4, r2
 800e474:	bf18      	it	ne
 800e476:	4623      	movne	r3, r4
 800e478:	930d      	str	r3, [sp, #52]	@ 0x34
 800e47a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e47c:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 800e47e:	f8d8 2000 	ldr.w	r2, [r8]
 800e482:	428b      	cmp	r3, r1
 800e484:	db41      	blt.n	800e50a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 800e486:	6813      	ldr	r3, [r2, #0]
 800e488:	4610      	mov	r0, r2
 800e48a:	695b      	ldr	r3, [r3, #20]
 800e48c:	4798      	blx	r3
 800e48e:	4604      	mov	r4, r0
 800e490:	f8d8 0000 	ldr.w	r0, [r8]
 800e494:	6803      	ldr	r3, [r0, #0]
 800e496:	aa1d      	add	r2, sp, #116	@ 0x74
 800e498:	689d      	ldr	r5, [r3, #8]
 800e49a:	4621      	mov	r1, r4
 800e49c:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 800e4a0:	47a8      	blx	r5
 800e4a2:	901c      	str	r0, [sp, #112]	@ 0x70
 800e4a4:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800e4a8:	429c      	cmp	r4, r3
 800e4aa:	f000 80eb 	beq.w	800e684 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 800e4ae:	f242 030b 	movw	r3, #8203	@ 0x200b
 800e4b2:	429c      	cmp	r4, r3
 800e4b4:	f000 80e6 	beq.w	800e684 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 800e4b8:	2c00      	cmp	r4, #0
 800e4ba:	f000 80f8 	beq.w	800e6ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 800e4be:	2c0a      	cmp	r4, #10
 800e4c0:	d060      	beq.n	800e584 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 800e4c2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e4c4:	b36a      	cbz	r2, 800e522 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 800e4c6:	8894      	ldrh	r4, [r2, #4]
 800e4c8:	f1bb 0f00 	cmp.w	fp, #0
 800e4cc:	d03b      	beq.n	800e546 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 800e4ce:	f892 900d 	ldrb.w	r9, [r2, #13]
 800e4d2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800e4d6:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 800e4da:	f892 900a 	ldrb.w	r9, [r2, #10]
 800e4de:	f1bb 0f01 	cmp.w	fp, #1
 800e4e2:	ea49 0903 	orr.w	r9, r9, r3
 800e4e6:	d134      	bne.n	800e552 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 800e4e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e4ea:	eba6 0609 	sub.w	r6, r6, r9
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d14f      	bne.n	800e592 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 800e4f2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e4f4:	eb09 0306 	add.w	r3, r9, r6
 800e4f8:	4413      	add	r3, r2
 800e4fa:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800e4fc:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e500:	4293      	cmp	r3, r2
 800e502:	da51      	bge.n	800e5a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 800e504:	e038      	b.n	800e578 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 800e506:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800e508:	e79a      	b.n	800e440 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 800e50a:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 800e50e:	9301      	str	r3, [sp, #4]
 800e510:	ab1d      	add	r3, sp, #116	@ 0x74
 800e512:	9300      	str	r3, [sp, #0]
 800e514:	4659      	mov	r1, fp
 800e516:	ab1c      	add	r3, sp, #112	@ 0x70
 800e518:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800e51a:	f002 fe88 	bl	801122e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800e51e:	4604      	mov	r4, r0
 800e520:	e7c0      	b.n	800e4a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 800e522:	f8d8 0000 	ldr.w	r0, [r8]
 800e526:	6803      	ldr	r3, [r0, #0]
 800e528:	691b      	ldr	r3, [r3, #16]
 800e52a:	4798      	blx	r3
 800e52c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800e530:	4298      	cmp	r0, r3
 800e532:	f000 80a7 	beq.w	800e684 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 800e536:	f242 030b 	movw	r3, #8203	@ 0x200b
 800e53a:	4298      	cmp	r0, r3
 800e53c:	f000 80a2 	beq.w	800e684 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 800e540:	f1bb 0f00 	cmp.w	fp, #0
 800e544:	d100      	bne.n	800e548 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 800e546:	444e      	add	r6, r9
 800e548:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e54a:	2a00      	cmp	r2, #0
 800e54c:	d1bf      	bne.n	800e4ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 800e54e:	4691      	mov	r9, r2
 800e550:	e098      	b.n	800e684 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 800e552:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e554:	2b00      	cmp	r3, #0
 800e556:	f000 80ac 	beq.w	800e6b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2be>
 800e55a:	f1bb 0f00 	cmp.w	fp, #0
 800e55e:	d118      	bne.n	800e592 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 800e560:	f8d8 0000 	ldr.w	r0, [r8]
 800e564:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e566:	6803      	ldr	r3, [r0, #0]
 800e568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e56a:	4798      	blx	r3
 800e56c:	4406      	add	r6, r0
 800e56e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e570:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800e572:	1af3      	subs	r3, r6, r3
 800e574:	4293      	cmp	r3, r2
 800e576:	dd17      	ble.n	800e5a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 800e578:	2c00      	cmp	r4, #0
 800e57a:	f000 8098 	beq.w	800e6ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 800e57e:	2c0a      	cmp	r4, #10
 800e580:	f040 8086 	bne.w	800e690 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 800e584:	240a      	movs	r4, #10
 800e586:	fab4 f084 	clz	r0, r4
 800e58a:	0940      	lsrs	r0, r0, #5
 800e58c:	b01f      	add	sp, #124	@ 0x7c
 800e58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e592:	f8d8 0000 	ldr.w	r0, [r8]
 800e596:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e598:	6803      	ldr	r3, [r0, #0]
 800e59a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e59c:	4798      	blx	r3
 800e59e:	f1bb 0f01 	cmp.w	fp, #1
 800e5a2:	eba6 0600 	sub.w	r6, r6, r0
 800e5a6:	d0a4      	beq.n	800e4f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 800e5a8:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800e5aa:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800e5ac:	f990 1009 	ldrsb.w	r1, [r0, #9]
 800e5b0:	f9b3 7000 	ldrsh.w	r7, [r3]
 800e5b4:	7b43      	ldrb	r3, [r0, #13]
 800e5b6:	015b      	lsls	r3, r3, #5
 800e5b8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e5bc:	7983      	ldrb	r3, [r0, #6]
 800e5be:	4431      	add	r1, r6
 800e5c0:	4313      	orrs	r3, r2
 800e5c2:	440b      	add	r3, r1
 800e5c4:	42bb      	cmp	r3, r7
 800e5c6:	db5d      	blt.n	800e684 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 800e5c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e5ca:	4299      	cmp	r1, r3
 800e5cc:	da5a      	bge.n	800e684 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 800e5ce:	f8d8 0000 	ldr.w	r0, [r8]
 800e5d2:	6803      	ldr	r3, [r0, #0]
 800e5d4:	42b7      	cmp	r7, r6
 800e5d6:	bfc8      	it	gt
 800e5d8:	1bbf      	subgt	r7, r7, r6
 800e5da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5dc:	bfcc      	ite	gt
 800e5de:	b2bf      	uxthgt	r7, r7
 800e5e0:	2700      	movle	r7, #0
 800e5e2:	4798      	blx	r3
 800e5e4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800e5e6:	7b5a      	ldrb	r2, [r3, #13]
 800e5e8:	00d1      	lsls	r1, r2, #3
 800e5ea:	f401 7580 	and.w	r5, r1, #256	@ 0x100
 800e5ee:	7a19      	ldrb	r1, [r3, #8]
 800e5f0:	4329      	orrs	r1, r5
 800e5f2:	0655      	lsls	r5, r2, #25
 800e5f4:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800e5f6:	bf44      	itt	mi
 800e5f8:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 800e5fc:	b209      	sxthmi	r1, r1
 800e5fe:	1945      	adds	r5, r0, r5
 800e600:	1a6d      	subs	r5, r5, r1
 800e602:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 800e604:	b2ad      	uxth	r5, r5
 800e606:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800e60a:	fa0f fa85 	sxth.w	sl, r5
 800e60e:	4551      	cmp	r1, sl
 800e610:	dd3c      	ble.n	800e68c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 800e612:	0112      	lsls	r2, r2, #4
 800e614:	79d8      	ldrb	r0, [r3, #7]
 800e616:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800e61a:	4302      	orrs	r2, r0
 800e61c:	4492      	add	sl, r2
 800e61e:	4551      	cmp	r1, sl
 800e620:	dc30      	bgt.n	800e684 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 800e622:	1b4d      	subs	r5, r1, r5
 800e624:	b22d      	sxth	r5, r5
 800e626:	468a      	mov	sl, r1
 800e628:	9319      	str	r3, [sp, #100]	@ 0x64
 800e62a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e62c:	f8d8 0000 	ldr.w	r0, [r8]
 800e630:	681a      	ldr	r2, [r3, #0]
 800e632:	6801      	ldr	r1, [r0, #0]
 800e634:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800e636:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800e638:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e63a:	9218      	str	r2, [sp, #96]	@ 0x60
 800e63c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e63e:	4788      	blx	r1
 800e640:	f898 1006 	ldrb.w	r1, [r8, #6]
 800e644:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e646:	f898 100e 	ldrb.w	r1, [r8, #14]
 800e64a:	910a      	str	r1, [sp, #40]	@ 0x28
 800e64c:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 800e650:	9109      	str	r1, [sp, #36]	@ 0x24
 800e652:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800e656:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e658:	9305      	str	r3, [sp, #20]
 800e65a:	b2ad      	uxth	r5, r5
 800e65c:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800e660:	e9cd 7502 	strd	r7, r5, [sp, #8]
 800e664:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800e666:	9304      	str	r3, [sp, #16]
 800e668:	4437      	add	r7, r6
 800e66a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800e66c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e66e:	9206      	str	r2, [sp, #24]
 800e670:	b23f      	sxth	r7, r7
 800e672:	f8cd a004 	str.w	sl, [sp, #4]
 800e676:	9700      	str	r7, [sp, #0]
 800e678:	681a      	ldr	r2, [r3, #0]
 800e67a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800e67c:	685b      	ldr	r3, [r3, #4]
 800e67e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800e680:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 800e682:	47a8      	blx	r5
 800e684:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e686:	3301      	adds	r3, #1
 800e688:	930e      	str	r3, [sp, #56]	@ 0x38
 800e68a:	e6e1      	b.n	800e450 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 800e68c:	2500      	movs	r5, #0
 800e68e:	e7cb      	b.n	800e628 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 800e690:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 800e692:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800e694:	3501      	adds	r5, #1
 800e696:	429d      	cmp	r5, r3
 800e698:	f6bf af75 	bge.w	800e586 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 800e69c:	4659      	mov	r1, fp
 800e69e:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800e6a0:	f7fb f912 	bl	80098c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800e6a4:	4604      	mov	r4, r0
 800e6a6:	b110      	cbz	r0, 800e6ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 800e6a8:	280a      	cmp	r0, #10
 800e6aa:	d1f2      	bne.n	800e692 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 800e6ac:	e76a      	b.n	800e584 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 800e6ae:	2400      	movs	r4, #0
 800e6b0:	e769      	b.n	800e586 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 800e6b2:	f1bb 0f00 	cmp.w	fp, #0
 800e6b6:	f43f af5a 	beq.w	800e56e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 800e6ba:	e775      	b.n	800e5a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

0800e6bc <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800e6bc:	b530      	push	{r4, r5, lr}
 800e6be:	8ac4      	ldrh	r4, [r0, #22]
 800e6c0:	8b45      	ldrh	r5, [r0, #26]
 800e6c2:	8343      	strh	r3, [r0, #26]
 800e6c4:	442c      	add	r4, r5
 800e6c6:	1ae4      	subs	r4, r4, r3
 800e6c8:	82c4      	strh	r4, [r0, #22]
 800e6ca:	8b83      	ldrh	r3, [r0, #28]
 800e6cc:	8b04      	ldrh	r4, [r0, #24]
 800e6ce:	4422      	add	r2, r4
 800e6d0:	440c      	add	r4, r1
 800e6d2:	1a59      	subs	r1, r3, r1
 800e6d4:	83c2      	strh	r2, [r0, #30]
 800e6d6:	8304      	strh	r4, [r0, #24]
 800e6d8:	8381      	strh	r1, [r0, #28]
 800e6da:	bd30      	pop	{r4, r5, pc}

0800e6dc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 800e6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6e0:	4604      	mov	r4, r0
 800e6e2:	8a47      	ldrh	r7, [r0, #18]
 800e6e4:	68c0      	ldr	r0, [r0, #12]
 800e6e6:	6803      	ldr	r3, [r0, #0]
 800e6e8:	b085      	sub	sp, #20
 800e6ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6ec:	4798      	blx	r3
 800e6ee:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 800e6f2:	7a63      	ldrb	r3, [r4, #9]
 800e6f4:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 800e6f8:	42b7      	cmp	r7, r6
 800e6fa:	f103 33ff 	add.w	r3, r3, #4294967295
 800e6fe:	bfac      	ite	ge
 800e700:	f04f 0900 	movge.w	r9, #0
 800e704:	f04f 0901 	movlt.w	r9, #1
 800e708:	2b05      	cmp	r3, #5
 800e70a:	d804      	bhi.n	800e716 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3a>
 800e70c:	e8df f003 	tbb	[pc, r3]
 800e710:	470e0854 	.word	0x470e0854
 800e714:	4c4c      	.short	0x4c4c
 800e716:	2500      	movs	r5, #0
 800e718:	46a9      	mov	r9, r5
 800e71a:	462e      	mov	r6, r5
 800e71c:	462f      	mov	r7, r5
 800e71e:	e00d      	b.n	800e73c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800e720:	42b7      	cmp	r7, r6
 800e722:	bfb4      	ite	lt
 800e724:	2600      	movlt	r6, #0
 800e726:	2601      	movge	r6, #1
 800e728:	2500      	movs	r5, #0
 800e72a:	e7f7      	b.n	800e71c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 800e72c:	42b7      	cmp	r7, r6
 800e72e:	464d      	mov	r5, r9
 800e730:	f04f 0900 	mov.w	r9, #0
 800e734:	bfb4      	ite	lt
 800e736:	2600      	movlt	r6, #0
 800e738:	2601      	movge	r6, #1
 800e73a:	464f      	mov	r7, r9
 800e73c:	f04f 0800 	mov.w	r8, #0
 800e740:	f8a4 8016 	strh.w	r8, [r4, #22]
 800e744:	f8a4 8018 	strh.w	r8, [r4, #24]
 800e748:	f8cd 8004 	str.w	r8, [sp, #4]
 800e74c:	2300      	movs	r3, #0
 800e74e:	9303      	str	r3, [sp, #12]
 800e750:	8823      	ldrh	r3, [r4, #0]
 800e752:	2b20      	cmp	r3, #32
 800e754:	d034      	beq.n	800e7c0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe4>
 800e756:	f242 010b 	movw	r1, #8203	@ 0x200b
 800e75a:	1a5a      	subs	r2, r3, r1
 800e75c:	f1d2 0a00 	rsbs	sl, r2, #0
 800e760:	eb4a 0a02 	adc.w	sl, sl, r2
 800e764:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800e768:	4293      	cmp	r3, r2
 800e76a:	d009      	beq.n	800e780 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 800e76c:	428b      	cmp	r3, r1
 800e76e:	9a01      	ldr	r2, [sp, #4]
 800e770:	bf18      	it	ne
 800e772:	461a      	movne	r2, r3
 800e774:	9201      	str	r2, [sp, #4]
 800e776:	bf0c      	ite	eq
 800e778:	f04f 0a01 	moveq.w	sl, #1
 800e77c:	f04f 0a00 	movne.w	sl, #0
 800e780:	ab03      	add	r3, sp, #12
 800e782:	68e2      	ldr	r2, [r4, #12]
 800e784:	7a21      	ldrb	r1, [r4, #8]
 800e786:	6860      	ldr	r0, [r4, #4]
 800e788:	f002 fd08 	bl	801119c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e78c:	8020      	strh	r0, [r4, #0]
 800e78e:	b9d8      	cbnz	r0, 800e7c8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xec>
 800e790:	8ba2      	ldrh	r2, [r4, #28]
 800e792:	2300      	movs	r3, #0
 800e794:	4611      	mov	r1, r2
 800e796:	4620      	mov	r0, r4
 800e798:	f7ff ff90 	bl	800e6bc <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800e79c:	e06e      	b.n	800e87c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 800e79e:	2500      	movs	r5, #0
 800e7a0:	46a9      	mov	r9, r5
 800e7a2:	462e      	mov	r6, r5
 800e7a4:	2701      	movs	r7, #1
 800e7a6:	e7c9      	b.n	800e73c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800e7a8:	42b7      	cmp	r7, r6
 800e7aa:	f04f 0500 	mov.w	r5, #0
 800e7ae:	bfb4      	ite	lt
 800e7b0:	2700      	movlt	r7, #0
 800e7b2:	2701      	movge	r7, #1
 800e7b4:	462e      	mov	r6, r5
 800e7b6:	e7c1      	b.n	800e73c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800e7b8:	2500      	movs	r5, #0
 800e7ba:	46a9      	mov	r9, r5
 800e7bc:	2601      	movs	r6, #1
 800e7be:	e7ad      	b.n	800e71c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 800e7c0:	9301      	str	r3, [sp, #4]
 800e7c2:	f04f 0a01 	mov.w	sl, #1
 800e7c6:	e7db      	b.n	800e780 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 800e7c8:	8b63      	ldrh	r3, [r4, #26]
 800e7ca:	280a      	cmp	r0, #10
 800e7cc:	f103 0301 	add.w	r3, r3, #1
 800e7d0:	8363      	strh	r3, [r4, #26]
 800e7d2:	d0dd      	beq.n	800e790 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb4>
 800e7d4:	9a03      	ldr	r2, [sp, #12]
 800e7d6:	bb62      	cbnz	r2, 800e832 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x156>
 800e7d8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800e7dc:	4298      	cmp	r0, r3
 800e7de:	d003      	beq.n	800e7e8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 800e7e0:	f242 030b 	movw	r3, #8203	@ 0x200b
 800e7e4:	4298      	cmp	r0, r3
 800e7e6:	d1b1      	bne.n	800e74c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800e7e8:	8823      	ldrh	r3, [r4, #0]
 800e7ea:	8ba1      	ldrh	r1, [r4, #28]
 800e7ec:	2b20      	cmp	r3, #32
 800e7ee:	d003      	beq.n	800e7f8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11c>
 800e7f0:	f242 000b 	movw	r0, #8203	@ 0x200b
 800e7f4:	4283      	cmp	r3, r0
 800e7f6:	d131      	bne.n	800e85c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x180>
 800e7f8:	f1ba 0f00 	cmp.w	sl, #0
 800e7fc:	bf0a      	itet	eq
 800e7fe:	4688      	moveq	r8, r1
 800e800:	4650      	movne	r0, sl
 800e802:	2001      	moveq	r0, #1
 800e804:	440a      	add	r2, r1
 800e806:	8b23      	ldrh	r3, [r4, #24]
 800e808:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800e80c:	b292      	uxth	r2, r2
 800e80e:	83a2      	strh	r2, [r4, #28]
 800e810:	4413      	add	r3, r2
 800e812:	f1b9 0f00 	cmp.w	r9, #0
 800e816:	d102      	bne.n	800e81e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x142>
 800e818:	2d00      	cmp	r5, #0
 800e81a:	d042      	beq.n	800e8a2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c6>
 800e81c:	b300      	cbz	r0, 800e860 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x184>
 800e81e:	8c21      	ldrh	r1, [r4, #32]
 800e820:	4419      	add	r1, r3
 800e822:	458c      	cmp	ip, r1
 800e824:	da37      	bge.n	800e896 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 800e826:	8ae1      	ldrh	r1, [r4, #22]
 800e828:	2900      	cmp	r1, #0
 800e82a:	d034      	beq.n	800e896 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 800e82c:	4563      	cmp	r3, ip
 800e82e:	dd8d      	ble.n	800e74c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800e830:	e01d      	b.n	800e86e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x192>
 800e832:	8893      	ldrh	r3, [r2, #4]
 800e834:	8023      	strh	r3, [r4, #0]
 800e836:	f892 b00d 	ldrb.w	fp, [r2, #13]
 800e83a:	9901      	ldr	r1, [sp, #4]
 800e83c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800e840:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 800e844:	f892 b00a 	ldrb.w	fp, [r2, #10]
 800e848:	ea4b 0b00 	orr.w	fp, fp, r0
 800e84c:	68e0      	ldr	r0, [r4, #12]
 800e84e:	6803      	ldr	r3, [r0, #0]
 800e850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e852:	4798      	blx	r3
 800e854:	eb0b 0200 	add.w	r2, fp, r0
 800e858:	b292      	uxth	r2, r2
 800e85a:	e7c5      	b.n	800e7e8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 800e85c:	2000      	movs	r0, #0
 800e85e:	e7d1      	b.n	800e804 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x128>
 800e860:	4563      	cmp	r3, ip
 800e862:	f77f af73 	ble.w	800e74c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800e866:	8ae3      	ldrh	r3, [r4, #22]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	f43f af6f 	beq.w	800e74c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800e86e:	2301      	movs	r3, #1
 800e870:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 800e874:	8c22      	ldrh	r2, [r4, #32]
 800e876:	8be3      	ldrh	r3, [r4, #30]
 800e878:	4413      	add	r3, r2
 800e87a:	83e3      	strh	r3, [r4, #30]
 800e87c:	68e0      	ldr	r0, [r4, #12]
 800e87e:	6803      	ldr	r3, [r0, #0]
 800e880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e882:	4798      	blx	r3
 800e884:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800e888:	4418      	add	r0, r3
 800e88a:	8a63      	ldrh	r3, [r4, #18]
 800e88c:	1a18      	subs	r0, r3, r0
 800e88e:	8260      	strh	r0, [r4, #18]
 800e890:	b005      	add	sp, #20
 800e892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e896:	2300      	movs	r3, #0
 800e898:	4611      	mov	r1, r2
 800e89a:	4620      	mov	r0, r4
 800e89c:	f7ff ff0e 	bl	800e6bc <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800e8a0:	e754      	b.n	800e74c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800e8a2:	4563      	cmp	r3, ip
 800e8a4:	dd14      	ble.n	800e8d0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f4>
 800e8a6:	b117      	cbz	r7, 800e8ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d2>
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	460a      	mov	r2, r1
 800e8ac:	e772      	b.n	800e794 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 800e8ae:	2e00      	cmp	r6, #0
 800e8b0:	f43f af4c 	beq.w	800e74c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800e8b4:	2800      	cmp	r0, #0
 800e8b6:	f47f af49 	bne.w	800e74c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800e8ba:	f1ba 0f00 	cmp.w	sl, #0
 800e8be:	d002      	beq.n	800e8c6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ea>
 800e8c0:	2301      	movs	r3, #1
 800e8c2:	4642      	mov	r2, r8
 800e8c4:	e767      	b.n	800e796 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xba>
 800e8c6:	8ae3      	ldrh	r3, [r4, #22]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	f43f af3f 	beq.w	800e74c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800e8ce:	e7d5      	b.n	800e87c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 800e8d0:	2800      	cmp	r0, #0
 800e8d2:	f47f af3b 	bne.w	800e74c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800e8d6:	f1ba 0f00 	cmp.w	sl, #0
 800e8da:	f43f af37 	beq.w	800e74c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800e8de:	2301      	movs	r3, #1
 800e8e0:	4642      	mov	r2, r8
 800e8e2:	e7da      	b.n	800e89a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1be>

0800e8e4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 800e8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8e6:	4605      	mov	r5, r0
 800e8e8:	b08f      	sub	sp, #60	@ 0x3c
 800e8ea:	4617      	mov	r7, r2
 800e8ec:	461c      	mov	r4, r3
 800e8ee:	460e      	mov	r6, r1
 800e8f0:	b1d1      	cbz	r1, 800e928 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8f8:	4798      	blx	r3
 800e8fa:	4240      	negs	r0, r0
 800e8fc:	b200      	sxth	r0, r0
 800e8fe:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800e902:	9603      	str	r6, [sp, #12]
 800e904:	9700      	str	r7, [sp, #0]
 800e906:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e90a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 800e90e:	4629      	mov	r1, r5
 800e910:	a805      	add	r0, sp, #20
 800e912:	f7ff fcbf 	bl	800e294 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 800e916:	2401      	movs	r4, #1
 800e918:	a805      	add	r0, sp, #20
 800e91a:	f7ff fedf 	bl	800e6dc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800e91e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800e922:	b163      	cbz	r3, 800e93e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 800e924:	3401      	adds	r4, #1
 800e926:	e7f7      	b.n	800e918 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 800e928:	f002 fd06 	bl	8011338 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e92c:	2401      	movs	r4, #1
 800e92e:	280a      	cmp	r0, #10
 800e930:	4628      	mov	r0, r5
 800e932:	bf08      	it	eq
 800e934:	3401      	addeq	r4, #1
 800e936:	f002 fcff 	bl	8011338 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e93a:	2800      	cmp	r0, #0
 800e93c:	d1f7      	bne.n	800e92e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 800e93e:	b2a0      	uxth	r0, r4
 800e940:	b00f      	add	sp, #60	@ 0x3c
 800e942:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e944 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 800e944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e948:	b0e3      	sub	sp, #396	@ 0x18c
 800e94a:	461c      	mov	r4, r3
 800e94c:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 800e94e:	4683      	mov	fp, r0
 800e950:	4688      	mov	r8, r1
 800e952:	2b00      	cmp	r3, #0
 800e954:	f000 810f 	beq.w	800eb76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 800e958:	6823      	ldr	r3, [r4, #0]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	f000 810b 	beq.w	800eb76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 800e960:	7ba3      	ldrb	r3, [r4, #14]
 800e962:	2b00      	cmp	r3, #0
 800e964:	f000 8107 	beq.w	800eb76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 800e968:	6810      	ldr	r0, [r2, #0]
 800e96a:	6851      	ldr	r1, [r2, #4]
 800e96c:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 800e970:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800e974:	ad0a      	add	r5, sp, #40	@ 0x28
 800e976:	462b      	mov	r3, r5
 800e978:	c303      	stmia	r3!, {r0, r1}
 800e97a:	2100      	movs	r1, #0
 800e97c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 800e980:	910c      	str	r1, [sp, #48]	@ 0x30
 800e982:	79a2      	ldrb	r2, [r4, #6]
 800e984:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800e988:	a90c      	add	r1, sp, #48	@ 0x30
 800e98a:	4628      	mov	r0, r5
 800e98c:	f7ff fd01 	bl	800e392 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800e990:	a90c      	add	r1, sp, #48	@ 0x30
 800e992:	4608      	mov	r0, r1
 800e994:	79a2      	ldrb	r2, [r4, #6]
 800e996:	f7ff fcfc 	bl	800e392 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800e99a:	a817      	add	r0, sp, #92	@ 0x5c
 800e99c:	f002 f8a0 	bl	8010ae0 <_ZN8touchgfx12TextProviderC1Ev>
 800e9a0:	6820      	ldr	r0, [r4, #0]
 800e9a2:	6803      	ldr	r3, [r0, #0]
 800e9a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e9a6:	4798      	blx	r3
 800e9a8:	4606      	mov	r6, r0
 800e9aa:	6820      	ldr	r0, [r4, #0]
 800e9ac:	6803      	ldr	r3, [r0, #0]
 800e9ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e9b0:	4798      	blx	r3
 800e9b2:	4633      	mov	r3, r6
 800e9b4:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 800e9b6:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 800e9b8:	9000      	str	r0, [sp, #0]
 800e9ba:	a817      	add	r0, sp, #92	@ 0x5c
 800e9bc:	f002 f8eb 	bl	8010b96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e9c0:	6820      	ldr	r0, [r4, #0]
 800e9c2:	f894 a004 	ldrb.w	sl, [r4, #4]
 800e9c6:	6803      	ldr	r3, [r0, #0]
 800e9c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9ca:	4798      	blx	r3
 800e9cc:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800e9d0:	6823      	ldr	r3, [r4, #0]
 800e9d2:	4607      	mov	r7, r0
 800e9d4:	4406      	add	r6, r0
 800e9d6:	a830      	add	r0, sp, #192	@ 0xc0
 800e9d8:	f893 9009 	ldrb.w	r9, [r3, #9]
 800e9dc:	f002 f880 	bl	8010ae0 <_ZN8touchgfx12TextProviderC1Ev>
 800e9e0:	7c23      	ldrb	r3, [r4, #16]
 800e9e2:	b17b      	cbz	r3, 800ea04 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 800e9e4:	6820      	ldr	r0, [r4, #0]
 800e9e6:	6803      	ldr	r3, [r0, #0]
 800e9e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e9ea:	4798      	blx	r3
 800e9ec:	9009      	str	r0, [sp, #36]	@ 0x24
 800e9ee:	6820      	ldr	r0, [r4, #0]
 800e9f0:	6802      	ldr	r2, [r0, #0]
 800e9f2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800e9f4:	4790      	blx	r2
 800e9f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9f8:	9000      	str	r0, [sp, #0]
 800e9fa:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 800e9fc:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 800e9fe:	a830      	add	r0, sp, #192	@ 0xc0
 800ea00:	f002 f8c9 	bl	8010b96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800ea04:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 800ea08:	7be2      	ldrb	r2, [r4, #15]
 800ea0a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 800ea0e:	1a8a      	subs	r2, r1, r2
 800ea10:	7c21      	ldrb	r1, [r4, #16]
 800ea12:	9103      	str	r1, [sp, #12]
 800ea14:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 800ea18:	9102      	str	r1, [sp, #8]
 800ea1a:	6821      	ldr	r1, [r4, #0]
 800ea1c:	9101      	str	r1, [sp, #4]
 800ea1e:	7961      	ldrb	r1, [r4, #5]
 800ea20:	9100      	str	r1, [sp, #0]
 800ea22:	b292      	uxth	r2, r2
 800ea24:	a930      	add	r1, sp, #192	@ 0xc0
 800ea26:	a80e      	add	r0, sp, #56	@ 0x38
 800ea28:	f7ff fc34 	bl	800e294 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 800ea2c:	2e00      	cmp	r6, #0
 800ea2e:	dc5b      	bgt.n	800eae8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800ea30:	af17      	add	r7, sp, #92	@ 0x5c
 800ea32:	f04f 0900 	mov.w	r9, #0
 800ea36:	7c23      	ldrb	r3, [r4, #16]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	f000 80ae 	beq.w	800eb9a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 800ea3e:	a80e      	add	r0, sp, #56	@ 0x38
 800ea40:	f7ff fe4c 	bl	800e6dc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800ea44:	f1ba 0f00 	cmp.w	sl, #0
 800ea48:	f000 80a2 	beq.w	800eb90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 800ea4c:	7c23      	ldrb	r3, [r4, #16]
 800ea4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea50:	2264      	movs	r2, #100	@ 0x64
 800ea52:	4639      	mov	r1, r7
 800ea54:	a849      	add	r0, sp, #292	@ 0x124
 800ea56:	f004 ffa8 	bl	80139aa <memcpy>
 800ea5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	f000 80a4 	beq.w	800ebaa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 800ea62:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 800ea66:	7922      	ldrb	r2, [r4, #4]
 800ea68:	2a01      	cmp	r2, #1
 800ea6a:	f040 8087 	bne.w	800eb7c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800ea6e:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 800ea72:	1ac0      	subs	r0, r0, r3
 800ea74:	2302      	movs	r3, #2
 800ea76:	fb90 f0f3 	sdiv	r0, r0, r3
 800ea7a:	b200      	sxth	r0, r0
 800ea7c:	7c23      	ldrb	r3, [r4, #16]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	f000 8088 	beq.w	800eb94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 800ea84:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 800ea88:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 800ea8c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800ea90:	e9cd 2105 	strd	r2, r1, [sp, #20]
 800ea94:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 800ea98:	4410      	add	r0, r2
 800ea9a:	b200      	sxth	r0, r0
 800ea9c:	9000      	str	r0, [sp, #0]
 800ea9e:	e9cd 9703 	strd	r9, r7, [sp, #12]
 800eaa2:	e9cd 5401 	strd	r5, r4, [sp, #4]
 800eaa6:	4642      	mov	r2, r8
 800eaa8:	2100      	movs	r1, #0
 800eaaa:	4658      	mov	r0, fp
 800eaac:	f7ff fca2 	bl	800e3f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 800eab0:	2800      	cmp	r0, #0
 800eab2:	d160      	bne.n	800eb76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 800eab4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800eab8:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 800eabc:	b2b2      	uxth	r2, r6
 800eabe:	4413      	add	r3, r2
 800eac0:	1a8a      	subs	r2, r1, r2
 800eac2:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 800eac6:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 800eaca:	b21b      	sxth	r3, r3
 800eacc:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800ead0:	2a00      	cmp	r2, #0
 800ead2:	d150      	bne.n	800eb76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 800ead4:	6822      	ldr	r2, [r4, #0]
 800ead6:	8869      	ldrh	r1, [r5, #2]
 800ead8:	7a12      	ldrb	r2, [r2, #8]
 800eada:	1a9b      	subs	r3, r3, r2
 800eadc:	88ea      	ldrh	r2, [r5, #6]
 800eade:	440a      	add	r2, r1
 800eae0:	b212      	sxth	r2, r2
 800eae2:	4293      	cmp	r3, r2
 800eae4:	dda7      	ble.n	800ea36 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 800eae6:	e046      	b.n	800eb76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 800eae8:	7c23      	ldrb	r3, [r4, #16]
 800eaea:	444f      	add	r7, r9
 800eaec:	b1c3      	cbz	r3, 800eb20 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 800eaee:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 800eaf2:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800eaf6:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800eafa:	443b      	add	r3, r7
 800eafc:	4293      	cmp	r3, r2
 800eafe:	da97      	bge.n	800ea30 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 800eb00:	a80e      	add	r0, sp, #56	@ 0x38
 800eb02:	f7ff fdeb 	bl	800e6dc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800eb06:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 800eb0a:	3b01      	subs	r3, #1
 800eb0c:	b29b      	uxth	r3, r3
 800eb0e:	454b      	cmp	r3, r9
 800eb10:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb12:	d021      	beq.n	800eb58 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 800eb14:	7961      	ldrb	r1, [r4, #5]
 800eb16:	a817      	add	r0, sp, #92	@ 0x5c
 800eb18:	f7fa fed6 	bl	80098c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800eb1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb1e:	e7f4      	b.n	800eb0a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 800eb20:	fa1f f986 	uxth.w	r9, r6
 800eb24:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800eb28:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800eb2c:	443b      	add	r3, r7
 800eb2e:	4293      	cmp	r3, r2
 800eb30:	f6bf af7e 	bge.w	800ea30 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 800eb34:	a817      	add	r0, sp, #92	@ 0x5c
 800eb36:	f002 fbff 	bl	8011338 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800eb3a:	b1e0      	cbz	r0, 800eb76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 800eb3c:	280a      	cmp	r0, #10
 800eb3e:	d1f1      	bne.n	800eb24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 800eb40:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800eb44:	444b      	add	r3, r9
 800eb46:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800eb4a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 800eb4e:	eba3 0309 	sub.w	r3, r3, r9
 800eb52:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800eb56:	e7e5      	b.n	800eb24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 800eb58:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 800eb5c:	b2b3      	uxth	r3, r6
 800eb5e:	441a      	add	r2, r3
 800eb60:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 800eb64:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 800eb68:	1ad3      	subs	r3, r2, r3
 800eb6a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800eb6e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d1bd      	bne.n	800eaf2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 800eb76:	b063      	add	sp, #396	@ 0x18c
 800eb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb7c:	2a02      	cmp	r2, #2
 800eb7e:	d105      	bne.n	800eb8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 800eb80:	7be2      	ldrb	r2, [r4, #15]
 800eb82:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 800eb86:	1a80      	subs	r0, r0, r2
 800eb88:	1ac0      	subs	r0, r0, r3
 800eb8a:	e776      	b.n	800ea7a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 800eb8c:	2000      	movs	r0, #0
 800eb8e:	e775      	b.n	800ea7c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 800eb90:	7be0      	ldrb	r0, [r4, #15]
 800eb92:	e773      	b.n	800ea7c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 800eb94:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800eb98:	e776      	b.n	800ea88 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 800eb9a:	f1ba 0f00 	cmp.w	sl, #0
 800eb9e:	d0f7      	beq.n	800eb90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 800eba0:	2264      	movs	r2, #100	@ 0x64
 800eba2:	4639      	mov	r1, r7
 800eba4:	a849      	add	r0, sp, #292	@ 0x124
 800eba6:	f004 ff00 	bl	80139aa <memcpy>
 800ebaa:	2300      	movs	r3, #0
 800ebac:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800ebb0:	6821      	ldr	r1, [r4, #0]
 800ebb2:	a849      	add	r0, sp, #292	@ 0x124
 800ebb4:	f7ff fbb1 	bl	800e31a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800ebb8:	b203      	sxth	r3, r0
 800ebba:	e754      	b.n	800ea66 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0800ebbc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800ebbc:	2b03      	cmp	r3, #3
 800ebbe:	d818      	bhi.n	800ebf2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 800ebc0:	e8df f003 	tbb	[pc, r3]
 800ebc4:	130d0602 	.word	0x130d0602
 800ebc8:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ebcc:	1850      	adds	r0, r2, r1
 800ebce:	4770      	bx	lr
 800ebd0:	8803      	ldrh	r3, [r0, #0]
 800ebd2:	8880      	ldrh	r0, [r0, #4]
 800ebd4:	4418      	add	r0, r3
 800ebd6:	b200      	sxth	r0, r0
 800ebd8:	1a80      	subs	r0, r0, r2
 800ebda:	3801      	subs	r0, #1
 800ebdc:	4770      	bx	lr
 800ebde:	8803      	ldrh	r3, [r0, #0]
 800ebe0:	8880      	ldrh	r0, [r0, #4]
 800ebe2:	4418      	add	r0, r3
 800ebe4:	b200      	sxth	r0, r0
 800ebe6:	1a40      	subs	r0, r0, r1
 800ebe8:	e7f7      	b.n	800ebda <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800ebea:	f9b0 0000 	ldrsh.w	r0, [r0]
 800ebee:	4410      	add	r0, r2
 800ebf0:	4770      	bx	lr
 800ebf2:	2000      	movs	r0, #0
 800ebf4:	4770      	bx	lr

0800ebf6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800ebf6:	2b03      	cmp	r3, #3
 800ebf8:	d817      	bhi.n	800ec2a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 800ebfa:	e8df f003 	tbb	[pc, r3]
 800ebfe:	0602      	.short	0x0602
 800ec00:	1009      	.short	0x1009
 800ec02:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800ec06:	1850      	adds	r0, r2, r1
 800ec08:	4770      	bx	lr
 800ec0a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800ec0e:	e7fa      	b.n	800ec06 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 800ec10:	8843      	ldrh	r3, [r0, #2]
 800ec12:	88c0      	ldrh	r0, [r0, #6]
 800ec14:	4418      	add	r0, r3
 800ec16:	b200      	sxth	r0, r0
 800ec18:	1a80      	subs	r0, r0, r2
 800ec1a:	3801      	subs	r0, #1
 800ec1c:	4770      	bx	lr
 800ec1e:	8843      	ldrh	r3, [r0, #2]
 800ec20:	88c0      	ldrh	r0, [r0, #6]
 800ec22:	4418      	add	r0, r3
 800ec24:	b200      	sxth	r0, r0
 800ec26:	1a40      	subs	r0, r0, r1
 800ec28:	e7f7      	b.n	800ec1a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800ec2a:	2000      	movs	r0, #0
 800ec2c:	4770      	bx	lr
	...

0800ec30 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800ec30:	4b01      	ldr	r3, [pc, #4]	@ (800ec38 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800ec32:	2200      	movs	r2, #0
 800ec34:	601a      	str	r2, [r3, #0]
 800ec36:	4770      	bx	lr
 800ec38:	2000435c 	.word	0x2000435c

0800ec3c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	b1c8      	cbz	r0, 800ec74 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800ec40:	0c02      	lsrs	r2, r0, #16
 800ec42:	0412      	lsls	r2, r2, #16
 800ec44:	b9a2      	cbnz	r2, 800ec70 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800ec46:	0403      	lsls	r3, r0, #16
 800ec48:	2010      	movs	r0, #16
 800ec4a:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 800ec4e:	bf04      	itt	eq
 800ec50:	021b      	lsleq	r3, r3, #8
 800ec52:	3008      	addeq	r0, #8
 800ec54:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 800ec58:	bf04      	itt	eq
 800ec5a:	011b      	lsleq	r3, r3, #4
 800ec5c:	3004      	addeq	r0, #4
 800ec5e:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 800ec62:	bf04      	itt	eq
 800ec64:	009b      	lsleq	r3, r3, #2
 800ec66:	3002      	addeq	r0, #2
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	db04      	blt.n	800ec76 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800ec6c:	3001      	adds	r0, #1
 800ec6e:	4770      	bx	lr
 800ec70:	2000      	movs	r0, #0
 800ec72:	e7ea      	b.n	800ec4a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800ec74:	2020      	movs	r0, #32
 800ec76:	4770      	bx	lr

0800ec78 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800ec78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec7c:	b087      	sub	sp, #28
 800ec7e:	4681      	mov	r9, r0
 800ec80:	4698      	mov	r8, r3
 800ec82:	4610      	mov	r0, r2
 800ec84:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 800ec88:	460d      	mov	r5, r1
 800ec8a:	b981      	cbnz	r1, 800ecae <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 800ec8c:	b14b      	cbz	r3, 800eca2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 800ec8e:	460b      	mov	r3, r1
 800ec90:	e9cd 4700 	strd	r4, r7, [sp]
 800ec94:	464a      	mov	r2, r9
 800ec96:	4641      	mov	r1, r8
 800ec98:	f7ff ffee 	bl	800ec78 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800ec9c:	b007      	add	sp, #28
 800ec9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eca2:	f04f 33ff 	mov.w	r3, #4294967295
 800eca6:	603b      	str	r3, [r7, #0]
 800eca8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800ecac:	e7f6      	b.n	800ec9c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800ecae:	fa32 fa01 	lsrs.w	sl, r2, r1
 800ecb2:	d107      	bne.n	800ecc4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 800ecb4:	fb09 f602 	mul.w	r6, r9, r2
 800ecb8:	fbb6 f0f4 	udiv	r0, r6, r4
 800ecbc:	fb04 6610 	mls	r6, r4, r0, r6
 800ecc0:	603e      	str	r6, [r7, #0]
 800ecc2:	e7eb      	b.n	800ec9c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800ecc4:	2601      	movs	r6, #1
 800ecc6:	408e      	lsls	r6, r1
 800ecc8:	3e01      	subs	r6, #1
 800ecca:	4016      	ands	r6, r2
 800eccc:	fa09 fb01 	lsl.w	fp, r9, r1
 800ecd0:	4630      	mov	r0, r6
 800ecd2:	fbbb f3f4 	udiv	r3, fp, r4
 800ecd6:	9302      	str	r3, [sp, #8]
 800ecd8:	fb0a f303 	mul.w	r3, sl, r3
 800ecdc:	9303      	str	r3, [sp, #12]
 800ecde:	f7ff ffad 	bl	800ec3c <_ZN8touchgfx16TouchCalibration4clzuEm>
 800ece2:	464a      	mov	r2, r9
 800ece4:	460b      	mov	r3, r1
 800ece6:	e9cd 4700 	strd	r4, r7, [sp]
 800ecea:	4601      	mov	r1, r0
 800ecec:	4630      	mov	r0, r6
 800ecee:	f7ff ffc3 	bl	800ec78 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800ecf2:	9b02      	ldr	r3, [sp, #8]
 800ecf4:	fb04 bb13 	mls	fp, r4, r3, fp
 800ecf8:	4606      	mov	r6, r0
 800ecfa:	4658      	mov	r0, fp
 800ecfc:	eb05 0108 	add.w	r1, r5, r8
 800ed00:	f7ff ff9c 	bl	800ec3c <_ZN8touchgfx16TouchCalibration4clzuEm>
 800ed04:	ab05      	add	r3, sp, #20
 800ed06:	e9cd 4300 	strd	r4, r3, [sp]
 800ed0a:	465a      	mov	r2, fp
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	4650      	mov	r0, sl
 800ed10:	f7ff ffb2 	bl	800ec78 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800ed14:	6839      	ldr	r1, [r7, #0]
 800ed16:	9a05      	ldr	r2, [sp, #20]
 800ed18:	9b03      	ldr	r3, [sp, #12]
 800ed1a:	4411      	add	r1, r2
 800ed1c:	fbb1 f2f4 	udiv	r2, r1, r4
 800ed20:	18d3      	adds	r3, r2, r3
 800ed22:	441e      	add	r6, r3
 800ed24:	fb04 1412 	mls	r4, r4, r2, r1
 800ed28:	4430      	add	r0, r6
 800ed2a:	603c      	str	r4, [r7, #0]
 800ed2c:	e7b6      	b.n	800ec9c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0800ed2e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800ed2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed32:	b085      	sub	sp, #20
 800ed34:	f1b0 0900 	subs.w	r9, r0, #0
 800ed38:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800ed3a:	461d      	mov	r5, r3
 800ed3c:	bfbf      	itttt	lt
 800ed3e:	6823      	ldrlt	r3, [r4, #0]
 800ed40:	425b      	neglt	r3, r3
 800ed42:	f1c9 0900 	rsblt	r9, r9, #0
 800ed46:	6023      	strlt	r3, [r4, #0]
 800ed48:	bfb4      	ite	lt
 800ed4a:	f04f 36ff 	movlt.w	r6, #4294967295
 800ed4e:	2601      	movge	r6, #1
 800ed50:	2a00      	cmp	r2, #0
 800ed52:	4617      	mov	r7, r2
 800ed54:	da04      	bge.n	800ed60 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800ed56:	6823      	ldr	r3, [r4, #0]
 800ed58:	425b      	negs	r3, r3
 800ed5a:	4257      	negs	r7, r2
 800ed5c:	4276      	negs	r6, r6
 800ed5e:	6023      	str	r3, [r4, #0]
 800ed60:	2d00      	cmp	r5, #0
 800ed62:	4638      	mov	r0, r7
 800ed64:	bfba      	itte	lt
 800ed66:	426d      	neglt	r5, r5
 800ed68:	f04f 38ff 	movlt.w	r8, #4294967295
 800ed6c:	f04f 0801 	movge.w	r8, #1
 800ed70:	f7ff ff64 	bl	800ec3c <_ZN8touchgfx16TouchCalibration4clzuEm>
 800ed74:	ab03      	add	r3, sp, #12
 800ed76:	e9cd 5300 	strd	r5, r3, [sp]
 800ed7a:	463a      	mov	r2, r7
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	4648      	mov	r0, r9
 800ed80:	f7ff ff7a 	bl	800ec78 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800ed84:	6823      	ldr	r3, [r4, #0]
 800ed86:	9a03      	ldr	r2, [sp, #12]
 800ed88:	4546      	cmp	r6, r8
 800ed8a:	441a      	add	r2, r3
 800ed8c:	fb92 f3f5 	sdiv	r3, r2, r5
 800ed90:	4418      	add	r0, r3
 800ed92:	bf18      	it	ne
 800ed94:	4240      	negne	r0, r0
 800ed96:	fb05 2313 	mls	r3, r5, r3, r2
 800ed9a:	1c72      	adds	r2, r6, #1
 800ed9c:	6023      	str	r3, [r4, #0]
 800ed9e:	d105      	bne.n	800edac <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	f1c3 0200 	rsb	r2, r3, #0
 800eda6:	db0b      	blt.n	800edc0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800eda8:	6022      	str	r2, [r4, #0]
 800edaa:	e006      	b.n	800edba <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800edac:	2e01      	cmp	r6, #1
 800edae:	d104      	bne.n	800edba <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	da02      	bge.n	800edba <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800edb4:	442b      	add	r3, r5
 800edb6:	3801      	subs	r0, #1
 800edb8:	6023      	str	r3, [r4, #0]
 800edba:	b005      	add	sp, #20
 800edbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edc0:	3801      	subs	r0, #1
 800edc2:	1b52      	subs	r2, r2, r5
 800edc4:	e7f0      	b.n	800eda8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0800edc8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800edc8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800edcc:	4c1c      	ldr	r4, [pc, #112]	@ (800ee40 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800edce:	6807      	ldr	r7, [r0, #0]
 800edd0:	69a3      	ldr	r3, [r4, #24]
 800edd2:	4605      	mov	r5, r0
 800edd4:	b92b      	cbnz	r3, 800ede2 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800edd6:	6840      	ldr	r0, [r0, #4]
 800edd8:	e9c5 7000 	strd	r7, r0, [r5]
 800eddc:	b004      	add	sp, #16
 800edde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ede2:	68a2      	ldr	r2, [r4, #8]
 800ede4:	6820      	ldr	r0, [r4, #0]
 800ede6:	ae04      	add	r6, sp, #16
 800ede8:	f04f 0802 	mov.w	r8, #2
 800edec:	fb93 f1f8 	sdiv	r1, r3, r8
 800edf0:	440a      	add	r2, r1
 800edf2:	f846 2d04 	str.w	r2, [r6, #-4]!
 800edf6:	69e1      	ldr	r1, [r4, #28]
 800edf8:	9600      	str	r6, [sp, #0]
 800edfa:	463a      	mov	r2, r7
 800edfc:	f7ff ff97 	bl	800ed2e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800ee00:	69a3      	ldr	r3, [r4, #24]
 800ee02:	686a      	ldr	r2, [r5, #4]
 800ee04:	6a21      	ldr	r1, [r4, #32]
 800ee06:	9600      	str	r6, [sp, #0]
 800ee08:	4607      	mov	r7, r0
 800ee0a:	6860      	ldr	r0, [r4, #4]
 800ee0c:	f7ff ff8f 	bl	800ed2e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800ee10:	6962      	ldr	r2, [r4, #20]
 800ee12:	69a3      	ldr	r3, [r4, #24]
 800ee14:	fb93 f8f8 	sdiv	r8, r3, r8
 800ee18:	4442      	add	r2, r8
 800ee1a:	9203      	str	r2, [sp, #12]
 800ee1c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800ee1e:	682a      	ldr	r2, [r5, #0]
 800ee20:	9600      	str	r6, [sp, #0]
 800ee22:	4407      	add	r7, r0
 800ee24:	68e0      	ldr	r0, [r4, #12]
 800ee26:	f7ff ff82 	bl	800ed2e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800ee2a:	9600      	str	r6, [sp, #0]
 800ee2c:	4680      	mov	r8, r0
 800ee2e:	69a3      	ldr	r3, [r4, #24]
 800ee30:	686a      	ldr	r2, [r5, #4]
 800ee32:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800ee34:	6920      	ldr	r0, [r4, #16]
 800ee36:	f7ff ff7a 	bl	800ed2e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800ee3a:	4440      	add	r0, r8
 800ee3c:	e7cc      	b.n	800edd8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800ee3e:	bf00      	nop
 800ee40:	20004360 	.word	0x20004360

0800ee44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800ee44:	4b07      	ldr	r3, [pc, #28]	@ (800ee64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800ee46:	781b      	ldrb	r3, [r3, #0]
 800ee48:	2b01      	cmp	r3, #1
 800ee4a:	d109      	bne.n	800ee60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800ee4c:	f9b1 3000 	ldrsh.w	r3, [r1]
 800ee50:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ee54:	8003      	strh	r3, [r0, #0]
 800ee56:	4b04      	ldr	r3, [pc, #16]	@ (800ee68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800ee58:	881b      	ldrh	r3, [r3, #0]
 800ee5a:	3b01      	subs	r3, #1
 800ee5c:	1a9b      	subs	r3, r3, r2
 800ee5e:	800b      	strh	r3, [r1, #0]
 800ee60:	4770      	bx	lr
 800ee62:	bf00      	nop
 800ee64:	2000434a 	.word	0x2000434a
 800ee68:	20004346 	.word	0x20004346

0800ee6c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800ee6c:	b510      	push	{r4, lr}
 800ee6e:	4b07      	ldr	r3, [pc, #28]	@ (800ee8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800ee70:	781b      	ldrb	r3, [r3, #0]
 800ee72:	2b01      	cmp	r3, #1
 800ee74:	d108      	bne.n	800ee88 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800ee76:	4b06      	ldr	r3, [pc, #24]	@ (800ee90 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800ee78:	880c      	ldrh	r4, [r1, #0]
 800ee7a:	881b      	ldrh	r3, [r3, #0]
 800ee7c:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ee80:	3b01      	subs	r3, #1
 800ee82:	1b1b      	subs	r3, r3, r4
 800ee84:	8003      	strh	r3, [r0, #0]
 800ee86:	800a      	strh	r2, [r1, #0]
 800ee88:	bd10      	pop	{r4, pc}
 800ee8a:	bf00      	nop
 800ee8c:	2000434a 	.word	0x2000434a
 800ee90:	20004346 	.word	0x20004346

0800ee94 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800ee94:	b510      	push	{r4, lr}
 800ee96:	4b0a      	ldr	r3, [pc, #40]	@ (800eec0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800ee98:	781b      	ldrb	r3, [r3, #0]
 800ee9a:	2b01      	cmp	r3, #1
 800ee9c:	d10e      	bne.n	800eebc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800ee9e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800eea2:	8843      	ldrh	r3, [r0, #2]
 800eea4:	f9b0 4000 	ldrsh.w	r4, [r0]
 800eea8:	8044      	strh	r4, [r0, #2]
 800eeaa:	18ca      	adds	r2, r1, r3
 800eeac:	4b05      	ldr	r3, [pc, #20]	@ (800eec4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800eeae:	881b      	ldrh	r3, [r3, #0]
 800eeb0:	1a9b      	subs	r3, r3, r2
 800eeb2:	8003      	strh	r3, [r0, #0]
 800eeb4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800eeb8:	80c3      	strh	r3, [r0, #6]
 800eeba:	8081      	strh	r1, [r0, #4]
 800eebc:	bd10      	pop	{r4, pc}
 800eebe:	bf00      	nop
 800eec0:	2000434a 	.word	0x2000434a
 800eec4:	20004346 	.word	0x20004346

0800eec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800eec8:	4b08      	ldr	r3, [pc, #32]	@ (800eeec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800eeca:	781b      	ldrb	r3, [r3, #0]
 800eecc:	2b01      	cmp	r3, #1
 800eece:	d10c      	bne.n	800eeea <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800eed0:	8803      	ldrh	r3, [r0, #0]
 800eed2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800eed6:	8842      	ldrh	r2, [r0, #2]
 800eed8:	8002      	strh	r2, [r0, #0]
 800eeda:	185a      	adds	r2, r3, r1
 800eedc:	4b04      	ldr	r3, [pc, #16]	@ (800eef0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800eede:	881b      	ldrh	r3, [r3, #0]
 800eee0:	1a9b      	subs	r3, r3, r2
 800eee2:	8043      	strh	r3, [r0, #2]
 800eee4:	88c3      	ldrh	r3, [r0, #6]
 800eee6:	8083      	strh	r3, [r0, #4]
 800eee8:	80c1      	strh	r1, [r0, #6]
 800eeea:	4770      	bx	lr
 800eeec:	2000434a 	.word	0x2000434a
 800eef0:	20004346 	.word	0x20004346

0800eef4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800eef4:	b510      	push	{r4, lr}
 800eef6:	4b07      	ldr	r3, [pc, #28]	@ (800ef14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800eef8:	781b      	ldrb	r3, [r3, #0]
 800eefa:	2b01      	cmp	r3, #1
 800eefc:	d108      	bne.n	800ef10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800eefe:	f9b1 3000 	ldrsh.w	r3, [r1]
 800ef02:	f9b0 4000 	ldrsh.w	r4, [r0]
 800ef06:	8003      	strh	r3, [r0, #0]
 800ef08:	8893      	ldrh	r3, [r2, #4]
 800ef0a:	3b01      	subs	r3, #1
 800ef0c:	1b1b      	subs	r3, r3, r4
 800ef0e:	800b      	strh	r3, [r1, #0]
 800ef10:	bd10      	pop	{r4, pc}
 800ef12:	bf00      	nop
 800ef14:	2000434a 	.word	0x2000434a

0800ef18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800ef18:	b510      	push	{r4, lr}
 800ef1a:	4b0a      	ldr	r3, [pc, #40]	@ (800ef44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800ef1c:	781b      	ldrb	r3, [r3, #0]
 800ef1e:	2b01      	cmp	r3, #1
 800ef20:	460a      	mov	r2, r1
 800ef22:	d10d      	bne.n	800ef40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800ef24:	8881      	ldrh	r1, [r0, #4]
 800ef26:	8803      	ldrh	r3, [r0, #0]
 800ef28:	440b      	add	r3, r1
 800ef2a:	4601      	mov	r1, r0
 800ef2c:	3b01      	subs	r3, #1
 800ef2e:	f821 3b02 	strh.w	r3, [r1], #2
 800ef32:	f7ff ffdf 	bl	800eef4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800ef36:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ef3a:	88c2      	ldrh	r2, [r0, #6]
 800ef3c:	8082      	strh	r2, [r0, #4]
 800ef3e:	80c3      	strh	r3, [r0, #6]
 800ef40:	bd10      	pop	{r4, pc}
 800ef42:	bf00      	nop
 800ef44:	2000434a 	.word	0x2000434a

0800ef48 <_ZN8touchgfx11Application13requestRedrawEv>:
 800ef48:	4b06      	ldr	r3, [pc, #24]	@ (800ef64 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800ef4a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ef4e:	4b06      	ldr	r3, [pc, #24]	@ (800ef68 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800ef50:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 800ef54:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ef58:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 800ef5c:	2100      	movs	r1, #0
 800ef5e:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 800ef62:	4770      	bx	lr
 800ef64:	20004346 	.word	0x20004346
 800ef68:	20004348 	.word	0x20004348

0800ef6c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800ef6c:	4b03      	ldr	r3, [pc, #12]	@ (800ef7c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800ef6e:	6818      	ldr	r0, [r3, #0]
 800ef70:	b110      	cbz	r0, 800ef78 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800ef72:	6803      	ldr	r3, [r0, #0]
 800ef74:	699b      	ldr	r3, [r3, #24]
 800ef76:	4718      	bx	r3
 800ef78:	4770      	bx	lr
 800ef7a:	bf00      	nop
 800ef7c:	20004390 	.word	0x20004390

0800ef80 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800ef80:	4770      	bx	lr
	...

0800ef84 <_ZN8touchgfx11Application4drawEv>:
 800ef84:	b507      	push	{r0, r1, r2, lr}
 800ef86:	4b09      	ldr	r3, [pc, #36]	@ (800efac <_ZN8touchgfx11Application4drawEv+0x28>)
 800ef88:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ef8c:	4b08      	ldr	r3, [pc, #32]	@ (800efb0 <_ZN8touchgfx11Application4drawEv+0x2c>)
 800ef8e:	f8ad 2004 	strh.w	r2, [sp, #4]
 800ef92:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ef96:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ef9a:	6803      	ldr	r3, [r0, #0]
 800ef9c:	2100      	movs	r1, #0
 800ef9e:	9100      	str	r1, [sp, #0]
 800efa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efa2:	4669      	mov	r1, sp
 800efa4:	4798      	blx	r3
 800efa6:	b003      	add	sp, #12
 800efa8:	f85d fb04 	ldr.w	pc, [sp], #4
 800efac:	20004346 	.word	0x20004346
 800efb0:	20004348 	.word	0x20004348

0800efb4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800efb4:	4b03      	ldr	r3, [pc, #12]	@ (800efc4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800efb6:	6818      	ldr	r0, [r3, #0]
 800efb8:	b110      	cbz	r0, 800efc0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800efba:	6803      	ldr	r3, [r0, #0]
 800efbc:	69db      	ldr	r3, [r3, #28]
 800efbe:	4718      	bx	r3
 800efc0:	4770      	bx	lr
 800efc2:	bf00      	nop
 800efc4:	20004390 	.word	0x20004390

0800efc8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800efc8:	4b03      	ldr	r3, [pc, #12]	@ (800efd8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800efca:	6818      	ldr	r0, [r3, #0]
 800efcc:	b110      	cbz	r0, 800efd4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800efce:	6803      	ldr	r3, [r0, #0]
 800efd0:	6a1b      	ldr	r3, [r3, #32]
 800efd2:	4718      	bx	r3
 800efd4:	4770      	bx	lr
 800efd6:	bf00      	nop
 800efd8:	20004390 	.word	0x20004390

0800efdc <_ZN8touchgfx11Application16clearCachedAreasEv>:
 800efdc:	2300      	movs	r3, #0
 800efde:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 800efe2:	4770      	bx	lr

0800efe4 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800efe4:	4b03      	ldr	r3, [pc, #12]	@ (800eff4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800efe6:	6818      	ldr	r0, [r3, #0]
 800efe8:	b110      	cbz	r0, 800eff0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800efea:	6803      	ldr	r3, [r0, #0]
 800efec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efee:	4718      	bx	r3
 800eff0:	4770      	bx	lr
 800eff2:	bf00      	nop
 800eff4:	20004390 	.word	0x20004390

0800eff8 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800eff8:	b510      	push	{r4, lr}
 800effa:	f9b1 4000 	ldrsh.w	r4, [r1]
 800effe:	888a      	ldrh	r2, [r1, #4]
 800f000:	f9b0 3000 	ldrsh.w	r3, [r0]
 800f004:	4422      	add	r2, r4
 800f006:	b212      	sxth	r2, r2
 800f008:	4293      	cmp	r3, r2
 800f00a:	da15      	bge.n	800f038 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800f00c:	8882      	ldrh	r2, [r0, #4]
 800f00e:	4413      	add	r3, r2
 800f010:	b21b      	sxth	r3, r3
 800f012:	429c      	cmp	r4, r3
 800f014:	da10      	bge.n	800f038 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800f016:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800f01a:	88c9      	ldrh	r1, [r1, #6]
 800f01c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800f020:	4419      	add	r1, r3
 800f022:	b209      	sxth	r1, r1
 800f024:	428a      	cmp	r2, r1
 800f026:	da07      	bge.n	800f038 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800f028:	88c0      	ldrh	r0, [r0, #6]
 800f02a:	4410      	add	r0, r2
 800f02c:	b200      	sxth	r0, r0
 800f02e:	4283      	cmp	r3, r0
 800f030:	bfac      	ite	ge
 800f032:	2000      	movge	r0, #0
 800f034:	2001      	movlt	r0, #1
 800f036:	bd10      	pop	{r4, pc}
 800f038:	2000      	movs	r0, #0
 800f03a:	e7fc      	b.n	800f036 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800f03c <_ZN8touchgfx4Rect10restrictToEss>:
 800f03c:	f9b0 3000 	ldrsh.w	r3, [r0]
 800f040:	2b00      	cmp	r3, #0
 800f042:	b510      	push	{r4, lr}
 800f044:	da04      	bge.n	800f050 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 800f046:	8884      	ldrh	r4, [r0, #4]
 800f048:	4423      	add	r3, r4
 800f04a:	8083      	strh	r3, [r0, #4]
 800f04c:	2300      	movs	r3, #0
 800f04e:	8003      	strh	r3, [r0, #0]
 800f050:	f9b0 4000 	ldrsh.w	r4, [r0]
 800f054:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800f058:	1b09      	subs	r1, r1, r4
 800f05a:	428b      	cmp	r3, r1
 800f05c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800f060:	bfc8      	it	gt
 800f062:	8081      	strhgt	r1, [r0, #4]
 800f064:	2b00      	cmp	r3, #0
 800f066:	da04      	bge.n	800f072 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 800f068:	88c1      	ldrh	r1, [r0, #6]
 800f06a:	440b      	add	r3, r1
 800f06c:	80c3      	strh	r3, [r0, #6]
 800f06e:	2300      	movs	r3, #0
 800f070:	8043      	strh	r3, [r0, #2]
 800f072:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800f076:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800f07a:	1a52      	subs	r2, r2, r1
 800f07c:	4293      	cmp	r3, r2
 800f07e:	bfc8      	it	gt
 800f080:	80c2      	strhgt	r2, [r0, #6]
 800f082:	bd10      	pop	{r4, pc}

0800f084 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800f084:	b510      	push	{r4, lr}
 800f086:	4b10      	ldr	r3, [pc, #64]	@ (800f0c8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 800f088:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f08c:	4b0f      	ldr	r3, [pc, #60]	@ (800f0cc <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 800f08e:	460c      	mov	r4, r1
 800f090:	4620      	mov	r0, r4
 800f092:	f9b3 1000 	ldrsh.w	r1, [r3]
 800f096:	f7ff ffd1 	bl	800f03c <_ZN8touchgfx4Rect10restrictToEss>
 800f09a:	4b0d      	ldr	r3, [pc, #52]	@ (800f0d0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 800f09c:	6818      	ldr	r0, [r3, #0]
 800f09e:	b190      	cbz	r0, 800f0c6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 800f0a0:	6803      	ldr	r3, [r0, #0]
 800f0a2:	4621      	mov	r1, r4
 800f0a4:	689b      	ldr	r3, [r3, #8]
 800f0a6:	4798      	blx	r3
 800f0a8:	4b0a      	ldr	r3, [pc, #40]	@ (800f0d4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 800f0aa:	6818      	ldr	r0, [r3, #0]
 800f0ac:	b118      	cbz	r0, 800f0b6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 800f0ae:	6803      	ldr	r3, [r0, #0]
 800f0b0:	4621      	mov	r1, r4
 800f0b2:	689b      	ldr	r3, [r3, #8]
 800f0b4:	4798      	blx	r3
 800f0b6:	4b08      	ldr	r3, [pc, #32]	@ (800f0d8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 800f0b8:	6818      	ldr	r0, [r3, #0]
 800f0ba:	6803      	ldr	r3, [r0, #0]
 800f0bc:	4621      	mov	r1, r4
 800f0be:	69db      	ldr	r3, [r3, #28]
 800f0c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0c4:	4718      	bx	r3
 800f0c6:	bd10      	pop	{r4, pc}
 800f0c8:	20004348 	.word	0x20004348
 800f0cc:	20004346 	.word	0x20004346
 800f0d0:	20004390 	.word	0x20004390
 800f0d4:	2000438c 	.word	0x2000438c
 800f0d8:	20004354 	.word	0x20004354

0800f0dc <_ZNK8touchgfx4Rect8includesERKS0_>:
 800f0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0de:	4606      	mov	r6, r0
 800f0e0:	4608      	mov	r0, r1
 800f0e2:	460f      	mov	r7, r1
 800f0e4:	f7fc ff6b 	bl	800bfbe <_ZNK8touchgfx4Rect7isEmptyEv>
 800f0e8:	b9e8      	cbnz	r0, 800f126 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800f0ea:	f9b7 5000 	ldrsh.w	r5, [r7]
 800f0ee:	f9b6 4000 	ldrsh.w	r4, [r6]
 800f0f2:	42a5      	cmp	r5, r4
 800f0f4:	db17      	blt.n	800f126 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800f0f6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f0fa:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800f0fe:	429a      	cmp	r2, r3
 800f100:	db11      	blt.n	800f126 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800f102:	88b9      	ldrh	r1, [r7, #4]
 800f104:	440d      	add	r5, r1
 800f106:	88b1      	ldrh	r1, [r6, #4]
 800f108:	440c      	add	r4, r1
 800f10a:	b22d      	sxth	r5, r5
 800f10c:	b224      	sxth	r4, r4
 800f10e:	42a5      	cmp	r5, r4
 800f110:	dc09      	bgt.n	800f126 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800f112:	88f8      	ldrh	r0, [r7, #6]
 800f114:	4410      	add	r0, r2
 800f116:	88f2      	ldrh	r2, [r6, #6]
 800f118:	4413      	add	r3, r2
 800f11a:	b200      	sxth	r0, r0
 800f11c:	b21b      	sxth	r3, r3
 800f11e:	4298      	cmp	r0, r3
 800f120:	bfcc      	ite	gt
 800f122:	2000      	movgt	r0, #0
 800f124:	2001      	movle	r0, #1
 800f126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f128 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800f128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f12a:	4604      	mov	r4, r0
 800f12c:	4608      	mov	r0, r1
 800f12e:	460d      	mov	r5, r1
 800f130:	f7fc ff45 	bl	800bfbe <_ZNK8touchgfx4Rect7isEmptyEv>
 800f134:	b978      	cbnz	r0, 800f156 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800f136:	4620      	mov	r0, r4
 800f138:	f7fc ff41 	bl	800bfbe <_ZNK8touchgfx4Rect7isEmptyEv>
 800f13c:	f9b5 6000 	ldrsh.w	r6, [r5]
 800f140:	b150      	cbz	r0, 800f158 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800f142:	8026      	strh	r6, [r4, #0]
 800f144:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800f148:	8063      	strh	r3, [r4, #2]
 800f14a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800f14e:	80a3      	strh	r3, [r4, #4]
 800f150:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800f154:	80e3      	strh	r3, [r4, #6]
 800f156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f158:	f9b4 1000 	ldrsh.w	r1, [r4]
 800f15c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800f160:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800f164:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800f168:	88ed      	ldrh	r5, [r5, #6]
 800f16a:	42b1      	cmp	r1, r6
 800f16c:	460f      	mov	r7, r1
 800f16e:	bfa8      	it	ge
 800f170:	4637      	movge	r7, r6
 800f172:	4293      	cmp	r3, r2
 800f174:	4618      	mov	r0, r3
 800f176:	4466      	add	r6, ip
 800f178:	bfa8      	it	ge
 800f17a:	4610      	movge	r0, r2
 800f17c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800f180:	8027      	strh	r7, [r4, #0]
 800f182:	442a      	add	r2, r5
 800f184:	88e5      	ldrh	r5, [r4, #6]
 800f186:	8060      	strh	r0, [r4, #2]
 800f188:	4461      	add	r1, ip
 800f18a:	442b      	add	r3, r5
 800f18c:	b236      	sxth	r6, r6
 800f18e:	b209      	sxth	r1, r1
 800f190:	b212      	sxth	r2, r2
 800f192:	b21b      	sxth	r3, r3
 800f194:	428e      	cmp	r6, r1
 800f196:	bfac      	ite	ge
 800f198:	ebc7 0106 	rsbge	r1, r7, r6
 800f19c:	ebc7 0101 	rsblt	r1, r7, r1
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	bfac      	ite	ge
 800f1a4:	ebc0 0202 	rsbge	r2, r0, r2
 800f1a8:	ebc0 0203 	rsblt	r2, r0, r3
 800f1ac:	80a1      	strh	r1, [r4, #4]
 800f1ae:	80e2      	strh	r2, [r4, #6]
 800f1b0:	e7d1      	b.n	800f156 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800f1b4 <_ZN8touchgfx11Application11getInstanceEv>:
 800f1b4:	4b01      	ldr	r3, [pc, #4]	@ (800f1bc <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800f1b6:	6818      	ldr	r0, [r3, #0]
 800f1b8:	4770      	bx	lr
 800f1ba:	bf00      	nop
 800f1bc:	200043a0 	.word	0x200043a0

0800f1c0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 800f1c0:	b510      	push	{r4, lr}
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 800f1c8:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800f1cc:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800f1d0:	4604      	mov	r4, r0
 800f1d2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800f1d6:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	d90e      	bls.n	800f1fc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 800f1de:	18e2      	adds	r2, r4, r3
 800f1e0:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 800f1e4:	b122      	cbz	r2, 800f1f0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 800f1e6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800f1ea:	6803      	ldr	r3, [r0, #0]
 800f1ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f1ee:	4798      	blx	r3
 800f1f0:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800f1f4:	3301      	adds	r3, #1
 800f1f6:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800f1fa:	e7ea      	b.n	800f1d2 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 800f1fc:	bd10      	pop	{r4, pc}

0800f1fe <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 800f1fe:	2300      	movs	r3, #0
 800f200:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800f204:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 800f208:	30a4      	adds	r0, #164	@ 0xa4
 800f20a:	f802 3b01 	strb.w	r3, [r2], #1
 800f20e:	4282      	cmp	r2, r0
 800f210:	d1fb      	bne.n	800f20a <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 800f212:	4770      	bx	lr

0800f214 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800f214:	b570      	push	{r4, r5, r6, lr}
 800f216:	4c0b      	ldr	r4, [pc, #44]	@ (800f244 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 800f218:	4605      	mov	r5, r0
 800f21a:	6820      	ldr	r0, [r4, #0]
 800f21c:	460e      	mov	r6, r1
 800f21e:	b110      	cbz	r0, 800f226 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 800f220:	6803      	ldr	r3, [r0, #0]
 800f222:	695b      	ldr	r3, [r3, #20]
 800f224:	4798      	blx	r3
 800f226:	1d28      	adds	r0, r5, #4
 800f228:	f7ff ffe9 	bl	800f1fe <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800f22c:	6026      	str	r6, [r4, #0]
 800f22e:	6833      	ldr	r3, [r6, #0]
 800f230:	4630      	mov	r0, r6
 800f232:	68db      	ldr	r3, [r3, #12]
 800f234:	4798      	blx	r3
 800f236:	682b      	ldr	r3, [r5, #0]
 800f238:	4628      	mov	r0, r5
 800f23a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f23c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f240:	4718      	bx	r3
 800f242:	bf00      	nop
 800f244:	20004390 	.word	0x20004390

0800f248 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 800f248:	2300      	movs	r3, #0
 800f24a:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 800f24e:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 800f252:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f254:	461a      	mov	r2, r3
 800f256:	461c      	mov	r4, r3
 800f258:	461d      	mov	r5, r3
 800f25a:	459c      	cmp	ip, r3
 800f25c:	dd1a      	ble.n	800f294 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 800f25e:	18c6      	adds	r6, r0, r3
 800f260:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 800f264:	b16e      	cbz	r6, 800f282 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 800f266:	429a      	cmp	r2, r3
 800f268:	d008      	beq.n	800f27c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 800f26a:	fa1f fe82 	uxth.w	lr, r2
 800f26e:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 800f272:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 800f276:	1887      	adds	r7, r0, r2
 800f278:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 800f27c:	3201      	adds	r2, #1
 800f27e:	3301      	adds	r3, #1
 800f280:	e7eb      	b.n	800f25a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 800f282:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 800f286:	4299      	cmp	r1, r3
 800f288:	bfa8      	it	ge
 800f28a:	3501      	addge	r5, #1
 800f28c:	429e      	cmp	r6, r3
 800f28e:	bfc8      	it	gt
 800f290:	3401      	addgt	r4, #1
 800f292:	e7f4      	b.n	800f27e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 800f294:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 800f298:	1b49      	subs	r1, r1, r5
 800f29a:	1b1b      	subs	r3, r3, r4
 800f29c:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 800f2a0:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800f2a4:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	dd03      	ble.n	800f2b4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 800f2ac:	3b01      	subs	r3, #1
 800f2ae:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800f2b2:	e7f7      	b.n	800f2a4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 800f2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800f2b8 <_ZN8touchgfx11Application15handleTickEventEv>:
 800f2b8:	b570      	push	{r4, r5, r6, lr}
 800f2ba:	4d16      	ldr	r5, [pc, #88]	@ (800f314 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 800f2bc:	4604      	mov	r4, r0
 800f2be:	6828      	ldr	r0, [r5, #0]
 800f2c0:	b140      	cbz	r0, 800f2d4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800f2c2:	7a03      	ldrb	r3, [r0, #8]
 800f2c4:	b933      	cbnz	r3, 800f2d4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800f2c6:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800f2ca:	6803      	ldr	r3, [r0, #0]
 800f2cc:	689b      	ldr	r3, [r3, #8]
 800f2ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f2d2:	4718      	bx	r3
 800f2d4:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 800f2d8:	4e0f      	ldr	r6, [pc, #60]	@ (800f318 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 800f2da:	b973      	cbnz	r3, 800f2fa <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800f2dc:	b168      	cbz	r0, 800f2fa <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800f2de:	7a03      	ldrb	r3, [r0, #8]
 800f2e0:	b15b      	cbz	r3, 800f2fa <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800f2e2:	6830      	ldr	r0, [r6, #0]
 800f2e4:	b110      	cbz	r0, 800f2ec <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800f2e6:	6803      	ldr	r3, [r0, #0]
 800f2e8:	691b      	ldr	r3, [r3, #16]
 800f2ea:	4798      	blx	r3
 800f2ec:	6828      	ldr	r0, [r5, #0]
 800f2ee:	6803      	ldr	r3, [r0, #0]
 800f2f0:	68db      	ldr	r3, [r3, #12]
 800f2f2:	4798      	blx	r3
 800f2f4:	2301      	movs	r3, #1
 800f2f6:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800f2fa:	3404      	adds	r4, #4
 800f2fc:	4620      	mov	r0, r4
 800f2fe:	f7ff ff5f 	bl	800f1c0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 800f302:	4620      	mov	r0, r4
 800f304:	f7ff ffa0 	bl	800f248 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 800f308:	6830      	ldr	r0, [r6, #0]
 800f30a:	b110      	cbz	r0, 800f312 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 800f30c:	6803      	ldr	r3, [r0, #0]
 800f30e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f310:	e7dd      	b.n	800f2ce <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800f312:	bd70      	pop	{r4, r5, r6, pc}
 800f314:	20004394 	.word	0x20004394
 800f318:	20004390 	.word	0x20004390

0800f31c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800f31c:	4603      	mov	r3, r0
 800f31e:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 800f322:	2200      	movs	r2, #0
 800f324:	801a      	strh	r2, [r3, #0]
 800f326:	805a      	strh	r2, [r3, #2]
 800f328:	809a      	strh	r2, [r3, #4]
 800f32a:	80da      	strh	r2, [r3, #6]
 800f32c:	3308      	adds	r3, #8
 800f32e:	428b      	cmp	r3, r1
 800f330:	d1f8      	bne.n	800f324 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800f332:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 800f336:	4770      	bx	lr

0800f338 <_ZN8touchgfx11ApplicationC1Ev>:
 800f338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f33a:	4606      	mov	r6, r0
 800f33c:	4b1c      	ldr	r3, [pc, #112]	@ (800f3b0 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800f33e:	f846 3b04 	str.w	r3, [r6], #4
 800f342:	4604      	mov	r4, r0
 800f344:	2500      	movs	r5, #0
 800f346:	22a8      	movs	r2, #168	@ 0xa8
 800f348:	2100      	movs	r1, #0
 800f34a:	4630      	mov	r0, r6
 800f34c:	f004 fa5d 	bl	801380a <memset>
 800f350:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 800f354:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800f358:	f7ff ffe0 	bl	800f31c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800f35c:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 800f360:	f7ff ffdc 	bl	800f31c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800f364:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 800f368:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 800f36c:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 800f370:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 800f374:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 800f378:	490e      	ldr	r1, [pc, #56]	@ (800f3b4 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800f37a:	480f      	ldr	r0, [pc, #60]	@ (800f3b8 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800f37c:	4f0f      	ldr	r7, [pc, #60]	@ (800f3bc <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 800f37e:	f003 ff19 	bl	80131b4 <CRC_Lock>
 800f382:	4b0f      	ldr	r3, [pc, #60]	@ (800f3c0 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 800f384:	b158      	cbz	r0, 800f39e <_ZN8touchgfx11ApplicationC1Ev+0x66>
 800f386:	801d      	strh	r5, [r3, #0]
 800f388:	4a0e      	ldr	r2, [pc, #56]	@ (800f3c4 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 800f38a:	2300      	movs	r3, #0
 800f38c:	6013      	str	r3, [r2, #0]
 800f38e:	4a0e      	ldr	r2, [pc, #56]	@ (800f3c8 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 800f390:	603b      	str	r3, [r7, #0]
 800f392:	4630      	mov	r0, r6
 800f394:	6013      	str	r3, [r2, #0]
 800f396:	f7ff ff32 	bl	800f1fe <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800f39a:	4620      	mov	r0, r4
 800f39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f39e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800f3a2:	2002      	movs	r0, #2
 800f3a4:	801a      	strh	r2, [r3, #0]
 800f3a6:	6038      	str	r0, [r7, #0]
 800f3a8:	f001 fa20 	bl	80107ec <_ZN8touchgfx6Screen4drawEv>
 800f3ac:	e7ec      	b.n	800f388 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 800f3ae:	bf00      	nop
 800f3b0:	08015ccc 	.word	0x08015ccc
 800f3b4:	b5e8b5cd 	.word	0xb5e8b5cd
 800f3b8:	f407a5c2 	.word	0xf407a5c2
 800f3bc:	20004390 	.word	0x20004390
 800f3c0:	20000018 	.word	0x20000018
 800f3c4:	200043a0 	.word	0x200043a0
 800f3c8:	20004394 	.word	0x20004394

0800f3cc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800f3cc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 800f3d0:	3b01      	subs	r3, #1
 800f3d2:	b29b      	uxth	r3, r3
 800f3d4:	428b      	cmp	r3, r1
 800f3d6:	b510      	push	{r4, lr}
 800f3d8:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 800f3dc:	d908      	bls.n	800f3f0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 800f3de:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800f3e2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800f3e6:	681a      	ldr	r2, [r3, #0]
 800f3e8:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800f3ec:	685a      	ldr	r2, [r3, #4]
 800f3ee:	6062      	str	r2, [r4, #4]
 800f3f0:	bd10      	pop	{r4, pc}
	...

0800f3f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800f3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3f8:	4b8f      	ldr	r3, [pc, #572]	@ (800f638 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 800f3fa:	b08f      	sub	sp, #60	@ 0x3c
 800f3fc:	ac0a      	add	r4, sp, #40	@ 0x28
 800f3fe:	e884 0006 	stmia.w	r4, {r1, r2}
 800f402:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f406:	4b8d      	ldr	r3, [pc, #564]	@ (800f63c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 800f408:	4683      	mov	fp, r0
 800f40a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800f40e:	4620      	mov	r0, r4
 800f410:	f7ff fe14 	bl	800f03c <_ZN8touchgfx4Rect10restrictToEss>
 800f414:	4620      	mov	r0, r4
 800f416:	f7fc fdd2 	bl	800bfbe <_ZNK8touchgfx4Rect7isEmptyEv>
 800f41a:	2800      	cmp	r0, #0
 800f41c:	d16a      	bne.n	800f4f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800f41e:	9403      	str	r4, [sp, #12]
 800f420:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 800f424:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800f428:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 800f42c:	35a4      	adds	r5, #164	@ 0xa4
 800f42e:	9301      	str	r3, [sp, #4]
 800f430:	b15c      	cbz	r4, 800f44a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 800f432:	4629      	mov	r1, r5
 800f434:	9803      	ldr	r0, [sp, #12]
 800f436:	f7ff fe51 	bl	800f0dc <_ZNK8touchgfx4Rect8includesERKS0_>
 800f43a:	3c01      	subs	r4, #1
 800f43c:	b118      	cbz	r0, 800f446 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 800f43e:	b2a1      	uxth	r1, r4
 800f440:	9801      	ldr	r0, [sp, #4]
 800f442:	f7ff ffc3 	bl	800f3cc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800f446:	3d08      	subs	r5, #8
 800f448:	e7f2      	b.n	800f430 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 800f44a:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	@ 0xec
 800f44e:	f8cd 8010 	str.w	r8, [sp, #16]
 800f452:	f108 33ff 	add.w	r3, r8, #4294967295
 800f456:	9302      	str	r3, [sp, #8]
 800f458:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800f45c:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 800f460:	9306      	str	r3, [sp, #24]
 800f462:	445c      	add	r4, fp
 800f464:	2500      	movs	r5, #0
 800f466:	4626      	mov	r6, r4
 800f468:	f8cd 8014 	str.w	r8, [sp, #20]
 800f46c:	462f      	mov	r7, r5
 800f46e:	9b05      	ldr	r3, [sp, #20]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d073      	beq.n	800f55c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800f474:	9903      	ldr	r1, [sp, #12]
 800f476:	4630      	mov	r0, r6
 800f478:	f7ff fdbe 	bl	800eff8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800f47c:	b350      	cbz	r0, 800f4d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800f47e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 800f482:	f9b6 c000 	ldrsh.w	ip, [r6]
 800f486:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 800f48a:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 800f48e:	45e6      	cmp	lr, ip
 800f490:	db33      	blt.n	800f4fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800f492:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800f496:	88b3      	ldrh	r3, [r6, #4]
 800f498:	4472      	add	r2, lr
 800f49a:	4463      	add	r3, ip
 800f49c:	b212      	sxth	r2, r2
 800f49e:	b21b      	sxth	r3, r3
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	dc2a      	bgt.n	800f4fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800f4a4:	88f3      	ldrh	r3, [r6, #6]
 800f4a6:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800f4aa:	fa1f f289 	uxth.w	r2, r9
 800f4ae:	4413      	add	r3, r2
 800f4b0:	b29b      	uxth	r3, r3
 800f4b2:	45ca      	cmp	sl, r9
 800f4b4:	fa0f fe83 	sxth.w	lr, r3
 800f4b8:	fa1f fc8a 	uxth.w	ip, sl
 800f4bc:	db0f      	blt.n	800f4de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800f4be:	eba3 030c 	sub.w	r3, r3, ip
 800f4c2:	1ac9      	subs	r1, r1, r3
 800f4c4:	b209      	sxth	r1, r1
 800f4c6:	2900      	cmp	r1, #0
 800f4c8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800f4cc:	dd12      	ble.n	800f4f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800f4ce:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 800f4d2:	4605      	mov	r5, r0
 800f4d4:	9b05      	ldr	r3, [sp, #20]
 800f4d6:	3b01      	subs	r3, #1
 800f4d8:	9305      	str	r3, [sp, #20]
 800f4da:	3e08      	subs	r6, #8
 800f4dc:	e7c7      	b.n	800f46e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 800f4de:	4461      	add	r1, ip
 800f4e0:	b209      	sxth	r1, r1
 800f4e2:	4571      	cmp	r1, lr
 800f4e4:	dc38      	bgt.n	800f558 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800f4e6:	eba2 020c 	sub.w	r2, r2, ip
 800f4ea:	b212      	sxth	r2, r2
 800f4ec:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 800f4f0:	2a00      	cmp	r2, #0
 800f4f2:	dcee      	bgt.n	800f4d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800f4f4:	b00f      	add	sp, #60	@ 0x3c
 800f4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4fa:	45ca      	cmp	sl, r9
 800f4fc:	db2c      	blt.n	800f558 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800f4fe:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800f502:	449a      	add	sl, r3
 800f504:	88f3      	ldrh	r3, [r6, #6]
 800f506:	4499      	add	r9, r3
 800f508:	fa0f fa8a 	sxth.w	sl, sl
 800f50c:	fa0f f989 	sxth.w	r9, r9
 800f510:	45ca      	cmp	sl, r9
 800f512:	dc21      	bgt.n	800f558 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800f514:	88b3      	ldrh	r3, [r6, #4]
 800f516:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 800f51a:	fa1f f28c 	uxth.w	r2, ip
 800f51e:	4413      	add	r3, r2
 800f520:	b29b      	uxth	r3, r3
 800f522:	45e6      	cmp	lr, ip
 800f524:	fa1f f98e 	uxth.w	r9, lr
 800f528:	fa0f fa83 	sxth.w	sl, r3
 800f52c:	db0a      	blt.n	800f544 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 800f52e:	eba3 0309 	sub.w	r3, r3, r9
 800f532:	1ac9      	subs	r1, r1, r3
 800f534:	b209      	sxth	r1, r1
 800f536:	2900      	cmp	r1, #0
 800f538:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 800f53c:	ddda      	ble.n	800f4f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800f53e:	f8ad a028 	strh.w	sl, [sp, #40]	@ 0x28
 800f542:	e7c6      	b.n	800f4d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800f544:	4449      	add	r1, r9
 800f546:	b209      	sxth	r1, r1
 800f548:	4551      	cmp	r1, sl
 800f54a:	dc05      	bgt.n	800f558 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800f54c:	eba2 0209 	sub.w	r2, r2, r9
 800f550:	b212      	sxth	r2, r2
 800f552:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 800f556:	e7cb      	b.n	800f4f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 800f558:	4607      	mov	r7, r0
 800f55a:	e7bb      	b.n	800f4d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800f55c:	2d00      	cmp	r5, #0
 800f55e:	d181      	bne.n	800f464 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 800f560:	2f00      	cmp	r7, #0
 800f562:	f000 81dd 	beq.w	800f920 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800f566:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 800f56a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 800f56e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800f572:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 800f576:	b2b9      	uxth	r1, r7
 800f578:	b2b3      	uxth	r3, r6
 800f57a:	441a      	add	r2, r3
 800f57c:	448a      	add	sl, r1
 800f57e:	b292      	uxth	r2, r2
 800f580:	fa1f fa8a 	uxth.w	sl, sl
 800f584:	fa0f f882 	sxth.w	r8, r2
 800f588:	9105      	str	r1, [sp, #20]
 800f58a:	fa0f f98a 	sxth.w	r9, sl
 800f58e:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800f592:	9b04      	ldr	r3, [sp, #16]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d053      	beq.n	800f640 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 800f598:	9903      	ldr	r1, [sp, #12]
 800f59a:	4620      	mov	r0, r4
 800f59c:	f7ff fd2c 	bl	800eff8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800f5a0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f5a4:	b1c0      	cbz	r0, 800f5d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800f5a6:	f9b4 e000 	ldrsh.w	lr, [r4]
 800f5aa:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800f5ae:	4576      	cmp	r6, lr
 800f5b0:	dc23      	bgt.n	800f5fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800f5b2:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800f5b6:	44f4      	add	ip, lr
 800f5b8:	fa0f fc8c 	sxth.w	ip, ip
 800f5bc:	45e0      	cmp	r8, ip
 800f5be:	db1c      	blt.n	800f5fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800f5c0:	428f      	cmp	r7, r1
 800f5c2:	fa1f fc81 	uxth.w	ip, r1
 800f5c6:	88e1      	ldrh	r1, [r4, #6]
 800f5c8:	dc0d      	bgt.n	800f5e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 800f5ca:	ebaa 0c0c 	sub.w	ip, sl, ip
 800f5ce:	eba1 010c 	sub.w	r1, r1, ip
 800f5d2:	f8a4 9002 	strh.w	r9, [r4, #2]
 800f5d6:	80e1      	strh	r1, [r4, #6]
 800f5d8:	4628      	mov	r0, r5
 800f5da:	9904      	ldr	r1, [sp, #16]
 800f5dc:	3901      	subs	r1, #1
 800f5de:	9104      	str	r1, [sp, #16]
 800f5e0:	3c08      	subs	r4, #8
 800f5e2:	4605      	mov	r5, r0
 800f5e4:	e7d3      	b.n	800f58e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 800f5e6:	4461      	add	r1, ip
 800f5e8:	b209      	sxth	r1, r1
 800f5ea:	4549      	cmp	r1, r9
 800f5ec:	dcf5      	bgt.n	800f5da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800f5ee:	9905      	ldr	r1, [sp, #20]
 800f5f0:	eba1 0c0c 	sub.w	ip, r1, ip
 800f5f4:	f8a4 c006 	strh.w	ip, [r4, #6]
 800f5f8:	e7ee      	b.n	800f5d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800f5fa:	428f      	cmp	r7, r1
 800f5fc:	dced      	bgt.n	800f5da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800f5fe:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 800f602:	4461      	add	r1, ip
 800f604:	b209      	sxth	r1, r1
 800f606:	4589      	cmp	r9, r1
 800f608:	dbe7      	blt.n	800f5da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800f60a:	4576      	cmp	r6, lr
 800f60c:	fa1f fc8e 	uxth.w	ip, lr
 800f610:	88a1      	ldrh	r1, [r4, #4]
 800f612:	dc07      	bgt.n	800f624 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 800f614:	eba2 0c0c 	sub.w	ip, r2, ip
 800f618:	eba1 010c 	sub.w	r1, r1, ip
 800f61c:	f8a4 8000 	strh.w	r8, [r4]
 800f620:	80a1      	strh	r1, [r4, #4]
 800f622:	e7d9      	b.n	800f5d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800f624:	4461      	add	r1, ip
 800f626:	b209      	sxth	r1, r1
 800f628:	4588      	cmp	r8, r1
 800f62a:	dbd6      	blt.n	800f5da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800f62c:	eba3 0c0c 	sub.w	ip, r3, ip
 800f630:	f8a4 c004 	strh.w	ip, [r4, #4]
 800f634:	e7d0      	b.n	800f5d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800f636:	bf00      	nop
 800f638:	20004348 	.word	0x20004348
 800f63c:	20004346 	.word	0x20004346
 800f640:	2d00      	cmp	r5, #0
 800f642:	f000 816d 	beq.w	800f920 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800f646:	9b06      	ldr	r3, [sp, #24]
 800f648:	445b      	add	r3, fp
 800f64a:	461c      	mov	r4, r3
 800f64c:	9b02      	ldr	r3, [sp, #8]
 800f64e:	3301      	adds	r3, #1
 800f650:	f000 8166 	beq.w	800f920 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800f654:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 800f658:	4629      	mov	r1, r5
 800f65a:	9803      	ldr	r0, [sp, #12]
 800f65c:	f7ff fd3e 	bl	800f0dc <_ZNK8touchgfx4Rect8includesERKS0_>
 800f660:	b120      	cbz	r0, 800f66c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 800f662:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800f666:	9801      	ldr	r0, [sp, #4]
 800f668:	f7ff feb0 	bl	800f3cc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800f66c:	9903      	ldr	r1, [sp, #12]
 800f66e:	4628      	mov	r0, r5
 800f670:	f7ff fcc2 	bl	800eff8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800f674:	2800      	cmp	r0, #0
 800f676:	f000 809c 	beq.w	800f7b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800f67a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 800f67e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800f682:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800f686:	9309      	str	r3, [sp, #36]	@ 0x24
 800f688:	fa1f f189 	uxth.w	r1, r9
 800f68c:	eb01 0c03 	add.w	ip, r1, r3
 800f690:	fa1f fa8c 	uxth.w	sl, ip
 800f694:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 800f698:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 800f69c:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 800f6a0:	b283      	uxth	r3, r0
 800f6a2:	eb03 050c 	add.w	r5, r3, ip
 800f6a6:	b2ad      	uxth	r5, r5
 800f6a8:	9505      	str	r5, [sp, #20]
 800f6aa:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 800f6ae:	9504      	str	r5, [sp, #16]
 800f6b0:	4548      	cmp	r0, r9
 800f6b2:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 800f6b6:	f340 8099 	ble.w	800f7ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 800f6ba:	1a5b      	subs	r3, r3, r1
 800f6bc:	b29b      	uxth	r3, r3
 800f6be:	4596      	cmp	lr, r2
 800f6c0:	fa0f f08a 	sxth.w	r0, sl
 800f6c4:	b21e      	sxth	r6, r3
 800f6c6:	dd2e      	ble.n	800f726 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 800f6c8:	9f02      	ldr	r7, [sp, #8]
 800f6ca:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 800f6ce:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 800f6d2:	9f04      	ldr	r7, [sp, #16]
 800f6d4:	1a3f      	subs	r7, r7, r0
 800f6d6:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 800f6da:	fa1f fe8e 	uxth.w	lr, lr
 800f6de:	b292      	uxth	r2, r2
 800f6e0:	ebae 0102 	sub.w	r1, lr, r2
 800f6e4:	44a6      	add	lr, r4
 800f6e6:	4402      	add	r2, r0
 800f6e8:	b289      	uxth	r1, r1
 800f6ea:	fa0f fe8e 	sxth.w	lr, lr
 800f6ee:	b212      	sxth	r2, r2
 800f6f0:	b20d      	sxth	r5, r1
 800f6f2:	ebae 0202 	sub.w	r2, lr, r2
 800f6f6:	436f      	muls	r7, r5
 800f6f8:	4372      	muls	r2, r6
 800f6fa:	4297      	cmp	r7, r2
 800f6fc:	db09      	blt.n	800f712 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 800f6fe:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 800f702:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 800f706:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800f70a:	449c      	add	ip, r3
 800f70c:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800f710:	e686      	b.n	800f420 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800f712:	4421      	add	r1, r4
 800f714:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 800f718:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 800f71c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800f720:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800f724:	e67c      	b.n	800f420 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800f726:	9f04      	ldr	r7, [sp, #16]
 800f728:	42b8      	cmp	r0, r7
 800f72a:	da27      	bge.n	800f77c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 800f72c:	9902      	ldr	r1, [sp, #8]
 800f72e:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 800f732:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 800f736:	eb05 010e 	add.w	r1, r5, lr
 800f73a:	fa1f f881 	uxth.w	r8, r1
 800f73e:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 800f742:	4411      	add	r1, r2
 800f744:	eba1 0108 	sub.w	r1, r1, r8
 800f748:	b289      	uxth	r1, r1
 800f74a:	fa0f f988 	sxth.w	r9, r8
 800f74e:	eba2 020e 	sub.w	r2, r2, lr
 800f752:	fa0f f881 	sxth.w	r8, r1
 800f756:	1a3f      	subs	r7, r7, r0
 800f758:	4372      	muls	r2, r6
 800f75a:	fb08 f707 	mul.w	r7, r8, r7
 800f75e:	42ba      	cmp	r2, r7
 800f760:	dc06      	bgt.n	800f770 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 800f762:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 800f766:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 800f76a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 800f76e:	e7ca      	b.n	800f706 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 800f770:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 800f774:	4429      	add	r1, r5
 800f776:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800f77a:	e651      	b.n	800f420 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800f77c:	9805      	ldr	r0, [sp, #20]
 800f77e:	ebaa 0000 	sub.w	r0, sl, r0
 800f782:	b280      	uxth	r0, r0
 800f784:	2d06      	cmp	r5, #6
 800f786:	fa0f fe80 	sxth.w	lr, r0
 800f78a:	d817      	bhi.n	800f7bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 800f78c:	9b04      	ldr	r3, [sp, #16]
 800f78e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800f792:	1c6b      	adds	r3, r5, #1
 800f794:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 800f798:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 800f79c:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800f7a0:	9b01      	ldr	r3, [sp, #4]
 800f7a2:	9801      	ldr	r0, [sp, #4]
 800f7a4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f7a8:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 800f7ac:	805a      	strh	r2, [r3, #2]
 800f7ae:	809e      	strh	r6, [r3, #4]
 800f7b0:	80d9      	strh	r1, [r3, #6]
 800f7b2:	9b02      	ldr	r3, [sp, #8]
 800f7b4:	3b01      	subs	r3, #1
 800f7b6:	9302      	str	r3, [sp, #8]
 800f7b8:	3c08      	subs	r4, #8
 800f7ba:	e747      	b.n	800f64c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 800f7bc:	9a02      	ldr	r2, [sp, #8]
 800f7be:	45b6      	cmp	lr, r6
 800f7c0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800f7c4:	db0d      	blt.n	800f7e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 800f7c6:	449c      	add	ip, r3
 800f7c8:	fa1f fc8c 	uxth.w	ip, ip
 800f7cc:	445a      	add	r2, fp
 800f7ce:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800f7d2:	448c      	add	ip, r1
 800f7d4:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 800f7d8:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 800f7dc:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 800f7e0:	e61e      	b.n	800f420 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800f7e2:	445a      	add	r2, fp
 800f7e4:	4484      	add	ip, r0
 800f7e6:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 800f7ea:	e78f      	b.n	800f70c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800f7ec:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 800f7f0:	fa1f f18e 	uxth.w	r1, lr
 800f7f4:	eb01 0806 	add.w	r8, r1, r6
 800f7f8:	b293      	uxth	r3, r2
 800f7fa:	fa1f f888 	uxth.w	r8, r8
 800f7fe:	9306      	str	r3, [sp, #24]
 800f800:	fa0f f388 	sxth.w	r3, r8
 800f804:	9307      	str	r3, [sp, #28]
 800f806:	9f06      	ldr	r7, [sp, #24]
 800f808:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 800f80c:	443b      	add	r3, r7
 800f80e:	b29b      	uxth	r3, r3
 800f810:	4596      	cmp	lr, r2
 800f812:	9308      	str	r3, [sp, #32]
 800f814:	da24      	bge.n	800f860 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 800f816:	9905      	ldr	r1, [sp, #20]
 800f818:	eba3 0308 	sub.w	r3, r3, r8
 800f81c:	ebaa 0401 	sub.w	r4, sl, r1
 800f820:	b2a4      	uxth	r4, r4
 800f822:	b29b      	uxth	r3, r3
 800f824:	b225      	sxth	r5, r4
 800f826:	b219      	sxth	r1, r3
 800f828:	eba2 020e 	sub.w	r2, r2, lr
 800f82c:	eba9 0000 	sub.w	r0, r9, r0
 800f830:	436a      	muls	r2, r5
 800f832:	4348      	muls	r0, r1
 800f834:	4282      	cmp	r2, r0
 800f836:	9a02      	ldr	r2, [sp, #8]
 800f838:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800f83c:	445a      	add	r2, fp
 800f83e:	dc06      	bgt.n	800f84e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 800f840:	9b07      	ldr	r3, [sp, #28]
 800f842:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 800f846:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 800f84a:	44a4      	add	ip, r4
 800f84c:	e75e      	b.n	800f70c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800f84e:	9904      	ldr	r1, [sp, #16]
 800f850:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 800f854:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 800f858:	4433      	add	r3, r6
 800f85a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800f85e:	e5df      	b.n	800f420 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800f860:	9f06      	ldr	r7, [sp, #24]
 800f862:	9b04      	ldr	r3, [sp, #16]
 800f864:	1bc9      	subs	r1, r1, r7
 800f866:	fa0f f78a 	sxth.w	r7, sl
 800f86a:	b289      	uxth	r1, r1
 800f86c:	429f      	cmp	r7, r3
 800f86e:	fa0f fe81 	sxth.w	lr, r1
 800f872:	dd23      	ble.n	800f8bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 800f874:	9a05      	ldr	r2, [sp, #20]
 800f876:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800f87a:	9d07      	ldr	r5, [sp, #28]
 800f87c:	ebaa 0202 	sub.w	r2, sl, r2
 800f880:	b292      	uxth	r2, r2
 800f882:	eba5 0a03 	sub.w	sl, r5, r3
 800f886:	b214      	sxth	r4, r2
 800f888:	eba9 0000 	sub.w	r0, r9, r0
 800f88c:	9b02      	ldr	r3, [sp, #8]
 800f88e:	fb0e f000 	mul.w	r0, lr, r0
 800f892:	fb04 fa0a 	mul.w	sl, r4, sl
 800f896:	00db      	lsls	r3, r3, #3
 800f898:	4550      	cmp	r0, sl
 800f89a:	445b      	add	r3, fp
 800f89c:	db03      	blt.n	800f8a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 800f89e:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 800f8a2:	4494      	add	ip, r2
 800f8a4:	e732      	b.n	800f70c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800f8a6:	9a04      	ldr	r2, [sp, #16]
 800f8a8:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 800f8ac:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 800f8b0:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 800f8b4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800f8b8:	4431      	add	r1, r6
 800f8ba:	e75c      	b.n	800f776 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 800f8bc:	9b08      	ldr	r3, [sp, #32]
 800f8be:	eba3 0308 	sub.w	r3, r3, r8
 800f8c2:	b29b      	uxth	r3, r3
 800f8c4:	2d06      	cmp	r5, #6
 800f8c6:	b218      	sxth	r0, r3
 800f8c8:	d813      	bhi.n	800f8f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 800f8ca:	9b07      	ldr	r3, [sp, #28]
 800f8cc:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 800f8d0:	1c6b      	adds	r3, r5, #1
 800f8d2:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 800f8d6:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800f8da:	9b01      	ldr	r3, [sp, #4]
 800f8dc:	9901      	ldr	r1, [sp, #4]
 800f8de:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f8e2:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 800f8e6:	805a      	strh	r2, [r3, #2]
 800f8e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f8ea:	809a      	strh	r2, [r3, #4]
 800f8ec:	f8a3 e006 	strh.w	lr, [r3, #6]
 800f8f0:	e75f      	b.n	800f7b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800f8f2:	9c02      	ldr	r4, [sp, #8]
 800f8f4:	4570      	cmp	r0, lr
 800f8f6:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800f8fa:	db0d      	blt.n	800f918 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 800f8fc:	4431      	add	r1, r6
 800f8fe:	9b06      	ldr	r3, [sp, #24]
 800f900:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 800f904:	b289      	uxth	r1, r1
 800f906:	445c      	add	r4, fp
 800f908:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800f90c:	4419      	add	r1, r3
 800f90e:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 800f912:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 800f916:	e583      	b.n	800f420 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800f918:	445c      	add	r4, fp
 800f91a:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 800f91e:	e79b      	b.n	800f858 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 800f920:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 800f924:	2e07      	cmp	r6, #7
 800f926:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 800f92a:	d812      	bhi.n	800f952 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
 800f92c:	1c75      	adds	r5, r6, #1
 800f92e:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 800f932:	9d01      	ldr	r5, [sp, #4]
 800f934:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800f938:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 800f93c:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 800f940:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 800f944:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 800f948:	442c      	add	r4, r5
 800f94a:	8061      	strh	r1, [r4, #2]
 800f94c:	80a2      	strh	r2, [r4, #4]
 800f94e:	80e3      	strh	r3, [r4, #6]
 800f950:	e5d0      	b.n	800f4f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800f952:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800f956:	3e01      	subs	r6, #1
 800f958:	445c      	add	r4, fp
 800f95a:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 800f95e:	f04f 37ff 	mov.w	r7, #4294967295
 800f962:	2500      	movs	r5, #0
 800f964:	9305      	str	r3, [sp, #20]
 800f966:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800f96a:	9302      	str	r3, [sp, #8]
 800f96c:	1e72      	subs	r2, r6, #1
 800f96e:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 800f972:	9304      	str	r3, [sp, #16]
 800f974:	4691      	mov	r9, r2
 800f976:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 800f97a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800f97e:	bf14      	ite	ne
 800f980:	9905      	ldrne	r1, [sp, #20]
 800f982:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 800f986:	6818      	ldr	r0, [r3, #0]
 800f988:	9207      	str	r2, [sp, #28]
 800f98a:	bf18      	it	ne
 800f98c:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 800f990:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800f994:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800f998:	f8be 8004 	ldrh.w	r8, [lr, #4]
 800f99c:	9306      	str	r3, [sp, #24]
 800f99e:	fb18 f801 	smulbb	r8, r8, r1
 800f9a2:	6859      	ldr	r1, [r3, #4]
 800f9a4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800f9a8:	4671      	mov	r1, lr
 800f9aa:	a80c      	add	r0, sp, #48	@ 0x30
 800f9ac:	f7ff fbbc 	bl	800f128 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800f9b0:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 800f9b4:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 800f9b8:	9b04      	ldr	r3, [sp, #16]
 800f9ba:	9a02      	ldr	r2, [sp, #8]
 800f9bc:	fb10 f001 	smulbb	r0, r0, r1
 800f9c0:	fb02 8803 	mla	r8, r2, r3, r8
 800f9c4:	eba0 0108 	sub.w	r1, r0, r8
 800f9c8:	f04f 0c08 	mov.w	ip, #8
 800f9cc:	fb90 f0fc 	sdiv	r0, r0, ip
 800f9d0:	4288      	cmp	r0, r1
 800f9d2:	dc20      	bgt.n	800fa16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 800f9d4:	4551      	cmp	r1, sl
 800f9d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f9da:	da03      	bge.n	800f9e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
 800f9dc:	b1d9      	cbz	r1, 800fa16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 800f9de:	468a      	mov	sl, r1
 800f9e0:	464f      	mov	r7, r9
 800f9e2:	4635      	mov	r5, r6
 800f9e4:	f109 39ff 	add.w	r9, r9, #4294967295
 800f9e8:	f119 0f02 	cmn.w	r9, #2
 800f9ec:	d1c5      	bne.n	800f97a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 800f9ee:	4616      	mov	r6, r2
 800f9f0:	3201      	adds	r2, #1
 800f9f2:	f1a4 0408 	sub.w	r4, r4, #8
 800f9f6:	d1b6      	bne.n	800f966 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
 800f9f8:	9b01      	ldr	r3, [sp, #4]
 800f9fa:	b2ac      	uxth	r4, r5
 800f9fc:	00ed      	lsls	r5, r5, #3
 800f9fe:	1958      	adds	r0, r3, r5
 800fa00:	1c7b      	adds	r3, r7, #1
 800fa02:	d10b      	bne.n	800fa1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x628>
 800fa04:	4601      	mov	r1, r0
 800fa06:	9803      	ldr	r0, [sp, #12]
 800fa08:	f7ff fb8e 	bl	800f128 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800fa0c:	4621      	mov	r1, r4
 800fa0e:	9801      	ldr	r0, [sp, #4]
 800fa10:	f7ff fcdc 	bl	800f3cc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800fa14:	e504      	b.n	800f420 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800fa16:	464f      	mov	r7, r9
 800fa18:	4635      	mov	r5, r6
 800fa1a:	e7ed      	b.n	800f9f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x604>
 800fa1c:	9b01      	ldr	r3, [sp, #4]
 800fa1e:	00ff      	lsls	r7, r7, #3
 800fa20:	19d9      	adds	r1, r3, r7
 800fa22:	f7ff fb81 	bl	800f128 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800fa26:	9b03      	ldr	r3, [sp, #12]
 800fa28:	cb03      	ldmia	r3!, {r0, r1}
 800fa2a:	445f      	add	r7, fp
 800fa2c:	445d      	add	r5, fp
 800fa2e:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800fa32:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 800fa36:	f855 0fac 	ldr.w	r0, [r5, #172]!
 800fa3a:	9b03      	ldr	r3, [sp, #12]
 800fa3c:	6869      	ldr	r1, [r5, #4]
 800fa3e:	c303      	stmia	r3!, {r0, r1}
 800fa40:	e7e4      	b.n	800fa0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x618>
 800fa42:	bf00      	nop

0800fa44 <_ZN8touchgfx11Application10invalidateEv>:
 800fa44:	4b09      	ldr	r3, [pc, #36]	@ (800fa6c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 800fa46:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fa4a:	4b09      	ldr	r3, [pc, #36]	@ (800fa70 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 800fa4c:	b082      	sub	sp, #8
 800fa4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa52:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fa56:	2100      	movs	r1, #0
 800fa58:	9100      	str	r1, [sp, #0]
 800fa5a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800fa5e:	ab02      	add	r3, sp, #8
 800fa60:	e913 0006 	ldmdb	r3, {r1, r2}
 800fa64:	b002      	add	sp, #8
 800fa66:	f7ff bcc5 	b.w	800f3f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800fa6a:	bf00      	nop
 800fa6c:	20004346 	.word	0x20004346
 800fa70:	20004348 	.word	0x20004348

0800fa74 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 800fa74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa78:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 800fa7c:	b09b      	sub	sp, #108	@ 0x6c
 800fa7e:	4604      	mov	r4, r0
 800fa80:	4630      	mov	r0, r6
 800fa82:	f7fc fa9c 	bl	800bfbe <_ZNK8touchgfx4Rect7isEmptyEv>
 800fa86:	4605      	mov	r5, r0
 800fa88:	b940      	cbnz	r0, 800fa9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 800fa8a:	e896 0006 	ldmia.w	r6, {r1, r2}
 800fa8e:	4620      	mov	r0, r4
 800fa90:	f7ff fcb0 	bl	800f3f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800fa94:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 800fa98:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 800fa9c:	4bc9      	ldr	r3, [pc, #804]	@ (800fdc4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d03e      	beq.n	800fb22 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 800faa4:	4dc8      	ldr	r5, [pc, #800]	@ (800fdc8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 800faa6:	4628      	mov	r0, r5
 800faa8:	f7fc fa89 	bl	800bfbe <_ZNK8touchgfx4Rect7isEmptyEv>
 800faac:	4606      	mov	r6, r0
 800faae:	2800      	cmp	r0, #0
 800fab0:	d137      	bne.n	800fb22 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 800fab2:	4628      	mov	r0, r5
 800fab4:	f7ff f9ee 	bl	800ee94 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800fab8:	6829      	ldr	r1, [r5, #0]
 800faba:	686a      	ldr	r2, [r5, #4]
 800fabc:	4620      	mov	r0, r4
 800fabe:	f7ff fc99 	bl	800f3f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800fac2:	802e      	strh	r6, [r5, #0]
 800fac4:	806e      	strh	r6, [r5, #2]
 800fac6:	80ae      	strh	r6, [r5, #4]
 800fac8:	80ee      	strh	r6, [r5, #6]
 800faca:	ae09      	add	r6, sp, #36	@ 0x24
 800facc:	4630      	mov	r0, r6
 800face:	f7ff fc25 	bl	800f31c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800fad2:	4abe      	ldr	r2, [pc, #760]	@ (800fdcc <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 800fad4:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 800fad8:	8815      	ldrh	r5, [r2, #0]
 800fada:	9202      	str	r2, [sp, #8]
 800fadc:	462b      	mov	r3, r5
 800fade:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800fae2:	429f      	cmp	r7, r3
 800fae4:	d924      	bls.n	800fb30 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 800fae6:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 800faea:	2907      	cmp	r1, #7
 800faec:	d816      	bhi.n	800fb1c <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 800faee:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 800faf2:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 800faf6:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 800fafa:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 800fafe:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 800fb02:	1c4a      	adds	r2, r1, #1
 800fb04:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 800fb08:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 800fb0c:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 800fb10:	f8a2 9002 	strh.w	r9, [r2, #2]
 800fb14:	f8a2 e004 	strh.w	lr, [r2, #4]
 800fb18:	f8a2 c006 	strh.w	ip, [r2, #6]
 800fb1c:	3301      	adds	r3, #1
 800fb1e:	b29b      	uxth	r3, r3
 800fb20:	e7df      	b.n	800fae2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 800fb22:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d1cf      	bne.n	800faca <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 800fb2a:	b01b      	add	sp, #108	@ 0x6c
 800fb2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb30:	462f      	mov	r7, r5
 800fb32:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 800fb36:	42bb      	cmp	r3, r7
 800fb38:	d90b      	bls.n	800fb52 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 800fb3a:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 800fb3e:	4620      	mov	r0, r4
 800fb40:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 800fb44:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 800fb48:	3701      	adds	r7, #1
 800fb4a:	f7ff fc53 	bl	800f3f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800fb4e:	b2bf      	uxth	r7, r7
 800fb50:	e7ef      	b.n	800fb32 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 800fb52:	4a9f      	ldr	r2, [pc, #636]	@ (800fdd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 800fb54:	6813      	ldr	r3, [r2, #0]
 800fb56:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fb5a:	2b01      	cmp	r3, #1
 800fb5c:	4690      	mov	r8, r2
 800fb5e:	f040 80e6 	bne.w	800fd2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ba>
 800fb62:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 800fb66:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 800fb6a:	4629      	mov	r1, r5
 800fb6c:	33ae      	adds	r3, #174	@ 0xae
 800fb6e:	2500      	movs	r5, #0
 800fb70:	428f      	cmp	r7, r1
 800fb72:	f103 0308 	add.w	r3, r3, #8
 800fb76:	dd0a      	ble.n	800fb8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 800fb78:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 800fb7c:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 800fb80:	4402      	add	r2, r0
 800fb82:	b212      	sxth	r2, r2
 800fb84:	4295      	cmp	r5, r2
 800fb86:	bfb8      	it	lt
 800fb88:	4615      	movlt	r5, r2
 800fb8a:	3101      	adds	r1, #1
 800fb8c:	e7f0      	b.n	800fb70 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 800fb8e:	4b91      	ldr	r3, [pc, #580]	@ (800fdd4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 800fb90:	f8df b23c 	ldr.w	fp, [pc, #572]	@ 800fdd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>
 800fb94:	881b      	ldrh	r3, [r3, #0]
 800fb96:	2b0f      	cmp	r3, #15
 800fb98:	bf88      	it	hi
 800fb9a:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 800fb9e:	f04f 0300 	mov.w	r3, #0
 800fba2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800fba6:	bf98      	it	ls
 800fba8:	f04f 0a01 	movls.w	sl, #1
 800fbac:	46d8      	mov	r8, fp
 800fbae:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 800fbb2:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800fbb6:	4438      	add	r0, r7
 800fbb8:	b207      	sxth	r7, r0
 800fbba:	f8db 0000 	ldr.w	r0, [fp]
 800fbbe:	42bd      	cmp	r5, r7
 800fbc0:	6803      	ldr	r3, [r0, #0]
 800fbc2:	f340 8084 	ble.w	800fcce <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800fbc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fbca:	4798      	blx	r3
 800fbcc:	eb07 030a 	add.w	r3, r7, sl
 800fbd0:	4298      	cmp	r0, r3
 800fbd2:	da07      	bge.n	800fbe4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 800fbd4:	4285      	cmp	r5, r0
 800fbd6:	dd05      	ble.n	800fbe4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 800fbd8:	4287      	cmp	r7, r0
 800fbda:	dd6d      	ble.n	800fcb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 800fbdc:	2f00      	cmp	r7, #0
 800fbde:	dd6b      	ble.n	800fcb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 800fbe0:	4628      	mov	r0, r5
 800fbe2:	e004      	b.n	800fbee <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 800fbe4:	4287      	cmp	r7, r0
 800fbe6:	dcfb      	bgt.n	800fbe0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 800fbe8:	42a8      	cmp	r0, r5
 800fbea:	bfa8      	it	ge
 800fbec:	4628      	movge	r0, r5
 800fbee:	4b7a      	ldr	r3, [pc, #488]	@ (800fdd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 800fbf0:	f8ad 7016 	strh.w	r7, [sp, #22]
 800fbf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fbf8:	f8ad 3018 	strh.w	r3, [sp, #24]
 800fbfc:	9b02      	ldr	r3, [sp, #8]
 800fbfe:	1bc0      	subs	r0, r0, r7
 800fc00:	2200      	movs	r2, #0
 800fc02:	881f      	ldrh	r7, [r3, #0]
 800fc04:	f8ad 2014 	strh.w	r2, [sp, #20]
 800fc08:	f8ad 001a 	strh.w	r0, [sp, #26]
 800fc0c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800fc10:	42bb      	cmp	r3, r7
 800fc12:	d9cc      	bls.n	800fbae <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 800fc14:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 800fc18:	ab07      	add	r3, sp, #28
 800fc1a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800fc1e:	6851      	ldr	r1, [r2, #4]
 800fc20:	c303      	stmia	r3!, {r0, r1}
 800fc22:	a905      	add	r1, sp, #20
 800fc24:	a807      	add	r0, sp, #28
 800fc26:	f7ff f9e7 	bl	800eff8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800fc2a:	2800      	cmp	r0, #0
 800fc2c:	d04c      	beq.n	800fcc8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 800fc2e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 800fc32:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800fc36:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 800fc3a:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 800fc3e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800fc42:	9303      	str	r3, [sp, #12]
 800fc44:	4686      	mov	lr, r0
 800fc46:	4290      	cmp	r0, r2
 800fc48:	4448      	add	r0, r9
 800fc4a:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 800fc4e:	bfb8      	it	lt
 800fc50:	4696      	movlt	lr, r2
 800fc52:	444a      	add	r2, r9
 800fc54:	4299      	cmp	r1, r3
 800fc56:	b280      	uxth	r0, r0
 800fc58:	b292      	uxth	r2, r2
 800fc5a:	468c      	mov	ip, r1
 800fc5c:	fa0f f982 	sxth.w	r9, r2
 800fc60:	bfb8      	it	lt
 800fc62:	469c      	movlt	ip, r3
 800fc64:	b203      	sxth	r3, r0
 800fc66:	454b      	cmp	r3, r9
 800fc68:	bfb8      	it	lt
 800fc6a:	4602      	movlt	r2, r0
 800fc6c:	eba2 020e 	sub.w	r2, r2, lr
 800fc70:	f8ad 2020 	strh.w	r2, [sp, #32]
 800fc74:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 800fc78:	9b03      	ldr	r3, [sp, #12]
 800fc7a:	f8ad e01c 	strh.w	lr, [sp, #28]
 800fc7e:	4411      	add	r1, r2
 800fc80:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800fc84:	f8ad c01e 	strh.w	ip, [sp, #30]
 800fc88:	4413      	add	r3, r2
 800fc8a:	b289      	uxth	r1, r1
 800fc8c:	b29b      	uxth	r3, r3
 800fc8e:	b208      	sxth	r0, r1
 800fc90:	b21a      	sxth	r2, r3
 800fc92:	4290      	cmp	r0, r2
 800fc94:	bfb8      	it	lt
 800fc96:	460b      	movlt	r3, r1
 800fc98:	eba3 030c 	sub.w	r3, r3, ip
 800fc9c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800fca0:	a807      	add	r0, sp, #28
 800fca2:	f7fc f98c 	bl	800bfbe <_ZNK8touchgfx4Rect7isEmptyEv>
 800fca6:	b920      	cbnz	r0, 800fcb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 800fca8:	6823      	ldr	r3, [r4, #0]
 800fcaa:	a907      	add	r1, sp, #28
 800fcac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fcae:	4620      	mov	r0, r4
 800fcb0:	4798      	blx	r3
 800fcb2:	3701      	adds	r7, #1
 800fcb4:	b2bf      	uxth	r7, r7
 800fcb6:	e7a9      	b.n	800fc0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 800fcb8:	f8d8 0000 	ldr.w	r0, [r8]
 800fcbc:	6803      	ldr	r3, [r0, #0]
 800fcbe:	2101      	movs	r1, #1
 800fcc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800fcc4:	4798      	blx	r3
 800fcc6:	e772      	b.n	800fbae <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 800fcc8:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800fccc:	e7e8      	b.n	800fca0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 800fcce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcd0:	4798      	blx	r3
 800fcd2:	4b42      	ldr	r3, [pc, #264]	@ (800fddc <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 800fcd4:	781b      	ldrb	r3, [r3, #0]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	f43f af27 	beq.w	800fb2a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 800fcdc:	2300      	movs	r3, #0
 800fcde:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 800fce2:	9b02      	ldr	r3, [sp, #8]
 800fce4:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 800fce8:	881b      	ldrh	r3, [r3, #0]
 800fcea:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 800fcee:	429d      	cmp	r5, r3
 800fcf0:	f67f af1b 	bls.w	800fb2a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 800fcf4:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 800fcf8:	2907      	cmp	r1, #7
 800fcfa:	d815      	bhi.n	800fd28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b4>
 800fcfc:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800fd00:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 800fd04:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 800fd08:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 800fd0c:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 800fd10:	1c4a      	adds	r2, r1, #1
 800fd12:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 800fd16:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 800fd1a:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 800fd1e:	f8a2 e002 	strh.w	lr, [r2, #2]
 800fd22:	f8a2 c004 	strh.w	ip, [r2, #4]
 800fd26:	80d7      	strh	r7, [r2, #6]
 800fd28:	3301      	adds	r3, #1
 800fd2a:	b29b      	uxth	r3, r3
 800fd2c:	e7df      	b.n	800fcee <_ZN8touchgfx11Application15drawCachedAreasEv+0x27a>
 800fd2e:	2b02      	cmp	r3, #2
 800fd30:	f040 8136 	bne.w	800ffa0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 800fd34:	4b2a      	ldr	r3, [pc, #168]	@ (800fde0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>)
 800fd36:	781b      	ldrb	r3, [r3, #0]
 800fd38:	2b01      	cmp	r3, #1
 800fd3a:	f104 09ac 	add.w	r9, r4, #172	@ 0xac
 800fd3e:	f000 809c 	beq.w	800fe7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 800fd42:	9b02      	ldr	r3, [sp, #8]
 800fd44:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	@ 0xec
 800fd48:	f8b3 b000 	ldrh.w	fp, [r3]
 800fd4c:	f10b 0b01 	add.w	fp, fp, #1
 800fd50:	fa1f fb8b 	uxth.w	fp, fp
 800fd54:	2a00      	cmp	r2, #0
 800fd56:	d0bc      	beq.n	800fcd2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800fd58:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	@ 0xae
 800fd5c:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 800fd60:	441d      	add	r5, r3
 800fd62:	b22d      	sxth	r5, r5
 800fd64:	4659      	mov	r1, fp
 800fd66:	f04f 0800 	mov.w	r8, #0
 800fd6a:	b28b      	uxth	r3, r1
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 800fd72:	f240 80c1 	bls.w	800fef8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x484>
 800fd76:	4427      	add	r7, r4
 800fd78:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 800fd7c:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 800fd80:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	@ 0xae
 800fd84:	4563      	cmp	r3, ip
 800fd86:	4608      	mov	r0, r1
 800fd88:	f340 80a3 	ble.w	800fed2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 800fd8c:	f8be 50b2 	ldrh.w	r5, [lr, #178]	@ 0xb2
 800fd90:	4465      	add	r5, ip
 800fd92:	b22d      	sxth	r5, r5
 800fd94:	429d      	cmp	r5, r3
 800fd96:	bfa8      	it	ge
 800fd98:	461d      	movge	r5, r3
 800fd9a:	3101      	adds	r1, #1
 800fd9c:	4680      	mov	r8, r0
 800fd9e:	e7e4      	b.n	800fd6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 800fda0:	d10b      	bne.n	800fdba <_ZN8touchgfx11Application15drawCachedAreasEv+0x346>
 800fda2:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	@ 0xb2
 800fda6:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	@ 0xb2
 800fdaa:	458c      	cmp	ip, r1
 800fdac:	bfb4      	ite	lt
 800fdae:	469c      	movlt	ip, r3
 800fdb0:	46bc      	movge	ip, r7
 800fdb2:	4572      	cmp	r2, lr
 800fdb4:	bfb8      	it	lt
 800fdb6:	4672      	movlt	r2, lr
 800fdb8:	e088      	b.n	800fecc <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 800fdba:	428a      	cmp	r2, r1
 800fdbc:	bfb8      	it	lt
 800fdbe:	460a      	movlt	r2, r1
 800fdc0:	46bc      	mov	ip, r7
 800fdc2:	e083      	b.n	800fecc <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 800fdc4:	2000438c 	.word	0x2000438c
 800fdc8:	20004398 	.word	0x20004398
 800fdcc:	20000018 	.word	0x20000018
 800fdd0:	20004354 	.word	0x20004354
 800fdd4:	20004348 	.word	0x20004348
 800fdd8:	20004346 	.word	0x20004346
 800fddc:	20004350 	.word	0x20004350
 800fde0:	2000434a 	.word	0x2000434a
 800fde4:	1961      	adds	r1, r4, r5
 800fde6:	ab07      	add	r3, sp, #28
 800fde8:	f851 0fac 	ldr.w	r0, [r1, #172]!
 800fdec:	6849      	ldr	r1, [r1, #4]
 800fdee:	c303      	stmia	r3!, {r0, r1}
 800fdf0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800fdf4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800fdf8:	2b13      	cmp	r3, #19
 800fdfa:	bfd8      	it	le
 800fdfc:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 800fe00:	f8ad 201c 	strh.w	r2, [sp, #28]
 800fe04:	440b      	add	r3, r1
 800fe06:	1a9b      	subs	r3, r3, r2
 800fe08:	a807      	add	r0, sp, #28
 800fe0a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800fe0e:	f7ff f85b 	bl	800eec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800fe12:	a807      	add	r0, sp, #28
 800fe14:	f7fc f8d3 	bl	800bfbe <_ZNK8touchgfx4Rect7isEmptyEv>
 800fe18:	bb78      	cbnz	r0, 800fe7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 800fe1a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 800fe1e:	f8d8 0000 	ldr.w	r0, [r8]
 800fe22:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800fe26:	f8d0 e000 	ldr.w	lr, [r0]
 800fe2a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800fe2e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800fe32:	f1bc 0f14 	cmp.w	ip, #20
 800fe36:	bfa8      	it	ge
 800fe38:	f04f 0c14 	movge.w	ip, #20
 800fe3c:	fa1f fc8c 	uxth.w	ip, ip
 800fe40:	f8cd c000 	str.w	ip, [sp]
 800fe44:	f8de a090 	ldr.w	sl, [lr, #144]	@ 0x90
 800fe48:	47d0      	blx	sl
 800fe4a:	4682      	mov	sl, r0
 800fe4c:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800fe50:	a807      	add	r0, sp, #28
 800fe52:	f7ff f81f 	bl	800ee94 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800fe56:	6823      	ldr	r3, [r4, #0]
 800fe58:	4425      	add	r5, r4
 800fe5a:	4620      	mov	r0, r4
 800fe5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe5e:	a907      	add	r1, sp, #28
 800fe60:	4798      	blx	r3
 800fe62:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	@ 0xb0
 800fe66:	eba0 000a 	sub.w	r0, r0, sl
 800fe6a:	b200      	sxth	r0, r0
 800fe6c:	f8a5 00b0 	strh.w	r0, [r5, #176]	@ 0xb0
 800fe70:	b918      	cbnz	r0, 800fe7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 800fe72:	b2b9      	uxth	r1, r7
 800fe74:	4648      	mov	r0, r9
 800fe76:	f7ff faa9 	bl	800f3cc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800fe7a:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 800fe7e:	f1bb 0f00 	cmp.w	fp, #0
 800fe82:	f43f af26 	beq.w	800fcd2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800fe86:	9b02      	ldr	r3, [sp, #8]
 800fe88:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 800fe8c:	881b      	ldrh	r3, [r3, #0]
 800fe8e:	3301      	adds	r3, #1
 800fe90:	b29b      	uxth	r3, r3
 800fe92:	2700      	movs	r7, #0
 800fe94:	b299      	uxth	r1, r3
 800fe96:	458b      	cmp	fp, r1
 800fe98:	ea4f 05c7 	mov.w	r5, r7, lsl #3
 800fe9c:	d9a2      	bls.n	800fde4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x370>
 800fe9e:	4425      	add	r5, r4
 800fea0:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 800fea4:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	@ 0xb0
 800fea8:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	@ 0xac
 800feac:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	@ 0xac
 800feb0:	4408      	add	r0, r1
 800feb2:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	@ 0xb0
 800feb6:	4471      	add	r1, lr
 800feb8:	b200      	sxth	r0, r0
 800feba:	b209      	sxth	r1, r1
 800febc:	4288      	cmp	r0, r1
 800febe:	469c      	mov	ip, r3
 800fec0:	f6bf af6e 	bge.w	800fda0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x32c>
 800fec4:	4586      	cmp	lr, r0
 800fec6:	4672      	mov	r2, lr
 800fec8:	bfb8      	it	lt
 800feca:	4602      	movlt	r2, r0
 800fecc:	3301      	adds	r3, #1
 800fece:	4667      	mov	r7, ip
 800fed0:	e7e0      	b.n	800fe94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x420>
 800fed2:	d10c      	bne.n	800feee <_ZN8touchgfx11Application15drawCachedAreasEv+0x47a>
 800fed4:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 800fed8:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 800fedc:	4287      	cmp	r7, r0
 800fede:	bfb4      	ite	lt
 800fee0:	4608      	movlt	r0, r1
 800fee2:	4640      	movge	r0, r8
 800fee4:	f8be 70b2 	ldrh.w	r7, [lr, #178]	@ 0xb2
 800fee8:	443b      	add	r3, r7
 800feea:	b21b      	sxth	r3, r3
 800feec:	e752      	b.n	800fd94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 800feee:	4565      	cmp	r5, ip
 800fef0:	bfa8      	it	ge
 800fef2:	4665      	movge	r5, ip
 800fef4:	4640      	mov	r0, r8
 800fef6:	e750      	b.n	800fd9a <_ZN8touchgfx11Application15drawCachedAreasEv+0x326>
 800fef8:	eb09 0007 	add.w	r0, r9, r7
 800fefc:	4427      	add	r7, r4
 800fefe:	9203      	str	r2, [sp, #12]
 800ff00:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	@ 0xb2
 800ff04:	f1ba 0f13 	cmp.w	sl, #19
 800ff08:	bfde      	ittt	le
 800ff0a:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	@ 0xae
 800ff0e:	4455      	addle	r5, sl
 800ff10:	b22d      	sxthle	r5, r5
 800ff12:	f7fc f854 	bl	800bfbe <_ZNK8touchgfx4Rect7isEmptyEv>
 800ff16:	9a03      	ldr	r2, [sp, #12]
 800ff18:	2800      	cmp	r0, #0
 800ff1a:	f47f af1b 	bne.w	800fd54 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e0>
 800ff1e:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 800ff22:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800ff26:	482a      	ldr	r0, [pc, #168]	@ (800ffd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>)
 800ff28:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 800ff2c:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 800ff30:	6800      	ldr	r0, [r0, #0]
 800ff32:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ff36:	1aad      	subs	r5, r5, r2
 800ff38:	2d14      	cmp	r5, #20
 800ff3a:	f8ad 201e 	strh.w	r2, [sp, #30]
 800ff3e:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ff42:	bfa8      	it	ge
 800ff44:	2514      	movge	r5, #20
 800ff46:	f8d0 c000 	ldr.w	ip, [r0]
 800ff4a:	b2ad      	uxth	r5, r5
 800ff4c:	fa1f fa8a 	uxth.w	sl, sl
 800ff50:	4555      	cmp	r5, sl
 800ff52:	bf94      	ite	ls
 800ff54:	9500      	strls	r5, [sp, #0]
 800ff56:	f8cd a000 	strhi.w	sl, [sp]
 800ff5a:	b292      	uxth	r2, r2
 800ff5c:	f8dc 5090 	ldr.w	r5, [ip, #144]	@ 0x90
 800ff60:	b29b      	uxth	r3, r3
 800ff62:	b289      	uxth	r1, r1
 800ff64:	47a8      	blx	r5
 800ff66:	6823      	ldr	r3, [r4, #0]
 800ff68:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800ff6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff6e:	a907      	add	r1, sp, #28
 800ff70:	4620      	mov	r0, r4
 800ff72:	4798      	blx	r3
 800ff74:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800ff78:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ff7c:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 800ff80:	1a5b      	subs	r3, r3, r1
 800ff82:	440a      	add	r2, r1
 800ff84:	b21b      	sxth	r3, r3
 800ff86:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 800ff8a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	f47f aed7 	bne.w	800fd42 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 800ff94:	fa1f f188 	uxth.w	r1, r8
 800ff98:	4648      	mov	r0, r9
 800ff9a:	f7ff fa17 	bl	800f3cc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800ff9e:	e6d0      	b.n	800fd42 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 800ffa0:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800ffa4:	42ab      	cmp	r3, r5
 800ffa6:	f67f ae94 	bls.w	800fcd2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800ffaa:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 800ffae:	ab07      	add	r3, sp, #28
 800ffb0:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800ffb4:	6851      	ldr	r1, [r2, #4]
 800ffb6:	c303      	stmia	r3!, {r0, r1}
 800ffb8:	a807      	add	r0, sp, #28
 800ffba:	f7fc f800 	bl	800bfbe <_ZNK8touchgfx4Rect7isEmptyEv>
 800ffbe:	b920      	cbnz	r0, 800ffca <_ZN8touchgfx11Application15drawCachedAreasEv+0x556>
 800ffc0:	6823      	ldr	r3, [r4, #0]
 800ffc2:	a907      	add	r1, sp, #28
 800ffc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffc6:	4620      	mov	r0, r4
 800ffc8:	4798      	blx	r3
 800ffca:	3501      	adds	r5, #1
 800ffcc:	b2ad      	uxth	r5, r5
 800ffce:	e7e7      	b.n	800ffa0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 800ffd0:	20004354 	.word	0x20004354

0800ffd4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800ffd4:	4b03      	ldr	r3, [pc, #12]	@ (800ffe4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	801a      	strh	r2, [r3, #0]
 800ffda:	805a      	strh	r2, [r3, #2]
 800ffdc:	809a      	strh	r2, [r3, #4]
 800ffde:	80da      	strh	r2, [r3, #6]
 800ffe0:	4770      	bx	lr
 800ffe2:	bf00      	nop
 800ffe4:	20004398 	.word	0x20004398

0800ffe8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800ffe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffec:	4606      	mov	r6, r0
 800ffee:	b09d      	sub	sp, #116	@ 0x74
 800fff0:	a803      	add	r0, sp, #12
 800fff2:	4614      	mov	r4, r2
 800fff4:	468a      	mov	sl, r1
 800fff6:	461d      	mov	r5, r3
 800fff8:	f000 fd72 	bl	8010ae0 <_ZN8touchgfx12TextProviderC1Ev>
 800fffc:	6833      	ldr	r3, [r6, #0]
 800fffe:	4630      	mov	r0, r6
 8010000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010002:	4798      	blx	r3
 8010004:	6833      	ldr	r3, [r6, #0]
 8010006:	4607      	mov	r7, r0
 8010008:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801000a:	4630      	mov	r0, r6
 801000c:	4798      	blx	r3
 801000e:	462a      	mov	r2, r5
 8010010:	9000      	str	r0, [sp, #0]
 8010012:	4621      	mov	r1, r4
 8010014:	463b      	mov	r3, r7
 8010016:	a803      	add	r0, sp, #12
 8010018:	f000 fdbd 	bl	8010b96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801001c:	2500      	movs	r5, #0
 801001e:	462c      	mov	r4, r5
 8010020:	46a9      	mov	r9, r5
 8010022:	46a8      	mov	r8, r5
 8010024:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 8010028:	2300      	movs	r3, #0
 801002a:	9302      	str	r3, [sp, #8]
 801002c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8010030:	429c      	cmp	r4, r3
 8010032:	d002      	beq.n	801003a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8010034:	455c      	cmp	r4, fp
 8010036:	bf18      	it	ne
 8010038:	4625      	movne	r5, r4
 801003a:	ab02      	add	r3, sp, #8
 801003c:	4632      	mov	r2, r6
 801003e:	4651      	mov	r1, sl
 8010040:	a803      	add	r0, sp, #12
 8010042:	f001 f8ab 	bl	801119c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8010046:	4604      	mov	r4, r0
 8010048:	b108      	cbz	r0, 801004e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801004a:	280a      	cmp	r0, #10
 801004c:	d10a      	bne.n	8010064 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801004e:	45c1      	cmp	r9, r8
 8010050:	bf38      	it	cc
 8010052:	46c1      	movcc	r9, r8
 8010054:	f04f 0800 	mov.w	r8, #0
 8010058:	2c00      	cmp	r4, #0
 801005a:	d1e5      	bne.n	8010028 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801005c:	4648      	mov	r0, r9
 801005e:	b01d      	add	sp, #116	@ 0x74
 8010060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010064:	9a02      	ldr	r2, [sp, #8]
 8010066:	2a00      	cmp	r2, #0
 8010068:	d0de      	beq.n	8010028 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801006a:	7b57      	ldrb	r7, [r2, #13]
 801006c:	6833      	ldr	r3, [r6, #0]
 801006e:	8894      	ldrh	r4, [r2, #4]
 8010070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010072:	007f      	lsls	r7, r7, #1
 8010074:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 8010078:	7a97      	ldrb	r7, [r2, #10]
 801007a:	4629      	mov	r1, r5
 801007c:	4307      	orrs	r7, r0
 801007e:	4630      	mov	r0, r6
 8010080:	4798      	blx	r3
 8010082:	4438      	add	r0, r7
 8010084:	4480      	add	r8, r0
 8010086:	fa1f f888 	uxth.w	r8, r8
 801008a:	e7e5      	b.n	8010058 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801008c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801008c:	b508      	push	{r3, lr}
 801008e:	6803      	ldr	r3, [r0, #0]
 8010090:	68db      	ldr	r3, [r3, #12]
 8010092:	4798      	blx	r3
 8010094:	b128      	cbz	r0, 80100a2 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8010096:	7b43      	ldrb	r3, [r0, #13]
 8010098:	7a80      	ldrb	r0, [r0, #10]
 801009a:	005b      	lsls	r3, r3, #1
 801009c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80100a0:	4318      	orrs	r0, r3
 80100a2:	bd08      	pop	{r3, pc}

080100a4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80100a4:	b40e      	push	{r1, r2, r3}
 80100a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100a8:	b09e      	sub	sp, #120	@ 0x78
 80100aa:	ab23      	add	r3, sp, #140	@ 0x8c
 80100ac:	4605      	mov	r5, r0
 80100ae:	f853 4b04 	ldr.w	r4, [r3], #4
 80100b2:	9303      	str	r3, [sp, #12]
 80100b4:	a805      	add	r0, sp, #20
 80100b6:	f000 fd13 	bl	8010ae0 <_ZN8touchgfx12TextProviderC1Ev>
 80100ba:	682b      	ldr	r3, [r5, #0]
 80100bc:	4628      	mov	r0, r5
 80100be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80100c0:	4798      	blx	r3
 80100c2:	682b      	ldr	r3, [r5, #0]
 80100c4:	4606      	mov	r6, r0
 80100c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80100c8:	4628      	mov	r0, r5
 80100ca:	4798      	blx	r3
 80100cc:	4633      	mov	r3, r6
 80100ce:	ae1e      	add	r6, sp, #120	@ 0x78
 80100d0:	4621      	mov	r1, r4
 80100d2:	9000      	str	r0, [sp, #0]
 80100d4:	9a03      	ldr	r2, [sp, #12]
 80100d6:	2400      	movs	r4, #0
 80100d8:	a805      	add	r0, sp, #20
 80100da:	f000 fd5c 	bl	8010b96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80100de:	f846 4d68 	str.w	r4, [r6, #-104]!
 80100e2:	462a      	mov	r2, r5
 80100e4:	4633      	mov	r3, r6
 80100e6:	4621      	mov	r1, r4
 80100e8:	a805      	add	r0, sp, #20
 80100ea:	f001 f857 	bl	801119c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80100ee:	b1f0      	cbz	r0, 801012e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 80100f0:	280a      	cmp	r0, #10
 80100f2:	d018      	beq.n	8010126 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 80100f4:	9f04      	ldr	r7, [sp, #16]
 80100f6:	b1b7      	cbz	r7, 8010126 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 80100f8:	7b78      	ldrb	r0, [r7, #13]
 80100fa:	7a3b      	ldrb	r3, [r7, #8]
 80100fc:	88ea      	ldrh	r2, [r5, #6]
 80100fe:	00c1      	lsls	r1, r0, #3
 8010100:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8010104:	4319      	orrs	r1, r3
 8010106:	0643      	lsls	r3, r0, #25
 8010108:	bf44      	itt	mi
 801010a:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801010e:	b219      	sxthmi	r1, r3
 8010110:	0100      	lsls	r0, r0, #4
 8010112:	79fb      	ldrb	r3, [r7, #7]
 8010114:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8010118:	4303      	orrs	r3, r0
 801011a:	4413      	add	r3, r2
 801011c:	1a5b      	subs	r3, r3, r1
 801011e:	b21b      	sxth	r3, r3
 8010120:	429c      	cmp	r4, r3
 8010122:	bfb8      	it	lt
 8010124:	461c      	movlt	r4, r3
 8010126:	4633      	mov	r3, r6
 8010128:	462a      	mov	r2, r5
 801012a:	2100      	movs	r1, #0
 801012c:	e7dc      	b.n	80100e8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801012e:	b2a0      	uxth	r0, r4
 8010130:	b01e      	add	sp, #120	@ 0x78
 8010132:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010136:	b003      	add	sp, #12
 8010138:	4770      	bx	lr

0801013a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801013a:	7a43      	ldrb	r3, [r0, #9]
 801013c:	8880      	ldrh	r0, [r0, #4]
 801013e:	4418      	add	r0, r3
 8010140:	b280      	uxth	r0, r0
 8010142:	4770      	bx	lr

08010144 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8010144:	6803      	ldr	r3, [r0, #0]
 8010146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010148:	4718      	bx	r3

0801014a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801014a:	b40e      	push	{r1, r2, r3}
 801014c:	b570      	push	{r4, r5, r6, lr}
 801014e:	b09d      	sub	sp, #116	@ 0x74
 8010150:	ab21      	add	r3, sp, #132	@ 0x84
 8010152:	4604      	mov	r4, r0
 8010154:	f853 5b04 	ldr.w	r5, [r3], #4
 8010158:	9302      	str	r3, [sp, #8]
 801015a:	a803      	add	r0, sp, #12
 801015c:	f000 fcc0 	bl	8010ae0 <_ZN8touchgfx12TextProviderC1Ev>
 8010160:	6823      	ldr	r3, [r4, #0]
 8010162:	4620      	mov	r0, r4
 8010164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010166:	4798      	blx	r3
 8010168:	6823      	ldr	r3, [r4, #0]
 801016a:	4606      	mov	r6, r0
 801016c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801016e:	4620      	mov	r0, r4
 8010170:	4798      	blx	r3
 8010172:	4633      	mov	r3, r6
 8010174:	9000      	str	r0, [sp, #0]
 8010176:	9a02      	ldr	r2, [sp, #8]
 8010178:	4629      	mov	r1, r5
 801017a:	a803      	add	r0, sp, #12
 801017c:	f000 fd0b 	bl	8010b96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8010180:	a803      	add	r0, sp, #12
 8010182:	f001 f8d9 	bl	8011338 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010186:	2401      	movs	r4, #1
 8010188:	b2a3      	uxth	r3, r4
 801018a:	b140      	cbz	r0, 801019e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 801018c:	280a      	cmp	r0, #10
 801018e:	bf08      	it	eq
 8010190:	3301      	addeq	r3, #1
 8010192:	a803      	add	r0, sp, #12
 8010194:	bf08      	it	eq
 8010196:	b21c      	sxtheq	r4, r3
 8010198:	f001 f8ce 	bl	8011338 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801019c:	e7f4      	b.n	8010188 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801019e:	4618      	mov	r0, r3
 80101a0:	b01d      	add	sp, #116	@ 0x74
 80101a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80101a6:	b003      	add	sp, #12
 80101a8:	4770      	bx	lr

080101aa <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80101aa:	b40e      	push	{r1, r2, r3}
 80101ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101ae:	b09e      	sub	sp, #120	@ 0x78
 80101b0:	ab23      	add	r3, sp, #140	@ 0x8c
 80101b2:	4604      	mov	r4, r0
 80101b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80101b8:	9303      	str	r3, [sp, #12]
 80101ba:	a805      	add	r0, sp, #20
 80101bc:	f000 fc90 	bl	8010ae0 <_ZN8touchgfx12TextProviderC1Ev>
 80101c0:	6823      	ldr	r3, [r4, #0]
 80101c2:	4620      	mov	r0, r4
 80101c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80101c6:	4798      	blx	r3
 80101c8:	6823      	ldr	r3, [r4, #0]
 80101ca:	4606      	mov	r6, r0
 80101cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80101ce:	4620      	mov	r0, r4
 80101d0:	4798      	blx	r3
 80101d2:	4633      	mov	r3, r6
 80101d4:	4629      	mov	r1, r5
 80101d6:	9000      	str	r0, [sp, #0]
 80101d8:	9a03      	ldr	r2, [sp, #12]
 80101da:	a805      	add	r0, sp, #20
 80101dc:	ad1e      	add	r5, sp, #120	@ 0x78
 80101de:	f000 fcda 	bl	8010b96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80101e2:	2100      	movs	r1, #0
 80101e4:	f845 1d68 	str.w	r1, [r5, #-104]!
 80101e8:	4622      	mov	r2, r4
 80101ea:	462b      	mov	r3, r5
 80101ec:	a805      	add	r0, sp, #20
 80101ee:	f000 ffd5 	bl	801119c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80101f2:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 80101f6:	b1d8      	cbz	r0, 8010230 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 80101f8:	280a      	cmp	r0, #10
 80101fa:	d012      	beq.n	8010222 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80101fc:	9804      	ldr	r0, [sp, #16]
 80101fe:	b180      	cbz	r0, 8010222 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8010200:	7b47      	ldrb	r7, [r0, #13]
 8010202:	88e2      	ldrh	r2, [r4, #6]
 8010204:	00fb      	lsls	r3, r7, #3
 8010206:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801020a:	7a03      	ldrb	r3, [r0, #8]
 801020c:	430b      	orrs	r3, r1
 801020e:	0679      	lsls	r1, r7, #25
 8010210:	bf44      	itt	mi
 8010212:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8010216:	b21b      	sxthmi	r3, r3
 8010218:	1ad3      	subs	r3, r2, r3
 801021a:	b21b      	sxth	r3, r3
 801021c:	429e      	cmp	r6, r3
 801021e:	bfa8      	it	ge
 8010220:	461e      	movge	r6, r3
 8010222:	462b      	mov	r3, r5
 8010224:	4622      	mov	r2, r4
 8010226:	2100      	movs	r1, #0
 8010228:	a805      	add	r0, sp, #20
 801022a:	f000 ffb7 	bl	801119c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801022e:	e7e2      	b.n	80101f6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8010230:	4630      	mov	r0, r6
 8010232:	b01e      	add	sp, #120	@ 0x78
 8010234:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010238:	b003      	add	sp, #12
 801023a:	4770      	bx	lr

0801023c <_ZNK8touchgfx8Drawable10invalidateEv>:
 801023c:	b513      	push	{r0, r1, r4, lr}
 801023e:	6803      	ldr	r3, [r0, #0]
 8010240:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8010244:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8010248:	f8ad 1004 	strh.w	r1, [sp, #4]
 801024c:	2400      	movs	r4, #0
 801024e:	9400      	str	r4, [sp, #0]
 8010250:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010254:	691b      	ldr	r3, [r3, #16]
 8010256:	4669      	mov	r1, sp
 8010258:	4798      	blx	r3
 801025a:	b002      	add	sp, #8
 801025c:	bd10      	pop	{r4, pc}

0801025e <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801025e:	b538      	push	{r3, r4, r5, lr}
 8010260:	680b      	ldr	r3, [r1, #0]
 8010262:	460c      	mov	r4, r1
 8010264:	68db      	ldr	r3, [r3, #12]
 8010266:	4605      	mov	r5, r0
 8010268:	4798      	blx	r3
 801026a:	6823      	ldr	r3, [r4, #0]
 801026c:	4620      	mov	r0, r4
 801026e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010270:	4629      	mov	r1, r5
 8010272:	4798      	blx	r3
 8010274:	4628      	mov	r0, r5
 8010276:	bd38      	pop	{r3, r4, r5, pc}

08010278 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8010278:	b410      	push	{r4}
 801027a:	880a      	ldrh	r2, [r1, #0]
 801027c:	8884      	ldrh	r4, [r0, #4]
 801027e:	4422      	add	r2, r4
 8010280:	800a      	strh	r2, [r1, #0]
 8010282:	88c4      	ldrh	r4, [r0, #6]
 8010284:	884a      	ldrh	r2, [r1, #2]
 8010286:	4422      	add	r2, r4
 8010288:	804a      	strh	r2, [r1, #2]
 801028a:	6940      	ldr	r0, [r0, #20]
 801028c:	b120      	cbz	r0, 8010298 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801028e:	6803      	ldr	r3, [r0, #0]
 8010290:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010296:	4718      	bx	r3
 8010298:	f85d 4b04 	ldr.w	r4, [sp], #4
 801029c:	4770      	bx	lr

0801029e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801029e:	b570      	push	{r4, r5, r6, lr}
 80102a0:	8882      	ldrh	r2, [r0, #4]
 80102a2:	880b      	ldrh	r3, [r1, #0]
 80102a4:	4413      	add	r3, r2
 80102a6:	800b      	strh	r3, [r1, #0]
 80102a8:	88c2      	ldrh	r2, [r0, #6]
 80102aa:	884b      	ldrh	r3, [r1, #2]
 80102ac:	460c      	mov	r4, r1
 80102ae:	4413      	add	r3, r2
 80102b0:	804b      	strh	r3, [r1, #2]
 80102b2:	4605      	mov	r5, r0
 80102b4:	1d01      	adds	r1, r0, #4
 80102b6:	4620      	mov	r0, r4
 80102b8:	f7fb fe3e 	bl	800bf38 <_ZN8touchgfx4RectaNERKS0_>
 80102bc:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	dd0b      	ble.n	80102dc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80102c4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	dd07      	ble.n	80102dc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80102cc:	6968      	ldr	r0, [r5, #20]
 80102ce:	b128      	cbz	r0, 80102dc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80102d0:	6803      	ldr	r3, [r0, #0]
 80102d2:	4621      	mov	r1, r4
 80102d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80102da:	4718      	bx	r3
 80102dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080102e0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80102e0:	b570      	push	{r4, r5, r6, lr}
 80102e2:	8882      	ldrh	r2, [r0, #4]
 80102e4:	880b      	ldrh	r3, [r1, #0]
 80102e6:	4413      	add	r3, r2
 80102e8:	800b      	strh	r3, [r1, #0]
 80102ea:	88c2      	ldrh	r2, [r0, #6]
 80102ec:	884b      	ldrh	r3, [r1, #2]
 80102ee:	460c      	mov	r4, r1
 80102f0:	4413      	add	r3, r2
 80102f2:	804b      	strh	r3, [r1, #2]
 80102f4:	4605      	mov	r5, r0
 80102f6:	1d01      	adds	r1, r0, #4
 80102f8:	4620      	mov	r0, r4
 80102fa:	f7fb fe1d 	bl	800bf38 <_ZN8touchgfx4RectaNERKS0_>
 80102fe:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8010302:	2b00      	cmp	r3, #0
 8010304:	dd18      	ble.n	8010338 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8010306:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801030a:	2b00      	cmp	r3, #0
 801030c:	dd14      	ble.n	8010338 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801030e:	6968      	ldr	r0, [r5, #20]
 8010310:	b128      	cbz	r0, 801031e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8010312:	6803      	ldr	r3, [r0, #0]
 8010314:	4621      	mov	r1, r4
 8010316:	691b      	ldr	r3, [r3, #16]
 8010318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801031c:	4718      	bx	r3
 801031e:	4b07      	ldr	r3, [pc, #28]	@ (801033c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	3304      	adds	r3, #4
 8010324:	429d      	cmp	r5, r3
 8010326:	d107      	bne.n	8010338 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8010328:	f7fe ff44 	bl	800f1b4 <_ZN8touchgfx11Application11getInstanceEv>
 801032c:	6821      	ldr	r1, [r4, #0]
 801032e:	6862      	ldr	r2, [r4, #4]
 8010330:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010334:	f7ff b85e 	b.w	800f3f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8010338:	bd70      	pop	{r4, r5, r6, pc}
 801033a:	bf00      	nop
 801033c:	20004390 	.word	0x20004390

08010340 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8010340:	b570      	push	{r4, r5, r6, lr}
 8010342:	4604      	mov	r4, r0
 8010344:	4616      	mov	r6, r2
 8010346:	460d      	mov	r5, r1
 8010348:	b901      	cbnz	r1, 801034c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801034a:	b192      	cbz	r2, 8010372 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801034c:	6823      	ldr	r3, [r4, #0]
 801034e:	4620      	mov	r0, r4
 8010350:	699b      	ldr	r3, [r3, #24]
 8010352:	4798      	blx	r3
 8010354:	88e2      	ldrh	r2, [r4, #6]
 8010356:	88a1      	ldrh	r1, [r4, #4]
 8010358:	4432      	add	r2, r6
 801035a:	4429      	add	r1, r5
 801035c:	4620      	mov	r0, r4
 801035e:	b212      	sxth	r2, r2
 8010360:	b209      	sxth	r1, r1
 8010362:	f7f8 fc2e 	bl	8008bc2 <_ZN8touchgfx8Drawable5setXYEss>
 8010366:	6823      	ldr	r3, [r4, #0]
 8010368:	4620      	mov	r0, r4
 801036a:	699b      	ldr	r3, [r3, #24]
 801036c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010370:	4718      	bx	r3
 8010372:	bd70      	pop	{r4, r5, r6, pc}

08010374 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8010374:	b510      	push	{r4, lr}
 8010376:	4604      	mov	r4, r0
 8010378:	4608      	mov	r0, r1
 801037a:	2300      	movs	r3, #0
 801037c:	8023      	strh	r3, [r4, #0]
 801037e:	8063      	strh	r3, [r4, #2]
 8010380:	6803      	ldr	r3, [r0, #0]
 8010382:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8010386:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801038a:	80a1      	strh	r1, [r4, #4]
 801038c:	80e2      	strh	r2, [r4, #6]
 801038e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010390:	4621      	mov	r1, r4
 8010392:	4798      	blx	r3
 8010394:	4620      	mov	r0, r4
 8010396:	bd10      	pop	{r4, pc}

08010398 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8010398:	b530      	push	{r4, r5, lr}
 801039a:	8083      	strh	r3, [r0, #4]
 801039c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80103a0:	80c3      	strh	r3, [r0, #6]
 80103a2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80103a6:	7203      	strb	r3, [r0, #8]
 80103a8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80103ac:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80103b0:	7243      	strb	r3, [r0, #9]
 80103b2:	7a83      	ldrb	r3, [r0, #10]
 80103b4:	6141      	str	r1, [r0, #20]
 80103b6:	f365 0306 	bfi	r3, r5, #0, #7
 80103ba:	f89d 501c 	ldrb.w	r5, [sp, #28]
 80103be:	8302      	strh	r2, [r0, #24]
 80103c0:	f365 13c7 	bfi	r3, r5, #7, #1
 80103c4:	7283      	strb	r3, [r0, #10]
 80103c6:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80103ca:	72c3      	strb	r3, [r0, #11]
 80103cc:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80103d0:	7303      	strb	r3, [r0, #12]
 80103d2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80103d6:	81c3      	strh	r3, [r0, #14]
 80103d8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80103dc:	8203      	strh	r3, [r0, #16]
 80103de:	4b01      	ldr	r3, [pc, #4]	@ (80103e4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 80103e0:	6003      	str	r3, [r0, #0]
 80103e2:	bd30      	pop	{r4, r5, pc}
 80103e4:	08015d80 	.word	0x08015d80

080103e8 <_ZNK8touchgfx9ConstFont4findEt>:
 80103e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103ea:	6944      	ldr	r4, [r0, #20]
 80103ec:	b3bc      	cbz	r4, 801045e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80103ee:	88a3      	ldrh	r3, [r4, #4]
 80103f0:	8b02      	ldrh	r2, [r0, #24]
 80103f2:	1acb      	subs	r3, r1, r3
 80103f4:	f102 32ff 	add.w	r2, r2, #4294967295
 80103f8:	d431      	bmi.n	801045e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80103fa:	4293      	cmp	r3, r2
 80103fc:	dd0c      	ble.n	8010418 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 80103fe:	230e      	movs	r3, #14
 8010400:	fb03 4302 	mla	r3, r3, r2, r4
 8010404:	889b      	ldrh	r3, [r3, #4]
 8010406:	1a5b      	subs	r3, r3, r1
 8010408:	1ad3      	subs	r3, r2, r3
 801040a:	429a      	cmp	r2, r3
 801040c:	db27      	blt.n	801045e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801040e:	2b00      	cmp	r3, #0
 8010410:	bfbc      	itt	lt
 8010412:	2302      	movlt	r3, #2
 8010414:	fb92 f3f3 	sdivlt	r3, r2, r3
 8010418:	2500      	movs	r5, #0
 801041a:	260e      	movs	r6, #14
 801041c:	4295      	cmp	r5, r2
 801041e:	dc1e      	bgt.n	801045e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8010420:	fb06 4003 	mla	r0, r6, r3, r4
 8010424:	8887      	ldrh	r7, [r0, #4]
 8010426:	42b9      	cmp	r1, r7
 8010428:	d01a      	beq.n	8010460 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801042a:	d20d      	bcs.n	8010448 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801042c:	1e5a      	subs	r2, r3, #1
 801042e:	4295      	cmp	r5, r2
 8010430:	dc15      	bgt.n	801045e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8010432:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8010436:	1a5b      	subs	r3, r3, r1
 8010438:	1ad3      	subs	r3, r2, r3
 801043a:	429a      	cmp	r2, r3
 801043c:	db0f      	blt.n	801045e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801043e:	429d      	cmp	r5, r3
 8010440:	ddec      	ble.n	801041c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8010442:	1953      	adds	r3, r2, r5
 8010444:	105b      	asrs	r3, r3, #1
 8010446:	e7e9      	b.n	801041c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8010448:	1c5d      	adds	r5, r3, #1
 801044a:	42aa      	cmp	r2, r5
 801044c:	db07      	blt.n	801045e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801044e:	8a43      	ldrh	r3, [r0, #18]
 8010450:	1acb      	subs	r3, r1, r3
 8010452:	442b      	add	r3, r5
 8010454:	429d      	cmp	r5, r3
 8010456:	dc02      	bgt.n	801045e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8010458:	429a      	cmp	r2, r3
 801045a:	dadf      	bge.n	801041c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801045c:	e7f1      	b.n	8010442 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801045e:	2000      	movs	r0, #0
 8010460:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010462 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8010462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010464:	4604      	mov	r4, r0
 8010466:	4617      	mov	r7, r2
 8010468:	461e      	mov	r6, r3
 801046a:	b911      	cbnz	r1, 8010472 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801046c:	2500      	movs	r5, #0
 801046e:	4628      	mov	r0, r5
 8010470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010472:	290a      	cmp	r1, #10
 8010474:	d0fa      	beq.n	801046c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8010476:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801047a:	4291      	cmp	r1, r2
 801047c:	d0f6      	beq.n	801046c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801047e:	f242 020b 	movw	r2, #8203	@ 0x200b
 8010482:	4291      	cmp	r1, r2
 8010484:	d0f2      	beq.n	801046c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8010486:	f7ff ffaf 	bl	80103e8 <_ZNK8touchgfx9ConstFont4findEt>
 801048a:	4605      	mov	r5, r0
 801048c:	b950      	cbnz	r0, 80104a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801048e:	6823      	ldr	r3, [r4, #0]
 8010490:	4620      	mov	r0, r4
 8010492:	691b      	ldr	r3, [r3, #16]
 8010494:	4798      	blx	r3
 8010496:	4601      	mov	r1, r0
 8010498:	4620      	mov	r0, r4
 801049a:	f7ff ffa5 	bl	80103e8 <_ZNK8touchgfx9ConstFont4findEt>
 801049e:	4605      	mov	r5, r0
 80104a0:	2800      	cmp	r0, #0
 80104a2:	d0e3      	beq.n	801046c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80104a4:	6823      	ldr	r3, [r4, #0]
 80104a6:	4629      	mov	r1, r5
 80104a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80104aa:	4620      	mov	r0, r4
 80104ac:	4798      	blx	r3
 80104ae:	6038      	str	r0, [r7, #0]
 80104b0:	6823      	ldr	r3, [r4, #0]
 80104b2:	4620      	mov	r0, r4
 80104b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104b6:	4798      	blx	r3
 80104b8:	7030      	strb	r0, [r6, #0]
 80104ba:	e7d8      	b.n	801046e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080104bc <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80104bc:	2000      	movs	r0, #0
 80104be:	4770      	bx	lr

080104c0 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80104c0:	2001      	movs	r0, #1
 80104c2:	4770      	bx	lr

080104c4 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 80104c4:	2002      	movs	r0, #2
 80104c6:	4770      	bx	lr

080104c8 <_ZN8touchgfx12GestureEventD1Ev>:
 80104c8:	4770      	bx	lr

080104ca <_ZN8touchgfx9DragEventD1Ev>:
 80104ca:	4770      	bx	lr

080104cc <_ZN8touchgfx10ClickEventD1Ev>:
 80104cc:	4770      	bx	lr

080104ce <_ZN8touchgfx10ClickEventD0Ev>:
 80104ce:	b510      	push	{r4, lr}
 80104d0:	210c      	movs	r1, #12
 80104d2:	4604      	mov	r4, r0
 80104d4:	f002 ff72 	bl	80133bc <_ZdlPvj>
 80104d8:	4620      	mov	r0, r4
 80104da:	bd10      	pop	{r4, pc}

080104dc <_ZN8touchgfx9DragEventD0Ev>:
 80104dc:	b510      	push	{r4, lr}
 80104de:	2110      	movs	r1, #16
 80104e0:	4604      	mov	r4, r0
 80104e2:	f002 ff6b 	bl	80133bc <_ZdlPvj>
 80104e6:	4620      	mov	r0, r4
 80104e8:	bd10      	pop	{r4, pc}

080104ea <_ZN8touchgfx12GestureEventD0Ev>:
 80104ea:	b510      	push	{r4, lr}
 80104ec:	210c      	movs	r1, #12
 80104ee:	4604      	mov	r4, r0
 80104f0:	f002 ff64 	bl	80133bc <_ZdlPvj>
 80104f4:	4620      	mov	r0, r4
 80104f6:	bd10      	pop	{r4, pc}

080104f8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80104f8:	b530      	push	{r4, r5, lr}
 80104fa:	460d      	mov	r5, r1
 80104fc:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80104fe:	b087      	sub	sp, #28
 8010500:	4604      	mov	r4, r0
 8010502:	b301      	cbz	r1, 8010546 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8010504:	a801      	add	r0, sp, #4
 8010506:	f7ff ff35 	bl	8010374 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801050a:	892a      	ldrh	r2, [r5, #8]
 801050c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010510:	7928      	ldrb	r0, [r5, #4]
 8010512:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8010516:	f88d 0010 	strb.w	r0, [sp, #16]
 801051a:	1ad2      	subs	r2, r2, r3
 801051c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801051e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8010520:	f8ad 1012 	strh.w	r1, [sp, #18]
 8010524:	441a      	add	r2, r3
 8010526:	896b      	ldrh	r3, [r5, #10]
 8010528:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801052c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010530:	1b5b      	subs	r3, r3, r5
 8010532:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 8010534:	442b      	add	r3, r5
 8010536:	4d05      	ldr	r5, [pc, #20]	@ (801054c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8010538:	9503      	str	r5, [sp, #12]
 801053a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801053e:	6803      	ldr	r3, [r0, #0]
 8010540:	a903      	add	r1, sp, #12
 8010542:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010544:	4798      	blx	r3
 8010546:	b007      	add	sp, #28
 8010548:	bd30      	pop	{r4, r5, pc}
 801054a:	bf00      	nop
 801054c:	08015e08 	.word	0x08015e08

08010550 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8010550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010554:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010556:	b08a      	sub	sp, #40	@ 0x28
 8010558:	4604      	mov	r4, r0
 801055a:	460d      	mov	r5, r1
 801055c:	b113      	cbz	r3, 8010564 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801055e:	790b      	ldrb	r3, [r1, #4]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d044      	beq.n	80105ee <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8010564:	f104 0804 	add.w	r8, r4, #4
 8010568:	4641      	mov	r1, r8
 801056a:	a803      	add	r0, sp, #12
 801056c:	f7ff ff02 	bl	8010374 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010570:	792b      	ldrb	r3, [r5, #4]
 8010572:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8010576:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801057a:	b983      	cbnz	r3, 801059e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801057c:	892a      	ldrh	r2, [r5, #8]
 801057e:	88e9      	ldrh	r1, [r5, #6]
 8010580:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 8010584:	1b92      	subs	r2, r2, r6
 8010586:	1bc9      	subs	r1, r1, r7
 8010588:	9301      	str	r3, [sp, #4]
 801058a:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801058e:	9300      	str	r3, [sp, #0]
 8010590:	b212      	sxth	r2, r2
 8010592:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8010596:	b209      	sxth	r1, r1
 8010598:	4640      	mov	r0, r8
 801059a:	f7fb fbe9 	bl	800bd70 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801059e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80105a0:	b329      	cbz	r1, 80105ee <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80105a2:	a805      	add	r0, sp, #20
 80105a4:	f7ff fee6 	bl	8010374 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80105a8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80105ac:	792b      	ldrb	r3, [r5, #4]
 80105ae:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80105b0:	f88d 3020 	strb.w	r3, [sp, #32]
 80105b4:	1abf      	subs	r7, r7, r2
 80105b6:	88ea      	ldrh	r2, [r5, #6]
 80105b8:	4417      	add	r7, r2
 80105ba:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 80105bc:	4417      	add	r7, r2
 80105be:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80105c2:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 80105c6:	1ab6      	subs	r6, r6, r2
 80105c8:	892a      	ldrh	r2, [r5, #8]
 80105ca:	4416      	add	r6, r2
 80105cc:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80105ce:	4416      	add	r6, r2
 80105d0:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 80105d4:	4a07      	ldr	r2, [pc, #28]	@ (80105f4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80105d6:	9207      	str	r2, [sp, #28]
 80105d8:	2600      	movs	r6, #0
 80105da:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 80105de:	6803      	ldr	r3, [r0, #0]
 80105e0:	a907      	add	r1, sp, #28
 80105e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80105e4:	4798      	blx	r3
 80105e6:	792b      	ldrb	r3, [r5, #4]
 80105e8:	b10b      	cbz	r3, 80105ee <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80105ea:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 80105ee:	b00a      	add	sp, #40	@ 0x28
 80105f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105f4:	08015de0 	.word	0x08015de0

080105f8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80105f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105fc:	460c      	mov	r4, r1
 80105fe:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8010600:	b088      	sub	sp, #32
 8010602:	4605      	mov	r5, r0
 8010604:	2900      	cmp	r1, #0
 8010606:	d06d      	beq.n	80106e4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8010608:	4668      	mov	r0, sp
 801060a:	f7ff feb3 	bl	8010374 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801060e:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8010610:	88e3      	ldrh	r3, [r4, #6]
 8010612:	f9bd 8000 	ldrsh.w	r8, [sp]
 8010616:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801061a:	440b      	add	r3, r1
 801061c:	b21b      	sxth	r3, r3
 801061e:	4543      	cmp	r3, r8
 8010620:	db31      	blt.n	8010686 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8010622:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8010626:	44c4      	add	ip, r8
 8010628:	fa0f fc8c 	sxth.w	ip, ip
 801062c:	4563      	cmp	r3, ip
 801062e:	da2a      	bge.n	8010686 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8010630:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 8010632:	8926      	ldrh	r6, [r4, #8]
 8010634:	4416      	add	r6, r2
 8010636:	b236      	sxth	r6, r6
 8010638:	42be      	cmp	r6, r7
 801063a:	db24      	blt.n	8010686 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801063c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8010640:	4438      	add	r0, r7
 8010642:	b200      	sxth	r0, r0
 8010644:	4286      	cmp	r6, r0
 8010646:	da1e      	bge.n	8010686 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8010648:	8963      	ldrh	r3, [r4, #10]
 801064a:	4419      	add	r1, r3
 801064c:	b209      	sxth	r1, r1
 801064e:	4541      	cmp	r1, r8
 8010650:	db08      	blt.n	8010664 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8010652:	4561      	cmp	r1, ip
 8010654:	da06      	bge.n	8010664 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8010656:	89a3      	ldrh	r3, [r4, #12]
 8010658:	441a      	add	r2, r3
 801065a:	b212      	sxth	r2, r2
 801065c:	42ba      	cmp	r2, r7
 801065e:	db01      	blt.n	8010664 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8010660:	4282      	cmp	r2, r0
 8010662:	db10      	blt.n	8010686 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8010664:	4b21      	ldr	r3, [pc, #132]	@ (80106ec <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8010666:	9304      	str	r3, [sp, #16]
 8010668:	2302      	movs	r3, #2
 801066a:	f88d 3014 	strb.w	r3, [sp, #20]
 801066e:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8010670:	2300      	movs	r3, #0
 8010672:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010676:	f8ad 3018 	strh.w	r3, [sp, #24]
 801067a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801067e:	6803      	ldr	r3, [r0, #0]
 8010680:	a904      	add	r1, sp, #16
 8010682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010684:	4798      	blx	r3
 8010686:	1d29      	adds	r1, r5, #4
 8010688:	a802      	add	r0, sp, #8
 801068a:	f7ff fe73 	bl	8010374 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801068e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8010692:	88e0      	ldrh	r0, [r4, #6]
 8010694:	7921      	ldrb	r1, [r4, #4]
 8010696:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801069a:	8922      	ldrh	r2, [r4, #8]
 801069c:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801069e:	f88d 1014 	strb.w	r1, [sp, #20]
 80106a2:	eba3 0808 	sub.w	r8, r3, r8
 80106a6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80106aa:	1bdf      	subs	r7, r3, r7
 80106ac:	b2bb      	uxth	r3, r7
 80106ae:	fa1f f888 	uxth.w	r8, r8
 80106b2:	8967      	ldrh	r7, [r4, #10]
 80106b4:	89a4      	ldrh	r4, [r4, #12]
 80106b6:	4440      	add	r0, r8
 80106b8:	4460      	add	r0, ip
 80106ba:	441a      	add	r2, r3
 80106bc:	44b8      	add	r8, r7
 80106be:	4423      	add	r3, r4
 80106c0:	f8ad 0016 	strh.w	r0, [sp, #22]
 80106c4:	4433      	add	r3, r6
 80106c6:	4432      	add	r2, r6
 80106c8:	44e0      	add	r8, ip
 80106ca:	4c09      	ldr	r4, [pc, #36]	@ (80106f0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 80106cc:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80106ce:	9404      	str	r4, [sp, #16]
 80106d0:	f8ad 2018 	strh.w	r2, [sp, #24]
 80106d4:	f8ad 801a 	strh.w	r8, [sp, #26]
 80106d8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80106dc:	6803      	ldr	r3, [r0, #0]
 80106de:	a904      	add	r1, sp, #16
 80106e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80106e2:	4798      	blx	r3
 80106e4:	b008      	add	sp, #32
 80106e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106ea:	bf00      	nop
 80106ec:	08015de0 	.word	0x08015de0
 80106f0:	08015df4 	.word	0x08015df4

080106f4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80106f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80106f6:	4604      	mov	r4, r0
 80106f8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80106fc:	3201      	adds	r2, #1
 80106fe:	d112      	bne.n	8010726 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8010700:	6803      	ldr	r3, [r0, #0]
 8010702:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8010706:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801070a:	f8ad 1004 	strh.w	r1, [sp, #4]
 801070e:	2500      	movs	r5, #0
 8010710:	9500      	str	r5, [sp, #0]
 8010712:	466d      	mov	r5, sp
 8010714:	4629      	mov	r1, r5
 8010716:	f8ad 2006 	strh.w	r2, [sp, #6]
 801071a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801071c:	4798      	blx	r3
 801071e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010722:	e884 0003 	stmia.w	r4, {r0, r1}
 8010726:	4620      	mov	r0, r4
 8010728:	b003      	add	sp, #12
 801072a:	bd30      	pop	{r4, r5, pc}

0801072c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801072c:	b513      	push	{r0, r1, r4, lr}
 801072e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8010732:	3301      	adds	r3, #1
 8010734:	4604      	mov	r4, r0
 8010736:	d109      	bne.n	801074c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8010738:	4601      	mov	r1, r0
 801073a:	4668      	mov	r0, sp
 801073c:	f7ff fe1a 	bl	8010374 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010740:	f8bd 3000 	ldrh.w	r3, [sp]
 8010744:	8423      	strh	r3, [r4, #32]
 8010746:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801074a:	8463      	strh	r3, [r4, #34]	@ 0x22
 801074c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8010750:	b002      	add	sp, #8
 8010752:	bd10      	pop	{r4, pc}

08010754 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8010754:	b513      	push	{r0, r1, r4, lr}
 8010756:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801075a:	3301      	adds	r3, #1
 801075c:	4604      	mov	r4, r0
 801075e:	d109      	bne.n	8010774 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8010760:	4601      	mov	r1, r0
 8010762:	4668      	mov	r0, sp
 8010764:	f7ff fe06 	bl	8010374 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010768:	f8bd 3000 	ldrh.w	r3, [sp]
 801076c:	8423      	strh	r3, [r4, #32]
 801076e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010772:	8463      	strh	r3, [r4, #34]	@ 0x22
 8010774:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 8010778:	b002      	add	sp, #8
 801077a:	bd10      	pop	{r4, pc}

0801077c <_ZN8touchgfx6ScreenC1Ev>:
 801077c:	b570      	push	{r4, r5, r6, lr}
 801077e:	4605      	mov	r5, r0
 8010780:	4b16      	ldr	r3, [pc, #88]	@ (80107dc <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8010782:	f845 3b04 	str.w	r3, [r5], #4
 8010786:	2300      	movs	r3, #0
 8010788:	8103      	strh	r3, [r0, #8]
 801078a:	8143      	strh	r3, [r0, #10]
 801078c:	8183      	strh	r3, [r0, #12]
 801078e:	81c3      	strh	r3, [r0, #14]
 8010790:	8203      	strh	r3, [r0, #16]
 8010792:	8243      	strh	r3, [r0, #18]
 8010794:	8283      	strh	r3, [r0, #20]
 8010796:	82c3      	strh	r3, [r0, #22]
 8010798:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801079c:	6203      	str	r3, [r0, #32]
 801079e:	8483      	strh	r3, [r0, #36]	@ 0x24
 80107a0:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80107a2:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 80107a6:	4a0e      	ldr	r2, [pc, #56]	@ (80107e0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80107a8:	6343      	str	r3, [r0, #52]	@ 0x34
 80107aa:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 80107ae:	4b0d      	ldr	r3, [pc, #52]	@ (80107e4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80107b0:	6042      	str	r2, [r0, #4]
 80107b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80107b6:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80107b8:	4a0b      	ldr	r2, [pc, #44]	@ (80107e8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80107ba:	4604      	mov	r4, r0
 80107bc:	2101      	movs	r1, #1
 80107be:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 80107c2:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80107c6:	f9b2 1000 	ldrsh.w	r1, [r2]
 80107ca:	4628      	mov	r0, r5
 80107cc:	4798      	blx	r3
 80107ce:	6863      	ldr	r3, [r4, #4]
 80107d0:	4628      	mov	r0, r5
 80107d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80107d4:	4631      	mov	r1, r6
 80107d6:	4798      	blx	r3
 80107d8:	4620      	mov	r0, r4
 80107da:	bd70      	pop	{r4, r5, r6, pc}
 80107dc:	08015e1c 	.word	0x08015e1c
 80107e0:	08015898 	.word	0x08015898
 80107e4:	20004348 	.word	0x20004348
 80107e8:	20004346 	.word	0x20004346

080107ec <_ZN8touchgfx6Screen4drawEv>:
 80107ec:	b507      	push	{r0, r1, r2, lr}
 80107ee:	4b09      	ldr	r3, [pc, #36]	@ (8010814 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80107f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80107f4:	4b08      	ldr	r3, [pc, #32]	@ (8010818 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80107f6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80107fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80107fe:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010802:	6803      	ldr	r3, [r0, #0]
 8010804:	2100      	movs	r1, #0
 8010806:	9100      	str	r1, [sp, #0]
 8010808:	689b      	ldr	r3, [r3, #8]
 801080a:	4669      	mov	r1, sp
 801080c:	4798      	blx	r3
 801080e:	b003      	add	sp, #12
 8010810:	f85d fb04 	ldr.w	pc, [sp], #4
 8010814:	20004346 	.word	0x20004346
 8010818:	20004348 	.word	0x20004348

0801081c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801081c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010820:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8010824:	2b00      	cmp	r3, #0
 8010826:	b089      	sub	sp, #36	@ 0x24
 8010828:	4680      	mov	r8, r0
 801082a:	460c      	mov	r4, r1
 801082c:	4615      	mov	r5, r2
 801082e:	dd0e      	ble.n	801084e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8010830:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8010834:	2b00      	cmp	r3, #0
 8010836:	dd0a      	ble.n	801084e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8010838:	4628      	mov	r0, r5
 801083a:	f7ff ff5b 	bl	80106f4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801083e:	4621      	mov	r1, r4
 8010840:	f7fe fbda 	bl	800eff8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8010844:	69eb      	ldr	r3, [r5, #28]
 8010846:	b928      	cbnz	r0, 8010854 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8010848:	461d      	mov	r5, r3
 801084a:	2b00      	cmp	r3, #0
 801084c:	d1f4      	bne.n	8010838 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801084e:	b009      	add	sp, #36	@ 0x24
 8010850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010854:	ae04      	add	r6, sp, #16
 8010856:	2b00      	cmp	r3, #0
 8010858:	f000 80b5 	beq.w	80109c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801085c:	682b      	ldr	r3, [r5, #0]
 801085e:	4629      	mov	r1, r5
 8010860:	68db      	ldr	r3, [r3, #12]
 8010862:	a802      	add	r0, sp, #8
 8010864:	4798      	blx	r3
 8010866:	4628      	mov	r0, r5
 8010868:	f7ff ff60 	bl	801072c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801086c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8010870:	4407      	add	r7, r0
 8010872:	4628      	mov	r0, r5
 8010874:	f7ff ff6e 	bl	8010754 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8010878:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801087c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8010880:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010884:	4418      	add	r0, r3
 8010886:	4621      	mov	r1, r4
 8010888:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801088c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8010890:	b23f      	sxth	r7, r7
 8010892:	4630      	mov	r0, r6
 8010894:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010898:	f8ad 7010 	strh.w	r7, [sp, #16]
 801089c:	f7fb fb4c 	bl	800bf38 <_ZN8touchgfx4RectaNERKS0_>
 80108a0:	4628      	mov	r0, r5
 80108a2:	f7ff ff27 	bl	80106f4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80108a6:	4602      	mov	r2, r0
 80108a8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80108ac:	ab06      	add	r3, sp, #24
 80108ae:	e883 0003 	stmia.w	r3, {r0, r1}
 80108b2:	4611      	mov	r1, r2
 80108b4:	4618      	mov	r0, r3
 80108b6:	f7fb fb3f 	bl	800bf38 <_ZN8touchgfx4RectaNERKS0_>
 80108ba:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80108be:	f9b4 1000 	ldrsh.w	r1, [r4]
 80108c2:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80108c6:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80108ca:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80108ce:	4299      	cmp	r1, r3
 80108d0:	d10b      	bne.n	80108ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80108d2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80108d6:	4552      	cmp	r2, sl
 80108d8:	d107      	bne.n	80108ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80108da:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80108de:	455a      	cmp	r2, fp
 80108e0:	d103      	bne.n	80108ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80108e2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80108e6:	454a      	cmp	r2, r9
 80108e8:	d06d      	beq.n	80109c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80108ea:	f1bb 0f00 	cmp.w	fp, #0
 80108ee:	dd65      	ble.n	80109bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80108f0:	f1b9 0f00 	cmp.w	r9, #0
 80108f4:	dd62      	ble.n	80109bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80108f6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80108fa:	fa1f f08a 	uxth.w	r0, sl
 80108fe:	4552      	cmp	r2, sl
 8010900:	9000      	str	r0, [sp, #0]
 8010902:	da12      	bge.n	801092a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8010904:	9301      	str	r3, [sp, #4]
 8010906:	9b00      	ldr	r3, [sp, #0]
 8010908:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801090c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8010910:	1a9a      	subs	r2, r3, r2
 8010912:	f8ad 1010 	strh.w	r1, [sp, #16]
 8010916:	f8ad 0014 	strh.w	r0, [sp, #20]
 801091a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801091e:	69ea      	ldr	r2, [r5, #28]
 8010920:	4631      	mov	r1, r6
 8010922:	4640      	mov	r0, r8
 8010924:	f7ff ff7a 	bl	801081c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010928:	9b01      	ldr	r3, [sp, #4]
 801092a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801092e:	429a      	cmp	r2, r3
 8010930:	b29f      	uxth	r7, r3
 8010932:	da0d      	bge.n	8010950 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8010934:	f8ad 2010 	strh.w	r2, [sp, #16]
 8010938:	1aba      	subs	r2, r7, r2
 801093a:	f8ad a012 	strh.w	sl, [sp, #18]
 801093e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010942:	f8ad 9016 	strh.w	r9, [sp, #22]
 8010946:	69ea      	ldr	r2, [r5, #28]
 8010948:	4631      	mov	r1, r6
 801094a:	4640      	mov	r0, r8
 801094c:	f7ff ff66 	bl	801081c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010950:	8822      	ldrh	r2, [r4, #0]
 8010952:	88a3      	ldrh	r3, [r4, #4]
 8010954:	445f      	add	r7, fp
 8010956:	4413      	add	r3, r2
 8010958:	b29b      	uxth	r3, r3
 801095a:	b2bf      	uxth	r7, r7
 801095c:	b23a      	sxth	r2, r7
 801095e:	b219      	sxth	r1, r3
 8010960:	4291      	cmp	r1, r2
 8010962:	dd0d      	ble.n	8010980 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8010964:	1bdb      	subs	r3, r3, r7
 8010966:	f8ad 2010 	strh.w	r2, [sp, #16]
 801096a:	f8ad a012 	strh.w	sl, [sp, #18]
 801096e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010972:	f8ad 9016 	strh.w	r9, [sp, #22]
 8010976:	69ea      	ldr	r2, [r5, #28]
 8010978:	4631      	mov	r1, r6
 801097a:	4640      	mov	r0, r8
 801097c:	f7ff ff4e 	bl	801081c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010980:	88e2      	ldrh	r2, [r4, #6]
 8010982:	8863      	ldrh	r3, [r4, #2]
 8010984:	4413      	add	r3, r2
 8010986:	9a00      	ldr	r2, [sp, #0]
 8010988:	444a      	add	r2, r9
 801098a:	b29b      	uxth	r3, r3
 801098c:	fa1f f982 	uxth.w	r9, r2
 8010990:	fa0f f289 	sxth.w	r2, r9
 8010994:	b219      	sxth	r1, r3
 8010996:	428a      	cmp	r2, r1
 8010998:	da15      	bge.n	80109c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801099a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801099e:	f9b4 0000 	ldrsh.w	r0, [r4]
 80109a2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80109a6:	eba3 0309 	sub.w	r3, r3, r9
 80109aa:	f8ad 0010 	strh.w	r0, [sp, #16]
 80109ae:	f8ad 2012 	strh.w	r2, [sp, #18]
 80109b2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80109b6:	69ea      	ldr	r2, [r5, #28]
 80109b8:	4631      	mov	r1, r6
 80109ba:	e001      	b.n	80109c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80109bc:	69ea      	ldr	r2, [r5, #28]
 80109be:	4621      	mov	r1, r4
 80109c0:	4640      	mov	r0, r8
 80109c2:	f7ff ff2b 	bl	801081c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80109c6:	4628      	mov	r0, r5
 80109c8:	f7ff fe94 	bl	80106f4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80109cc:	6861      	ldr	r1, [r4, #4]
 80109ce:	4602      	mov	r2, r0
 80109d0:	6820      	ldr	r0, [r4, #0]
 80109d2:	4633      	mov	r3, r6
 80109d4:	c303      	stmia	r3!, {r0, r1}
 80109d6:	4611      	mov	r1, r2
 80109d8:	4630      	mov	r0, r6
 80109da:	f7fb faad 	bl	800bf38 <_ZN8touchgfx4RectaNERKS0_>
 80109de:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	f77f af33 	ble.w	801084e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80109e8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	f77f af2e 	ble.w	801084e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80109f2:	4628      	mov	r0, r5
 80109f4:	f7ff fe9a 	bl	801072c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80109f8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80109fc:	1a18      	subs	r0, r3, r0
 80109fe:	f8ad 0010 	strh.w	r0, [sp, #16]
 8010a02:	4628      	mov	r0, r5
 8010a04:	f7ff fea6 	bl	8010754 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8010a08:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010a0c:	1a18      	subs	r0, r3, r0
 8010a0e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8010a12:	682b      	ldr	r3, [r5, #0]
 8010a14:	4631      	mov	r1, r6
 8010a16:	689b      	ldr	r3, [r3, #8]
 8010a18:	4628      	mov	r0, r5
 8010a1a:	4798      	blx	r3
 8010a1c:	e717      	b.n	801084e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08010a1e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8010a1e:	b570      	push	{r4, r5, r6, lr}
 8010a20:	460c      	mov	r4, r1
 8010a22:	b086      	sub	sp, #24
 8010a24:	1d06      	adds	r6, r0, #4
 8010a26:	2300      	movs	r3, #0
 8010a28:	4631      	mov	r1, r6
 8010a2a:	4605      	mov	r5, r0
 8010a2c:	a802      	add	r0, sp, #8
 8010a2e:	9301      	str	r3, [sp, #4]
 8010a30:	f7ff fca0 	bl	8010374 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010a34:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8010a38:	8822      	ldrh	r2, [r4, #0]
 8010a3a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8010a3e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8010a42:	f8ad 0014 	strh.w	r0, [sp, #20]
 8010a46:	1ad2      	subs	r2, r2, r3
 8010a48:	8863      	ldrh	r3, [r4, #2]
 8010a4a:	f8ad 2010 	strh.w	r2, [sp, #16]
 8010a4e:	1a5b      	subs	r3, r3, r1
 8010a50:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8010a54:	f8ad 1016 	strh.w	r1, [sp, #22]
 8010a58:	aa01      	add	r2, sp, #4
 8010a5a:	a904      	add	r1, sp, #16
 8010a5c:	4630      	mov	r0, r6
 8010a5e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8010a62:	f7fb fb41 	bl	800c0e8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8010a66:	9a01      	ldr	r2, [sp, #4]
 8010a68:	b11a      	cbz	r2, 8010a72 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8010a6a:	4621      	mov	r1, r4
 8010a6c:	4628      	mov	r0, r5
 8010a6e:	f7ff fed5 	bl	801081c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010a72:	b006      	add	sp, #24
 8010a74:	bd70      	pop	{r4, r5, r6, pc}

08010a76 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8010a76:	b530      	push	{r4, r5, lr}
 8010a78:	4602      	mov	r2, r0
 8010a7a:	4604      	mov	r4, r0
 8010a7c:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8010a80:	b085      	sub	sp, #20
 8010a82:	460d      	mov	r5, r1
 8010a84:	6851      	ldr	r1, [r2, #4]
 8010a86:	466b      	mov	r3, sp
 8010a88:	c303      	stmia	r3!, {r0, r1}
 8010a8a:	4629      	mov	r1, r5
 8010a8c:	4668      	mov	r0, sp
 8010a8e:	f7fb fa53 	bl	800bf38 <_ZN8touchgfx4RectaNERKS0_>
 8010a92:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8010a96:	b12b      	cbz	r3, 8010aa4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8010a98:	4669      	mov	r1, sp
 8010a9a:	4620      	mov	r0, r4
 8010a9c:	f7ff ffbf 	bl	8010a1e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8010aa0:	b005      	add	sp, #20
 8010aa2:	bd30      	pop	{r4, r5, pc}
 8010aa4:	3404      	adds	r4, #4
 8010aa6:	4621      	mov	r1, r4
 8010aa8:	a802      	add	r0, sp, #8
 8010aaa:	f7ff fc63 	bl	8010374 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010aae:	f8bd 3000 	ldrh.w	r3, [sp]
 8010ab2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8010ab6:	1a9b      	subs	r3, r3, r2
 8010ab8:	f8ad 3000 	strh.w	r3, [sp]
 8010abc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8010ac0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010ac4:	4669      	mov	r1, sp
 8010ac6:	1a9b      	subs	r3, r3, r2
 8010ac8:	4620      	mov	r0, r4
 8010aca:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010ace:	f7fb fad2 	bl	800c076 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8010ad2:	e7e5      	b.n	8010aa0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08010ad4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8010ad4:	680a      	ldr	r2, [r1, #0]
 8010ad6:	460b      	mov	r3, r1
 8010ad8:	6992      	ldr	r2, [r2, #24]
 8010ada:	1d01      	adds	r1, r0, #4
 8010adc:	4618      	mov	r0, r3
 8010ade:	4710      	bx	r2

08010ae0 <_ZN8touchgfx12TextProviderC1Ev>:
 8010ae0:	b538      	push	{r3, r4, r5, lr}
 8010ae2:	2500      	movs	r5, #0
 8010ae4:	2302      	movs	r3, #2
 8010ae6:	4604      	mov	r4, r0
 8010ae8:	e9c0 5500 	strd	r5, r5, [r0]
 8010aec:	7403      	strb	r3, [r0, #16]
 8010aee:	6145      	str	r5, [r0, #20]
 8010af0:	7605      	strb	r5, [r0, #24]
 8010af2:	83c5      	strh	r5, [r0, #30]
 8010af4:	8405      	strh	r5, [r0, #32]
 8010af6:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8010af8:	8705      	strh	r5, [r0, #56]	@ 0x38
 8010afa:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 8010afc:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8010b00:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 8010b04:	220e      	movs	r2, #14
 8010b06:	4629      	mov	r1, r5
 8010b08:	304c      	adds	r0, #76	@ 0x4c
 8010b0a:	f002 fe7e 	bl	801380a <memset>
 8010b0e:	2301      	movs	r3, #1
 8010b10:	4620      	mov	r0, r4
 8010b12:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 8010b16:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8010b1a:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 8010b1e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 8010b22:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 8010b26:	f7f8 ff75 	bl	8009a14 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8010b2a:	4620      	mov	r0, r4
 8010b2c:	bd38      	pop	{r3, r4, r5, pc}

08010b2e <_ZN8touchgfx12TextProvider11endOfStringEv>:
 8010b2e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8010b30:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8010b34:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 8010b36:	fab0 f080 	clz	r0, r0
 8010b3a:	0940      	lsrs	r0, r0, #5
 8010b3c:	4770      	bx	lr

08010b3e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8010b3e:	b530      	push	{r4, r5, lr}
 8010b40:	2500      	movs	r5, #0
 8010b42:	2401      	movs	r4, #1
 8010b44:	6843      	ldr	r3, [r0, #4]
 8010b46:	b913      	cbnz	r3, 8010b4e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8010b48:	6803      	ldr	r3, [r0, #0]
 8010b4a:	b313      	cbz	r3, 8010b92 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8010b4c:	6043      	str	r3, [r0, #4]
 8010b4e:	7e03      	ldrb	r3, [r0, #24]
 8010b50:	b143      	cbz	r3, 8010b64 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8010b52:	6943      	ldr	r3, [r0, #20]
 8010b54:	b12b      	cbz	r3, 8010b62 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8010b56:	881a      	ldrh	r2, [r3, #0]
 8010b58:	b11a      	cbz	r2, 8010b62 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8010b5a:	1c9a      	adds	r2, r3, #2
 8010b5c:	6142      	str	r2, [r0, #20]
 8010b5e:	8818      	ldrh	r0, [r3, #0]
 8010b60:	bd30      	pop	{r4, r5, pc}
 8010b62:	7605      	strb	r5, [r0, #24]
 8010b64:	6843      	ldr	r3, [r0, #4]
 8010b66:	8819      	ldrh	r1, [r3, #0]
 8010b68:	b199      	cbz	r1, 8010b92 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8010b6a:	1c9a      	adds	r2, r3, #2
 8010b6c:	2902      	cmp	r1, #2
 8010b6e:	6042      	str	r2, [r0, #4]
 8010b70:	d1f5      	bne.n	8010b5e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8010b72:	7c03      	ldrb	r3, [r0, #16]
 8010b74:	2b01      	cmp	r3, #1
 8010b76:	d8e5      	bhi.n	8010b44 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8010b78:	1c5a      	adds	r2, r3, #1
 8010b7a:	3302      	adds	r3, #2
 8010b7c:	7402      	strb	r2, [r0, #16]
 8010b7e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8010b82:	6143      	str	r3, [r0, #20]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d0dd      	beq.n	8010b44 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8010b88:	881b      	ldrh	r3, [r3, #0]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d0da      	beq.n	8010b44 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8010b8e:	7604      	strb	r4, [r0, #24]
 8010b90:	e7d8      	b.n	8010b44 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8010b92:	2000      	movs	r0, #0
 8010b94:	e7e4      	b.n	8010b60 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08010b96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8010b96:	b430      	push	{r4, r5}
 8010b98:	6001      	str	r1, [r0, #0]
 8010b9a:	2100      	movs	r1, #0
 8010b9c:	6041      	str	r1, [r0, #4]
 8010b9e:	6815      	ldr	r5, [r2, #0]
 8010ba0:	6085      	str	r5, [r0, #8]
 8010ba2:	6852      	ldr	r2, [r2, #4]
 8010ba4:	6443      	str	r3, [r0, #68]	@ 0x44
 8010ba6:	9b02      	ldr	r3, [sp, #8]
 8010ba8:	60c2      	str	r2, [r0, #12]
 8010baa:	7401      	strb	r1, [r0, #16]
 8010bac:	6141      	str	r1, [r0, #20]
 8010bae:	7601      	strb	r1, [r0, #24]
 8010bb0:	8701      	strh	r1, [r0, #56]	@ 0x38
 8010bb2:	8401      	strh	r1, [r0, #32]
 8010bb4:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 8010bb8:	6483      	str	r3, [r0, #72]	@ 0x48
 8010bba:	bc30      	pop	{r4, r5}
 8010bbc:	f7f8 bf2a 	b.w	8009a14 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08010bc0 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 8010bc0:	b408      	push	{r3}
 8010bc2:	b510      	push	{r4, lr}
 8010bc4:	b085      	sub	sp, #20
 8010bc6:	ac07      	add	r4, sp, #28
 8010bc8:	f854 3b04 	ldr.w	r3, [r4], #4
 8010bcc:	9300      	str	r3, [sp, #0]
 8010bce:	4613      	mov	r3, r2
 8010bd0:	4622      	mov	r2, r4
 8010bd2:	9403      	str	r4, [sp, #12]
 8010bd4:	f7ff ffdf 	bl	8010b96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8010bd8:	b005      	add	sp, #20
 8010bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bde:	b001      	add	sp, #4
 8010be0:	4770      	bx	lr

08010be2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8010be2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010be4:	4605      	mov	r5, r0
 8010be6:	4608      	mov	r0, r1
 8010be8:	b1e9      	cbz	r1, 8010c26 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 8010bea:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 8010bee:	460b      	mov	r3, r1
 8010bf0:	f101 0708 	add.w	r7, r1, #8
 8010bf4:	4622      	mov	r2, r4
 8010bf6:	6818      	ldr	r0, [r3, #0]
 8010bf8:	6859      	ldr	r1, [r3, #4]
 8010bfa:	4626      	mov	r6, r4
 8010bfc:	c603      	stmia	r6!, {r0, r1}
 8010bfe:	3308      	adds	r3, #8
 8010c00:	42bb      	cmp	r3, r7
 8010c02:	4634      	mov	r4, r6
 8010c04:	d1f7      	bne.n	8010bf6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8010c06:	6818      	ldr	r0, [r3, #0]
 8010c08:	6030      	str	r0, [r6, #0]
 8010c0a:	889b      	ldrh	r3, [r3, #4]
 8010c0c:	80b3      	strh	r3, [r6, #4]
 8010c0e:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8010c12:	015b      	lsls	r3, r3, #5
 8010c14:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8010c18:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8010c1c:	430b      	orrs	r3, r1
 8010c1e:	425b      	negs	r3, r3
 8010c20:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8010c24:	4610      	mov	r0, r2
 8010c26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010c28 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8010c28:	b538      	push	{r3, r4, r5, lr}
 8010c2a:	460c      	mov	r4, r1
 8010c2c:	6811      	ldr	r1, [r2, #0]
 8010c2e:	4610      	mov	r0, r2
 8010c30:	68cd      	ldr	r5, [r1, #12]
 8010c32:	4619      	mov	r1, r3
 8010c34:	47a8      	blx	r5
 8010c36:	2800      	cmp	r0, #0
 8010c38:	bf08      	it	eq
 8010c3a:	4620      	moveq	r0, r4
 8010c3c:	bd38      	pop	{r3, r4, r5, pc}
	...

08010c40 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8010c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c42:	4604      	mov	r4, r0
 8010c44:	4615      	mov	r5, r2
 8010c46:	4608      	mov	r0, r1
 8010c48:	b93a      	cbnz	r2, 8010c5a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8010c4a:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 8010c4e:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8010c52:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 8010c56:	4628      	mov	r0, r5
 8010c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c5a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8010c5e:	8893      	ldrh	r3, [r2, #4]
 8010c60:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8010c64:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8010c68:	79ee      	ldrb	r6, [r5, #7]
 8010c6a:	f46f 6763 	mvn.w	r7, #3632	@ 0xe30
 8010c6e:	4316      	orrs	r6, r2
 8010c70:	19da      	adds	r2, r3, r7
 8010c72:	b291      	uxth	r1, r2
 8010c74:	291d      	cmp	r1, #29
 8010c76:	b2b7      	uxth	r7, r6
 8010c78:	d87a      	bhi.n	8010d70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 8010c7a:	2201      	movs	r2, #1
 8010c7c:	408a      	lsls	r2, r1
 8010c7e:	4975      	ldr	r1, [pc, #468]	@ (8010e54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8010c80:	420a      	tst	r2, r1
 8010c82:	ea4f 06e6 	mov.w	r6, r6, asr #3
 8010c86:	d12d      	bne.n	8010ce4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8010c88:	f412 7f60 	tst.w	r2, #896	@ 0x380
 8010c8c:	d070      	beq.n	8010d70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 8010c8e:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 8010c92:	462b      	mov	r3, r5
 8010c94:	f105 0e08 	add.w	lr, r5, #8
 8010c98:	4615      	mov	r5, r2
 8010c9a:	6818      	ldr	r0, [r3, #0]
 8010c9c:	6859      	ldr	r1, [r3, #4]
 8010c9e:	4694      	mov	ip, r2
 8010ca0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8010ca4:	3308      	adds	r3, #8
 8010ca6:	4573      	cmp	r3, lr
 8010ca8:	4662      	mov	r2, ip
 8010caa:	d1f6      	bne.n	8010c9a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 8010cac:	6818      	ldr	r0, [r3, #0]
 8010cae:	f8cc 0000 	str.w	r0, [ip]
 8010cb2:	889b      	ldrh	r3, [r3, #4]
 8010cb4:	f8ac 3004 	strh.w	r3, [ip, #4]
 8010cb8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8010cbc:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 8010cc0:	b2b3      	uxth	r3, r6
 8010cc2:	1aca      	subs	r2, r1, r3
 8010cc4:	b292      	uxth	r2, r2
 8010cc6:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 8010cca:	10d2      	asrs	r2, r2, #3
 8010ccc:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 8010cd0:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8010cd4:	4302      	orrs	r2, r0
 8010cd6:	1bcf      	subs	r7, r1, r7
 8010cd8:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 8010cdc:	1afb      	subs	r3, r7, r3
 8010cde:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8010ce2:	e7b8      	b.n	8010c56 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8010ce4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8010ce6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8010cea:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8010cec:	f640 6333 	movw	r3, #3635	@ 0xe33
 8010cf0:	4299      	cmp	r1, r3
 8010cf2:	d110      	bne.n	8010d16 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8010cf4:	6803      	ldr	r3, [r0, #0]
 8010cf6:	68db      	ldr	r3, [r3, #12]
 8010cf8:	4798      	blx	r3
 8010cfa:	7b41      	ldrb	r1, [r0, #13]
 8010cfc:	00cb      	lsls	r3, r1, #3
 8010cfe:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8010d02:	7a03      	ldrb	r3, [r0, #8]
 8010d04:	0648      	lsls	r0, r1, #25
 8010d06:	ea43 0302 	orr.w	r3, r3, r2
 8010d0a:	bf44      	itt	mi
 8010d0c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8010d10:	b21b      	sxthmi	r3, r3
 8010d12:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8010d16:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8010d1a:	443b      	add	r3, r7
 8010d1c:	4433      	add	r3, r6
 8010d1e:	b29b      	uxth	r3, r3
 8010d20:	f104 064c 	add.w	r6, r4, #76	@ 0x4c
 8010d24:	462a      	mov	r2, r5
 8010d26:	f105 0c08 	add.w	ip, r5, #8
 8010d2a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8010d2e:	4635      	mov	r5, r6
 8010d30:	6810      	ldr	r0, [r2, #0]
 8010d32:	6851      	ldr	r1, [r2, #4]
 8010d34:	4637      	mov	r7, r6
 8010d36:	c703      	stmia	r7!, {r0, r1}
 8010d38:	3208      	adds	r2, #8
 8010d3a:	4562      	cmp	r2, ip
 8010d3c:	463e      	mov	r6, r7
 8010d3e:	d1f7      	bne.n	8010d30 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8010d40:	6810      	ldr	r0, [r2, #0]
 8010d42:	6038      	str	r0, [r7, #0]
 8010d44:	8892      	ldrh	r2, [r2, #4]
 8010d46:	80ba      	strh	r2, [r7, #4]
 8010d48:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8010d4c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8010d50:	10db      	asrs	r3, r3, #3
 8010d52:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8010d56:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010d5a:	4313      	orrs	r3, r2
 8010d5c:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8010d60:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 8010d64:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 8010d68:	1a9b      	subs	r3, r3, r2
 8010d6a:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 8010d6e:	e772      	b.n	8010c56 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8010d70:	f023 0204 	bic.w	r2, r3, #4
 8010d74:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8010d78:	428a      	cmp	r2, r1
 8010d7a:	d003      	beq.n	8010d84 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8010d7c:	f640 621d 	movw	r2, #3613	@ 0xe1d
 8010d80:	4293      	cmp	r3, r2
 8010d82:	d120      	bne.n	8010dc6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x186>
 8010d84:	3b01      	subs	r3, #1
 8010d86:	4602      	mov	r2, r0
 8010d88:	b29b      	uxth	r3, r3
 8010d8a:	4629      	mov	r1, r5
 8010d8c:	4620      	mov	r0, r4
 8010d8e:	f7ff ff4b 	bl	8010c28 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8010d92:	7b41      	ldrb	r1, [r0, #13]
 8010d94:	00cb      	lsls	r3, r1, #3
 8010d96:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8010d9a:	7a03      	ldrb	r3, [r0, #8]
 8010d9c:	0649      	lsls	r1, r1, #25
 8010d9e:	ea43 0302 	orr.w	r3, r3, r2
 8010da2:	bf44      	itt	mi
 8010da4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8010da8:	b21b      	sxthmi	r3, r3
 8010daa:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8010dae:	7b6b      	ldrb	r3, [r5, #13]
 8010db0:	7aaa      	ldrb	r2, [r5, #10]
 8010db2:	005b      	lsls	r3, r3, #1
 8010db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010db8:	4313      	orrs	r3, r2
 8010dba:	115a      	asrs	r2, r3, #5
 8010dbc:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8010dc0:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8010dc4:	e036      	b.n	8010e34 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8010dc6:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8010dca:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 8010dce:	7a2a      	ldrb	r2, [r5, #8]
 8010dd0:	f01c 0f40 	tst.w	ip, #64	@ 0x40
 8010dd4:	ea42 0201 	orr.w	r2, r2, r1
 8010dd8:	bf1c      	itt	ne
 8010dda:	f5a2 7200 	subne.w	r2, r2, #512	@ 0x200
 8010dde:	b212      	sxthne	r2, r2
 8010de0:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 8010de4:	f640 6109 	movw	r1, #3593	@ 0xe09
 8010de8:	f023 0210 	bic.w	r2, r3, #16
 8010dec:	428a      	cmp	r2, r1
 8010dee:	d003      	beq.n	8010df8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b8>
 8010df0:	f640 6213 	movw	r2, #3603	@ 0xe13
 8010df4:	4293      	cmp	r3, r2
 8010df6:	d12a      	bne.n	8010e4e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8010df8:	7b6e      	ldrb	r6, [r5, #13]
 8010dfa:	0076      	lsls	r6, r6, #1
 8010dfc:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8010e00:	7aae      	ldrb	r6, [r5, #10]
 8010e02:	4316      	orrs	r6, r2
 8010e04:	f640 6213 	movw	r2, #3603	@ 0xe13
 8010e08:	4293      	cmp	r3, r2
 8010e0a:	bf18      	it	ne
 8010e0c:	f103 33ff 	addne.w	r3, r3, #4294967295
 8010e10:	4602      	mov	r2, r0
 8010e12:	bf14      	ite	ne
 8010e14:	b29b      	uxthne	r3, r3
 8010e16:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8010e1a:	4629      	mov	r1, r5
 8010e1c:	4620      	mov	r0, r4
 8010e1e:	f7ff ff03 	bl	8010c28 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8010e22:	7b43      	ldrb	r3, [r0, #13]
 8010e24:	7a82      	ldrb	r2, [r0, #10]
 8010e26:	005b      	lsls	r3, r3, #1
 8010e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010e2c:	4313      	orrs	r3, r2
 8010e2e:	1af6      	subs	r6, r6, r3
 8010e30:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 8010e34:	7b69      	ldrb	r1, [r5, #13]
 8010e36:	00cb      	lsls	r3, r1, #3
 8010e38:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8010e3c:	7a2b      	ldrb	r3, [r5, #8]
 8010e3e:	4313      	orrs	r3, r2
 8010e40:	064a      	lsls	r2, r1, #25
 8010e42:	bf44      	itt	mi
 8010e44:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8010e48:	b21b      	sxthmi	r3, r3
 8010e4a:	1bdb      	subs	r3, r3, r7
 8010e4c:	e747      	b.n	8010cde <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8010e4e:	2300      	movs	r3, #0
 8010e50:	e7b6      	b.n	8010dc0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x180>
 8010e52:	bf00      	nop
 8010e54:	3fc00079 	.word	0x3fc00079

08010e58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8010e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e5c:	4604      	mov	r4, r0
 8010e5e:	b942      	cbnz	r2, 8010e72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8010e60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010e64:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 8010e68:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8010e6c:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8010e70:	e047      	b.n	8010f02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8010e72:	7b51      	ldrb	r1, [r2, #13]
 8010e74:	8893      	ldrh	r3, [r2, #4]
 8010e76:	010d      	lsls	r5, r1, #4
 8010e78:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8010e7c:	79d5      	ldrb	r5, [r2, #7]
 8010e7e:	4305      	orrs	r5, r0
 8010e80:	2d04      	cmp	r5, #4
 8010e82:	bfcc      	ite	gt
 8010e84:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8010e88:	f04f 0e01 	movle.w	lr, #1
 8010e8c:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 8010e90:	f200 80ab 	bhi.w	8010fea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8010e94:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 8010e98:	4283      	cmp	r3, r0
 8010e9a:	d216      	bcs.n	8010eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8010e9c:	f240 605b 	movw	r0, #1627	@ 0x65b
 8010ea0:	4283      	cmp	r3, r0
 8010ea2:	d859      	bhi.n	8010f58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8010ea4:	f240 6057 	movw	r0, #1623	@ 0x657
 8010ea8:	4283      	cmp	r3, r0
 8010eaa:	d20e      	bcs.n	8010eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8010eac:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8010eb0:	d24a      	bcs.n	8010f48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8010eb2:	f240 604e 	movw	r0, #1614	@ 0x64e
 8010eb6:	4283      	cmp	r3, r0
 8010eb8:	d207      	bcs.n	8010eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8010eba:	f240 601a 	movw	r0, #1562	@ 0x61a
 8010ebe:	4283      	cmp	r3, r0
 8010ec0:	d02a      	beq.n	8010f18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8010ec2:	d821      	bhi.n	8010f08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8010ec4:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8010ec8:	d35b      	bcc.n	8010f82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8010eca:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 8010ece:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8010ed2:	f040 80d0 	bne.w	8011076 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8010ed6:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 8010eda:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8010ede:	f040 80ca 	bne.w	8011076 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8010ee2:	00cb      	lsls	r3, r1, #3
 8010ee4:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8010ee8:	7a13      	ldrb	r3, [r2, #8]
 8010eea:	0649      	lsls	r1, r1, #25
 8010eec:	ea43 0300 	orr.w	r3, r3, r0
 8010ef0:	bf44      	itt	mi
 8010ef2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8010ef6:	b21b      	sxthmi	r3, r3
 8010ef8:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8010efc:	1b5d      	subs	r5, r3, r5
 8010efe:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8010f02:	4610      	mov	r0, r2
 8010f04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f08:	f240 604b 	movw	r0, #1611	@ 0x64b
 8010f0c:	4283      	cmp	r3, r0
 8010f0e:	d338      	bcc.n	8010f82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8010f10:	f240 604c 	movw	r0, #1612	@ 0x64c
 8010f14:	4283      	cmp	r3, r0
 8010f16:	d9d8      	bls.n	8010eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8010f18:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8010f1c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8010f20:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8010f24:	f040 80f2 	bne.w	801110c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8010f28:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8010f2c:	f040 80ee 	bne.w	801110c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8010f30:	00cb      	lsls	r3, r1, #3
 8010f32:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8010f36:	7a13      	ldrb	r3, [r2, #8]
 8010f38:	064e      	lsls	r6, r1, #25
 8010f3a:	ea43 0300 	orr.w	r3, r3, r0
 8010f3e:	bf44      	itt	mi
 8010f40:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8010f44:	b21b      	sxthmi	r3, r3
 8010f46:	e7d9      	b.n	8010efc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8010f48:	f240 6054 	movw	r0, #1620	@ 0x654
 8010f4c:	4283      	cmp	r3, r0
 8010f4e:	d8e3      	bhi.n	8010f18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8010f50:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8010f54:	d9e0      	bls.n	8010f18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8010f56:	e7b8      	b.n	8010eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8010f58:	f240 6074 	movw	r0, #1652	@ 0x674
 8010f5c:	4283      	cmp	r3, r0
 8010f5e:	d0b4      	beq.n	8010eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8010f60:	d82d      	bhi.n	8010fbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8010f62:	f240 605e 	movw	r0, #1630	@ 0x65e
 8010f66:	4283      	cmp	r3, r0
 8010f68:	d804      	bhi.n	8010f74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8010f6a:	f240 605d 	movw	r0, #1629	@ 0x65d
 8010f6e:	4283      	cmp	r3, r0
 8010f70:	d3d2      	bcc.n	8010f18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8010f72:	e7aa      	b.n	8010eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8010f74:	f240 605f 	movw	r0, #1631	@ 0x65f
 8010f78:	4283      	cmp	r3, r0
 8010f7a:	d0cd      	beq.n	8010f18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8010f7c:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 8010f80:	d0a3      	beq.n	8010eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8010f82:	00cb      	lsls	r3, r1, #3
 8010f84:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8010f88:	7a13      	ldrb	r3, [r2, #8]
 8010f8a:	0649      	lsls	r1, r1, #25
 8010f8c:	ea43 0300 	orr.w	r3, r3, r0
 8010f90:	bf44      	itt	mi
 8010f92:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8010f96:	b21b      	sxthmi	r3, r3
 8010f98:	1b5d      	subs	r5, r3, r5
 8010f9a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8010f9e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8010fa2:	7b53      	ldrb	r3, [r2, #13]
 8010fa4:	015b      	lsls	r3, r3, #5
 8010fa6:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8010faa:	7993      	ldrb	r3, [r2, #6]
 8010fac:	430b      	orrs	r3, r1
 8010fae:	005b      	lsls	r3, r3, #1
 8010fb0:	2105      	movs	r1, #5
 8010fb2:	fb93 f3f1 	sdiv	r3, r3, r1
 8010fb6:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8010fba:	440b      	add	r3, r1
 8010fbc:	e756      	b.n	8010e6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8010fbe:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 8010fc2:	4283      	cmp	r3, r0
 8010fc4:	d809      	bhi.n	8010fda <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8010fc6:	f240 60df 	movw	r0, #1759	@ 0x6df
 8010fca:	4283      	cmp	r3, r0
 8010fcc:	f4bf af7d 	bcs.w	8010eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8010fd0:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 8010fd4:	2b05      	cmp	r3, #5
 8010fd6:	d8d4      	bhi.n	8010f82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8010fd8:	e777      	b.n	8010eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8010fda:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 8010fde:	4283      	cmp	r3, r0
 8010fe0:	d09a      	beq.n	8010f18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8010fe2:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 8010fe6:	4283      	cmp	r3, r0
 8010fe8:	e7ca      	b.n	8010f80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8010fea:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 8010fee:	d22b      	bcs.n	8011048 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8010ff0:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8010ff4:	4283      	cmp	r3, r0
 8010ff6:	d28f      	bcs.n	8010f18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8010ff8:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8010ffc:	4283      	cmp	r3, r0
 8010ffe:	d816      	bhi.n	801102e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8011000:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8011004:	4283      	cmp	r3, r0
 8011006:	f4bf af60 	bcs.w	8010eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801100a:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801100e:	4283      	cmp	r3, r0
 8011010:	d80a      	bhi.n	8011028 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8011012:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 8011016:	4283      	cmp	r3, r0
 8011018:	f4bf af57 	bcs.w	8010eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801101c:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8011020:	4283      	cmp	r3, r0
 8011022:	f43f af79 	beq.w	8010f18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8011026:	e7ac      	b.n	8010f82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8011028:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801102c:	e7f8      	b.n	8011020 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801102e:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 8011032:	4283      	cmp	r3, r0
 8011034:	d802      	bhi.n	801103c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8011036:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801103a:	e798      	b.n	8010f6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801103c:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8011040:	4283      	cmp	r3, r0
 8011042:	f47f af42 	bne.w	8010eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011046:	e767      	b.n	8010f18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8011048:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801104c:	4283      	cmp	r3, r0
 801104e:	f43f af63 	beq.w	8010f18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8011052:	d802      	bhi.n	801105a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8011054:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 8011058:	e7f2      	b.n	8011040 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801105a:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801105e:	4283      	cmp	r3, r0
 8011060:	d805      	bhi.n	801106e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8011062:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 8011066:	4283      	cmp	r3, r0
 8011068:	f4ff af2f 	bcc.w	8010eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801106c:	e754      	b.n	8010f18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801106e:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 8011072:	4283      	cmp	r3, r0
 8011074:	e7af      	b.n	8010fd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8011076:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801107a:	4617      	mov	r7, r2
 801107c:	f102 0808 	add.w	r8, r2, #8
 8011080:	4666      	mov	r6, ip
 8011082:	6838      	ldr	r0, [r7, #0]
 8011084:	6879      	ldr	r1, [r7, #4]
 8011086:	46e6      	mov	lr, ip
 8011088:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801108c:	3708      	adds	r7, #8
 801108e:	4547      	cmp	r7, r8
 8011090:	46f4      	mov	ip, lr
 8011092:	d1f6      	bne.n	8011082 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8011094:	6838      	ldr	r0, [r7, #0]
 8011096:	f8ce 0000 	str.w	r0, [lr]
 801109a:	88b9      	ldrh	r1, [r7, #4]
 801109c:	f8ae 1004 	strh.w	r1, [lr, #4]
 80110a0:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 80110a4:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80110a8:	d009      	beq.n	80110be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 80110aa:	7b51      	ldrb	r1, [r2, #13]
 80110ac:	7992      	ldrb	r2, [r2, #6]
 80110ae:	0149      	lsls	r1, r1, #5
 80110b0:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80110b4:	4311      	orrs	r1, r2
 80110b6:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80110ba:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 80110be:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80110c2:	b2ad      	uxth	r5, r5
 80110c4:	d00d      	beq.n	80110e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 80110c6:	442b      	add	r3, r5
 80110c8:	b29b      	uxth	r3, r3
 80110ca:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 80110ce:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80110d2:	10db      	asrs	r3, r3, #3
 80110d4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80110d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80110dc:	4313      	orrs	r3, r2
 80110de:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 80110e2:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 80110e6:	00cb      	lsls	r3, r1, #3
 80110e8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80110ec:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 80110f0:	064f      	lsls	r7, r1, #25
 80110f2:	ea43 0302 	orr.w	r3, r3, r2
 80110f6:	bf44      	itt	mi
 80110f8:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80110fc:	b21b      	sxthmi	r3, r3
 80110fe:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8011102:	1b5b      	subs	r3, r3, r5
 8011104:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8011108:	4632      	mov	r2, r6
 801110a:	e6fa      	b.n	8010f02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801110c:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8011110:	4617      	mov	r7, r2
 8011112:	f102 0908 	add.w	r9, r2, #8
 8011116:	4666      	mov	r6, ip
 8011118:	6838      	ldr	r0, [r7, #0]
 801111a:	6879      	ldr	r1, [r7, #4]
 801111c:	46e0      	mov	r8, ip
 801111e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8011122:	3708      	adds	r7, #8
 8011124:	454f      	cmp	r7, r9
 8011126:	46c4      	mov	ip, r8
 8011128:	d1f6      	bne.n	8011118 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 801112a:	6838      	ldr	r0, [r7, #0]
 801112c:	f8c8 0000 	str.w	r0, [r8]
 8011130:	88b9      	ldrh	r1, [r7, #4]
 8011132:	f8a8 1004 	strh.w	r1, [r8, #4]
 8011136:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801113a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801113e:	d009      	beq.n	8011154 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 8011140:	7b51      	ldrb	r1, [r2, #13]
 8011142:	7992      	ldrb	r2, [r2, #6]
 8011144:	0149      	lsls	r1, r1, #5
 8011146:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801114a:	4311      	orrs	r1, r2
 801114c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8011150:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8011154:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8011158:	d00e      	beq.n	8011178 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 801115a:	eba3 030e 	sub.w	r3, r3, lr
 801115e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8011162:	b29b      	uxth	r3, r3
 8011164:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8011168:	10db      	asrs	r3, r3, #3
 801116a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801116e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8011172:	4313      	orrs	r3, r2
 8011174:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8011178:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801117c:	00cb      	lsls	r3, r1, #3
 801117e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8011182:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8011186:	0648      	lsls	r0, r1, #25
 8011188:	ea43 0302 	orr.w	r3, r3, r2
 801118c:	bf44      	itt	mi
 801118e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8011192:	b21b      	sxthmi	r3, r3
 8011194:	1b5d      	subs	r5, r3, r5
 8011196:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801119a:	e7b5      	b.n	8011108 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0801119c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801119c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111a0:	461e      	mov	r6, r3
 80111a2:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80111a4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80111a8:	4604      	mov	r4, r0
 80111aa:	4617      	mov	r7, r2
 80111ac:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 80111b0:	f7f8 fb8a 	bl	80098c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80111b4:	4605      	mov	r5, r0
 80111b6:	b918      	cbnz	r0, 80111c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 80111b8:	6030      	str	r0, [r6, #0]
 80111ba:	4628      	mov	r0, r5
 80111bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	4601      	mov	r1, r0
 80111c4:	68db      	ldr	r3, [r3, #12]
 80111c6:	4638      	mov	r0, r7
 80111c8:	4798      	blx	r3
 80111ca:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 80111ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80111d2:	4602      	mov	r2, r0
 80111d4:	6030      	str	r0, [r6, #0]
 80111d6:	d213      	bcs.n	8011200 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 80111d8:	4643      	mov	r3, r8
 80111da:	4639      	mov	r1, r7
 80111dc:	4620      	mov	r0, r4
 80111de:	f7ff fe3b 	bl	8010e58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80111e2:	6030      	str	r0, [r6, #0]
 80111e4:	6833      	ldr	r3, [r6, #0]
 80111e6:	b143      	cbz	r3, 80111fa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 80111e8:	7b5a      	ldrb	r2, [r3, #13]
 80111ea:	7a9b      	ldrb	r3, [r3, #10]
 80111ec:	0052      	lsls	r2, r2, #1
 80111ee:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80111f2:	4313      	orrs	r3, r2
 80111f4:	bf0c      	ite	eq
 80111f6:	2301      	moveq	r3, #1
 80111f8:	2300      	movne	r3, #0
 80111fa:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 80111fe:	e7dc      	b.n	80111ba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8011200:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8011204:	b29b      	uxth	r3, r3
 8011206:	2b7f      	cmp	r3, #127	@ 0x7f
 8011208:	d804      	bhi.n	8011214 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801120a:	4639      	mov	r1, r7
 801120c:	4620      	mov	r0, r4
 801120e:	f7ff fd17 	bl	8010c40 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8011212:	e7e6      	b.n	80111e2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8011214:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8011218:	2b00      	cmp	r3, #0
 801121a:	d0e3      	beq.n	80111e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801121c:	f640 1302 	movw	r3, #2306	@ 0x902
 8011220:	429d      	cmp	r5, r3
 8011222:	d1df      	bne.n	80111e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8011224:	4601      	mov	r1, r0
 8011226:	4620      	mov	r0, r4
 8011228:	f7ff fcdb 	bl	8010be2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801122c:	e7d9      	b.n	80111e2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801122e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801122e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011232:	461e      	mov	r6, r3
 8011234:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8011236:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801123a:	4604      	mov	r4, r0
 801123c:	4617      	mov	r7, r2
 801123e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8011242:	f7f8 fb41 	bl	80098c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8011246:	4605      	mov	r5, r0
 8011248:	b918      	cbnz	r0, 8011252 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801124a:	6030      	str	r0, [r6, #0]
 801124c:	4628      	mov	r0, r5
 801124e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011252:	683b      	ldr	r3, [r7, #0]
 8011254:	4601      	mov	r1, r0
 8011256:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801125a:	4638      	mov	r0, r7
 801125c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011260:	47c8      	blx	r9
 8011262:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8011266:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801126a:	4602      	mov	r2, r0
 801126c:	6030      	str	r0, [r6, #0]
 801126e:	d213      	bcs.n	8011298 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8011270:	4643      	mov	r3, r8
 8011272:	4639      	mov	r1, r7
 8011274:	4620      	mov	r0, r4
 8011276:	f7ff fdef 	bl	8010e58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801127a:	6030      	str	r0, [r6, #0]
 801127c:	6833      	ldr	r3, [r6, #0]
 801127e:	b143      	cbz	r3, 8011292 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8011280:	7b5a      	ldrb	r2, [r3, #13]
 8011282:	7a9b      	ldrb	r3, [r3, #10]
 8011284:	0052      	lsls	r2, r2, #1
 8011286:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801128a:	4313      	orrs	r3, r2
 801128c:	bf0c      	ite	eq
 801128e:	2301      	moveq	r3, #1
 8011290:	2300      	movne	r3, #0
 8011292:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8011296:	e7d9      	b.n	801124c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8011298:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801129c:	b29b      	uxth	r3, r3
 801129e:	2b7f      	cmp	r3, #127	@ 0x7f
 80112a0:	d804      	bhi.n	80112ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 80112a2:	4639      	mov	r1, r7
 80112a4:	4620      	mov	r0, r4
 80112a6:	f7ff fccb 	bl	8010c40 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80112aa:	e7e6      	b.n	801127a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 80112ac:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d0e3      	beq.n	801127c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80112b4:	f640 1302 	movw	r3, #2306	@ 0x902
 80112b8:	429d      	cmp	r5, r3
 80112ba:	d1df      	bne.n	801127c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80112bc:	4601      	mov	r1, r0
 80112be:	4620      	mov	r0, r4
 80112c0:	f7ff fc8f 	bl	8010be2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80112c4:	e7d9      	b.n	801127a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

080112c6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80112c6:	b510      	push	{r4, lr}
 80112c8:	4604      	mov	r4, r0
 80112ca:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 80112ce:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80112d0:	b1f1      	cbz	r1, 8011310 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 80112d2:	2b0a      	cmp	r3, #10
 80112d4:	d02f      	beq.n	8011336 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 80112d6:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80112d8:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80112dc:	3901      	subs	r1, #1
 80112de:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 80112e0:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 80112e4:	1c51      	adds	r1, r2, #1
 80112e6:	b289      	uxth	r1, r1
 80112e8:	2901      	cmp	r1, #1
 80112ea:	bf84      	itt	hi
 80112ec:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80112f0:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 80112f2:	f103 0201 	add.w	r2, r3, #1
 80112f6:	8722      	strh	r2, [r4, #56]	@ 0x38
 80112f8:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80112fa:	bf98      	it	ls
 80112fc:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 80112fe:	4413      	add	r3, r2
 8011300:	b29b      	uxth	r3, r3
 8011302:	2b09      	cmp	r3, #9
 8011304:	bf88      	it	hi
 8011306:	3b0a      	subhi	r3, #10
 8011308:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801130c:	8458      	strh	r0, [r3, #34]	@ 0x22
 801130e:	e7dc      	b.n	80112ca <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8011310:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8011312:	2b0a      	cmp	r3, #10
 8011314:	d00f      	beq.n	8011336 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8011316:	4620      	mov	r0, r4
 8011318:	f7ff fc11 	bl	8010b3e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801131c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801131e:	1c5a      	adds	r2, r3, #1
 8011320:	8722      	strh	r2, [r4, #56]	@ 0x38
 8011322:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8011324:	4413      	add	r3, r2
 8011326:	b29b      	uxth	r3, r3
 8011328:	2b09      	cmp	r3, #9
 801132a:	bf88      	it	hi
 801132c:	3b0a      	subhi	r3, #10
 801132e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8011332:	8458      	strh	r0, [r3, #34]	@ 0x22
 8011334:	e7ec      	b.n	8011310 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8011336:	bd10      	pop	{r4, pc}

08011338 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8011338:	b538      	push	{r3, r4, r5, lr}
 801133a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801133c:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8011340:	4604      	mov	r4, r0
 8011342:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 8011344:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 8011346:	3a01      	subs	r2, #1
 8011348:	8702      	strh	r2, [r0, #56]	@ 0x38
 801134a:	1c5a      	adds	r2, r3, #1
 801134c:	b292      	uxth	r2, r2
 801134e:	2a09      	cmp	r2, #9
 8011350:	bf86      	itte	hi
 8011352:	3b09      	subhi	r3, #9
 8011354:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 8011356:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 8011358:	f7ff ffb5 	bl	80112c6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801135c:	8c23      	ldrh	r3, [r4, #32]
 801135e:	2b01      	cmp	r3, #1
 8011360:	bf9c      	itt	ls
 8011362:	3301      	addls	r3, #1
 8011364:	8423      	strhls	r3, [r4, #32]
 8011366:	8be3      	ldrh	r3, [r4, #30]
 8011368:	b90b      	cbnz	r3, 801136e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801136a:	2302      	movs	r3, #2
 801136c:	83e3      	strh	r3, [r4, #30]
 801136e:	8be3      	ldrh	r3, [r4, #30]
 8011370:	3b01      	subs	r3, #1
 8011372:	b29b      	uxth	r3, r3
 8011374:	83e3      	strh	r3, [r4, #30]
 8011376:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801137a:	4628      	mov	r0, r5
 801137c:	8365      	strh	r5, [r4, #26]
 801137e:	bd38      	pop	{r3, r4, r5, pc}

08011380 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8011380:	428a      	cmp	r2, r1
 8011382:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011386:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 8011388:	d931      	bls.n	80113ee <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 801138a:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 801138c:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 8011390:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8011394:	19ee      	adds	r6, r5, r7
 8011396:	1a54      	subs	r4, r2, r1
 8011398:	3e01      	subs	r6, #1
 801139a:	fa1f fe84 	uxth.w	lr, r4
 801139e:	b2b4      	uxth	r4, r6
 80113a0:	eba4 090e 	sub.w	r9, r4, lr
 80113a4:	fa1f f989 	uxth.w	r9, r9
 80113a8:	2c09      	cmp	r4, #9
 80113aa:	4626      	mov	r6, r4
 80113ac:	bf88      	it	hi
 80113ae:	f1a4 060a 	subhi.w	r6, r4, #10
 80113b2:	f1bc 0f00 	cmp.w	ip, #0
 80113b6:	bf08      	it	eq
 80113b8:	f04f 0c02 	moveq.w	ip, #2
 80113bc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80113c0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80113c4:	fa1f fc8c 	uxth.w	ip, ip
 80113c8:	3c01      	subs	r4, #1
 80113ca:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 80113ce:	b2a4      	uxth	r4, r4
 80113d0:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 80113d4:	454c      	cmp	r4, r9
 80113d6:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 80113da:	d1e5      	bne.n	80113a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 80113dc:	eba5 050e 	sub.w	r5, r5, lr
 80113e0:	eb0e 0408 	add.w	r4, lr, r8
 80113e4:	8705      	strh	r5, [r0, #56]	@ 0x38
 80113e6:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 80113ea:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 80113ee:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 80113f0:	1a64      	subs	r4, r4, r1
 80113f2:	4439      	add	r1, r7
 80113f4:	b289      	uxth	r1, r1
 80113f6:	2909      	cmp	r1, #9
 80113f8:	bf88      	it	hi
 80113fa:	390a      	subhi	r1, #10
 80113fc:	8704      	strh	r4, [r0, #56]	@ 0x38
 80113fe:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8011400:	250a      	movs	r5, #10
 8011402:	b18a      	cbz	r2, 8011428 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 8011404:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 8011406:	3a01      	subs	r2, #1
 8011408:	b292      	uxth	r2, r2
 801140a:	3101      	adds	r1, #1
 801140c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8011410:	8701      	strh	r1, [r0, #56]	@ 0x38
 8011412:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8011414:	b901      	cbnz	r1, 8011418 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 8011416:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8011418:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801141a:	3901      	subs	r1, #1
 801141c:	b289      	uxth	r1, r1
 801141e:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8011420:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8011424:	844c      	strh	r4, [r1, #34]	@ 0x22
 8011426:	e7ec      	b.n	8011402 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 8011428:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801142c:	f7ff bf4b 	b.w	80112c6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08011430 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8011430:	b570      	push	{r4, r5, r6, lr}
 8011432:	2500      	movs	r5, #0
 8011434:	4295      	cmp	r5, r2
 8011436:	d011      	beq.n	801145c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8011438:	8bc4      	ldrh	r4, [r0, #30]
 801143a:	f831 6b02 	ldrh.w	r6, [r1], #2
 801143e:	4414      	add	r4, r2
 8011440:	3c01      	subs	r4, #1
 8011442:	1b64      	subs	r4, r4, r5
 8011444:	b2a4      	uxth	r4, r4
 8011446:	2c01      	cmp	r4, #1
 8011448:	bf88      	it	hi
 801144a:	3c02      	subhi	r4, #2
 801144c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8011450:	8b64      	ldrh	r4, [r4, #26]
 8011452:	42b4      	cmp	r4, r6
 8011454:	d117      	bne.n	8011486 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8011456:	3501      	adds	r5, #1
 8011458:	b2ad      	uxth	r5, r5
 801145a:	e7eb      	b.n	8011434 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801145c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8011460:	2400      	movs	r4, #0
 8011462:	4413      	add	r3, r2
 8011464:	b2a2      	uxth	r2, r4
 8011466:	429a      	cmp	r2, r3
 8011468:	da0f      	bge.n	801148a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801146a:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801146c:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8011470:	4432      	add	r2, r6
 8011472:	b292      	uxth	r2, r2
 8011474:	2a09      	cmp	r2, #9
 8011476:	bf88      	it	hi
 8011478:	3a0a      	subhi	r2, #10
 801147a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801147e:	3401      	adds	r4, #1
 8011480:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8011482:	42aa      	cmp	r2, r5
 8011484:	d0ee      	beq.n	8011464 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8011486:	2000      	movs	r0, #0
 8011488:	bd70      	pop	{r4, r5, r6, pc}
 801148a:	2001      	movs	r0, #1
 801148c:	e7fc      	b.n	8011488 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801148e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801148e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011492:	4605      	mov	r5, r0
 8011494:	4616      	mov	r6, r2
 8011496:	1c8c      	adds	r4, r1, #2
 8011498:	8809      	ldrh	r1, [r1, #0]
 801149a:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801149e:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80114a2:	42b3      	cmp	r3, r6
 80114a4:	d124      	bne.n	80114f0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80114a6:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80114aa:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80114ae:	f001 070f 	and.w	r7, r1, #15
 80114b2:	f8cd 8000 	str.w	r8, [sp]
 80114b6:	464b      	mov	r3, r9
 80114b8:	4652      	mov	r2, sl
 80114ba:	4621      	mov	r1, r4
 80114bc:	4628      	mov	r0, r5
 80114be:	f7ff ffb7 	bl	8011430 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80114c2:	4683      	mov	fp, r0
 80114c4:	b168      	cbz	r0, 80114e2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80114c6:	eb0a 0109 	add.w	r1, sl, r9
 80114ca:	4441      	add	r1, r8
 80114cc:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80114d0:	463a      	mov	r2, r7
 80114d2:	4649      	mov	r1, r9
 80114d4:	4628      	mov	r0, r5
 80114d6:	f7ff ff53 	bl	8011380 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80114da:	4658      	mov	r0, fp
 80114dc:	b003      	add	sp, #12
 80114de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114e2:	eb07 010a 	add.w	r1, r7, sl
 80114e6:	4449      	add	r1, r9
 80114e8:	4441      	add	r1, r8
 80114ea:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80114ee:	e7d2      	b.n	8011496 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80114f0:	f04f 0b00 	mov.w	fp, #0
 80114f4:	e7f1      	b.n	80114da <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080114f6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80114f6:	b570      	push	{r4, r5, r6, lr}
 80114f8:	8810      	ldrh	r0, [r2, #0]
 80114fa:	4298      	cmp	r0, r3
 80114fc:	d817      	bhi.n	801152e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80114fe:	1e48      	subs	r0, r1, #1
 8011500:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8011504:	4298      	cmp	r0, r3
 8011506:	d312      	bcc.n	801152e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8011508:	2400      	movs	r4, #0
 801150a:	428c      	cmp	r4, r1
 801150c:	d20f      	bcs.n	801152e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801150e:	1860      	adds	r0, r4, r1
 8011510:	1040      	asrs	r0, r0, #1
 8011512:	0085      	lsls	r5, r0, #2
 8011514:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8011518:	42b3      	cmp	r3, r6
 801151a:	d902      	bls.n	8011522 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801151c:	3001      	adds	r0, #1
 801151e:	b284      	uxth	r4, r0
 8011520:	e7f3      	b.n	801150a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8011522:	d201      	bcs.n	8011528 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8011524:	b281      	uxth	r1, r0
 8011526:	e7f0      	b.n	801150a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8011528:	442a      	add	r2, r5
 801152a:	8850      	ldrh	r0, [r2, #2]
 801152c:	bd70      	pop	{r4, r5, r6, pc}
 801152e:	2000      	movs	r0, #0
 8011530:	e7fc      	b.n	801152c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08011532 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8011532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011536:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 8011538:	886f      	ldrh	r7, [r5, #2]
 801153a:	4604      	mov	r4, r0
 801153c:	087f      	lsrs	r7, r7, #1
 801153e:	260b      	movs	r6, #11
 8011540:	3e01      	subs	r6, #1
 8011542:	d013      	beq.n	801156c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8011544:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8011546:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801154a:	462a      	mov	r2, r5
 801154c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8011550:	4639      	mov	r1, r7
 8011552:	4643      	mov	r3, r8
 8011554:	4620      	mov	r0, r4
 8011556:	f7ff ffce 	bl	80114f6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801155a:	b138      	cbz	r0, 801156c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801155c:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8011560:	4642      	mov	r2, r8
 8011562:	4620      	mov	r0, r4
 8011564:	f7ff ff93 	bl	801148e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8011568:	2800      	cmp	r0, #0
 801156a:	d1e9      	bne.n	8011540 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801156c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011570 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8011570:	b570      	push	{r4, r5, r6, lr}
 8011572:	694a      	ldr	r2, [r1, #20]
 8011574:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8011576:	684b      	ldr	r3, [r1, #4]
 8011578:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801157a:	1b54      	subs	r4, r2, r5
 801157c:	f000 8106 	beq.w	801178c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8011580:	1b9b      	subs	r3, r3, r6
 8011582:	d003      	beq.n	801158c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8011584:	4363      	muls	r3, r4
 8011586:	2210      	movs	r2, #16
 8011588:	fb93 f3f2 	sdiv	r3, r3, r2
 801158c:	680c      	ldr	r4, [r1, #0]
 801158e:	698a      	ldr	r2, [r1, #24]
 8011590:	1b65      	subs	r5, r4, r5
 8011592:	f000 80fd 	beq.w	8011790 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8011596:	1b92      	subs	r2, r2, r6
 8011598:	d003      	beq.n	80115a2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801159a:	436a      	muls	r2, r5
 801159c:	2410      	movs	r4, #16
 801159e:	fb92 f2f4 	sdiv	r2, r2, r4
 80115a2:	1a9b      	subs	r3, r3, r2
 80115a4:	ee07 3a90 	vmov	s15, r3
 80115a8:	ed9f 4a88 	vldr	s8, [pc, #544]	@ 80117cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 80115ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80115b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80115b4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80115b8:	460a      	mov	r2, r1
 80115ba:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80115be:	4603      	mov	r3, r0
 80115c0:	f100 040c 	add.w	r4, r0, #12
 80115c4:	eeb1 6a43 	vneg.f32	s12, s6
 80115c8:	edd2 7a02 	vldr	s15, [r2, #8]
 80115cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80115d0:	3214      	adds	r2, #20
 80115d2:	ece3 6a01 	vstmia	r3!, {s13}
 80115d6:	ed52 7a02 	vldr	s15, [r2, #-8]
 80115da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80115de:	429c      	cmp	r4, r3
 80115e0:	edc3 7a02 	vstr	s15, [r3, #8]
 80115e4:	ed52 7a01 	vldr	s15, [r2, #-4]
 80115e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80115ec:	edc3 7a05 	vstr	s15, [r3, #20]
 80115f0:	d1ea      	bne.n	80115c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80115f2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80115f4:	698b      	ldr	r3, [r1, #24]
 80115f6:	edd0 4a02 	vldr	s9, [r0, #8]
 80115fa:	edd0 3a00 	vldr	s7, [r0]
 80115fe:	edd0 6a01 	vldr	s13, [r0, #4]
 8011602:	ed90 5a05 	vldr	s10, [r0, #20]
 8011606:	ed90 2a03 	vldr	s4, [r0, #12]
 801160a:	edd0 5a04 	vldr	s11, [r0, #16]
 801160e:	ed90 1a07 	vldr	s2, [r0, #28]
 8011612:	edd0 2a06 	vldr	s5, [r0, #24]
 8011616:	1a9b      	subs	r3, r3, r2
 8011618:	ee07 3a90 	vmov	s15, r3
 801161c:	684b      	ldr	r3, [r1, #4]
 801161e:	1a9b      	subs	r3, r3, r2
 8011620:	ee07 3a10 	vmov	s14, r3
 8011624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011628:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801162c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8011630:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8011634:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011638:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801163c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8011640:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8011644:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011648:	ee32 5a45 	vsub.f32	s10, s4, s10
 801164c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8011650:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8011654:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8011656:	694a      	ldr	r2, [r1, #20]
 8011658:	1b13      	subs	r3, r2, r4
 801165a:	ee07 3a10 	vmov	s14, r3
 801165e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011662:	680b      	ldr	r3, [r1, #0]
 8011664:	ee27 7a04 	vmul.f32	s14, s14, s8
 8011668:	1b1b      	subs	r3, r3, r4
 801166a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801166e:	ee07 3a10 	vmov	s14, r3
 8011672:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011676:	ee27 7a04 	vmul.f32	s14, s14, s8
 801167a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801167e:	ee64 4a86 	vmul.f32	s9, s9, s12
 8011682:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 8011686:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8011688:	698b      	ldr	r3, [r1, #24]
 801168a:	1a9b      	subs	r3, r3, r2
 801168c:	ee06 3a90 	vmov	s13, r3
 8011690:	684b      	ldr	r3, [r1, #4]
 8011692:	1a9b      	subs	r3, r3, r2
 8011694:	ee07 3a10 	vmov	s14, r3
 8011698:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801169c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80116a0:	ee66 6a84 	vmul.f32	s13, s13, s8
 80116a4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80116a8:	ee65 6a66 	vnmul.f32	s13, s10, s13
 80116ac:	eee5 6a87 	vfma.f32	s13, s11, s14
 80116b0:	ee66 6a83 	vmul.f32	s13, s13, s6
 80116b4:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 80116b8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80116ba:	694a      	ldr	r2, [r1, #20]
 80116bc:	1b13      	subs	r3, r2, r4
 80116be:	ee07 3a10 	vmov	s14, r3
 80116c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80116c6:	680b      	ldr	r3, [r1, #0]
 80116c8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80116cc:	1b1b      	subs	r3, r3, r4
 80116ce:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80116d2:	ee07 3a10 	vmov	s14, r3
 80116d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80116da:	ee27 7a04 	vmul.f32	s14, s14, s8
 80116de:	eea5 5a87 	vfma.f32	s10, s11, s14
 80116e2:	edd0 5a08 	vldr	s11, [r0, #32]
 80116e6:	ee25 5a06 	vmul.f32	s10, s10, s12
 80116ea:	ee31 1a65 	vsub.f32	s2, s2, s11
 80116ee:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 80116f2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80116f4:	698b      	ldr	r3, [r1, #24]
 80116f6:	1a9b      	subs	r3, r3, r2
 80116f8:	ee07 3a10 	vmov	s14, r3
 80116fc:	684b      	ldr	r3, [r1, #4]
 80116fe:	1a9b      	subs	r3, r3, r2
 8011700:	ee01 3a90 	vmov	s3, r3
 8011704:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011708:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801170c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8011710:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8011714:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8011718:	ee61 1a84 	vmul.f32	s3, s3, s8
 801171c:	eea1 7a21 	vfma.f32	s14, s2, s3
 8011720:	ee27 7a03 	vmul.f32	s14, s14, s6
 8011724:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8011728:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801172a:	694a      	ldr	r2, [r1, #20]
 801172c:	1b13      	subs	r3, r2, r4
 801172e:	ee03 3a10 	vmov	s6, r3
 8011732:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8011736:	680b      	ldr	r3, [r1, #0]
 8011738:	ee23 3a04 	vmul.f32	s6, s6, s8
 801173c:	1b1b      	subs	r3, r3, r4
 801173e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8011742:	ee03 3a10 	vmov	s6, r3
 8011746:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801174a:	ee23 4a04 	vmul.f32	s8, s6, s8
 801174e:	eee1 5a04 	vfma.f32	s11, s2, s8
 8011752:	ee25 6a86 	vmul.f32	s12, s11, s12
 8011756:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801175a:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801175e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8011762:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8011766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801176a:	dd13      	ble.n	8011794 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801176c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011770:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8011774:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8011776:	eee3 7a87 	vfma.f32	s15, s7, s14
 801177a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801177e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011782:	dd15      	ble.n	80117b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8011784:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011788:	6403      	str	r3, [r0, #64]	@ 0x40
 801178a:	bd70      	pop	{r4, r5, r6, pc}
 801178c:	4623      	mov	r3, r4
 801178e:	e6fd      	b.n	801158c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8011790:	462a      	mov	r2, r5
 8011792:	e706      	b.n	80115a2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8011794:	d502      	bpl.n	801179c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8011796:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801179a:	e7e9      	b.n	8011770 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801179c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 80117a0:	eea3 2a85 	vfma.f32	s4, s7, s10
 80117a4:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 80117a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ac:	dade      	bge.n	801176c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 80117ae:	e7f2      	b.n	8011796 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 80117b0:	d502      	bpl.n	80117b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 80117b2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80117b6:	e7e7      	b.n	8011788 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 80117b8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 80117bc:	eee3 4a86 	vfma.f32	s9, s7, s12
 80117c0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80117c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117c8:	dadc      	bge.n	8011784 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 80117ca:	e7f2      	b.n	80117b2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 80117cc:	3d800000 	.word	0x3d800000

080117d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 80117d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117d4:	2714      	movs	r7, #20
 80117d6:	435f      	muls	r7, r3
 80117d8:	eb02 0c07 	add.w	ip, r2, r7
 80117dc:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80117e0:	f115 0e0f 	adds.w	lr, r5, #15
 80117e4:	f100 80a2 	bmi.w	801192c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 80117e8:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 80117ec:	9c08      	ldr	r4, [sp, #32]
 80117ee:	f8c0 e014 	str.w	lr, [r0, #20]
 80117f2:	2614      	movs	r6, #20
 80117f4:	4366      	muls	r6, r4
 80117f6:	eb02 0806 	add.w	r8, r2, r6
 80117fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80117fe:	f115 040f 	adds.w	r4, r5, #15
 8011802:	f100 809f 	bmi.w	8011944 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8011806:	1124      	asrs	r4, r4, #4
 8011808:	eba4 040e 	sub.w	r4, r4, lr
 801180c:	6184      	str	r4, [r0, #24]
 801180e:	2c00      	cmp	r4, #0
 8011810:	f000 808a 	beq.w	8011928 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8011814:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8011818:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801181c:	5995      	ldr	r5, [r2, r6]
 801181e:	eba4 0809 	sub.w	r8, r4, r9
 8011822:	59d4      	ldr	r4, [r2, r7]
 8011824:	eba5 0a04 	sub.w	sl, r5, r4
 8011828:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801182c:	fb0e fe05 	mul.w	lr, lr, r5
 8011830:	fb0a ee19 	mls	lr, sl, r9, lr
 8011834:	fb08 e404 	mla	r4, r8, r4, lr
 8011838:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801183c:	3c01      	subs	r4, #1
 801183e:	19a4      	adds	r4, r4, r6
 8011840:	f100 808c 	bmi.w	801195c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8011844:	fb94 fef6 	sdiv	lr, r4, r6
 8011848:	f8c0 e000 	str.w	lr, [r0]
 801184c:	fb06 441e 	mls	r4, r6, lr, r4
 8011850:	6104      	str	r4, [r0, #16]
 8011852:	2d00      	cmp	r5, #0
 8011854:	f2c0 8095 	blt.w	8011982 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8011858:	fb95 f4f6 	sdiv	r4, r5, r6
 801185c:	6044      	str	r4, [r0, #4]
 801185e:	fb06 5514 	mls	r5, r6, r4, r5
 8011862:	6085      	str	r5, [r0, #8]
 8011864:	60c6      	str	r6, [r0, #12]
 8011866:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801186a:	6945      	ldr	r5, [r0, #20]
 801186c:	59d2      	ldr	r2, [r2, r7]
 801186e:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 80119a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8011872:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8011876:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801187a:	ee07 4a10 	vmov	s14, r4
 801187e:	6804      	ldr	r4, [r0, #0]
 8011880:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8011884:	ee07 2a90 	vmov	s15, r2
 8011888:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801188c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011890:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011894:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011898:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801189c:	edd3 6a00 	vldr	s13, [r3]
 80118a0:	eee6 6a07 	vfma.f32	s13, s12, s14
 80118a4:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 80118a8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80118ac:	edc0 6a07 	vstr	s13, [r0, #28]
 80118b0:	edd0 6a01 	vldr	s13, [r0, #4]
 80118b4:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 80118b8:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 80118bc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80118c0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80118c4:	ed80 6a08 	vstr	s12, [r0, #32]
 80118c8:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 80118ca:	6242      	str	r2, [r0, #36]	@ 0x24
 80118cc:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 80118d0:	ed93 6a03 	vldr	s12, [r3, #12]
 80118d4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80118d8:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 80118dc:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80118e0:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 80118e4:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 80118e8:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 80118ec:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80118f0:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 80118f4:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80118f6:	6302      	str	r2, [r0, #48]	@ 0x30
 80118f8:	ed93 6a06 	vldr	s12, [r3, #24]
 80118fc:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 8011900:	eea5 6a87 	vfma.f32	s12, s11, s14
 8011904:	eeb0 7a46 	vmov.f32	s14, s12
 8011908:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801190c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8011910:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8011914:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 8011918:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 801191c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011920:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 8011924:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8011926:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8011928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801192c:	f1c5 0501 	rsb	r5, r5, #1
 8011930:	f015 050f 	ands.w	r5, r5, #15
 8011934:	bf18      	it	ne
 8011936:	2501      	movne	r5, #1
 8011938:	2410      	movs	r4, #16
 801193a:	fb9e fef4 	sdiv	lr, lr, r4
 801193e:	ebae 0e05 	sub.w	lr, lr, r5
 8011942:	e753      	b.n	80117ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8011944:	f1c5 0501 	rsb	r5, r5, #1
 8011948:	f015 050f 	ands.w	r5, r5, #15
 801194c:	bf18      	it	ne
 801194e:	2501      	movne	r5, #1
 8011950:	f04f 0910 	mov.w	r9, #16
 8011954:	fb94 f4f9 	sdiv	r4, r4, r9
 8011958:	1b64      	subs	r4, r4, r5
 801195a:	e755      	b.n	8011808 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801195c:	4264      	negs	r4, r4
 801195e:	fb94 fef6 	sdiv	lr, r4, r6
 8011962:	f1ce 0800 	rsb	r8, lr, #0
 8011966:	fb06 441e 	mls	r4, r6, lr, r4
 801196a:	f8c0 8000 	str.w	r8, [r0]
 801196e:	6104      	str	r4, [r0, #16]
 8011970:	2c00      	cmp	r4, #0
 8011972:	f43f af6e 	beq.w	8011852 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8011976:	ea6f 0e0e 	mvn.w	lr, lr
 801197a:	f8c0 e000 	str.w	lr, [r0]
 801197e:	1b34      	subs	r4, r6, r4
 8011980:	e766      	b.n	8011850 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8011982:	426d      	negs	r5, r5
 8011984:	fb95 f4f6 	sdiv	r4, r5, r6
 8011988:	f1c4 0e00 	rsb	lr, r4, #0
 801198c:	fb06 5514 	mls	r5, r6, r4, r5
 8011990:	f8c0 e004 	str.w	lr, [r0, #4]
 8011994:	6085      	str	r5, [r0, #8]
 8011996:	2d00      	cmp	r5, #0
 8011998:	f43f af64 	beq.w	8011864 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801199c:	43e4      	mvns	r4, r4
 801199e:	6044      	str	r4, [r0, #4]
 80119a0:	1b75      	subs	r5, r6, r5
 80119a2:	e75e      	b.n	8011862 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 80119a4:	3d800000 	.word	0x3d800000

080119a8 <_ZN8touchgfx7Unicode6strlenEPKt>:
 80119a8:	4602      	mov	r2, r0
 80119aa:	b148      	cbz	r0, 80119c0 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 80119ac:	2300      	movs	r3, #0
 80119ae:	b298      	uxth	r0, r3
 80119b0:	3301      	adds	r3, #1
 80119b2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80119b6:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 80119ba:	2900      	cmp	r1, #0
 80119bc:	d1f7      	bne.n	80119ae <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 80119be:	4770      	bx	lr
 80119c0:	4770      	bx	lr

080119c2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 80119c2:	b530      	push	{r4, r5, lr}
 80119c4:	4604      	mov	r4, r0
 80119c6:	b159      	cbz	r1, 80119e0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 80119c8:	b148      	cbz	r0, 80119de <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 80119ca:	2300      	movs	r3, #0
 80119cc:	b298      	uxth	r0, r3
 80119ce:	4282      	cmp	r2, r0
 80119d0:	d905      	bls.n	80119de <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 80119d2:	5ccd      	ldrb	r5, [r1, r3]
 80119d4:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 80119d8:	3301      	adds	r3, #1
 80119da:	2d00      	cmp	r5, #0
 80119dc:	d1f6      	bne.n	80119cc <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 80119de:	bd30      	pop	{r4, r5, pc}
 80119e0:	4608      	mov	r0, r1
 80119e2:	e7fc      	b.n	80119de <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

080119e4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 80119e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119e6:	b08b      	sub	sp, #44	@ 0x2c
 80119e8:	468c      	mov	ip, r1
 80119ea:	2100      	movs	r1, #0
 80119ec:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80119f0:	ae01      	add	r6, sp, #4
 80119f2:	211f      	movs	r1, #31
 80119f4:	fbb0 f7f3 	udiv	r7, r0, r3
 80119f8:	fb03 0517 	mls	r5, r3, r7, r0
 80119fc:	b2ec      	uxtb	r4, r5
 80119fe:	2d09      	cmp	r5, #9
 8011a00:	bfd4      	ite	le
 8011a02:	3430      	addle	r4, #48	@ 0x30
 8011a04:	3457      	addgt	r4, #87	@ 0x57
 8011a06:	b2e4      	uxtb	r4, r4
 8011a08:	558c      	strb	r4, [r1, r6]
 8011a0a:	4638      	mov	r0, r7
 8011a0c:	1e4c      	subs	r4, r1, #1
 8011a0e:	b92f      	cbnz	r7, 8011a1c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 8011a10:	4431      	add	r1, r6
 8011a12:	4660      	mov	r0, ip
 8011a14:	f7ff ffd5 	bl	80119c2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8011a18:	b00b      	add	sp, #44	@ 0x2c
 8011a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a1c:	4621      	mov	r1, r4
 8011a1e:	e7e9      	b.n	80119f4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

08011a20 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8011a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a22:	4607      	mov	r7, r0
 8011a24:	b08b      	sub	sp, #44	@ 0x2c
 8011a26:	4608      	mov	r0, r1
 8011a28:	b341      	cbz	r1, 8011a7c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8011a2a:	1e99      	subs	r1, r3, #2
 8011a2c:	2922      	cmp	r1, #34	@ 0x22
 8011a2e:	d825      	bhi.n	8011a7c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8011a30:	2100      	movs	r1, #0
 8011a32:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8011a36:	463c      	mov	r4, r7
 8011a38:	261f      	movs	r6, #31
 8011a3a:	f10d 0c04 	add.w	ip, sp, #4
 8011a3e:	fb94 fef3 	sdiv	lr, r4, r3
 8011a42:	fb03 441e 	mls	r4, r3, lr, r4
 8011a46:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8011a4a:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8011a4e:	b2ec      	uxtb	r4, r5
 8011a50:	2d09      	cmp	r5, #9
 8011a52:	bfd4      	ite	le
 8011a54:	3430      	addle	r4, #48	@ 0x30
 8011a56:	3457      	addgt	r4, #87	@ 0x57
 8011a58:	b2e4      	uxtb	r4, r4
 8011a5a:	f80c 4006 	strb.w	r4, [ip, r6]
 8011a5e:	4674      	mov	r4, lr
 8011a60:	1e71      	subs	r1, r6, #1
 8011a62:	b96c      	cbnz	r4, 8011a80 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8011a64:	2f00      	cmp	r7, #0
 8011a66:	da05      	bge.n	8011a74 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8011a68:	ab0a      	add	r3, sp, #40	@ 0x28
 8011a6a:	4419      	add	r1, r3
 8011a6c:	232d      	movs	r3, #45	@ 0x2d
 8011a6e:	f801 3c24 	strb.w	r3, [r1, #-36]
 8011a72:	1eb1      	subs	r1, r6, #2
 8011a74:	3101      	adds	r1, #1
 8011a76:	4461      	add	r1, ip
 8011a78:	f7ff ffa3 	bl	80119c2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8011a7c:	b00b      	add	sp, #44	@ 0x2c
 8011a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a80:	460e      	mov	r6, r1
 8011a82:	e7dc      	b.n	8011a3e <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08011a84 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8011a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a88:	4691      	mov	r9, r2
 8011a8a:	b085      	sub	sp, #20
 8011a8c:	6802      	ldr	r2, [r0, #0]
 8011a8e:	9201      	str	r2, [sp, #4]
 8011a90:	4688      	mov	r8, r1
 8011a92:	4683      	mov	fp, r0
 8011a94:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 8011a98:	9103      	str	r1, [sp, #12]
 8011a9a:	4610      	mov	r0, r2
 8011a9c:	461c      	mov	r4, r3
 8011a9e:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 8011aa2:	9302      	str	r3, [sp, #8]
 8011aa4:	f7ff ff80 	bl	80119a8 <_ZN8touchgfx7Unicode6strlenEPKt>
 8011aa8:	f1b8 0f00 	cmp.w	r8, #0
 8011aac:	bf0c      	ite	eq
 8011aae:	4684      	moveq	ip, r0
 8011ab0:	f100 0c01 	addne.w	ip, r0, #1
 8011ab4:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 8011ab8:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 8011abc:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8011abe:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8011ac0:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 8011ac4:	9903      	ldr	r1, [sp, #12]
 8011ac6:	fa1f fc8c 	uxth.w	ip, ip
 8011aca:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011ace:	d041      	beq.n	8011b54 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8011ad0:	d834      	bhi.n	8011b3c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 8011ad2:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 8011ad6:	d059      	beq.n	8011b8c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8011ad8:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 8011adc:	d03a      	beq.n	8011b54 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8011ade:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 8011ae2:	d034      	beq.n	8011b4e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8011ae4:	2400      	movs	r4, #0
 8011ae6:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 8011aea:	3a01      	subs	r2, #1
 8011aec:	b169      	cbz	r1, 8011b0a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8011aee:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8011af0:	458c      	cmp	ip, r1
 8011af2:	da09      	bge.n	8011b08 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8011af4:	eba1 010c 	sub.w	r1, r1, ip
 8011af8:	b289      	uxth	r1, r1
 8011afa:	b933      	cbnz	r3, 8011b0a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8011afc:	2e00      	cmp	r6, #0
 8011afe:	d051      	beq.n	8011ba4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8011b00:	2800      	cmp	r0, #0
 8011b02:	d04f      	beq.n	8011ba4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8011b04:	440c      	add	r4, r1
 8011b06:	b2a4      	uxth	r4, r4
 8011b08:	2100      	movs	r1, #0
 8011b0a:	682b      	ldr	r3, [r5, #0]
 8011b0c:	4293      	cmp	r3, r2
 8011b0e:	da07      	bge.n	8011b20 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8011b10:	f1b8 0f00 	cmp.w	r8, #0
 8011b14:	d004      	beq.n	8011b20 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8011b16:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8011b1a:	682b      	ldr	r3, [r5, #0]
 8011b1c:	3301      	adds	r3, #1
 8011b1e:	602b      	str	r3, [r5, #0]
 8011b20:	2730      	movs	r7, #48	@ 0x30
 8011b22:	2c00      	cmp	r4, #0
 8011b24:	d04e      	beq.n	8011bc4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8011b26:	682e      	ldr	r6, [r5, #0]
 8011b28:	3c01      	subs	r4, #1
 8011b2a:	42b2      	cmp	r2, r6
 8011b2c:	b2a4      	uxth	r4, r4
 8011b2e:	dd49      	ble.n	8011bc4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8011b30:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8011b34:	682b      	ldr	r3, [r5, #0]
 8011b36:	3301      	adds	r3, #1
 8011b38:	602b      	str	r3, [r5, #0]
 8011b3a:	e7f2      	b.n	8011b22 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8011b3c:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 8011b40:	d01d      	beq.n	8011b7e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 8011b42:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 8011b46:	d002      	beq.n	8011b4e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8011b48:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 8011b4c:	e7c9      	b.n	8011ae2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8011b4e:	4684      	mov	ip, r0
 8011b50:	f04f 0800 	mov.w	r8, #0
 8011b54:	2c00      	cmp	r4, #0
 8011b56:	d0c6      	beq.n	8011ae6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8011b58:	b947      	cbnz	r7, 8011b6c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8011b5a:	2801      	cmp	r0, #1
 8011b5c:	d106      	bne.n	8011b6c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8011b5e:	8814      	ldrh	r4, [r2, #0]
 8011b60:	2c30      	cmp	r4, #48	@ 0x30
 8011b62:	bf02      	ittt	eq
 8011b64:	3202      	addeq	r2, #2
 8011b66:	f8cb 2000 	streq.w	r2, [fp]
 8011b6a:	4638      	moveq	r0, r7
 8011b6c:	45bc      	cmp	ip, r7
 8011b6e:	da14      	bge.n	8011b9a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8011b70:	b2bf      	uxth	r7, r7
 8011b72:	eba7 040c 	sub.w	r4, r7, ip
 8011b76:	b2a4      	uxth	r4, r4
 8011b78:	46bc      	mov	ip, r7
 8011b7a:	2600      	movs	r6, #0
 8011b7c:	e7b3      	b.n	8011ae6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8011b7e:	4684      	mov	ip, r0
 8011b80:	b16c      	cbz	r4, 8011b9e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 8011b82:	42b8      	cmp	r0, r7
 8011b84:	dd00      	ble.n	8011b88 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 8011b86:	b2b8      	uxth	r0, r7
 8011b88:	2400      	movs	r4, #0
 8011b8a:	e003      	b.n	8011b94 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8011b8c:	f04f 0c01 	mov.w	ip, #1
 8011b90:	2400      	movs	r4, #0
 8011b92:	4660      	mov	r0, ip
 8011b94:	4626      	mov	r6, r4
 8011b96:	46a0      	mov	r8, r4
 8011b98:	e7a5      	b.n	8011ae6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8011b9a:	2400      	movs	r4, #0
 8011b9c:	e7ed      	b.n	8011b7a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8011b9e:	4626      	mov	r6, r4
 8011ba0:	46a0      	mov	r8, r4
 8011ba2:	e7a0      	b.n	8011ae6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8011ba4:	2900      	cmp	r1, #0
 8011ba6:	d0b0      	beq.n	8011b0a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8011ba8:	2720      	movs	r7, #32
 8011baa:	682e      	ldr	r6, [r5, #0]
 8011bac:	2900      	cmp	r1, #0
 8011bae:	d0ac      	beq.n	8011b0a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8011bb0:	3901      	subs	r1, #1
 8011bb2:	4296      	cmp	r6, r2
 8011bb4:	b289      	uxth	r1, r1
 8011bb6:	daa7      	bge.n	8011b08 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8011bb8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8011bbc:	682b      	ldr	r3, [r5, #0]
 8011bbe:	3301      	adds	r3, #1
 8011bc0:	602b      	str	r3, [r5, #0]
 8011bc2:	e7f2      	b.n	8011baa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8011bc4:	b188      	cbz	r0, 8011bea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8011bc6:	682b      	ldr	r3, [r5, #0]
 8011bc8:	3801      	subs	r0, #1
 8011bca:	429a      	cmp	r2, r3
 8011bcc:	b280      	uxth	r0, r0
 8011bce:	dd0c      	ble.n	8011bea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8011bd0:	f8db 3000 	ldr.w	r3, [fp]
 8011bd4:	1c9c      	adds	r4, r3, #2
 8011bd6:	f8cb 4000 	str.w	r4, [fp]
 8011bda:	881c      	ldrh	r4, [r3, #0]
 8011bdc:	682b      	ldr	r3, [r5, #0]
 8011bde:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 8011be2:	682b      	ldr	r3, [r5, #0]
 8011be4:	3301      	adds	r3, #1
 8011be6:	602b      	str	r3, [r5, #0]
 8011be8:	e7ec      	b.n	8011bc4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8011bea:	2620      	movs	r6, #32
 8011bec:	b151      	cbz	r1, 8011c04 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8011bee:	6828      	ldr	r0, [r5, #0]
 8011bf0:	3901      	subs	r1, #1
 8011bf2:	4282      	cmp	r2, r0
 8011bf4:	b289      	uxth	r1, r1
 8011bf6:	dd05      	ble.n	8011c04 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8011bf8:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8011bfc:	682b      	ldr	r3, [r5, #0]
 8011bfe:	3301      	adds	r3, #1
 8011c00:	602b      	str	r3, [r5, #0]
 8011c02:	e7f3      	b.n	8011bec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8011c04:	b005      	add	sp, #20
 8011c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011c0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8011c0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011c0e:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 8011c12:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 8011c16:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 8011c1a:	2400      	movs	r4, #0
 8011c1c:	8014      	strh	r4, [r2, #0]
 8011c1e:	701c      	strb	r4, [r3, #0]
 8011c20:	f888 4000 	strb.w	r4, [r8]
 8011c24:	f88c 4000 	strb.w	r4, [ip]
 8011c28:	f88e 4000 	strb.w	r4, [lr]
 8011c2c:	703c      	strb	r4, [r7, #0]
 8011c2e:	6804      	ldr	r4, [r0, #0]
 8011c30:	b1a4      	cbz	r4, 8011c5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 8011c32:	8824      	ldrh	r4, [r4, #0]
 8011c34:	f04f 0901 	mov.w	r9, #1
 8011c38:	b314      	cbz	r4, 8011c80 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8011c3a:	2c2b      	cmp	r4, #43	@ 0x2b
 8011c3c:	d001      	beq.n	8011c42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8011c3e:	2c20      	cmp	r4, #32
 8011c40:	d110      	bne.n	8011c64 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 8011c42:	8014      	strh	r4, [r2, #0]
 8011c44:	6804      	ldr	r4, [r0, #0]
 8011c46:	b10c      	cbz	r4, 8011c4c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8011c48:	3402      	adds	r4, #2
 8011c4a:	6004      	str	r4, [r0, #0]
 8011c4c:	680c      	ldr	r4, [r1, #0]
 8011c4e:	b10c      	cbz	r4, 8011c54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8011c50:	3401      	adds	r4, #1
 8011c52:	600c      	str	r4, [r1, #0]
 8011c54:	6804      	ldr	r4, [r0, #0]
 8011c56:	b17c      	cbz	r4, 8011c78 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8011c58:	8824      	ldrh	r4, [r4, #0]
 8011c5a:	e7ed      	b.n	8011c38 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8011c5c:	680c      	ldr	r4, [r1, #0]
 8011c5e:	b17c      	cbz	r4, 8011c80 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8011c60:	7824      	ldrb	r4, [r4, #0]
 8011c62:	e7e7      	b.n	8011c34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8011c64:	2c2d      	cmp	r4, #45	@ 0x2d
 8011c66:	d102      	bne.n	8011c6e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8011c68:	f883 9000 	strb.w	r9, [r3]
 8011c6c:	e7ea      	b.n	8011c44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8011c6e:	2c23      	cmp	r4, #35	@ 0x23
 8011c70:	d107      	bne.n	8011c82 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 8011c72:	f888 9000 	strb.w	r9, [r8]
 8011c76:	e7e5      	b.n	8011c44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8011c78:	680c      	ldr	r4, [r1, #0]
 8011c7a:	b10c      	cbz	r4, 8011c80 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8011c7c:	7824      	ldrb	r4, [r4, #0]
 8011c7e:	e7db      	b.n	8011c38 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8011c80:	2400      	movs	r4, #0
 8011c82:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8011c86:	2b09      	cmp	r3, #9
 8011c88:	d901      	bls.n	8011c8e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8011c8a:	2c2a      	cmp	r4, #42	@ 0x2a
 8011c8c:	d122      	bne.n	8011cd4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8011c8e:	2301      	movs	r3, #1
 8011c90:	2c30      	cmp	r4, #48	@ 0x30
 8011c92:	f88e 3000 	strb.w	r3, [lr]
 8011c96:	d10d      	bne.n	8011cb4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8011c98:	f88c 3000 	strb.w	r3, [ip]
 8011c9c:	6803      	ldr	r3, [r0, #0]
 8011c9e:	b10b      	cbz	r3, 8011ca4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8011ca0:	3302      	adds	r3, #2
 8011ca2:	6003      	str	r3, [r0, #0]
 8011ca4:	680b      	ldr	r3, [r1, #0]
 8011ca6:	b10b      	cbz	r3, 8011cac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8011ca8:	3301      	adds	r3, #1
 8011caa:	600b      	str	r3, [r1, #0]
 8011cac:	6803      	ldr	r3, [r0, #0]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d02f      	beq.n	8011d12 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8011cb2:	881c      	ldrh	r4, [r3, #0]
 8011cb4:	2c2a      	cmp	r4, #42	@ 0x2a
 8011cb6:	d135      	bne.n	8011d24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8011cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8011cbc:	6033      	str	r3, [r6, #0]
 8011cbe:	6803      	ldr	r3, [r0, #0]
 8011cc0:	b10b      	cbz	r3, 8011cc6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 8011cc2:	3302      	adds	r3, #2
 8011cc4:	6003      	str	r3, [r0, #0]
 8011cc6:	680b      	ldr	r3, [r1, #0]
 8011cc8:	b10b      	cbz	r3, 8011cce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8011cca:	3301      	adds	r3, #1
 8011ccc:	600b      	str	r3, [r1, #0]
 8011cce:	6803      	ldr	r3, [r0, #0]
 8011cd0:	b31b      	cbz	r3, 8011d1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 8011cd2:	881c      	ldrh	r4, [r3, #0]
 8011cd4:	2c2e      	cmp	r4, #46	@ 0x2e
 8011cd6:	d11a      	bne.n	8011d0e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8011cd8:	2301      	movs	r3, #1
 8011cda:	703b      	strb	r3, [r7, #0]
 8011cdc:	6803      	ldr	r3, [r0, #0]
 8011cde:	b10b      	cbz	r3, 8011ce4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8011ce0:	3302      	adds	r3, #2
 8011ce2:	6003      	str	r3, [r0, #0]
 8011ce4:	680b      	ldr	r3, [r1, #0]
 8011ce6:	b10b      	cbz	r3, 8011cec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8011ce8:	3301      	adds	r3, #1
 8011cea:	600b      	str	r3, [r1, #0]
 8011cec:	6803      	ldr	r3, [r0, #0]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d036      	beq.n	8011d60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 8011cf2:	881b      	ldrh	r3, [r3, #0]
 8011cf4:	2b2a      	cmp	r3, #42	@ 0x2a
 8011cf6:	d137      	bne.n	8011d68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8011cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8011cfc:	602b      	str	r3, [r5, #0]
 8011cfe:	6803      	ldr	r3, [r0, #0]
 8011d00:	b10b      	cbz	r3, 8011d06 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 8011d02:	3302      	adds	r3, #2
 8011d04:	6003      	str	r3, [r0, #0]
 8011d06:	680b      	ldr	r3, [r1, #0]
 8011d08:	b10b      	cbz	r3, 8011d0e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8011d0a:	3301      	adds	r3, #1
 8011d0c:	600b      	str	r3, [r1, #0]
 8011d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d12:	680c      	ldr	r4, [r1, #0]
 8011d14:	b134      	cbz	r4, 8011d24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8011d16:	7824      	ldrb	r4, [r4, #0]
 8011d18:	e7cc      	b.n	8011cb4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8011d1a:	680b      	ldr	r3, [r1, #0]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d0f6      	beq.n	8011d0e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8011d20:	781c      	ldrb	r4, [r3, #0]
 8011d22:	e7d7      	b.n	8011cd4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8011d24:	2300      	movs	r3, #0
 8011d26:	6033      	str	r3, [r6, #0]
 8011d28:	220a      	movs	r2, #10
 8011d2a:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8011d2e:	fa1f f38c 	uxth.w	r3, ip
 8011d32:	2b09      	cmp	r3, #9
 8011d34:	d8ce      	bhi.n	8011cd4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8011d36:	6833      	ldr	r3, [r6, #0]
 8011d38:	fb02 c303 	mla	r3, r2, r3, ip
 8011d3c:	6033      	str	r3, [r6, #0]
 8011d3e:	6803      	ldr	r3, [r0, #0]
 8011d40:	b10b      	cbz	r3, 8011d46 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 8011d42:	3302      	adds	r3, #2
 8011d44:	6003      	str	r3, [r0, #0]
 8011d46:	680b      	ldr	r3, [r1, #0]
 8011d48:	b10b      	cbz	r3, 8011d4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8011d4a:	3301      	adds	r3, #1
 8011d4c:	600b      	str	r3, [r1, #0]
 8011d4e:	6803      	ldr	r3, [r0, #0]
 8011d50:	b10b      	cbz	r3, 8011d56 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 8011d52:	881c      	ldrh	r4, [r3, #0]
 8011d54:	e7e9      	b.n	8011d2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8011d56:	680c      	ldr	r4, [r1, #0]
 8011d58:	2c00      	cmp	r4, #0
 8011d5a:	d0e6      	beq.n	8011d2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8011d5c:	7824      	ldrb	r4, [r4, #0]
 8011d5e:	e7e4      	b.n	8011d2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8011d60:	680b      	ldr	r3, [r1, #0]
 8011d62:	b10b      	cbz	r3, 8011d68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8011d64:	781b      	ldrb	r3, [r3, #0]
 8011d66:	e7c5      	b.n	8011cf4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8011d68:	2200      	movs	r2, #0
 8011d6a:	602a      	str	r2, [r5, #0]
 8011d6c:	240a      	movs	r4, #10
 8011d6e:	3b30      	subs	r3, #48	@ 0x30
 8011d70:	b29e      	uxth	r6, r3
 8011d72:	2e09      	cmp	r6, #9
 8011d74:	682a      	ldr	r2, [r5, #0]
 8011d76:	d813      	bhi.n	8011da0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8011d78:	fb04 3302 	mla	r3, r4, r2, r3
 8011d7c:	602b      	str	r3, [r5, #0]
 8011d7e:	6803      	ldr	r3, [r0, #0]
 8011d80:	b10b      	cbz	r3, 8011d86 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8011d82:	3302      	adds	r3, #2
 8011d84:	6003      	str	r3, [r0, #0]
 8011d86:	680b      	ldr	r3, [r1, #0]
 8011d88:	b10b      	cbz	r3, 8011d8e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8011d8a:	3301      	adds	r3, #1
 8011d8c:	600b      	str	r3, [r1, #0]
 8011d8e:	6803      	ldr	r3, [r0, #0]
 8011d90:	b10b      	cbz	r3, 8011d96 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8011d92:	881b      	ldrh	r3, [r3, #0]
 8011d94:	e7eb      	b.n	8011d6e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8011d96:	680b      	ldr	r3, [r1, #0]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d0e8      	beq.n	8011d6e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8011d9c:	781b      	ldrb	r3, [r3, #0]
 8011d9e:	e7e6      	b.n	8011d6e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8011da0:	2a06      	cmp	r2, #6
 8011da2:	bfa8      	it	ge
 8011da4:	2206      	movge	r2, #6
 8011da6:	602a      	str	r2, [r5, #0]
 8011da8:	e7b1      	b.n	8011d0e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08011daa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8011daa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dae:	b0a3      	sub	sp, #140	@ 0x8c
 8011db0:	2600      	movs	r6, #0
 8011db2:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 8011db6:	4607      	mov	r7, r0
 8011db8:	4688      	mov	r8, r1
 8011dba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8011dbe:	4631      	mov	r1, r6
 8011dc0:	2242      	movs	r2, #66	@ 0x42
 8011dc2:	4648      	mov	r0, r9
 8011dc4:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 8011dc6:	960d      	str	r6, [sp, #52]	@ 0x34
 8011dc8:	f001 fd1f 	bl	801380a <memset>
 8011dcc:	b15f      	cbz	r7, 8011de6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8011dce:	f108 3aff 	add.w	sl, r8, #4294967295
 8011dd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011dd4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011dd6:	b152      	cbz	r2, 8011dee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8011dd8:	8812      	ldrh	r2, [r2, #0]
 8011dda:	b10a      	cbz	r2, 8011de0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8011ddc:	459a      	cmp	sl, r3
 8011dde:	dc2e      	bgt.n	8011e3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8011de0:	2200      	movs	r2, #0
 8011de2:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8011de6:	4638      	mov	r0, r7
 8011de8:	b023      	add	sp, #140	@ 0x8c
 8011dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dee:	9a08      	ldr	r2, [sp, #32]
 8011df0:	2a00      	cmp	r2, #0
 8011df2:	d0f5      	beq.n	8011de0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8011df4:	7812      	ldrb	r2, [r2, #0]
 8011df6:	e7f0      	b.n	8011dda <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8011df8:	2d00      	cmp	r5, #0
 8011dfa:	d0ea      	beq.n	8011dd2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8011dfc:	782a      	ldrb	r2, [r5, #0]
 8011dfe:	b142      	cbz	r2, 8011e12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8011e00:	2a25      	cmp	r2, #37	@ 0x25
 8011e02:	d001      	beq.n	8011e08 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8011e04:	459a      	cmp	sl, r3
 8011e06:	dc08      	bgt.n	8011e1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8011e08:	f1bb 0f00 	cmp.w	fp, #0
 8011e0c:	d121      	bne.n	8011e52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8011e0e:	2d00      	cmp	r5, #0
 8011e10:	d0df      	beq.n	8011dd2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8011e12:	782a      	ldrb	r2, [r5, #0]
 8011e14:	f04f 0b00 	mov.w	fp, #0
 8011e18:	e01d      	b.n	8011e56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8011e1a:	f1bb 0f00 	cmp.w	fp, #0
 8011e1e:	d078      	beq.n	8011f12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 8011e20:	f8bb 2000 	ldrh.w	r2, [fp]
 8011e24:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8011e28:	f1bb 0f00 	cmp.w	fp, #0
 8011e2c:	d002      	beq.n	8011e34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8011e2e:	f10b 0202 	add.w	r2, fp, #2
 8011e32:	9209      	str	r2, [sp, #36]	@ 0x24
 8011e34:	b10d      	cbz	r5, 8011e3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8011e36:	3501      	adds	r5, #1
 8011e38:	9508      	str	r5, [sp, #32]
 8011e3a:	3301      	adds	r3, #1
 8011e3c:	930d      	str	r3, [sp, #52]	@ 0x34
 8011e3e:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8011e42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011e44:	f1bb 0f00 	cmp.w	fp, #0
 8011e48:	d0d6      	beq.n	8011df8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8011e4a:	f8bb 2000 	ldrh.w	r2, [fp]
 8011e4e:	2a00      	cmp	r2, #0
 8011e50:	d1d6      	bne.n	8011e00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 8011e52:	f8bb 2000 	ldrh.w	r2, [fp]
 8011e56:	2a00      	cmp	r2, #0
 8011e58:	d0bb      	beq.n	8011dd2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8011e5a:	459a      	cmp	sl, r3
 8011e5c:	ddb9      	ble.n	8011dd2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8011e5e:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 8011e62:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8011e66:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 8011e6a:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 8011e6e:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 8011e72:	960e      	str	r6, [sp, #56]	@ 0x38
 8011e74:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 8011e78:	960f      	str	r6, [sp, #60]	@ 0x3c
 8011e7a:	f1bb 0f00 	cmp.w	fp, #0
 8011e7e:	d002      	beq.n	8011e86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8011e80:	f10b 0302 	add.w	r3, fp, #2
 8011e84:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e86:	b10d      	cbz	r5, 8011e8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8011e88:	1c6b      	adds	r3, r5, #1
 8011e8a:	9308      	str	r3, [sp, #32]
 8011e8c:	ab0f      	add	r3, sp, #60	@ 0x3c
 8011e8e:	9305      	str	r3, [sp, #20]
 8011e90:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 8011e94:	9304      	str	r3, [sp, #16]
 8011e96:	ab0e      	add	r3, sp, #56	@ 0x38
 8011e98:	9303      	str	r3, [sp, #12]
 8011e9a:	ab0c      	add	r3, sp, #48	@ 0x30
 8011e9c:	9302      	str	r3, [sp, #8]
 8011e9e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8011ea2:	9301      	str	r3, [sp, #4]
 8011ea4:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 8011ea8:	9300      	str	r3, [sp, #0]
 8011eaa:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8011eae:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 8011eb2:	a908      	add	r1, sp, #32
 8011eb4:	a809      	add	r0, sp, #36	@ 0x24
 8011eb6:	f7ff fea8 	bl	8011c0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8011eba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	bfbe      	ittt	lt
 8011ec0:	6823      	ldrlt	r3, [r4, #0]
 8011ec2:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8011ec6:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8011ec8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011eca:	bfb8      	it	lt
 8011ecc:	3404      	addlt	r4, #4
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	bfb8      	it	lt
 8011ed2:	6823      	ldrlt	r3, [r4, #0]
 8011ed4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8011ed8:	bfbe      	ittt	lt
 8011eda:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8011ede:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 8011ee0:	3404      	addlt	r4, #4
 8011ee2:	b1d9      	cbz	r1, 8011f1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 8011ee4:	880b      	ldrh	r3, [r1, #0]
 8011ee6:	2b69      	cmp	r3, #105	@ 0x69
 8011ee8:	d01f      	beq.n	8011f2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8011eea:	d82f      	bhi.n	8011f4c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 8011eec:	2b58      	cmp	r3, #88	@ 0x58
 8011eee:	d01c      	beq.n	8011f2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8011ef0:	d818      	bhi.n	8011f24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 8011ef2:	2b25      	cmp	r3, #37	@ 0x25
 8011ef4:	d034      	beq.n	8011f60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 8011ef6:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8011efa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011efc:	f1bb 0f00 	cmp.w	fp, #0
 8011f00:	f000 80b8 	beq.w	8012074 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 8011f04:	f8bb 5000 	ldrh.w	r5, [fp]
 8011f08:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8011f0c:	3301      	adds	r3, #1
 8011f0e:	930d      	str	r3, [sp, #52]	@ 0x34
 8011f10:	e029      	b.n	8011f66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 8011f12:	b10d      	cbz	r5, 8011f18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 8011f14:	782a      	ldrb	r2, [r5, #0]
 8011f16:	e785      	b.n	8011e24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8011f18:	462a      	mov	r2, r5
 8011f1a:	e783      	b.n	8011e24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8011f1c:	2a00      	cmp	r2, #0
 8011f1e:	d0ea      	beq.n	8011ef6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8011f20:	7813      	ldrb	r3, [r2, #0]
 8011f22:	e7e0      	b.n	8011ee6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 8011f24:	3b63      	subs	r3, #99	@ 0x63
 8011f26:	2b01      	cmp	r3, #1
 8011f28:	d8e5      	bhi.n	8011ef6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8011f2a:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 8011f2e:	b329      	cbz	r1, 8011f7c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 8011f30:	880b      	ldrh	r3, [r1, #0]
 8011f32:	2b69      	cmp	r3, #105	@ 0x69
 8011f34:	d063      	beq.n	8011ffe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 8011f36:	d825      	bhi.n	8011f84 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 8011f38:	2b63      	cmp	r3, #99	@ 0x63
 8011f3a:	d038      	beq.n	8011fae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 8011f3c:	2b64      	cmp	r3, #100	@ 0x64
 8011f3e:	d05e      	beq.n	8011ffe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 8011f40:	2b58      	cmp	r3, #88	@ 0x58
 8011f42:	d07b      	beq.n	801203c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 8011f44:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 8011f48:	4625      	mov	r5, r4
 8011f4a:	e036      	b.n	8011fba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8011f4c:	2b73      	cmp	r3, #115	@ 0x73
 8011f4e:	d0ec      	beq.n	8011f2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8011f50:	d802      	bhi.n	8011f58 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 8011f52:	2b6f      	cmp	r3, #111	@ 0x6f
 8011f54:	d1cf      	bne.n	8011ef6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8011f56:	e7e8      	b.n	8011f2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8011f58:	2b75      	cmp	r3, #117	@ 0x75
 8011f5a:	d0e6      	beq.n	8011f2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8011f5c:	2b78      	cmp	r3, #120	@ 0x78
 8011f5e:	e7f9      	b.n	8011f54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 8011f60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011f62:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8011f66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f68:	b10b      	cbz	r3, 8011f6e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 8011f6a:	3302      	adds	r3, #2
 8011f6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f6e:	9b08      	ldr	r3, [sp, #32]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	f43f af2e 	beq.w	8011dd2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8011f76:	3301      	adds	r3, #1
 8011f78:	9308      	str	r3, [sp, #32]
 8011f7a:	e72a      	b.n	8011dd2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8011f7c:	2a00      	cmp	r2, #0
 8011f7e:	d0e1      	beq.n	8011f44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 8011f80:	7813      	ldrb	r3, [r2, #0]
 8011f82:	e7d6      	b.n	8011f32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 8011f84:	2b73      	cmp	r3, #115	@ 0x73
 8011f86:	d036      	beq.n	8011ff6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 8011f88:	d807      	bhi.n	8011f9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 8011f8a:	2b6f      	cmp	r3, #111	@ 0x6f
 8011f8c:	d1da      	bne.n	8011f44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 8011f8e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011f90:	1d25      	adds	r5, r4, #4
 8011f92:	eba8 0202 	sub.w	r2, r8, r2
 8011f96:	2308      	movs	r3, #8
 8011f98:	e04a      	b.n	8012030 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 8011f9a:	2b75      	cmp	r3, #117	@ 0x75
 8011f9c:	d043      	beq.n	8012026 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 8011f9e:	2b78      	cmp	r3, #120	@ 0x78
 8011fa0:	d1d0      	bne.n	8011f44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 8011fa2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011fa4:	1d25      	adds	r5, r4, #4
 8011fa6:	eba8 0202 	sub.w	r2, r8, r2
 8011faa:	2310      	movs	r3, #16
 8011fac:	e040      	b.n	8012030 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 8011fae:	6823      	ldr	r3, [r4, #0]
 8011fb0:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8011fb4:	1d25      	adds	r5, r4, #4
 8011fb6:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 8011fba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fbc:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d052      	beq.n	801206a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 8011fc4:	881a      	ldrh	r2, [r3, #0]
 8011fc6:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 8011fca:	a80d      	add	r0, sp, #52	@ 0x34
 8011fcc:	9005      	str	r0, [sp, #20]
 8011fce:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 8011fd2:	9004      	str	r0, [sp, #16]
 8011fd4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8011fd6:	9003      	str	r0, [sp, #12]
 8011fd8:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 8011fdc:	9002      	str	r0, [sp, #8]
 8011fde:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8011fe0:	9001      	str	r0, [sp, #4]
 8011fe2:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 8011fe6:	9000      	str	r0, [sp, #0]
 8011fe8:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8011fec:	a810      	add	r0, sp, #64	@ 0x40
 8011fee:	f7ff fd49 	bl	8011a84 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8011ff2:	462c      	mov	r4, r5
 8011ff4:	e7b7      	b.n	8011f66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 8011ff6:	6823      	ldr	r3, [r4, #0]
 8011ff8:	1d25      	adds	r5, r4, #4
 8011ffa:	9310      	str	r3, [sp, #64]	@ 0x40
 8011ffc:	e7dd      	b.n	8011fba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8011ffe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012000:	6820      	ldr	r0, [r4, #0]
 8012002:	eba8 0202 	sub.w	r2, r8, r2
 8012006:	230a      	movs	r3, #10
 8012008:	b292      	uxth	r2, r2
 801200a:	4649      	mov	r1, r9
 801200c:	f7ff fd08 	bl	8011a20 <_ZN8touchgfx7Unicode4itoaElPtti>
 8012010:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8012014:	2b2d      	cmp	r3, #45	@ 0x2d
 8012016:	f104 0504 	add.w	r5, r4, #4
 801201a:	d1ce      	bne.n	8011fba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801201c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8012020:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012022:	3302      	adds	r3, #2
 8012024:	e7e9      	b.n	8011ffa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 8012026:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012028:	1d25      	adds	r5, r4, #4
 801202a:	eba8 0202 	sub.w	r2, r8, r2
 801202e:	230a      	movs	r3, #10
 8012030:	b292      	uxth	r2, r2
 8012032:	4649      	mov	r1, r9
 8012034:	6820      	ldr	r0, [r4, #0]
 8012036:	f7ff fcd5 	bl	80119e4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801203a:	e7be      	b.n	8011fba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801203c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801203e:	6820      	ldr	r0, [r4, #0]
 8012040:	eba8 0202 	sub.w	r2, r8, r2
 8012044:	b292      	uxth	r2, r2
 8012046:	2310      	movs	r3, #16
 8012048:	4649      	mov	r1, r9
 801204a:	f7ff fccb 	bl	80119e4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801204e:	1d25      	adds	r5, r4, #4
 8012050:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 8012054:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8012058:	2b00      	cmp	r3, #0
 801205a:	d0ae      	beq.n	8011fba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801205c:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 8012060:	2919      	cmp	r1, #25
 8012062:	d8f7      	bhi.n	8012054 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 8012064:	3b20      	subs	r3, #32
 8012066:	8013      	strh	r3, [r2, #0]
 8012068:	e7f4      	b.n	8012054 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 801206a:	9a08      	ldr	r2, [sp, #32]
 801206c:	2a00      	cmp	r2, #0
 801206e:	d0aa      	beq.n	8011fc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 8012070:	7812      	ldrb	r2, [r2, #0]
 8012072:	e7a8      	b.n	8011fc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 8012074:	2d00      	cmp	r5, #0
 8012076:	f43f af47 	beq.w	8011f08 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 801207a:	782d      	ldrb	r5, [r5, #0]
 801207c:	e744      	b.n	8011f08 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

0801207e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801207e:	b507      	push	{r0, r1, r2, lr}
 8012080:	9300      	str	r3, [sp, #0]
 8012082:	4613      	mov	r3, r2
 8012084:	2200      	movs	r2, #0
 8012086:	f7ff fe90 	bl	8011daa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801208a:	b003      	add	sp, #12
 801208c:	f85d fb04 	ldr.w	pc, [sp], #4

08012090 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8012090:	b40c      	push	{r2, r3}
 8012092:	b507      	push	{r0, r1, r2, lr}
 8012094:	ab04      	add	r3, sp, #16
 8012096:	f853 2b04 	ldr.w	r2, [r3], #4
 801209a:	9301      	str	r3, [sp, #4]
 801209c:	f7ff ffef 	bl	801207e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 80120a0:	b003      	add	sp, #12
 80120a2:	f85d eb04 	ldr.w	lr, [sp], #4
 80120a6:	b002      	add	sp, #8
 80120a8:	4770      	bx	lr
	...

080120ac <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80120ac:	4b01      	ldr	r3, [pc, #4]	@ (80120b4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80120ae:	6018      	str	r0, [r3, #0]
 80120b0:	4770      	bx	lr
 80120b2:	bf00      	nop
 80120b4:	200043b4 	.word	0x200043b4

080120b8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80120b8:	4b06      	ldr	r3, [pc, #24]	@ (80120d4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80120ba:	881a      	ldrh	r2, [r3, #0]
 80120bc:	4282      	cmp	r2, r0
 80120be:	d807      	bhi.n	80120d0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80120c0:	4b05      	ldr	r3, [pc, #20]	@ (80120d8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80120c2:	881b      	ldrh	r3, [r3, #0]
 80120c4:	4413      	add	r3, r2
 80120c6:	4298      	cmp	r0, r3
 80120c8:	bfac      	ite	ge
 80120ca:	2000      	movge	r0, #0
 80120cc:	2001      	movlt	r0, #1
 80120ce:	4770      	bx	lr
 80120d0:	2000      	movs	r0, #0
 80120d2:	4770      	bx	lr
 80120d4:	200043d4 	.word	0x200043d4
 80120d8:	200043d8 	.word	0x200043d8

080120dc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80120dc:	b508      	push	{r3, lr}
 80120de:	4601      	mov	r1, r0
 80120e0:	f7ff ffea 	bl	80120b8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80120e4:	b118      	cbz	r0, 80120ee <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80120e6:	4b02      	ldr	r3, [pc, #8]	@ (80120f0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80120ee:	bd08      	pop	{r3, pc}
 80120f0:	200043b8 	.word	0x200043b8

080120f4 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80120f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120f6:	4c24      	ldr	r4, [pc, #144]	@ (8012188 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 80120f8:	6823      	ldr	r3, [r4, #0]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d042      	beq.n	8012184 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80120fe:	4a23      	ldr	r2, [pc, #140]	@ (801218c <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8012100:	4d23      	ldr	r5, [pc, #140]	@ (8012190 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8012102:	8811      	ldrh	r1, [r2, #0]
 8012104:	f8b5 c000 	ldrh.w	ip, [r5]
 8012108:	4822      	ldr	r0, [pc, #136]	@ (8012194 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801210a:	4461      	add	r1, ip
 801210c:	1c4a      	adds	r2, r1, #1
 801210e:	f022 0201 	bic.w	r2, r2, #1
 8012112:	008f      	lsls	r7, r1, #2
 8012114:	0412      	lsls	r2, r2, #16
 8012116:	19de      	adds	r6, r3, r7
 8012118:	0c12      	lsrs	r2, r2, #16
 801211a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801211e:	6006      	str	r6, [r0, #0]
 8012120:	4e1d      	ldr	r6, [pc, #116]	@ (8012198 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8012122:	19da      	adds	r2, r3, r7
 8012124:	6032      	str	r2, [r6, #0]
 8012126:	220e      	movs	r2, #14
 8012128:	fb02 f20c 	mul.w	r2, r2, ip
 801212c:	3203      	adds	r2, #3
 801212e:	f022 0203 	bic.w	r2, r2, #3
 8012132:	443a      	add	r2, r7
 8012134:	4f19      	ldr	r7, [pc, #100]	@ (801219c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8012136:	4413      	add	r3, r2
 8012138:	603b      	str	r3, [r7, #0]
 801213a:	4f19      	ldr	r7, [pc, #100]	@ (80121a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801213c:	2300      	movs	r3, #0
 801213e:	803b      	strh	r3, [r7, #0]
 8012140:	4f18      	ldr	r7, [pc, #96]	@ (80121a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8012142:	683f      	ldr	r7, [r7, #0]
 8012144:	1aba      	subs	r2, r7, r2
 8012146:	4f18      	ldr	r7, [pc, #96]	@ (80121a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8012148:	603a      	str	r2, [r7, #0]
 801214a:	4a18      	ldr	r2, [pc, #96]	@ (80121ac <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801214c:	469c      	mov	ip, r3
 801214e:	8013      	strh	r3, [r2, #0]
 8012150:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8012154:	428b      	cmp	r3, r1
 8012156:	d10d      	bne.n	8012174 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8012158:	882d      	ldrh	r5, [r5, #0]
 801215a:	6830      	ldr	r0, [r6, #0]
 801215c:	2300      	movs	r3, #0
 801215e:	240e      	movs	r4, #14
 8012160:	429d      	cmp	r5, r3
 8012162:	d90f      	bls.n	8012184 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8012164:	fb04 0203 	mla	r2, r4, r3, r0
 8012168:	3301      	adds	r3, #1
 801216a:	7b11      	ldrb	r1, [r2, #12]
 801216c:	f36f 1145 	bfc	r1, #5, #1
 8012170:	7311      	strb	r1, [r2, #12]
 8012172:	e7f5      	b.n	8012160 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8012174:	6822      	ldr	r2, [r4, #0]
 8012176:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801217a:	6802      	ldr	r2, [r0, #0]
 801217c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8012180:	3301      	adds	r3, #1
 8012182:	e7e7      	b.n	8012154 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8012184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012186:	bf00      	nop
 8012188:	200043b8 	.word	0x200043b8
 801218c:	200043d4 	.word	0x200043d4
 8012190:	200043d8 	.word	0x200043d8
 8012194:	200043cc 	.word	0x200043cc
 8012198:	200043bc 	.word	0x200043bc
 801219c:	200043c4 	.word	0x200043c4
 80121a0:	200043d6 	.word	0x200043d6
 80121a4:	200043c0 	.word	0x200043c0
 80121a8:	200043d0 	.word	0x200043d0
 80121ac:	200043c8 	.word	0x200043c8

080121b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80121b0:	4b06      	ldr	r3, [pc, #24]	@ (80121cc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	b943      	cbnz	r3, 80121c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80121b6:	b139      	cbz	r1, 80121c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80121b8:	4b05      	ldr	r3, [pc, #20]	@ (80121d0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 80121ba:	801a      	strh	r2, [r3, #0]
 80121bc:	4b05      	ldr	r3, [pc, #20]	@ (80121d4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 80121be:	6019      	str	r1, [r3, #0]
 80121c0:	4b05      	ldr	r3, [pc, #20]	@ (80121d8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 80121c2:	6018      	str	r0, [r3, #0]
 80121c4:	f7ff bf96 	b.w	80120f4 <_ZN8touchgfx6Bitmap10clearCacheEv>
 80121c8:	4770      	bx	lr
 80121ca:	bf00      	nop
 80121cc:	200043c4 	.word	0x200043c4
 80121d0:	200043d8 	.word	0x200043d8
 80121d4:	200043c0 	.word	0x200043c0
 80121d8:	200043b8 	.word	0x200043b8

080121dc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80121dc:	b470      	push	{r4, r5, r6}
 80121de:	4c07      	ldr	r4, [pc, #28]	@ (80121fc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80121e0:	6826      	ldr	r6, [r4, #0]
 80121e2:	4605      	mov	r5, r0
 80121e4:	4610      	mov	r0, r2
 80121e6:	9a03      	ldr	r2, [sp, #12]
 80121e8:	b936      	cbnz	r6, 80121f8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80121ea:	6025      	str	r5, [r4, #0]
 80121ec:	4c04      	ldr	r4, [pc, #16]	@ (8012200 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80121ee:	8021      	strh	r1, [r4, #0]
 80121f0:	bc70      	pop	{r4, r5, r6}
 80121f2:	4619      	mov	r1, r3
 80121f4:	f7ff bfdc 	b.w	80121b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80121f8:	bc70      	pop	{r4, r5, r6}
 80121fa:	4770      	bx	lr
 80121fc:	200043dc 	.word	0x200043dc
 8012200:	200043d4 	.word	0x200043d4

08012204 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8012204:	4a12      	ldr	r2, [pc, #72]	@ (8012250 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8012206:	8803      	ldrh	r3, [r0, #0]
 8012208:	8812      	ldrh	r2, [r2, #0]
 801220a:	4293      	cmp	r3, r2
 801220c:	d207      	bcs.n	801221e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801220e:	4a11      	ldr	r2, [pc, #68]	@ (8012254 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8012210:	6812      	ldr	r2, [r2, #0]
 8012212:	2114      	movs	r1, #20
 8012214:	fb01 2303 	mla	r3, r1, r3, r2
 8012218:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801221c:	4770      	bx	lr
 801221e:	490e      	ldr	r1, [pc, #56]	@ (8012258 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8012220:	8809      	ldrh	r1, [r1, #0]
 8012222:	4411      	add	r1, r2
 8012224:	428b      	cmp	r3, r1
 8012226:	da04      	bge.n	8012232 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8012228:	1a9b      	subs	r3, r3, r2
 801222a:	4a0c      	ldr	r2, [pc, #48]	@ (801225c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801222c:	210e      	movs	r1, #14
 801222e:	6812      	ldr	r2, [r2, #0]
 8012230:	e7f0      	b.n	8012214 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8012232:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8012236:	4293      	cmp	r3, r2
 8012238:	d108      	bne.n	801224c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801223a:	4b09      	ldr	r3, [pc, #36]	@ (8012260 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801223c:	781b      	ldrb	r3, [r3, #0]
 801223e:	b91b      	cbnz	r3, 8012248 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8012240:	4b08      	ldr	r3, [pc, #32]	@ (8012264 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8012242:	f9b3 0000 	ldrsh.w	r0, [r3]
 8012246:	4770      	bx	lr
 8012248:	4b07      	ldr	r3, [pc, #28]	@ (8012268 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801224a:	e7fa      	b.n	8012242 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801224c:	2000      	movs	r0, #0
 801224e:	4770      	bx	lr
 8012250:	200043d4 	.word	0x200043d4
 8012254:	200043dc 	.word	0x200043dc
 8012258:	200043d8 	.word	0x200043d8
 801225c:	200043bc 	.word	0x200043bc
 8012260:	2000434a 	.word	0x2000434a
 8012264:	2000434c 	.word	0x2000434c
 8012268:	2000434e 	.word	0x2000434e

0801226c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801226c:	4a12      	ldr	r2, [pc, #72]	@ (80122b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801226e:	8803      	ldrh	r3, [r0, #0]
 8012270:	8812      	ldrh	r2, [r2, #0]
 8012272:	4293      	cmp	r3, r2
 8012274:	d207      	bcs.n	8012286 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8012276:	4a11      	ldr	r2, [pc, #68]	@ (80122bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8012278:	6812      	ldr	r2, [r2, #0]
 801227a:	2114      	movs	r1, #20
 801227c:	fb01 2303 	mla	r3, r1, r3, r2
 8012280:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8012284:	4770      	bx	lr
 8012286:	490e      	ldr	r1, [pc, #56]	@ (80122c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8012288:	8809      	ldrh	r1, [r1, #0]
 801228a:	4411      	add	r1, r2
 801228c:	428b      	cmp	r3, r1
 801228e:	da04      	bge.n	801229a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8012290:	1a9b      	subs	r3, r3, r2
 8012292:	4a0c      	ldr	r2, [pc, #48]	@ (80122c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8012294:	210e      	movs	r1, #14
 8012296:	6812      	ldr	r2, [r2, #0]
 8012298:	e7f0      	b.n	801227c <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801229a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801229e:	4293      	cmp	r3, r2
 80122a0:	d108      	bne.n	80122b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 80122a2:	4b09      	ldr	r3, [pc, #36]	@ (80122c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80122a4:	781b      	ldrb	r3, [r3, #0]
 80122a6:	b91b      	cbnz	r3, 80122b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 80122a8:	4b08      	ldr	r3, [pc, #32]	@ (80122cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80122aa:	f9b3 0000 	ldrsh.w	r0, [r3]
 80122ae:	4770      	bx	lr
 80122b0:	4b07      	ldr	r3, [pc, #28]	@ (80122d0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80122b2:	e7fa      	b.n	80122aa <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 80122b4:	2000      	movs	r0, #0
 80122b6:	4770      	bx	lr
 80122b8:	200043d4 	.word	0x200043d4
 80122bc:	200043dc 	.word	0x200043dc
 80122c0:	200043d8 	.word	0x200043d8
 80122c4:	200043bc 	.word	0x200043bc
 80122c8:	2000434a 	.word	0x2000434a
 80122cc:	2000434e 	.word	0x2000434e
 80122d0:	2000434c 	.word	0x2000434c

080122d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80122d4:	b510      	push	{r4, lr}
 80122d6:	4a1f      	ldr	r2, [pc, #124]	@ (8012354 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 80122d8:	880b      	ldrh	r3, [r1, #0]
 80122da:	8812      	ldrh	r2, [r2, #0]
 80122dc:	4293      	cmp	r3, r2
 80122de:	d213      	bcs.n	8012308 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 80122e0:	4a1d      	ldr	r2, [pc, #116]	@ (8012358 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 80122e2:	6812      	ldr	r2, [r2, #0]
 80122e4:	2114      	movs	r1, #20
 80122e6:	fb01 2303 	mla	r3, r1, r3, r2
 80122ea:	8a1a      	ldrh	r2, [r3, #16]
 80122ec:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80122f0:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80122f4:	8a5b      	ldrh	r3, [r3, #18]
 80122f6:	8004      	strh	r4, [r0, #0]
 80122f8:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80122fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012300:	8041      	strh	r1, [r0, #2]
 8012302:	8082      	strh	r2, [r0, #4]
 8012304:	80c3      	strh	r3, [r0, #6]
 8012306:	e00e      	b.n	8012326 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8012308:	4914      	ldr	r1, [pc, #80]	@ (801235c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801230a:	8809      	ldrh	r1, [r1, #0]
 801230c:	4411      	add	r1, r2
 801230e:	428b      	cmp	r3, r1
 8012310:	da0a      	bge.n	8012328 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 8012312:	1a9b      	subs	r3, r3, r2
 8012314:	4a12      	ldr	r2, [pc, #72]	@ (8012360 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8012316:	6812      	ldr	r2, [r2, #0]
 8012318:	210e      	movs	r1, #14
 801231a:	fb01 2303 	mla	r3, r1, r3, r2
 801231e:	681a      	ldr	r2, [r3, #0]
 8012320:	6002      	str	r2, [r0, #0]
 8012322:	685a      	ldr	r2, [r3, #4]
 8012324:	6042      	str	r2, [r0, #4]
 8012326:	bd10      	pop	{r4, pc}
 8012328:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801232c:	4293      	cmp	r3, r2
 801232e:	d10b      	bne.n	8012348 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8012330:	4b0c      	ldr	r3, [pc, #48]	@ (8012364 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8012332:	f9b3 1000 	ldrsh.w	r1, [r3]
 8012336:	4b0c      	ldr	r3, [pc, #48]	@ (8012368 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8012338:	8081      	strh	r1, [r0, #4]
 801233a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801233e:	80c2      	strh	r2, [r0, #6]
 8012340:	2300      	movs	r3, #0
 8012342:	8003      	strh	r3, [r0, #0]
 8012344:	8043      	strh	r3, [r0, #2]
 8012346:	e7ee      	b.n	8012326 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8012348:	2300      	movs	r3, #0
 801234a:	8003      	strh	r3, [r0, #0]
 801234c:	8043      	strh	r3, [r0, #2]
 801234e:	8083      	strh	r3, [r0, #4]
 8012350:	e7d8      	b.n	8012304 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8012352:	bf00      	nop
 8012354:	200043d4 	.word	0x200043d4
 8012358:	200043dc 	.word	0x200043dc
 801235c:	200043d8 	.word	0x200043d8
 8012360:	200043bc 	.word	0x200043bc
 8012364:	20004346 	.word	0x20004346
 8012368:	20004348 	.word	0x20004348

0801236c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801236c:	4a12      	ldr	r2, [pc, #72]	@ (80123b8 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801236e:	8803      	ldrh	r3, [r0, #0]
 8012370:	8811      	ldrh	r1, [r2, #0]
 8012372:	428b      	cmp	r3, r1
 8012374:	d20b      	bcs.n	801238e <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8012376:	4a11      	ldr	r2, [pc, #68]	@ (80123bc <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8012378:	6812      	ldr	r2, [r2, #0]
 801237a:	b112      	cbz	r2, 8012382 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801237c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012380:	b9c0      	cbnz	r0, 80123b4 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8012382:	4a0f      	ldr	r2, [pc, #60]	@ (80123c0 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8012384:	6811      	ldr	r1, [r2, #0]
 8012386:	2214      	movs	r2, #20
 8012388:	4353      	muls	r3, r2
 801238a:	58c8      	ldr	r0, [r1, r3]
 801238c:	4770      	bx	lr
 801238e:	4a0d      	ldr	r2, [pc, #52]	@ (80123c4 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8012390:	8812      	ldrh	r2, [r2, #0]
 8012392:	440a      	add	r2, r1
 8012394:	4293      	cmp	r3, r2
 8012396:	da04      	bge.n	80123a2 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8012398:	4a08      	ldr	r2, [pc, #32]	@ (80123bc <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801239a:	6812      	ldr	r2, [r2, #0]
 801239c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80123a0:	4770      	bx	lr
 80123a2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80123a6:	4293      	cmp	r3, r2
 80123a8:	d103      	bne.n	80123b2 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80123aa:	4b07      	ldr	r3, [pc, #28]	@ (80123c8 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80123b0:	4770      	bx	lr
 80123b2:	2000      	movs	r0, #0
 80123b4:	4770      	bx	lr
 80123b6:	bf00      	nop
 80123b8:	200043d4 	.word	0x200043d4
 80123bc:	200043b8 	.word	0x200043b8
 80123c0:	200043dc 	.word	0x200043dc
 80123c4:	200043d8 	.word	0x200043d8
 80123c8:	20004354 	.word	0x20004354

080123cc <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80123cc:	b510      	push	{r4, lr}
 80123ce:	4a17      	ldr	r2, [pc, #92]	@ (801242c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 80123d0:	8803      	ldrh	r3, [r0, #0]
 80123d2:	8812      	ldrh	r2, [r2, #0]
 80123d4:	4293      	cmp	r3, r2
 80123d6:	d20c      	bcs.n	80123f2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 80123d8:	4a15      	ldr	r2, [pc, #84]	@ (8012430 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 80123da:	6812      	ldr	r2, [r2, #0]
 80123dc:	2114      	movs	r1, #20
 80123de:	fb01 2303 	mla	r3, r1, r3, r2
 80123e2:	7c58      	ldrb	r0, [r3, #17]
 80123e4:	0942      	lsrs	r2, r0, #5
 80123e6:	7cd8      	ldrb	r0, [r3, #19]
 80123e8:	f3c0 1042 	ubfx	r0, r0, #5, #3
 80123ec:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80123f0:	bd10      	pop	{r4, pc}
 80123f2:	4910      	ldr	r1, [pc, #64]	@ (8012434 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 80123f4:	8809      	ldrh	r1, [r1, #0]
 80123f6:	4411      	add	r1, r2
 80123f8:	428b      	cmp	r3, r1
 80123fa:	da09      	bge.n	8012410 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 80123fc:	1a9b      	subs	r3, r3, r2
 80123fe:	4a0e      	ldr	r2, [pc, #56]	@ (8012438 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8012400:	6812      	ldr	r2, [r2, #0]
 8012402:	210e      	movs	r1, #14
 8012404:	fb01 2303 	mla	r3, r1, r3, r2
 8012408:	7b18      	ldrb	r0, [r3, #12]
 801240a:	f000 001f 	and.w	r0, r0, #31
 801240e:	e7ef      	b.n	80123f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8012410:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8012414:	4293      	cmp	r3, r2
 8012416:	d106      	bne.n	8012426 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8012418:	f7fa f86c 	bl	800c4f4 <_ZN8touchgfx3HAL3lcdEv>
 801241c:	6803      	ldr	r3, [r0, #0]
 801241e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012424:	4718      	bx	r3
 8012426:	2000      	movs	r0, #0
 8012428:	e7e2      	b.n	80123f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801242a:	bf00      	nop
 801242c:	200043d4 	.word	0x200043d4
 8012430:	200043dc 	.word	0x200043dc
 8012434:	200043d8 	.word	0x200043d8
 8012438:	200043bc 	.word	0x200043bc

0801243c <_ZNK8touchgfx7LCD1bpp8bitDepthEv>:
 801243c:	2001      	movs	r0, #1
 801243e:	4770      	bx	lr

08012440 <_ZNK8touchgfx7LCD1bpp17framebufferFormatEv>:
 8012440:	2003      	movs	r0, #3
 8012442:	4770      	bx	lr

08012444 <_ZNK8touchgfx7LCD1bpp17framebufferStrideEv>:
 8012444:	4b02      	ldr	r3, [pc, #8]	@ (8012450 <_ZNK8touchgfx7LCD1bpp17framebufferStrideEv+0xc>)
 8012446:	8818      	ldrh	r0, [r3, #0]
 8012448:	3007      	adds	r0, #7
 801244a:	08c0      	lsrs	r0, r0, #3
 801244c:	4770      	bx	lr
 801244e:	bf00      	nop
 8012450:	2000434c 	.word	0x2000434c

08012454 <_ZN8touchgfx7LCD1bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8012454:	4770      	bx	lr
	...

08012458 <_ZN8touchgfx7LCD1bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8012458:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801245a:	2300      	movs	r3, #0
 801245c:	9302      	str	r3, [sp, #8]
 801245e:	4b13      	ldr	r3, [pc, #76]	@ (80124ac <_ZN8touchgfx7LCD1bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x54>)
 8012460:	781a      	ldrb	r2, [r3, #0]
 8012462:	4604      	mov	r4, r0
 8012464:	460e      	mov	r6, r1
 8012466:	b9e2      	cbnz	r2, 80124a2 <_ZN8touchgfx7LCD1bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x4a>
 8012468:	4b11      	ldr	r3, [pc, #68]	@ (80124b0 <_ZN8touchgfx7LCD1bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x58>)
 801246a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801246e:	f8ad 000c 	strh.w	r0, [sp, #12]
 8012472:	b9c2      	cbnz	r2, 80124a6 <_ZN8touchgfx7LCD1bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x4e>
 8012474:	4b0f      	ldr	r3, [pc, #60]	@ (80124b4 <_ZN8touchgfx7LCD1bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x5c>)
 8012476:	f9b3 2000 	ldrsh.w	r2, [r3]
 801247a:	4b0f      	ldr	r3, [pc, #60]	@ (80124b8 <_ZN8touchgfx7LCD1bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x60>)
 801247c:	f8ad 200e 	strh.w	r2, [sp, #14]
 8012480:	6818      	ldr	r0, [r3, #0]
 8012482:	6803      	ldr	r3, [r0, #0]
 8012484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012486:	4798      	blx	r3
 8012488:	22ff      	movs	r2, #255	@ 0xff
 801248a:	2100      	movs	r1, #0
 801248c:	e9cd 2100 	strd	r2, r1, [sp]
 8012490:	6823      	ldr	r3, [r4, #0]
 8012492:	4601      	mov	r1, r0
 8012494:	68dd      	ldr	r5, [r3, #12]
 8012496:	aa02      	add	r2, sp, #8
 8012498:	4633      	mov	r3, r6
 801249a:	4620      	mov	r0, r4
 801249c:	47a8      	blx	r5
 801249e:	b004      	add	sp, #16
 80124a0:	bd70      	pop	{r4, r5, r6, pc}
 80124a2:	4b04      	ldr	r3, [pc, #16]	@ (80124b4 <_ZN8touchgfx7LCD1bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x5c>)
 80124a4:	e7e1      	b.n	801246a <_ZN8touchgfx7LCD1bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 80124a6:	4b02      	ldr	r3, [pc, #8]	@ (80124b0 <_ZN8touchgfx7LCD1bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x58>)
 80124a8:	e7e5      	b.n	8012476 <_ZN8touchgfx7LCD1bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x1e>
 80124aa:	bf00      	nop
 80124ac:	2000434a 	.word	0x2000434a
 80124b0:	2000434c 	.word	0x2000434c
 80124b4:	2000434e 	.word	0x2000434e
 80124b8:	20004354 	.word	0x20004354

080124bc <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80124bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124c0:	b088      	sub	sp, #32
 80124c2:	ac08      	add	r4, sp, #32
 80124c4:	4606      	mov	r6, r0
 80124c6:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80124ca:	4620      	mov	r0, r4
 80124cc:	4688      	mov	r8, r1
 80124ce:	4691      	mov	r9, r2
 80124d0:	f7ff ff4c 	bl	801236c <_ZNK8touchgfx6Bitmap7getDataEv>
 80124d4:	6833      	ldr	r3, [r6, #0]
 80124d6:	4605      	mov	r5, r0
 80124d8:	4620      	mov	r0, r4
 80124da:	699f      	ldr	r7, [r3, #24]
 80124dc:	f7ff fe92 	bl	8012204 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80124e0:	4682      	mov	sl, r0
 80124e2:	4620      	mov	r0, r4
 80124e4:	f7ff fec2 	bl	801226c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80124e8:	9500      	str	r5, [sp, #0]
 80124ea:	e9cd a001 	strd	sl, r0, [sp, #4]
 80124ee:	464b      	mov	r3, r9
 80124f0:	a806      	add	r0, sp, #24
 80124f2:	4642      	mov	r2, r8
 80124f4:	4631      	mov	r1, r6
 80124f6:	47b8      	blx	r7
 80124f8:	4628      	mov	r0, r5
 80124fa:	b008      	add	sp, #32
 80124fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012500 <_ZN8touchgfx7LCD1bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8012500:	b4f0      	push	{r4, r5, r6, r7}
 8012502:	4616      	mov	r6, r2
 8012504:	2e03      	cmp	r6, #3
 8012506:	461a      	mov	r2, r3
 8012508:	f89d 4014 	ldrb.w	r4, [sp, #20]
 801250c:	9b04      	ldr	r3, [sp, #16]
 801250e:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8012512:	d003      	beq.n	801251c <_ZN8touchgfx7LCD1bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 8012514:	2e04      	cmp	r6, #4
 8012516:	d008      	beq.n	801252a <_ZN8touchgfx7LCD1bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 8012518:	bcf0      	pop	{r4, r5, r6, r7}
 801251a:	4770      	bx	lr
 801251c:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8012520:	6805      	ldr	r5, [r0, #0]
 8012522:	68ec      	ldr	r4, [r5, #12]
 8012524:	46a4      	mov	ip, r4
 8012526:	bcf0      	pop	{r4, r5, r6, r7}
 8012528:	4760      	bx	ip
 801252a:	6805      	ldr	r5, [r0, #0]
 801252c:	9404      	str	r4, [sp, #16]
 801252e:	6d2c      	ldr	r4, [r5, #80]	@ 0x50
 8012530:	46a4      	mov	ip, r4
 8012532:	bcf0      	pop	{r4, r5, r6, r7}
 8012534:	4760      	bx	ip

08012536 <_ZN8touchgfx7LCD1bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8012536:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801253a:	b085      	sub	sp, #20
 801253c:	4605      	mov	r5, r0
 801253e:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 8012542:	460c      	mov	r4, r1
 8012544:	4691      	mov	r9, r2
 8012546:	4698      	mov	r8, r3
 8012548:	b1f6      	cbz	r6, 8012588 <_ZN8touchgfx7LCD1bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x52>
 801254a:	4608      	mov	r0, r1
 801254c:	f7ff fe5a 	bl	8012204 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012550:	4607      	mov	r7, r0
 8012552:	4620      	mov	r0, r4
 8012554:	f7ff fe8a 	bl	801226c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012558:	f8ad 000e 	strh.w	r0, [sp, #14]
 801255c:	4620      	mov	r0, r4
 801255e:	f8ad 9008 	strh.w	r9, [sp, #8]
 8012562:	f8ad 800a 	strh.w	r8, [sp, #10]
 8012566:	f8ad 700c 	strh.w	r7, [sp, #12]
 801256a:	f7ff ff2f 	bl	80123cc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801256e:	2804      	cmp	r0, #4
 8012570:	682b      	ldr	r3, [r5, #0]
 8012572:	d10c      	bne.n	801258e <_ZN8touchgfx7LCD1bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x58>
 8012574:	4620      	mov	r0, r4
 8012576:	6d1f      	ldr	r7, [r3, #80]	@ 0x50
 8012578:	f7ff fef8 	bl	801236c <_ZNK8touchgfx6Bitmap7getDataEv>
 801257c:	9600      	str	r6, [sp, #0]
 801257e:	4601      	mov	r1, r0
 8012580:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012582:	aa02      	add	r2, sp, #8
 8012584:	4628      	mov	r0, r5
 8012586:	47b8      	blx	r7
 8012588:	b005      	add	sp, #20
 801258a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801258e:	4620      	mov	r0, r4
 8012590:	68df      	ldr	r7, [r3, #12]
 8012592:	f7ff feeb 	bl	801236c <_ZNK8touchgfx6Bitmap7getDataEv>
 8012596:	2300      	movs	r3, #0
 8012598:	e9cd 6300 	strd	r6, r3, [sp]
 801259c:	4601      	mov	r1, r0
 801259e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80125a0:	aa02      	add	r2, sp, #8
 80125a2:	4628      	mov	r0, r5
 80125a4:	47b8      	blx	r7
 80125a6:	e7ef      	b.n	8012588 <_ZN8touchgfx7LCD1bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x52>

080125a8 <_ZN8touchgfx7LCD1bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80125a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125aa:	461e      	mov	r6, r3
 80125ac:	0633      	lsls	r3, r6, #24
 80125ae:	b085      	sub	sp, #20
 80125b0:	4605      	mov	r5, r0
 80125b2:	4617      	mov	r7, r2
 80125b4:	d521      	bpl.n	80125fa <_ZN8touchgfx7LCD1bpp8fillRectERKNS_4RectENS_9colortypeEh+0x52>
 80125b6:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	dd1d      	ble.n	80125fa <_ZN8touchgfx7LCD1bpp8fillRectERKNS_4RectENS_9colortypeEh+0x52>
 80125be:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	dd19      	ble.n	80125fa <_ZN8touchgfx7LCD1bpp8fillRectERKNS_4RectENS_9colortypeEh+0x52>
 80125c6:	6808      	ldr	r0, [r1, #0]
 80125c8:	6849      	ldr	r1, [r1, #4]
 80125ca:	ac02      	add	r4, sp, #8
 80125cc:	c403      	stmia	r4!, {r0, r1}
 80125ce:	4c0c      	ldr	r4, [pc, #48]	@ (8012600 <_ZN8touchgfx7LCD1bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>)
 80125d0:	a802      	add	r0, sp, #8
 80125d2:	f7fc fc79 	bl	800eec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80125d6:	6820      	ldr	r0, [r4, #0]
 80125d8:	6803      	ldr	r3, [r0, #0]
 80125da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80125dc:	4798      	blx	r3
 80125de:	4b09      	ldr	r3, [pc, #36]	@ (8012604 <_ZN8touchgfx7LCD1bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>)
 80125e0:	881a      	ldrh	r2, [r3, #0]
 80125e2:	682b      	ldr	r3, [r5, #0]
 80125e4:	e9cd 7600 	strd	r7, r6, [sp]
 80125e8:	4601      	mov	r1, r0
 80125ea:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 80125ec:	4628      	mov	r0, r5
 80125ee:	ab02      	add	r3, sp, #8
 80125f0:	47b0      	blx	r6
 80125f2:	6820      	ldr	r0, [r4, #0]
 80125f4:	6803      	ldr	r3, [r0, #0]
 80125f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125f8:	4798      	blx	r3
 80125fa:	b005      	add	sp, #20
 80125fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125fe:	bf00      	nop
 8012600:	20004354 	.word	0x20004354
 8012604:	2000434c 	.word	0x2000434c

08012608 <_ZN8touchgfx7LCD1bpp9bwRLEdata15getNextHalfByteEv>:
 8012608:	79c3      	ldrb	r3, [r0, #7]
 801260a:	b123      	cbz	r3, 8012616 <_ZN8touchgfx7LCD1bpp9bwRLEdata15getNextHalfByteEv+0xe>
 801260c:	6802      	ldr	r2, [r0, #0]
 801260e:	1c51      	adds	r1, r2, #1
 8012610:	6001      	str	r1, [r0, #0]
 8012612:	7812      	ldrb	r2, [r2, #0]
 8012614:	7182      	strb	r2, [r0, #6]
 8012616:	7982      	ldrb	r2, [r0, #6]
 8012618:	f083 0301 	eor.w	r3, r3, #1
 801261c:	1111      	asrs	r1, r2, #4
 801261e:	7181      	strb	r1, [r0, #6]
 8012620:	71c3      	strb	r3, [r0, #7]
 8012622:	f002 000f 	and.w	r0, r2, #15
 8012626:	4770      	bx	lr

08012628 <_ZN8touchgfx7LCD1bpp9bwRLEdata13getNextLengthEv>:
 8012628:	b510      	push	{r4, lr}
 801262a:	4604      	mov	r4, r0
 801262c:	7923      	ldrb	r3, [r4, #4]
 801262e:	60e3      	str	r3, [r4, #12]
 8012630:	7963      	ldrb	r3, [r4, #5]
 8012632:	7123      	strb	r3, [r4, #4]
 8012634:	4620      	mov	r0, r4
 8012636:	f7ff ffe7 	bl	8012608 <_ZN8touchgfx7LCD1bpp9bwRLEdata15getNextHalfByteEv>
 801263a:	7a23      	ldrb	r3, [r4, #8]
 801263c:	7160      	strb	r0, [r4, #5]
 801263e:	43db      	mvns	r3, r3
 8012640:	7223      	strb	r3, [r4, #8]
 8012642:	7923      	ldrb	r3, [r4, #4]
 8012644:	68e2      	ldr	r2, [r4, #12]
 8012646:	b963      	cbnz	r3, 8012662 <_ZN8touchgfx7LCD1bpp9bwRLEdata13getNextLengthEv+0x3a>
 8012648:	7963      	ldrb	r3, [r4, #5]
 801264a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801264e:	60e3      	str	r3, [r4, #12]
 8012650:	4620      	mov	r0, r4
 8012652:	f7ff ffd9 	bl	8012608 <_ZN8touchgfx7LCD1bpp9bwRLEdata15getNextHalfByteEv>
 8012656:	7120      	strb	r0, [r4, #4]
 8012658:	4620      	mov	r0, r4
 801265a:	f7ff ffd5 	bl	8012608 <_ZN8touchgfx7LCD1bpp9bwRLEdata15getNextHalfByteEv>
 801265e:	7160      	strb	r0, [r4, #5]
 8012660:	e7ef      	b.n	8012642 <_ZN8touchgfx7LCD1bpp9bwRLEdata13getNextLengthEv+0x1a>
 8012662:	2a00      	cmp	r2, #0
 8012664:	d0e2      	beq.n	801262c <_ZN8touchgfx7LCD1bpp9bwRLEdata13getNextLengthEv+0x4>
 8012666:	bd10      	pop	{r4, pc}

08012668 <_ZN8touchgfx7LCD1bpp9bwRLEdata8skipNextEl>:
 8012668:	b538      	push	{r3, r4, r5, lr}
 801266a:	4605      	mov	r5, r0
 801266c:	460c      	mov	r4, r1
 801266e:	68eb      	ldr	r3, [r5, #12]
 8012670:	42a3      	cmp	r3, r4
 8012672:	dd02      	ble.n	801267a <_ZN8touchgfx7LCD1bpp9bwRLEdata8skipNextEl+0x12>
 8012674:	1b1b      	subs	r3, r3, r4
 8012676:	60eb      	str	r3, [r5, #12]
 8012678:	bd38      	pop	{r3, r4, r5, pc}
 801267a:	4628      	mov	r0, r5
 801267c:	1ae4      	subs	r4, r4, r3
 801267e:	f7ff ffd3 	bl	8012628 <_ZN8touchgfx7LCD1bpp9bwRLEdata13getNextLengthEv>
 8012682:	e7f4      	b.n	801266e <_ZN8touchgfx7LCD1bpp9bwRLEdata8skipNextEl+0x6>

08012684 <_ZN8touchgfx8fillBitsEPhssslh>:
 8012684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012686:	2608      	movs	r6, #8
 8012688:	fb91 f6f6 	sdiv	r6, r1, r6
 801268c:	f011 0107 	ands.w	r1, r1, #7
 8012690:	fb02 6303 	mla	r3, r2, r3, r6
 8012694:	9c05      	ldr	r4, [sp, #20]
 8012696:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801269a:	eb00 0603 	add.w	r6, r0, r3
 801269e:	d01b      	beq.n	80126d8 <_ZN8touchgfx8fillBitsEPhssslh+0x54>
 80126a0:	f1c1 0108 	rsb	r1, r1, #8
 80126a4:	b2c9      	uxtb	r1, r1
 80126a6:	42a1      	cmp	r1, r4
 80126a8:	f04f 0701 	mov.w	r7, #1
 80126ac:	fa07 f201 	lsl.w	r2, r7, r1
 80126b0:	bfc2      	ittt	gt
 80126b2:	1b09      	subgt	r1, r1, r4
 80126b4:	f001 0107 	andgt.w	r1, r1, #7
 80126b8:	fa07 f101 	lslgt.w	r1, r7, r1
 80126bc:	f102 32ff 	add.w	r2, r2, #4294967295
 80126c0:	bfc8      	it	gt
 80126c2:	4249      	neggt	r1, r1
 80126c4:	b2d2      	uxtb	r2, r2
 80126c6:	bfca      	itet	gt
 80126c8:	400a      	andgt	r2, r1
 80126ca:	1a64      	suble	r4, r4, r1
 80126cc:	2400      	movgt	r4, #0
 80126ce:	5cc1      	ldrb	r1, [r0, r3]
 80126d0:	b145      	cbz	r5, 80126e4 <_ZN8touchgfx8fillBitsEPhssslh+0x60>
 80126d2:	430a      	orrs	r2, r1
 80126d4:	54c2      	strb	r2, [r0, r3]
 80126d6:	3601      	adds	r6, #1
 80126d8:	2c07      	cmp	r4, #7
 80126da:	dd06      	ble.n	80126ea <_ZN8touchgfx8fillBitsEPhssslh+0x66>
 80126dc:	f806 5b01 	strb.w	r5, [r6], #1
 80126e0:	3c08      	subs	r4, #8
 80126e2:	e7f9      	b.n	80126d8 <_ZN8touchgfx8fillBitsEPhssslh+0x54>
 80126e4:	ea21 0202 	bic.w	r2, r1, r2
 80126e8:	e7f4      	b.n	80126d4 <_ZN8touchgfx8fillBitsEPhssslh+0x50>
 80126ea:	2c00      	cmp	r4, #0
 80126ec:	dd0a      	ble.n	8012704 <_ZN8touchgfx8fillBitsEPhssslh+0x80>
 80126ee:	2101      	movs	r1, #1
 80126f0:	40a1      	lsls	r1, r4
 80126f2:	1e4b      	subs	r3, r1, #1
 80126f4:	f1c4 0108 	rsb	r1, r4, #8
 80126f8:	fa03 f101 	lsl.w	r1, r3, r1
 80126fc:	7834      	ldrb	r4, [r6, #0]
 80126fe:	b115      	cbz	r5, 8012706 <_ZN8touchgfx8fillBitsEPhssslh+0x82>
 8012700:	4321      	orrs	r1, r4
 8012702:	7031      	strb	r1, [r6, #0]
 8012704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012706:	ea24 0101 	bic.w	r1, r4, r1
 801270a:	e7fa      	b.n	8012702 <_ZN8touchgfx8fillBitsEPhssslh+0x7e>

0801270c <_ZN8touchgfx7LCD1bpp11blitCopyRLEEPKtRKNS_4RectES5_h>:
 801270c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012710:	b08f      	sub	sp, #60	@ 0x3c
 8012712:	4617      	mov	r7, r2
 8012714:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 8012718:	4606      	mov	r6, r0
 801271a:	460d      	mov	r5, r1
 801271c:	2a00      	cmp	r2, #0
 801271e:	f000 8089 	beq.w	8012834 <_ZN8touchgfx7LCD1bpp11blitCopyRLEEPKtRKNS_4RectES5_h+0x128>
 8012722:	6838      	ldr	r0, [r7, #0]
 8012724:	6879      	ldr	r1, [r7, #4]
 8012726:	ac06      	add	r4, sp, #24
 8012728:	c403      	stmia	r4!, {r0, r1}
 801272a:	6818      	ldr	r0, [r3, #0]
 801272c:	6859      	ldr	r1, [r3, #4]
 801272e:	ac08      	add	r4, sp, #32
 8012730:	c403      	stmia	r4!, {r0, r1}
 8012732:	a806      	add	r0, sp, #24
 8012734:	f7fc fbc8 	bl	800eec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012738:	4639      	mov	r1, r7
 801273a:	a808      	add	r0, sp, #32
 801273c:	f7fc fbec 	bl	800ef18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012740:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8012744:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8012748:	4c3c      	ldr	r4, [pc, #240]	@ (801283c <_ZN8touchgfx7LCD1bpp11blitCopyRLEEPKtRKNS_4RectES5_h+0x130>)
 801274a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801274e:	6820      	ldr	r0, [r4, #0]
 8012750:	4413      	add	r3, r2
 8012752:	b21b      	sxth	r3, r3
 8012754:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8012758:	9302      	str	r3, [sp, #8]
 801275a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 801275e:	4413      	add	r3, r2
 8012760:	b29b      	uxth	r3, r3
 8012762:	9303      	str	r3, [sp, #12]
 8012764:	6803      	ldr	r3, [r0, #0]
 8012766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012768:	4798      	blx	r3
 801276a:	6833      	ldr	r3, [r6, #0]
 801276c:	4682      	mov	sl, r0
 801276e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012770:	4630      	mov	r0, r6
 8012772:	4798      	blx	r3
 8012774:	2300      	movs	r3, #0
 8012776:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801277a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801277e:	2201      	movs	r2, #1
 8012780:	930d      	str	r3, [sp, #52]	@ 0x34
 8012782:	23ff      	movs	r3, #255	@ 0xff
 8012784:	9404      	str	r4, [sp, #16]
 8012786:	fa0f fb80 	sxth.w	fp, r0
 801278a:	950a      	str	r5, [sp, #40]	@ 0x28
 801278c:	f88d 202f 	strb.w	r2, [sp, #47]	@ 0x2f
 8012790:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
 8012794:	ac0a      	add	r4, sp, #40	@ 0x28
 8012796:	b165      	cbz	r5, 80127b2 <_ZN8touchgfx7LCD1bpp11blitCopyRLEEPKtRKNS_4RectES5_h+0xa6>
 8012798:	4620      	mov	r0, r4
 801279a:	f7ff ff35 	bl	8012608 <_ZN8touchgfx7LCD1bpp9bwRLEdata15getNextHalfByteEv>
 801279e:	f88d 002c 	strb.w	r0, [sp, #44]	@ 0x2c
 80127a2:	4620      	mov	r0, r4
 80127a4:	f7ff ff30 	bl	8012608 <_ZN8touchgfx7LCD1bpp9bwRLEdata15getNextHalfByteEv>
 80127a8:	f88d 002d 	strb.w	r0, [sp, #45]	@ 0x2d
 80127ac:	4620      	mov	r0, r4
 80127ae:	f7ff ff3b 	bl	8012628 <_ZN8touchgfx7LCD1bpp9bwRLEdata13getNextLengthEv>
 80127b2:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80127b6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 80127ba:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80127be:	4620      	mov	r0, r4
 80127c0:	fb11 3102 	smlabb	r1, r1, r2, r3
 80127c4:	f7ff ff50 	bl	8012668 <_ZN8touchgfx7LCD1bpp9bwRLEdata8skipNextEl>
 80127c8:	2700      	movs	r7, #0
 80127ca:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	@ 0x26
 80127ce:	42bb      	cmp	r3, r7
 80127d0:	dd2b      	ble.n	801282a <_ZN8touchgfx7LCD1bpp11blitCopyRLEEPKtRKNS_4RectES5_h+0x11e>
 80127d2:	e9dd 6302 	ldrd	r6, r3, [sp, #8]
 80127d6:	443b      	add	r3, r7
 80127d8:	b21b      	sxth	r3, r3
 80127da:	46c8      	mov	r8, r9
 80127dc:	9305      	str	r3, [sp, #20]
 80127de:	f1b8 0f00 	cmp.w	r8, #0
 80127e2:	d019      	beq.n	8012818 <_ZN8touchgfx7LCD1bpp11blitCopyRLEEPKtRKNS_4RectES5_h+0x10c>
 80127e4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80127e6:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 80127ea:	9a05      	ldr	r2, [sp, #20]
 80127ec:	4545      	cmp	r5, r8
 80127ee:	bfa8      	it	ge
 80127f0:	4645      	movge	r5, r8
 80127f2:	e9cd 5300 	strd	r5, r3, [sp]
 80127f6:	4631      	mov	r1, r6
 80127f8:	465b      	mov	r3, fp
 80127fa:	4650      	mov	r0, sl
 80127fc:	f7ff ff42 	bl	8012684 <_ZN8touchgfx8fillBitsEPhssslh>
 8012800:	b2ab      	uxth	r3, r5
 8012802:	441e      	add	r6, r3
 8012804:	eba8 0803 	sub.w	r8, r8, r3
 8012808:	4629      	mov	r1, r5
 801280a:	4620      	mov	r0, r4
 801280c:	b236      	sxth	r6, r6
 801280e:	fa0f f888 	sxth.w	r8, r8
 8012812:	f7ff ff29 	bl	8012668 <_ZN8touchgfx7LCD1bpp9bwRLEdata8skipNextEl>
 8012816:	e7e2      	b.n	80127de <_ZN8touchgfx7LCD1bpp11blitCopyRLEEPKtRKNS_4RectES5_h+0xd2>
 8012818:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 801281c:	4620      	mov	r0, r4
 801281e:	eba1 0109 	sub.w	r1, r1, r9
 8012822:	f7ff ff21 	bl	8012668 <_ZN8touchgfx7LCD1bpp9bwRLEdata8skipNextEl>
 8012826:	3701      	adds	r7, #1
 8012828:	e7cf      	b.n	80127ca <_ZN8touchgfx7LCD1bpp11blitCopyRLEEPKtRKNS_4RectES5_h+0xbe>
 801282a:	9b04      	ldr	r3, [sp, #16]
 801282c:	6818      	ldr	r0, [r3, #0]
 801282e:	6803      	ldr	r3, [r0, #0]
 8012830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012832:	4798      	blx	r3
 8012834:	b00f      	add	sp, #60	@ 0x3c
 8012836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801283a:	bf00      	nop
 801283c:	20004354 	.word	0x20004354

08012840 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss>:
 8012840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012844:	b089      	sub	sp, #36	@ 0x24
 8012846:	461d      	mov	r5, r3
 8012848:	9202      	str	r2, [sp, #8]
 801284a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	@ 0x4c
 801284e:	f89d 2050 	ldrb.w	r2, [sp, #80]	@ 0x50
 8012852:	9303      	str	r3, [sp, #12]
 8012854:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	@ 0x58
 8012858:	f9bd 4054 	ldrsh.w	r4, [sp, #84]	@ 0x54
 801285c:	9301      	str	r3, [sp, #4]
 801285e:	468a      	mov	sl, r1
 8012860:	2a00      	cmp	r2, #0
 8012862:	d054      	beq.n	801290e <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0xce>
 8012864:	f1c2 0208 	rsb	r2, r2, #8
 8012868:	b2d2      	uxtb	r2, r2
 801286a:	42a2      	cmp	r2, r4
 801286c:	bfcc      	ite	gt
 801286e:	b2e1      	uxtbgt	r1, r4
 8012870:	4611      	movle	r1, r2
 8012872:	1a52      	subs	r2, r2, r1
 8012874:	b2d3      	uxtb	r3, r2
 8012876:	9304      	str	r3, [sp, #16]
 8012878:	2301      	movs	r3, #1
 801287a:	408b      	lsls	r3, r1
 801287c:	3b01      	subs	r3, #1
 801287e:	9a04      	ldr	r2, [sp, #16]
 8012880:	f1c5 0008 	rsb	r0, r5, #8
 8012884:	b2db      	uxtb	r3, r3
 8012886:	b2c0      	uxtb	r0, r0
 8012888:	4093      	lsls	r3, r2
 801288a:	b2de      	uxtb	r6, r3
 801288c:	eba1 0800 	sub.w	r8, r1, r0
 8012890:	9605      	str	r6, [sp, #20]
 8012892:	f10a 0901 	add.w	r9, sl, #1
 8012896:	f1c8 0708 	rsb	r7, r8, #8
 801289a:	43db      	mvns	r3, r3
 801289c:	9e01      	ldr	r6, [sp, #4]
 801289e:	9706      	str	r7, [sp, #24]
 80128a0:	46cc      	mov	ip, r9
 80128a2:	f04f 0e00 	mov.w	lr, #0
 80128a6:	eba0 0b01 	sub.w	fp, r0, r1
 80128aa:	9307      	str	r3, [sp, #28]
 80128ac:	2e00      	cmp	r6, #0
 80128ae:	dd23      	ble.n	80128f8 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0xb8>
 80128b0:	4281      	cmp	r1, r0
 80128b2:	f81c 3c01 	ldrb.w	r3, [ip, #-1]
 80128b6:	d216      	bcs.n	80128e6 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0xa6>
 80128b8:	fa43 f30b 	asr.w	r3, r3, fp
 80128bc:	b2db      	uxtb	r3, r3
 80128be:	9a04      	ldr	r2, [sp, #16]
 80128c0:	4093      	lsls	r3, r2
 80128c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80128c4:	f812 700e 	ldrb.w	r7, [r2, lr]
 80128c8:	9a07      	ldr	r2, [sp, #28]
 80128ca:	4017      	ands	r7, r2
 80128cc:	9a05      	ldr	r2, [sp, #20]
 80128ce:	4013      	ands	r3, r2
 80128d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80128d2:	433b      	orrs	r3, r7
 80128d4:	f802 300e 	strb.w	r3, [r2, lr]
 80128d8:	9b03      	ldr	r3, [sp, #12]
 80128da:	449e      	add	lr, r3
 80128dc:	9b02      	ldr	r3, [sp, #8]
 80128de:	3e01      	subs	r6, #1
 80128e0:	b236      	sxth	r6, r6
 80128e2:	449c      	add	ip, r3
 80128e4:	e7e2      	b.n	80128ac <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x6c>
 80128e6:	d9ea      	bls.n	80128be <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x7e>
 80128e8:	f89c 7000 	ldrb.w	r7, [ip]
 80128ec:	9a06      	ldr	r2, [sp, #24]
 80128ee:	fa03 f308 	lsl.w	r3, r3, r8
 80128f2:	4117      	asrs	r7, r2
 80128f4:	433b      	orrs	r3, r7
 80128f6:	e7e1      	b.n	80128bc <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x7c>
 80128f8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80128fa:	440d      	add	r5, r1
 80128fc:	3301      	adds	r3, #1
 80128fe:	1a64      	subs	r4, r4, r1
 8012900:	f005 0507 	and.w	r5, r5, #7
 8012904:	9312      	str	r3, [sp, #72]	@ 0x48
 8012906:	b224      	sxth	r4, r4
 8012908:	4281      	cmp	r1, r0
 801290a:	bf28      	it	cs
 801290c:	46ca      	movcs	sl, r9
 801290e:	2c07      	cmp	r4, #7
 8012910:	dd56      	ble.n	80129c0 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x180>
 8012912:	10e6      	asrs	r6, r4, #3
 8012914:	b395      	cbz	r5, 801297c <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x13c>
 8012916:	fa1f fb84 	uxth.w	fp, r4
 801291a:	9902      	ldr	r1, [sp, #8]
 801291c:	9a01      	ldr	r2, [sp, #4]
 801291e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8012920:	f1ab 0308 	sub.w	r3, fp, #8
 8012924:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8012928:	1b89      	subs	r1, r1, r6
 801292a:	f103 0c01 	add.w	ip, r3, #1
 801292e:	9104      	str	r1, [sp, #16]
 8012930:	ebc3 3343 	rsb	r3, r3, r3, lsl #13
 8012934:	9903      	ldr	r1, [sp, #12]
 8012936:	eb0b 0bc3 	add.w	fp, fp, r3, lsl #3
 801293a:	f1ab 0b08 	sub.w	fp, fp, #8
 801293e:	1b8f      	subs	r7, r1, r6
 8012940:	fa0f fb8b 	sxth.w	fp, fp
 8012944:	4653      	mov	r3, sl
 8012946:	f1c5 0908 	rsb	r9, r5, #8
 801294a:	4467      	add	r7, ip
 801294c:	2a00      	cmp	r2, #0
 801294e:	dd31      	ble.n	80129b4 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x174>
 8012950:	eb03 080c 	add.w	r8, r3, ip
 8012954:	4686      	mov	lr, r0
 8012956:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801295a:	f813 4c01 	ldrb.w	r4, [r3, #-1]
 801295e:	fa41 f109 	asr.w	r1, r1, r9
 8012962:	40ac      	lsls	r4, r5
 8012964:	4321      	orrs	r1, r4
 8012966:	4543      	cmp	r3, r8
 8012968:	f80e 1b01 	strb.w	r1, [lr], #1
 801296c:	d1f3      	bne.n	8012956 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x116>
 801296e:	9904      	ldr	r1, [sp, #16]
 8012970:	3a01      	subs	r2, #1
 8012972:	440b      	add	r3, r1
 8012974:	4438      	add	r0, r7
 8012976:	b212      	sxth	r2, r2
 8012978:	465c      	mov	r4, fp
 801297a:	e7e7      	b.n	801294c <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x10c>
 801297c:	9b01      	ldr	r3, [sp, #4]
 801297e:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 8012982:	f8df b09c 	ldr.w	fp, [pc, #156]	@ 8012a20 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x1e0>
 8012986:	9304      	str	r3, [sp, #16]
 8012988:	46d1      	mov	r9, sl
 801298a:	9b04      	ldr	r3, [sp, #16]
 801298c:	2b00      	cmp	r3, #0
 801298e:	dd11      	ble.n	80129b4 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x174>
 8012990:	f8db 0000 	ldr.w	r0, [fp]
 8012994:	6803      	ldr	r3, [r0, #0]
 8012996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012998:	464a      	mov	r2, r9
 801299a:	461f      	mov	r7, r3
 801299c:	4641      	mov	r1, r8
 801299e:	4633      	mov	r3, r6
 80129a0:	47b8      	blx	r7
 80129a2:	9b02      	ldr	r3, [sp, #8]
 80129a4:	4499      	add	r9, r3
 80129a6:	9b03      	ldr	r3, [sp, #12]
 80129a8:	4498      	add	r8, r3
 80129aa:	9b04      	ldr	r3, [sp, #16]
 80129ac:	1e5f      	subs	r7, r3, #1
 80129ae:	b23b      	sxth	r3, r7
 80129b0:	9304      	str	r3, [sp, #16]
 80129b2:	e7ea      	b.n	801298a <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x14a>
 80129b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80129b6:	4433      	add	r3, r6
 80129b8:	44b2      	add	sl, r6
 80129ba:	9312      	str	r3, [sp, #72]	@ 0x48
 80129bc:	f004 0407 	and.w	r4, r4, #7
 80129c0:	2c00      	cmp	r4, #0
 80129c2:	dd29      	ble.n	8012a18 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x1d8>
 80129c4:	2301      	movs	r3, #1
 80129c6:	40a3      	lsls	r3, r4
 80129c8:	3b01      	subs	r3, #1
 80129ca:	f1c4 0408 	rsb	r4, r4, #8
 80129ce:	fa03 f404 	lsl.w	r4, r3, r4
 80129d2:	b2e1      	uxtb	r1, r4
 80129d4:	43e4      	mvns	r4, r4
 80129d6:	b264      	sxtb	r4, r4
 80129d8:	f10a 0001 	add.w	r0, sl, #1
 80129dc:	2600      	movs	r6, #0
 80129de:	f1c5 0708 	rsb	r7, r5, #8
 80129e2:	9b01      	ldr	r3, [sp, #4]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	dd17      	ble.n	8012a18 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x1d8>
 80129e8:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80129ec:	b125      	cbz	r5, 80129f8 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x1b8>
 80129ee:	7802      	ldrb	r2, [r0, #0]
 80129f0:	40ab      	lsls	r3, r5
 80129f2:	413a      	asrs	r2, r7
 80129f4:	4313      	orrs	r3, r2
 80129f6:	b2db      	uxtb	r3, r3
 80129f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80129fa:	5d92      	ldrb	r2, [r2, r6]
 80129fc:	400b      	ands	r3, r1
 80129fe:	4022      	ands	r2, r4
 8012a00:	4313      	orrs	r3, r2
 8012a02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8012a04:	5593      	strb	r3, [r2, r6]
 8012a06:	9b01      	ldr	r3, [sp, #4]
 8012a08:	3b01      	subs	r3, #1
 8012a0a:	b21b      	sxth	r3, r3
 8012a0c:	9301      	str	r3, [sp, #4]
 8012a0e:	9b03      	ldr	r3, [sp, #12]
 8012a10:	441e      	add	r6, r3
 8012a12:	9b02      	ldr	r3, [sp, #8]
 8012a14:	4418      	add	r0, r3
 8012a16:	e7e4      	b.n	80129e2 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss+0x1a2>
 8012a18:	b009      	add	sp, #36	@ 0x24
 8012a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a1e:	bf00      	nop
 8012a20:	20004354 	.word	0x20004354

08012a24 <_ZN8touchgfx7LCD1bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8012a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a28:	b08f      	sub	sp, #60	@ 0x3c
 8012a2a:	4615      	mov	r5, r2
 8012a2c:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 8012a30:	4607      	mov	r7, r0
 8012a32:	468b      	mov	fp, r1
 8012a34:	2a00      	cmp	r2, #0
 8012a36:	d061      	beq.n	8012afc <_ZN8touchgfx7LCD1bpp8blitCopyEPKtRKNS_4RectES5_hb+0xd8>
 8012a38:	6828      	ldr	r0, [r5, #0]
 8012a3a:	6869      	ldr	r1, [r5, #4]
 8012a3c:	f8df a0c4 	ldr.w	sl, [pc, #196]	@ 8012b04 <_ZN8touchgfx7LCD1bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe0>
 8012a40:	ac0a      	add	r4, sp, #40	@ 0x28
 8012a42:	c403      	stmia	r4!, {r0, r1}
 8012a44:	6818      	ldr	r0, [r3, #0]
 8012a46:	6859      	ldr	r1, [r3, #4]
 8012a48:	ac0c      	add	r4, sp, #48	@ 0x30
 8012a4a:	c403      	stmia	r4!, {r0, r1}
 8012a4c:	a80a      	add	r0, sp, #40	@ 0x28
 8012a4e:	f7fc fa3b 	bl	800eec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012a52:	4629      	mov	r1, r5
 8012a54:	a80c      	add	r0, sp, #48	@ 0x30
 8012a56:	f7fc fa5f 	bl	800ef18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012a5a:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8012a5e:	f8bd 002a 	ldrh.w	r0, [sp, #42]	@ 0x2a
 8012a62:	9109      	str	r1, [sp, #36]	@ 0x24
 8012a64:	4408      	add	r0, r1
 8012a66:	b203      	sxth	r3, r0
 8012a68:	f8da 0000 	ldr.w	r0, [sl]
 8012a6c:	9307      	str	r3, [sp, #28]
 8012a6e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8012a72:	9308      	str	r3, [sp, #32]
 8012a74:	6803      	ldr	r3, [r0, #0]
 8012a76:	f9bd 5030 	ldrsh.w	r5, [sp, #48]	@ 0x30
 8012a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a7c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	@ 0x28
 8012a80:	4798      	blx	r3
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8012a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a8a:	4680      	mov	r8, r0
 8012a8c:	4638      	mov	r0, r7
 8012a8e:	4798      	blx	r3
 8012a90:	442c      	add	r4, r5
 8012a92:	426a      	negs	r2, r5
 8012a94:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012a96:	b224      	sxth	r4, r4
 8012a98:	f002 0207 	and.w	r2, r2, #7
 8012a9c:	f04f 0908 	mov.w	r9, #8
 8012aa0:	f005 0307 	and.w	r3, r5, #7
 8012aa4:	f106 0607 	add.w	r6, r6, #7
 8012aa8:	bf58      	it	pl
 8012aaa:	4253      	negpl	r3, r2
 8012aac:	fb96 f6f9 	sdiv	r6, r6, r9
 8012ab0:	f9bd 2036 	ldrsh.w	r2, [sp, #54]	@ 0x36
 8012ab4:	fb95 f5f9 	sdiv	r5, r5, r9
 8012ab8:	fb06 5101 	mla	r1, r6, r1, r5
 8012abc:	4265      	negs	r5, r4
 8012abe:	9204      	str	r2, [sp, #16]
 8012ac0:	f005 0507 	and.w	r5, r5, #7
 8012ac4:	9a08      	ldr	r2, [sp, #32]
 8012ac6:	9203      	str	r2, [sp, #12]
 8012ac8:	f004 0207 	and.w	r2, r4, #7
 8012acc:	bf58      	it	pl
 8012ace:	426a      	negpl	r2, r5
 8012ad0:	b200      	sxth	r0, r0
 8012ad2:	b2d2      	uxtb	r2, r2
 8012ad4:	e9cd 0201 	strd	r0, r2, [sp, #4]
 8012ad8:	fb94 f4f9 	sdiv	r4, r4, r9
 8012adc:	9a07      	ldr	r2, [sp, #28]
 8012ade:	fb02 4400 	mla	r4, r2, r0, r4
 8012ae2:	4444      	add	r4, r8
 8012ae4:	b2db      	uxtb	r3, r3
 8012ae6:	4638      	mov	r0, r7
 8012ae8:	9400      	str	r4, [sp, #0]
 8012aea:	b232      	sxth	r2, r6
 8012aec:	4459      	add	r1, fp
 8012aee:	f7ff fea7 	bl	8012840 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss>
 8012af2:	f8da 0000 	ldr.w	r0, [sl]
 8012af6:	6803      	ldr	r3, [r0, #0]
 8012af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012afa:	4798      	blx	r3
 8012afc:	b00f      	add	sp, #60	@ 0x3c
 8012afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b02:	bf00      	nop
 8012b04:	20004354 	.word	0x20004354

08012b08 <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8012b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b0c:	b095      	sub	sp, #84	@ 0x54
 8012b0e:	4699      	mov	r9, r3
 8012b10:	4615      	mov	r5, r2
 8012b12:	f9bd 807c 	ldrsh.w	r8, [sp, #124]	@ 0x7c
 8012b16:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012b1a:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 8012b1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012b22:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8012b26:	4604      	mov	r4, r0
 8012b28:	468b      	mov	fp, r1
 8012b2a:	a80e      	add	r0, sp, #56	@ 0x38
 8012b2c:	4649      	mov	r1, r9
 8012b2e:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8012b32:	f8ad 803c 	strh.w	r8, [sp, #60]	@ 0x3c
 8012b36:	f8ad 603e 	strh.w	r6, [sp, #62]	@ 0x3e
 8012b3a:	f7f9 f9fd 	bl	800bf38 <_ZN8touchgfx4RectaNERKS0_>
 8012b3e:	4629      	mov	r1, r5
 8012b40:	a80e      	add	r0, sp, #56	@ 0x38
 8012b42:	f7f9 f9f9 	bl	800bf38 <_ZN8touchgfx4RectaNERKS0_>
 8012b46:	4b65      	ldr	r3, [pc, #404]	@ (8012cdc <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d4>)
 8012b48:	881d      	ldrh	r5, [r3, #0]
 8012b4a:	4b65      	ldr	r3, [pc, #404]	@ (8012ce0 <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d8>)
 8012b4c:	8819      	ldrh	r1, [r3, #0]
 8012b4e:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	@ 0x38
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	b22a      	sxth	r2, r5
 8012b56:	b208      	sxth	r0, r1
 8012b58:	da07      	bge.n	8012b6a <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 8012b5a:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 8012b5e:	443b      	add	r3, r7
 8012b60:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
 8012b64:	2300      	movs	r3, #0
 8012b66:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8012b6a:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	@ 0x38
 8012b6e:	f9bd 703c 	ldrsh.w	r7, [sp, #60]	@ 0x3c
 8012b72:	1ad2      	subs	r2, r2, r3
 8012b74:	4297      	cmp	r7, r2
 8012b76:	bfc4      	itt	gt
 8012b78:	1aea      	subgt	r2, r5, r3
 8012b7a:	f8ad 203c 	strhgt.w	r2, [sp, #60]	@ 0x3c
 8012b7e:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	@ 0x3a
 8012b82:	2a00      	cmp	r2, #0
 8012b84:	da07      	bge.n	8012b96 <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 8012b86:	f8bd 703e 	ldrh.w	r7, [sp, #62]	@ 0x3e
 8012b8a:	443a      	add	r2, r7
 8012b8c:	f8ad 203e 	strh.w	r2, [sp, #62]	@ 0x3e
 8012b90:	2200      	movs	r2, #0
 8012b92:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 8012b96:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	@ 0x3a
 8012b9a:	f9bd 703e 	ldrsh.w	r7, [sp, #62]	@ 0x3e
 8012b9e:	1a80      	subs	r0, r0, r2
 8012ba0:	4287      	cmp	r7, r0
 8012ba2:	bfc4      	itt	gt
 8012ba4:	1a88      	subgt	r0, r1, r2
 8012ba6:	f8ad 003e 	strhgt.w	r0, [sp, #62]	@ 0x3e
 8012baa:	484e      	ldr	r0, [pc, #312]	@ (8012ce4 <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1dc>)
 8012bac:	f9bd 703c 	ldrsh.w	r7, [sp, #60]	@ 0x3c
 8012bb0:	7800      	ldrb	r0, [r0, #0]
 8012bb2:	2800      	cmp	r0, #0
 8012bb4:	d171      	bne.n	8012c9a <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x192>
 8012bb6:	42af      	cmp	r7, r5
 8012bb8:	bf14      	ite	ne
 8012bba:	2500      	movne	r5, #0
 8012bbc:	2501      	moveq	r5, #1
 8012bbe:	2f00      	cmp	r7, #0
 8012bc0:	dd6f      	ble.n	8012ca2 <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x19a>
 8012bc2:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 8012bc6:	f1ba 0f00 	cmp.w	sl, #0
 8012bca:	dd6a      	ble.n	8012ca2 <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x19a>
 8012bcc:	f8b9 1000 	ldrh.w	r1, [r9]
 8012bd0:	f8ad 804c 	strh.w	r8, [sp, #76]	@ 0x4c
 8012bd4:	1a5b      	subs	r3, r3, r1
 8012bd6:	b21b      	sxth	r3, r3
 8012bd8:	9307      	str	r3, [sp, #28]
 8012bda:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8012bde:	f8ad 604e 	strh.w	r6, [sp, #78]	@ 0x4e
 8012be2:	1ad2      	subs	r2, r2, r3
 8012be4:	b213      	sxth	r3, r2
 8012be6:	9308      	str	r3, [sp, #32]
 8012be8:	9b07      	ldr	r3, [sp, #28]
 8012bea:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012bee:	9b08      	ldr	r3, [sp, #32]
 8012bf0:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8012bf4:	a912      	add	r1, sp, #72	@ 0x48
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	a810      	add	r0, sp, #64	@ 0x40
 8012bfa:	9312      	str	r3, [sp, #72]	@ 0x48
 8012bfc:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 8012c00:	f8ad a046 	strh.w	sl, [sp, #70]	@ 0x46
 8012c04:	f7fc f988 	bl	800ef18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012c08:	a80e      	add	r0, sp, #56	@ 0x38
 8012c0a:	f7fc f95d 	bl	800eec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012c0e:	a812      	add	r0, sp, #72	@ 0x48
 8012c10:	f7fc f95a 	bl	800eec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012c14:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	@ 0x4c
 8012c18:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c1a:	4b33      	ldr	r3, [pc, #204]	@ (8012ce8 <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e0>)
 8012c1c:	881b      	ldrh	r3, [r3, #0]
 8012c1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c22:	2608      	movs	r6, #8
 8012c24:	3307      	adds	r3, #7
 8012c26:	fb93 f3f6 	sdiv	r3, r3, r6
 8012c2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8012c2c:	f8db 3000 	ldr.w	r3, [fp]
 8012c30:	4658      	mov	r0, fp
 8012c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012c34:	4798      	blx	r3
 8012c36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012c38:	f9bd 8042 	ldrsh.w	r8, [sp, #66]	@ 0x42
 8012c3c:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	@ 0x40
 8012c40:	fb99 f1f6 	sdiv	r1, r9, r6
 8012c44:	fb03 1808 	mla	r8, r3, r8, r1
 8012c48:	4b28      	ldr	r3, [pc, #160]	@ (8012cec <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e4>)
 8012c4a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8012c4c:	900d      	str	r0, [sp, #52]	@ 0x34
 8012c4e:	6818      	ldr	r0, [r3, #0]
 8012c50:	930c      	str	r3, [sp, #48]	@ 0x30
 8012c52:	4488      	add	r8, r1
 8012c54:	6801      	ldr	r1, [r0, #0]
 8012c56:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8012c58:	4788      	blx	r1
 8012c5a:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8012c5e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012c60:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 8012c64:	fb9c f6f6 	sdiv	r6, ip, r6
 8012c68:	fb02 6101 	mla	r1, r2, r1, r6
 8012c6c:	4401      	add	r1, r0
 8012c6e:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	@ 0x46
 8012c72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012c74:	b9f5      	cbnz	r5, 8012cb4 <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8012c76:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 8012c7a:	9303      	str	r3, [sp, #12]
 8012c7c:	f009 0307 	and.w	r3, r9, #7
 8012c80:	9302      	str	r3, [sp, #8]
 8012c82:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8012c86:	9604      	str	r6, [sp, #16]
 8012c88:	e9cd 8300 	strd	r8, r3, [sp]
 8012c8c:	b212      	sxth	r2, r2
 8012c8e:	f00c 0307 	and.w	r3, ip, #7
 8012c92:	4658      	mov	r0, fp
 8012c94:	f7ff fdd4 	bl	8012840 <_ZNK8touchgfx7LCD1bpp8copyRectEPKhshPhshss>
 8012c98:	e018      	b.n	8012ccc <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1c4>
 8012c9a:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8012c9e:	428d      	cmp	r5, r1
 8012ca0:	e78a      	b.n	8012bb8 <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb0>
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	8023      	strh	r3, [r4, #0]
 8012ca6:	8063      	strh	r3, [r4, #2]
 8012ca8:	80a3      	strh	r3, [r4, #4]
 8012caa:	80e3      	strh	r3, [r4, #6]
 8012cac:	4620      	mov	r0, r4
 8012cae:	b015      	add	sp, #84	@ 0x54
 8012cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cb4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012cb6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012cb8:	42a8      	cmp	r0, r5
 8012cba:	d1dc      	bne.n	8012c76 <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x16e>
 8012cbc:	6818      	ldr	r0, [r3, #0]
 8012cbe:	6803      	ldr	r3, [r0, #0]
 8012cc0:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 8012cc2:	fb02 f306 	mul.w	r3, r2, r6
 8012cc6:	460a      	mov	r2, r1
 8012cc8:	4641      	mov	r1, r8
 8012cca:	47a8      	blx	r5
 8012ccc:	9b07      	ldr	r3, [sp, #28]
 8012cce:	8023      	strh	r3, [r4, #0]
 8012cd0:	9b08      	ldr	r3, [sp, #32]
 8012cd2:	8063      	strh	r3, [r4, #2]
 8012cd4:	80a7      	strh	r7, [r4, #4]
 8012cd6:	f8a4 a006 	strh.w	sl, [r4, #6]
 8012cda:	e7e7      	b.n	8012cac <_ZN8touchgfx7LCD1bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 8012cdc:	20004346 	.word	0x20004346
 8012ce0:	20004348 	.word	0x20004348
 8012ce4:	2000434a 	.word	0x2000434a
 8012ce8:	2000434c 	.word	0x2000434c
 8012cec:	20004354 	.word	0x20004354

08012cf0 <_ZN8touchgfx7LCD1bpp9nextPixelEbNS_12TextRotationE>:
 8012cf0:	b198      	cbz	r0, 8012d1a <_ZN8touchgfx7LCD1bpp9nextPixelEbNS_12TextRotationE+0x2a>
 8012cf2:	2903      	cmp	r1, #3
 8012cf4:	d81e      	bhi.n	8012d34 <_ZN8touchgfx7LCD1bpp9nextPixelEbNS_12TextRotationE+0x44>
 8012cf6:	e8df f001 	tbb	[pc, r1]
 8012cfa:	1f02      	.short	0x1f02
 8012cfc:	210a      	.short	0x210a
 8012cfe:	4b11      	ldr	r3, [pc, #68]	@ (8012d44 <_ZN8touchgfx7LCD1bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8012d00:	8818      	ldrh	r0, [r3, #0]
 8012d02:	3007      	adds	r0, #7
 8012d04:	10c3      	asrs	r3, r0, #3
 8012d06:	f06f 0007 	mvn.w	r0, #7
 8012d0a:	4358      	muls	r0, r3
 8012d0c:	4770      	bx	lr
 8012d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8012d44 <_ZN8touchgfx7LCD1bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8012d10:	8818      	ldrh	r0, [r3, #0]
 8012d12:	3007      	adds	r0, #7
 8012d14:	10c0      	asrs	r0, r0, #3
 8012d16:	00c0      	lsls	r0, r0, #3
 8012d18:	4770      	bx	lr
 8012d1a:	2903      	cmp	r1, #3
 8012d1c:	d80a      	bhi.n	8012d34 <_ZN8touchgfx7LCD1bpp9nextPixelEbNS_12TextRotationE+0x44>
 8012d1e:	a301      	add	r3, pc, #4	@ (adr r3, 8012d24 <_ZN8touchgfx7LCD1bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8012d20:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8012d24:	08012d39 	.word	0x08012d39
 8012d28:	08012d0f 	.word	0x08012d0f
 8012d2c:	08012d3d 	.word	0x08012d3d
 8012d30:	08012cff 	.word	0x08012cff
 8012d34:	2000      	movs	r0, #0
 8012d36:	4770      	bx	lr
 8012d38:	2001      	movs	r0, #1
 8012d3a:	4770      	bx	lr
 8012d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012d40:	4770      	bx	lr
 8012d42:	bf00      	nop
 8012d44:	2000434c 	.word	0x2000434c

08012d48 <_ZN8touchgfx7LCD1bpp8nextLineEbNS_12TextRotationE>:
 8012d48:	b198      	cbz	r0, 8012d72 <_ZN8touchgfx7LCD1bpp8nextLineEbNS_12TextRotationE+0x2a>
 8012d4a:	2903      	cmp	r1, #3
 8012d4c:	d81e      	bhi.n	8012d8c <_ZN8touchgfx7LCD1bpp8nextLineEbNS_12TextRotationE+0x44>
 8012d4e:	e8df f001 	tbb	[pc, r1]
 8012d52:	021f      	.short	0x021f
 8012d54:	0821      	.short	0x0821
 8012d56:	4b11      	ldr	r3, [pc, #68]	@ (8012d9c <_ZN8touchgfx7LCD1bpp8nextLineEbNS_12TextRotationE+0x54>)
 8012d58:	8818      	ldrh	r0, [r3, #0]
 8012d5a:	3007      	adds	r0, #7
 8012d5c:	10c0      	asrs	r0, r0, #3
 8012d5e:	00c0      	lsls	r0, r0, #3
 8012d60:	4770      	bx	lr
 8012d62:	4b0e      	ldr	r3, [pc, #56]	@ (8012d9c <_ZN8touchgfx7LCD1bpp8nextLineEbNS_12TextRotationE+0x54>)
 8012d64:	8818      	ldrh	r0, [r3, #0]
 8012d66:	3007      	adds	r0, #7
 8012d68:	10c3      	asrs	r3, r0, #3
 8012d6a:	f06f 0007 	mvn.w	r0, #7
 8012d6e:	4358      	muls	r0, r3
 8012d70:	4770      	bx	lr
 8012d72:	2903      	cmp	r1, #3
 8012d74:	d80a      	bhi.n	8012d8c <_ZN8touchgfx7LCD1bpp8nextLineEbNS_12TextRotationE+0x44>
 8012d76:	a301      	add	r3, pc, #4	@ (adr r3, 8012d7c <_ZN8touchgfx7LCD1bpp8nextLineEbNS_12TextRotationE+0x34>)
 8012d78:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8012d7c:	08012d57 	.word	0x08012d57
 8012d80:	08012d95 	.word	0x08012d95
 8012d84:	08012d63 	.word	0x08012d63
 8012d88:	08012d91 	.word	0x08012d91
 8012d8c:	2000      	movs	r0, #0
 8012d8e:	4770      	bx	lr
 8012d90:	2001      	movs	r0, #1
 8012d92:	4770      	bx	lr
 8012d94:	f04f 30ff 	mov.w	r0, #4294967295
 8012d98:	4770      	bx	lr
 8012d9a:	bf00      	nop
 8012d9c:	2000434c 	.word	0x2000434c

08012da0 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8012da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012da4:	b08f      	sub	sp, #60	@ 0x3c
 8012da6:	4682      	mov	sl, r0
 8012da8:	9101      	str	r1, [sp, #4]
 8012daa:	a90a      	add	r1, sp, #40	@ 0x28
 8012dac:	e881 000c 	stmia.w	r1, {r2, r3}
 8012db0:	e9dd 211c 	ldrd	r2, r1, [sp, #112]	@ 0x70
 8012db4:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8012db8:	9302      	str	r3, [sp, #8]
 8012dba:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 8012dbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8012dc0:	7b4b      	ldrb	r3, [r1, #13]
 8012dc2:	f891 c006 	ldrb.w	ip, [r1, #6]
 8012dc6:	f9bd b060 	ldrsh.w	fp, [sp, #96]	@ 0x60
 8012dca:	f8bd 4068 	ldrh.w	r4, [sp, #104]	@ 0x68
 8012dce:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8012dd2:	9f1e      	ldr	r7, [sp, #120]	@ 0x78
 8012dd4:	f89d 608c 	ldrb.w	r6, [sp, #140]	@ 0x8c
 8012dd8:	0158      	lsls	r0, r3, #5
 8012dda:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8012dde:	ea5c 0000 	orrs.w	r0, ip, r0
 8012de2:	9003      	str	r0, [sp, #12]
 8012de4:	f000 810e 	beq.w	8013004 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x264>
 8012de8:	011b      	lsls	r3, r3, #4
 8012dea:	79c8      	ldrb	r0, [r1, #7]
 8012dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012df0:	4303      	orrs	r3, r0
 8012df2:	9305      	str	r3, [sp, #20]
 8012df4:	f000 8106 	beq.w	8013004 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x264>
 8012df8:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8012dfc:	b29b      	uxth	r3, r3
 8012dfe:	2c00      	cmp	r4, #0
 8012e00:	f000 80de 	beq.w	8012fc0 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x220>
 8012e04:	1ae4      	subs	r4, r4, r3
 8012e06:	b2a4      	uxth	r4, r4
 8012e08:	0421      	lsls	r1, r4, #16
 8012e0a:	d504      	bpl.n	8012e16 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x76>
 8012e0c:	ebab 0404 	sub.w	r4, fp, r4
 8012e10:	fa0f fb84 	sxth.w	fp, r4
 8012e14:	2400      	movs	r4, #0
 8012e16:	f9b2 3000 	ldrsh.w	r3, [r2]
 8012e1a:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 8012e1e:	459b      	cmp	fp, r3
 8012e20:	b299      	uxth	r1, r3
 8012e22:	bfbe      	ittt	lt
 8012e24:	1864      	addlt	r4, r4, r1
 8012e26:	eba4 040b 	sublt.w	r4, r4, fp
 8012e2a:	469b      	movlt	fp, r3
 8012e2c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8012e30:	9308      	str	r3, [sp, #32]
 8012e32:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8012e36:	9306      	str	r3, [sp, #24]
 8012e38:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8012e3c:	9307      	str	r3, [sp, #28]
 8012e3e:	4b73      	ldr	r3, [pc, #460]	@ (801300c <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26c>)
 8012e40:	9104      	str	r1, [sp, #16]
 8012e42:	f893 9000 	ldrb.w	r9, [r3]
 8012e46:	f109 32ff 	add.w	r2, r9, #4294967295
 8012e4a:	bfb8      	it	lt
 8012e4c:	b2a4      	uxthlt	r4, r4
 8012e4e:	f1d2 0900 	rsbs	r9, r2, #0
 8012e52:	eb49 0902 	adc.w	r9, r9, r2
 8012e56:	4633      	mov	r3, r6
 8012e58:	9a02      	ldr	r2, [sp, #8]
 8012e5a:	4659      	mov	r1, fp
 8012e5c:	a80a      	add	r0, sp, #40	@ 0x28
 8012e5e:	f7fb fead 	bl	800ebbc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8012e62:	4633      	mov	r3, r6
 8012e64:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8012e68:	9a02      	ldr	r2, [sp, #8]
 8012e6a:	4659      	mov	r1, fp
 8012e6c:	a80a      	add	r0, sp, #40	@ 0x28
 8012e6e:	f7fb fec2 	bl	800ebf6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8012e72:	a90e      	add	r1, sp, #56	@ 0x38
 8012e74:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8012e78:	a80d      	add	r0, sp, #52	@ 0x34
 8012e7a:	f7fb ffe3 	bl	800ee44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8012e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e80:	b11b      	cbz	r3, 8012e8a <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xea>
 8012e82:	f108 0807 	add.w	r8, r8, #7
 8012e86:	f408 787e 	and.w	r8, r8, #1016	@ 0x3f8
 8012e8a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8012e8e:	b904      	cbnz	r4, 8012e92 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8012e90:	b14d      	cbz	r5, 8012ea6 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x106>
 8012e92:	fb18 f305 	smulbb	r3, r8, r5
 8012e96:	4423      	add	r3, r4
 8012e98:	b29b      	uxth	r3, r3
 8012e9a:	1b52      	subs	r2, r2, r5
 8012e9c:	eb07 07d3 	add.w	r7, r7, r3, lsr #3
 8012ea0:	b292      	uxth	r2, r2
 8012ea2:	f003 0507 	and.w	r5, r3, #7
 8012ea6:	4631      	mov	r1, r6
 8012ea8:	4648      	mov	r0, r9
 8012eaa:	f7ff ff21 	bl	8012cf0 <_ZN8touchgfx7LCD1bpp9nextPixelEbNS_12TextRotationE>
 8012eae:	9005      	str	r0, [sp, #20]
 8012eb0:	4648      	mov	r0, r9
 8012eb2:	f7ff ff49 	bl	8012d48 <_ZN8touchgfx7LCD1bpp8nextLineEbNS_12TextRotationE>
 8012eb6:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
 8012eba:	440b      	add	r3, r1
 8012ebc:	b21e      	sxth	r6, r3
 8012ebe:	9b02      	ldr	r3, [sp, #8]
 8012ec0:	1af6      	subs	r6, r6, r3
 8012ec2:	4296      	cmp	r6, r2
 8012ec4:	bfa8      	it	ge
 8012ec6:	4616      	movge	r6, r2
 8012ec8:	2e00      	cmp	r6, #0
 8012eca:	4681      	mov	r9, r0
 8012ecc:	f340 809a 	ble.w	8013004 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x264>
 8012ed0:	9b04      	ldr	r3, [sp, #16]
 8012ed2:	9a08      	ldr	r2, [sp, #32]
 8012ed4:	4413      	add	r3, r2
 8012ed6:	b21b      	sxth	r3, r3
 8012ed8:	ebab 0b04 	sub.w	fp, fp, r4
 8012edc:	eba3 0b0b 	sub.w	fp, r3, fp
 8012ee0:	9b03      	ldr	r3, [sp, #12]
 8012ee2:	459b      	cmp	fp, r3
 8012ee4:	bfd4      	ite	le
 8012ee6:	ebc4 040b 	rsble	r4, r4, fp
 8012eea:	ebc4 0403 	rsbgt	r4, r4, r3
 8012eee:	2c00      	cmp	r4, #0
 8012ef0:	f340 8088 	ble.w	8013004 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x264>
 8012ef4:	eba8 0304 	sub.w	r3, r8, r4
 8012ef8:	9302      	str	r3, [sp, #8]
 8012efa:	9b01      	ldr	r3, [sp, #4]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d163      	bne.n	8012fc8 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x228>
 8012f00:	4b43      	ldr	r3, [pc, #268]	@ (8013010 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x270>)
 8012f02:	6818      	ldr	r0, [r3, #0]
 8012f04:	6803      	ldr	r3, [r0, #0]
 8012f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f08:	4798      	blx	r3
 8012f0a:	4680      	mov	r8, r0
 8012f0c:	f8da 3000 	ldr.w	r3, [sl]
 8012f10:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 8012f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f16:	4650      	mov	r0, sl
 8012f18:	4798      	blx	r3
 8012f1a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8012f1e:	783a      	ldrb	r2, [r7, #0]
 8012f20:	f8cd 9010 	str.w	r9, [sp, #16]
 8012f24:	fb0b f000 	mul.w	r0, fp, r0
 8012f28:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8012f2c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8012f2e:	f04f 0c36 	mov.w	ip, #54	@ 0x36
 8012f32:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012f36:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8012f3a:	fb0c f303 	mul.w	r3, ip, r3
 8012f3e:	f04f 0cb7 	mov.w	ip, #183	@ 0xb7
 8012f42:	fb0c 3301 	mla	r3, ip, r1, r3
 8012f46:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8012f48:	fa5f fe81 	uxtb.w	lr, r1
 8012f4c:	2113      	movs	r1, #19
 8012f4e:	fb01 330e 	mla	r3, r1, lr, r3
 8012f52:	412a      	asrs	r2, r5
 8012f54:	13db      	asrs	r3, r3, #15
 8012f56:	b2d2      	uxtb	r2, r2
 8012f58:	9303      	str	r3, [sp, #12]
 8012f5a:	f04f 0901 	mov.w	r9, #1
 8012f5e:	f116 36ff 	adds.w	r6, r6, #4294967295
 8012f62:	d348      	bcc.n	8012ff6 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x256>
 8012f64:	46a4      	mov	ip, r4
 8012f66:	4601      	mov	r1, r0
 8012f68:	f11c 3cff 	adds.w	ip, ip, #4294967295
 8012f6c:	d335      	bcc.n	8012fda <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x23a>
 8012f6e:	07d3      	lsls	r3, r2, #31
 8012f70:	d51b      	bpl.n	8012faa <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x20a>
 8012f72:	f1d1 0e00 	rsbs	lr, r1, #0
 8012f76:	f00e 0e07 	and.w	lr, lr, #7
 8012f7a:	f04f 0308 	mov.w	r3, #8
 8012f7e:	fb91 f3f3 	sdiv	r3, r1, r3
 8012f82:	eb08 0b03 	add.w	fp, r8, r3
 8012f86:	f818 a003 	ldrb.w	sl, [r8, r3]
 8012f8a:	f001 0307 	and.w	r3, r1, #7
 8012f8e:	bf58      	it	pl
 8012f90:	f1ce 0300 	rsbpl	r3, lr, #0
 8012f94:	b2db      	uxtb	r3, r3
 8012f96:	f1c3 0e07 	rsb	lr, r3, #7
 8012f9a:	9b03      	ldr	r3, [sp, #12]
 8012f9c:	b9bb      	cbnz	r3, 8012fce <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22e>
 8012f9e:	fa09 f30e 	lsl.w	r3, r9, lr
 8012fa2:	ea2a 0303 	bic.w	r3, sl, r3
 8012fa6:	f88b 3000 	strb.w	r3, [fp]
 8012faa:	3501      	adds	r5, #1
 8012fac:	b2ad      	uxth	r5, r5
 8012fae:	9b05      	ldr	r3, [sp, #20]
 8012fb0:	2d08      	cmp	r5, #8
 8012fb2:	bf09      	itett	eq
 8012fb4:	787a      	ldrbeq	r2, [r7, #1]
 8012fb6:	0852      	lsrne	r2, r2, #1
 8012fb8:	3701      	addeq	r7, #1
 8012fba:	2500      	moveq	r5, #0
 8012fbc:	4419      	add	r1, r3
 8012fbe:	e7d3      	b.n	8012f68 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1c8>
 8012fc0:	449b      	add	fp, r3
 8012fc2:	fa0f fb8b 	sxth.w	fp, fp
 8012fc6:	e726      	b.n	8012e16 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x76>
 8012fc8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012fcc:	e79e      	b.n	8012f0c <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x16c>
 8012fce:	fa09 f30e 	lsl.w	r3, r9, lr
 8012fd2:	ea43 030a 	orr.w	r3, r3, sl
 8012fd6:	b2db      	uxtb	r3, r3
 8012fd8:	e7e5      	b.n	8012fa6 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 8012fda:	9b02      	ldr	r3, [sp, #8]
 8012fdc:	b143      	cbz	r3, 8012ff0 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x250>
 8012fde:	441d      	add	r5, r3
 8012fe0:	b2ad      	uxth	r5, r5
 8012fe2:	eb07 07d5 	add.w	r7, r7, r5, lsr #3
 8012fe6:	f005 0507 	and.w	r5, r5, #7
 8012fea:	783a      	ldrb	r2, [r7, #0]
 8012fec:	412a      	asrs	r2, r5
 8012fee:	b2d2      	uxtb	r2, r2
 8012ff0:	9b04      	ldr	r3, [sp, #16]
 8012ff2:	4418      	add	r0, r3
 8012ff4:	e7b3      	b.n	8012f5e <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1be>
 8012ff6:	9b01      	ldr	r3, [sp, #4]
 8012ff8:	b923      	cbnz	r3, 8013004 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x264>
 8012ffa:	4b05      	ldr	r3, [pc, #20]	@ (8013010 <_ZN8touchgfx7LCD1bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x270>)
 8012ffc:	6818      	ldr	r0, [r3, #0]
 8012ffe:	6803      	ldr	r3, [r0, #0]
 8013000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013002:	4798      	blx	r3
 8013004:	b00f      	add	sp, #60	@ 0x3c
 8013006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801300a:	bf00      	nop
 801300c:	2000434a 	.word	0x2000434a
 8013010:	20004354 	.word	0x20004354

08013014 <_ZN8touchgfx7LCD1bpp10fillMemoryEPvNS_9colortypeEt>:
 8013014:	b530      	push	{r4, r5, lr}
 8013016:	3100      	adds	r1, #0
 8013018:	bf18      	it	ne
 801301a:	2101      	movne	r1, #1
 801301c:	4249      	negs	r1, r1
 801301e:	b30a      	cbz	r2, 8013064 <_ZN8touchgfx7LCD1bpp10fillMemoryEPvNS_9colortypeEt+0x50>
 8013020:	0783      	lsls	r3, r0, #30
 8013022:	d004      	beq.n	801302e <_ZN8touchgfx7LCD1bpp10fillMemoryEPvNS_9colortypeEt+0x1a>
 8013024:	3a01      	subs	r2, #1
 8013026:	f800 1b01 	strb.w	r1, [r0], #1
 801302a:	b292      	uxth	r2, r2
 801302c:	e7f7      	b.n	801301e <_ZN8touchgfx7LCD1bpp10fillMemoryEPvNS_9colortypeEt+0xa>
 801302e:	1884      	adds	r4, r0, r2
 8013030:	4603      	mov	r3, r0
 8013032:	b2a4      	uxth	r4, r4
 8013034:	1ae5      	subs	r5, r4, r3
 8013036:	b2ad      	uxth	r5, r5
 8013038:	2d03      	cmp	r5, #3
 801303a:	d810      	bhi.n	801305e <_ZN8touchgfx7LCD1bpp10fillMemoryEPvNS_9colortypeEt+0x4a>
 801303c:	0893      	lsrs	r3, r2, #2
 801303e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8013042:	ebc3 3383 	rsb	r3, r3, r3, lsl #14
 8013046:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801304a:	b292      	uxth	r2, r2
 801304c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013050:	3a01      	subs	r2, #1
 8013052:	b292      	uxth	r2, r2
 8013054:	429a      	cmp	r2, r3
 8013056:	d005      	beq.n	8013064 <_ZN8touchgfx7LCD1bpp10fillMemoryEPvNS_9colortypeEt+0x50>
 8013058:	f800 1b01 	strb.w	r1, [r0], #1
 801305c:	e7f8      	b.n	8013050 <_ZN8touchgfx7LCD1bpp10fillMemoryEPvNS_9colortypeEt+0x3c>
 801305e:	f843 1b04 	str.w	r1, [r3], #4
 8013062:	e7e7      	b.n	8013034 <_ZN8touchgfx7LCD1bpp10fillMemoryEPvNS_9colortypeEt+0x20>
 8013064:	bd30      	pop	{r4, r5, pc}

08013066 <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8013066:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801306a:	f99d 0034 	ldrsb.w	r0, [sp, #52]	@ 0x34
 801306e:	2800      	cmp	r0, #0
 8013070:	4698      	mov	r8, r3
 8013072:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013074:	f280 809a 	bge.w	80131ac <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 8013078:	f9b8 0004 	ldrsh.w	r0, [r8, #4]
 801307c:	2800      	cmp	r0, #0
 801307e:	f340 8095 	ble.w	80131ac <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 8013082:	f9b8 c006 	ldrsh.w	ip, [r8, #6]
 8013086:	f1bc 0f00 	cmp.w	ip, #0
 801308a:	f340 808f 	ble.w	80131ac <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 801308e:	3207      	adds	r2, #7
 8013090:	10d7      	asrs	r7, r2, #3
 8013092:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8013096:	f9b8 4000 	ldrsh.w	r4, [r8]
 801309a:	2508      	movs	r5, #8
 801309c:	fb94 f5f5 	sdiv	r5, r4, r5
 80130a0:	fb07 5202 	mla	r2, r7, r2, r5
 80130a4:	188d      	adds	r5, r1, r2
 80130a6:	4262      	negs	r2, r4
 80130a8:	f002 0207 	and.w	r2, r2, #7
 80130ac:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80130b0:	f004 0407 	and.w	r4, r4, #7
 80130b4:	bf58      	it	pl
 80130b6:	4254      	negpl	r4, r2
 80130b8:	22b7      	movs	r2, #183	@ 0xb7
 80130ba:	f3c3 4607 	ubfx	r6, r3, #16, #8
 80130be:	434a      	muls	r2, r1
 80130c0:	2136      	movs	r1, #54	@ 0x36
 80130c2:	fb01 2206 	mla	r2, r1, r6, r2
 80130c6:	b2de      	uxtb	r6, r3
 80130c8:	2313      	movs	r3, #19
 80130ca:	fb03 2606 	mla	r6, r3, r6, r2
 80130ce:	2c00      	cmp	r4, #0
 80130d0:	ea4f 36e6 	mov.w	r6, r6, asr #15
 80130d4:	dd50      	ble.n	8013178 <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x112>
 80130d6:	1901      	adds	r1, r0, r4
 80130d8:	2907      	cmp	r1, #7
 80130da:	f04f 0201 	mov.w	r2, #1
 80130de:	f1c4 0308 	rsb	r3, r4, #8
 80130e2:	fa02 f303 	lsl.w	r3, r2, r3
 80130e6:	bfdc      	itt	le
 80130e8:	f1c1 0108 	rsble	r1, r1, #8
 80130ec:	408a      	lslle	r2, r1
 80130ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80130f2:	b2db      	uxtb	r3, r3
 80130f4:	bfdc      	itt	le
 80130f6:	4252      	negle	r2, r2
 80130f8:	4013      	andle	r3, r2
 80130fa:	19e9      	adds	r1, r5, r7
 80130fc:	f1c7 0e00 	rsb	lr, r7, #0
 8013100:	ea6f 0903 	mvn.w	r9, r3
 8013104:	f811 200e 	ldrb.w	r2, [r1, lr]
 8013108:	b36e      	cbz	r6, 8013166 <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 801310a:	431a      	orrs	r2, r3
 801310c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013110:	f801 200e 	strb.w	r2, [r1, lr]
 8013114:	fa1f f28c 	uxth.w	r2, ip
 8013118:	4439      	add	r1, r7
 801311a:	fa0f fc82 	sxth.w	ip, r2
 801311e:	2a00      	cmp	r2, #0
 8013120:	d1f0      	bne.n	8013104 <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x9e>
 8013122:	f1a0 0308 	sub.w	r3, r0, #8
 8013126:	441c      	add	r4, r3
 8013128:	b224      	sxth	r4, r4
 801312a:	4284      	cmp	r4, r0
 801312c:	dc3e      	bgt.n	80131ac <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 801312e:	2c07      	cmp	r4, #7
 8013130:	f105 0501 	add.w	r5, r5, #1
 8013134:	dc23      	bgt.n	801317e <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 8013136:	2c00      	cmp	r4, #0
 8013138:	dd38      	ble.n	80131ac <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 801313a:	2201      	movs	r2, #1
 801313c:	40a2      	lsls	r2, r4
 801313e:	3a01      	subs	r2, #1
 8013140:	f1c4 0408 	rsb	r4, r4, #8
 8013144:	fa02 f404 	lsl.w	r4, r2, r4
 8013148:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 801314c:	b2e0      	uxtb	r0, r4
 801314e:	2200      	movs	r2, #0
 8013150:	43e4      	mvns	r4, r4
 8013152:	2900      	cmp	r1, #0
 8013154:	dd2a      	ble.n	80131ac <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 8013156:	5cab      	ldrb	r3, [r5, r2]
 8013158:	b166      	cbz	r6, 8013174 <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10e>
 801315a:	4303      	orrs	r3, r0
 801315c:	3901      	subs	r1, #1
 801315e:	54ab      	strb	r3, [r5, r2]
 8013160:	b209      	sxth	r1, r1
 8013162:	443a      	add	r2, r7
 8013164:	e7f5      	b.n	8013152 <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8013166:	ea09 0202 	and.w	r2, r9, r2
 801316a:	e7cf      	b.n	801310c <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xa6>
 801316c:	445d      	add	r5, fp
 801316e:	f004 0407 	and.w	r4, r4, #7
 8013172:	e7e0      	b.n	8013136 <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd0>
 8013174:	4023      	ands	r3, r4
 8013176:	e7f1      	b.n	801315c <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf6>
 8013178:	2807      	cmp	r0, #7
 801317a:	4604      	mov	r4, r0
 801317c:	dddd      	ble.n	801313a <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801317e:	ea4f 0be4 	mov.w	fp, r4, asr #3
 8013182:	f9b8 9006 	ldrsh.w	r9, [r8, #6]
 8013186:	fa1f f38b 	uxth.w	r3, fp
 801318a:	46aa      	mov	sl, r5
 801318c:	f1b9 0f00 	cmp.w	r9, #0
 8013190:	ddec      	ble.n	801316c <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 8013192:	461a      	mov	r2, r3
 8013194:	4650      	mov	r0, sl
 8013196:	4631      	mov	r1, r6
 8013198:	f109 39ff 	add.w	r9, r9, #4294967295
 801319c:	9301      	str	r3, [sp, #4]
 801319e:	44ba      	add	sl, r7
 80131a0:	f7ff ff38 	bl	8013014 <_ZN8touchgfx7LCD1bpp10fillMemoryEPvNS_9colortypeEt>
 80131a4:	fa0f f989 	sxth.w	r9, r9
 80131a8:	9b01      	ldr	r3, [sp, #4]
 80131aa:	e7ef      	b.n	801318c <_ZN8touchgfx7LCD1bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 80131ac:	b003      	add	sp, #12
 80131ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080131b4 <CRC_Lock>:
 80131b4:	b530      	push	{r4, r5, lr}
 80131b6:	4a20      	ldr	r2, [pc, #128]	@ (8013238 <CRC_Lock+0x84>)
 80131b8:	6813      	ldr	r3, [r2, #0]
 80131ba:	f023 0301 	bic.w	r3, r3, #1
 80131be:	6013      	str	r3, [r2, #0]
 80131c0:	4b1e      	ldr	r3, [pc, #120]	@ (801323c <CRC_Lock+0x88>)
 80131c2:	681a      	ldr	r2, [r3, #0]
 80131c4:	f64f 74f0 	movw	r4, #65520	@ 0xfff0
 80131c8:	4022      	ands	r2, r4
 80131ca:	f24c 2540 	movw	r5, #49728	@ 0xc240
 80131ce:	42aa      	cmp	r2, r5
 80131d0:	d005      	beq.n	80131de <CRC_Lock+0x2a>
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	f24c 2270 	movw	r2, #49776	@ 0xc270
 80131d8:	4023      	ands	r3, r4
 80131da:	4293      	cmp	r3, r2
 80131dc:	d124      	bne.n	8013228 <CRC_Lock+0x74>
 80131de:	4b18      	ldr	r3, [pc, #96]	@ (8013240 <CRC_Lock+0x8c>)
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	bb0b      	cbnz	r3, 8013228 <CRC_Lock+0x74>
 80131e4:	4b17      	ldr	r3, [pc, #92]	@ (8013244 <CRC_Lock+0x90>)
 80131e6:	681a      	ldr	r2, [r3, #0]
 80131e8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80131ec:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 80131f0:	d00d      	beq.n	801320e <CRC_Lock+0x5a>
 80131f2:	681a      	ldr	r2, [r3, #0]
 80131f4:	f240 4483 	movw	r4, #1155	@ 0x483
 80131f8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80131fc:	42a2      	cmp	r2, r4
 80131fe:	d006      	beq.n	801320e <CRC_Lock+0x5a>
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	f240 4285 	movw	r2, #1157	@ 0x485
 8013206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801320a:	4293      	cmp	r3, r2
 801320c:	d10c      	bne.n	8013228 <CRC_Lock+0x74>
 801320e:	4b0e      	ldr	r3, [pc, #56]	@ (8013248 <CRC_Lock+0x94>)
 8013210:	2201      	movs	r2, #1
 8013212:	601a      	str	r2, [r3, #0]
 8013214:	681a      	ldr	r2, [r3, #0]
 8013216:	2a00      	cmp	r2, #0
 8013218:	d1fc      	bne.n	8013214 <CRC_Lock+0x60>
 801321a:	4b0c      	ldr	r3, [pc, #48]	@ (801324c <CRC_Lock+0x98>)
 801321c:	6018      	str	r0, [r3, #0]
 801321e:	6818      	ldr	r0, [r3, #0]
 8013220:	1a43      	subs	r3, r0, r1
 8013222:	4258      	negs	r0, r3
 8013224:	4158      	adcs	r0, r3
 8013226:	bd30      	pop	{r4, r5, pc}
 8013228:	4b09      	ldr	r3, [pc, #36]	@ (8013250 <CRC_Lock+0x9c>)
 801322a:	2201      	movs	r2, #1
 801322c:	601a      	str	r2, [r3, #0]
 801322e:	681a      	ldr	r2, [r3, #0]
 8013230:	2a00      	cmp	r2, #0
 8013232:	d1fc      	bne.n	801322e <CRC_Lock+0x7a>
 8013234:	4b07      	ldr	r3, [pc, #28]	@ (8013254 <CRC_Lock+0xa0>)
 8013236:	e7f1      	b.n	801321c <CRC_Lock+0x68>
 8013238:	e0002000 	.word	0xe0002000
 801323c:	e000ed00 	.word	0xe000ed00
 8013240:	e0042000 	.word	0xe0042000
 8013244:	5c001000 	.word	0x5c001000
 8013248:	58024c08 	.word	0x58024c08
 801324c:	58024c00 	.word	0x58024c00
 8013250:	40023008 	.word	0x40023008
 8013254:	40023000 	.word	0x40023000

08013258 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8013258:	6101      	str	r1, [r0, #16]
 801325a:	4770      	bx	lr

0801325c <_ZN8touchgfx8Gestures4tickEv>:
 801325c:	7b83      	ldrb	r3, [r0, #14]
 801325e:	b14b      	cbz	r3, 8013274 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8013260:	8903      	ldrh	r3, [r0, #8]
 8013262:	3301      	adds	r3, #1
 8013264:	b29b      	uxth	r3, r3
 8013266:	2b07      	cmp	r3, #7
 8013268:	8103      	strh	r3, [r0, #8]
 801326a:	bf81      	itttt	hi
 801326c:	2300      	movhi	r3, #0
 801326e:	8143      	strhhi	r3, [r0, #10]
 8013270:	8183      	strhhi	r3, [r0, #12]
 8013272:	7383      	strbhi	r3, [r0, #14]
 8013274:	4770      	bx	lr
	...

08013278 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8013278:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801327c:	4698      	mov	r8, r3
 801327e:	8883      	ldrh	r3, [r0, #4]
 8013280:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013284:	eba8 0303 	sub.w	r3, r8, r3
 8013288:	b21b      	sxth	r3, r3
 801328a:	4604      	mov	r4, r0
 801328c:	2b00      	cmp	r3, #0
 801328e:	4617      	mov	r7, r2
 8013290:	4a18      	ldr	r2, [pc, #96]	@ (80132f4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8013292:	9200      	str	r2, [sp, #0]
 8013294:	bfb8      	it	lt
 8013296:	425b      	neglt	r3, r3
 8013298:	8aa2      	ldrh	r2, [r4, #20]
 801329a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 801329e:	f8ad 800a 	strh.w	r8, [sp, #10]
 80132a2:	b21b      	sxth	r3, r3
 80132a4:	460e      	mov	r6, r1
 80132a6:	4293      	cmp	r3, r2
 80132a8:	88c1      	ldrh	r1, [r0, #6]
 80132aa:	f8ad 1008 	strh.w	r1, [sp, #8]
 80132ae:	f04f 0000 	mov.w	r0, #0
 80132b2:	f88d 0004 	strb.w	r0, [sp, #4]
 80132b6:	f8ad 500c 	strh.w	r5, [sp, #12]
 80132ba:	dc07      	bgt.n	80132cc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 80132bc:	1a69      	subs	r1, r5, r1
 80132be:	b209      	sxth	r1, r1
 80132c0:	2900      	cmp	r1, #0
 80132c2:	bfb8      	it	lt
 80132c4:	4249      	neglt	r1, r1
 80132c6:	b209      	sxth	r1, r1
 80132c8:	428a      	cmp	r2, r1
 80132ca:	da10      	bge.n	80132ee <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 80132cc:	6920      	ldr	r0, [r4, #16]
 80132ce:	6803      	ldr	r3, [r0, #0]
 80132d0:	4669      	mov	r1, sp
 80132d2:	685b      	ldr	r3, [r3, #4]
 80132d4:	4798      	blx	r3
 80132d6:	eba8 0606 	sub.w	r6, r8, r6
 80132da:	2300      	movs	r3, #0
 80132dc:	1bef      	subs	r7, r5, r7
 80132de:	2001      	movs	r0, #1
 80132e0:	8123      	strh	r3, [r4, #8]
 80132e2:	8166      	strh	r6, [r4, #10]
 80132e4:	81a7      	strh	r7, [r4, #12]
 80132e6:	f8a4 8004 	strh.w	r8, [r4, #4]
 80132ea:	80e5      	strh	r5, [r4, #6]
 80132ec:	73a0      	strb	r0, [r4, #14]
 80132ee:	b004      	add	sp, #16
 80132f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132f4:	08015df4 	.word	0x08015df4

080132f8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80132f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132fa:	461e      	mov	r6, r3
 80132fc:	1e4b      	subs	r3, r1, #1
 80132fe:	2b01      	cmp	r3, #1
 8013300:	b085      	sub	sp, #20
 8013302:	4604      	mov	r4, r0
 8013304:	460d      	mov	r5, r1
 8013306:	4617      	mov	r7, r2
 8013308:	d84b      	bhi.n	80133a2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801330a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801330e:	1cd3      	adds	r3, r2, #3
 8013310:	b29b      	uxth	r3, r3
 8013312:	2b06      	cmp	r3, #6
 8013314:	d916      	bls.n	8013344 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8013316:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 80133b8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801331a:	f8cd c004 	str.w	ip, [sp, #4]
 801331e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013322:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013326:	6900      	ldr	r0, [r0, #16]
 8013328:	f8ad 100c 	strh.w	r1, [sp, #12]
 801332c:	f04f 0c00 	mov.w	ip, #0
 8013330:	f88d c008 	strb.w	ip, [sp, #8]
 8013334:	f8ad 200a 	strh.w	r2, [sp, #10]
 8013338:	f8ad 300e 	strh.w	r3, [sp, #14]
 801333c:	6803      	ldr	r3, [r0, #0]
 801333e:	a901      	add	r1, sp, #4
 8013340:	689b      	ldr	r3, [r3, #8]
 8013342:	4798      	blx	r3
 8013344:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013348:	1cd3      	adds	r3, r2, #3
 801334a:	b29b      	uxth	r3, r3
 801334c:	2b06      	cmp	r3, #6
 801334e:	d916      	bls.n	801337e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8013350:	f8df c064 	ldr.w	ip, [pc, #100]	@ 80133b8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8013354:	f8cd c004 	str.w	ip, [sp, #4]
 8013358:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801335c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013360:	6920      	ldr	r0, [r4, #16]
 8013362:	f8ad 100c 	strh.w	r1, [sp, #12]
 8013366:	f04f 0c01 	mov.w	ip, #1
 801336a:	f88d c008 	strb.w	ip, [sp, #8]
 801336e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8013372:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013376:	6803      	ldr	r3, [r0, #0]
 8013378:	a901      	add	r1, sp, #4
 801337a:	689b      	ldr	r3, [r3, #8]
 801337c:	4798      	blx	r3
 801337e:	4b0d      	ldr	r3, [pc, #52]	@ (80133b4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8013380:	9301      	str	r3, [sp, #4]
 8013382:	6920      	ldr	r0, [r4, #16]
 8013384:	f88d 5008 	strb.w	r5, [sp, #8]
 8013388:	2300      	movs	r3, #0
 801338a:	f8ad 700a 	strh.w	r7, [sp, #10]
 801338e:	f8ad 600c 	strh.w	r6, [sp, #12]
 8013392:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013396:	6803      	ldr	r3, [r0, #0]
 8013398:	a901      	add	r1, sp, #4
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	4798      	blx	r3
 801339e:	b005      	add	sp, #20
 80133a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133a2:	2900      	cmp	r1, #0
 80133a4:	d1eb      	bne.n	801337e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80133a6:	80a2      	strh	r2, [r4, #4]
 80133a8:	80c6      	strh	r6, [r0, #6]
 80133aa:	60a1      	str	r1, [r4, #8]
 80133ac:	81a1      	strh	r1, [r4, #12]
 80133ae:	73a1      	strb	r1, [r4, #14]
 80133b0:	e7e5      	b.n	801337e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80133b2:	bf00      	nop
 80133b4:	08015de0 	.word	0x08015de0
 80133b8:	08015e08 	.word	0x08015e08

080133bc <_ZdlPvj>:
 80133bc:	f000 b812 	b.w	80133e4 <_ZdlPv>

080133c0 <__cxa_guard_acquire>:
 80133c0:	6802      	ldr	r2, [r0, #0]
 80133c2:	07d2      	lsls	r2, r2, #31
 80133c4:	4603      	mov	r3, r0
 80133c6:	d405      	bmi.n	80133d4 <__cxa_guard_acquire+0x14>
 80133c8:	7842      	ldrb	r2, [r0, #1]
 80133ca:	b102      	cbz	r2, 80133ce <__cxa_guard_acquire+0xe>
 80133cc:	deff      	udf	#255	@ 0xff
 80133ce:	2001      	movs	r0, #1
 80133d0:	7058      	strb	r0, [r3, #1]
 80133d2:	4770      	bx	lr
 80133d4:	2000      	movs	r0, #0
 80133d6:	4770      	bx	lr

080133d8 <__cxa_guard_release>:
 80133d8:	2301      	movs	r3, #1
 80133da:	6003      	str	r3, [r0, #0]
 80133dc:	4770      	bx	lr

080133de <__cxa_pure_virtual>:
 80133de:	b508      	push	{r3, lr}
 80133e0:	f000 f80e 	bl	8013400 <_ZSt9terminatev>

080133e4 <_ZdlPv>:
 80133e4:	f000 b844 	b.w	8013470 <free>

080133e8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80133e8:	b508      	push	{r3, lr}
 80133ea:	4780      	blx	r0
 80133ec:	f000 f80d 	bl	801340a <abort>

080133f0 <_ZSt13get_terminatev>:
 80133f0:	4b02      	ldr	r3, [pc, #8]	@ (80133fc <_ZSt13get_terminatev+0xc>)
 80133f2:	6818      	ldr	r0, [r3, #0]
 80133f4:	f3bf 8f5b 	dmb	ish
 80133f8:	4770      	bx	lr
 80133fa:	bf00      	nop
 80133fc:	2000001c 	.word	0x2000001c

08013400 <_ZSt9terminatev>:
 8013400:	b508      	push	{r3, lr}
 8013402:	f7ff fff5 	bl	80133f0 <_ZSt13get_terminatev>
 8013406:	f7ff ffef 	bl	80133e8 <_ZN10__cxxabiv111__terminateEPFvvE>

0801340a <abort>:
 801340a:	b508      	push	{r3, lr}
 801340c:	2006      	movs	r0, #6
 801340e:	f000 fa2d 	bl	801386c <raise>
 8013412:	2001      	movs	r0, #1
 8013414:	f7ed fb86 	bl	8000b24 <_exit>

08013418 <__assert_func>:
 8013418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801341a:	4614      	mov	r4, r2
 801341c:	461a      	mov	r2, r3
 801341e:	4b09      	ldr	r3, [pc, #36]	@ (8013444 <__assert_func+0x2c>)
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	4605      	mov	r5, r0
 8013424:	68d8      	ldr	r0, [r3, #12]
 8013426:	b954      	cbnz	r4, 801343e <__assert_func+0x26>
 8013428:	4b07      	ldr	r3, [pc, #28]	@ (8013448 <__assert_func+0x30>)
 801342a:	461c      	mov	r4, r3
 801342c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013430:	9100      	str	r1, [sp, #0]
 8013432:	462b      	mov	r3, r5
 8013434:	4905      	ldr	r1, [pc, #20]	@ (801344c <__assert_func+0x34>)
 8013436:	f000 f975 	bl	8013724 <fiprintf>
 801343a:	f7ff ffe6 	bl	801340a <abort>
 801343e:	4b04      	ldr	r3, [pc, #16]	@ (8013450 <__assert_func+0x38>)
 8013440:	e7f4      	b.n	801342c <__assert_func+0x14>
 8013442:	bf00      	nop
 8013444:	2000002c 	.word	0x2000002c
 8013448:	08015edf 	.word	0x08015edf
 801344c:	08015eb1 	.word	0x08015eb1
 8013450:	08015ea4 	.word	0x08015ea4

08013454 <atexit>:
 8013454:	2300      	movs	r3, #0
 8013456:	4601      	mov	r1, r0
 8013458:	461a      	mov	r2, r3
 801345a:	4618      	mov	r0, r3
 801345c:	f000 bab4 	b.w	80139c8 <__register_exitproc>

08013460 <malloc>:
 8013460:	4b02      	ldr	r3, [pc, #8]	@ (801346c <malloc+0xc>)
 8013462:	4601      	mov	r1, r0
 8013464:	6818      	ldr	r0, [r3, #0]
 8013466:	f000 b82d 	b.w	80134c4 <_malloc_r>
 801346a:	bf00      	nop
 801346c:	2000002c 	.word	0x2000002c

08013470 <free>:
 8013470:	4b02      	ldr	r3, [pc, #8]	@ (801347c <free+0xc>)
 8013472:	4601      	mov	r1, r0
 8013474:	6818      	ldr	r0, [r3, #0]
 8013476:	f000 bb03 	b.w	8013a80 <_free_r>
 801347a:	bf00      	nop
 801347c:	2000002c 	.word	0x2000002c

08013480 <sbrk_aligned>:
 8013480:	b570      	push	{r4, r5, r6, lr}
 8013482:	4e0f      	ldr	r6, [pc, #60]	@ (80134c0 <sbrk_aligned+0x40>)
 8013484:	460c      	mov	r4, r1
 8013486:	6831      	ldr	r1, [r6, #0]
 8013488:	4605      	mov	r5, r0
 801348a:	b911      	cbnz	r1, 8013492 <sbrk_aligned+0x12>
 801348c:	f000 fa3e 	bl	801390c <_sbrk_r>
 8013490:	6030      	str	r0, [r6, #0]
 8013492:	4621      	mov	r1, r4
 8013494:	4628      	mov	r0, r5
 8013496:	f000 fa39 	bl	801390c <_sbrk_r>
 801349a:	1c43      	adds	r3, r0, #1
 801349c:	d103      	bne.n	80134a6 <sbrk_aligned+0x26>
 801349e:	f04f 34ff 	mov.w	r4, #4294967295
 80134a2:	4620      	mov	r0, r4
 80134a4:	bd70      	pop	{r4, r5, r6, pc}
 80134a6:	1cc4      	adds	r4, r0, #3
 80134a8:	f024 0403 	bic.w	r4, r4, #3
 80134ac:	42a0      	cmp	r0, r4
 80134ae:	d0f8      	beq.n	80134a2 <sbrk_aligned+0x22>
 80134b0:	1a21      	subs	r1, r4, r0
 80134b2:	4628      	mov	r0, r5
 80134b4:	f000 fa2a 	bl	801390c <_sbrk_r>
 80134b8:	3001      	adds	r0, #1
 80134ba:	d1f2      	bne.n	80134a2 <sbrk_aligned+0x22>
 80134bc:	e7ef      	b.n	801349e <sbrk_aligned+0x1e>
 80134be:	bf00      	nop
 80134c0:	200043e0 	.word	0x200043e0

080134c4 <_malloc_r>:
 80134c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134c8:	1ccd      	adds	r5, r1, #3
 80134ca:	f025 0503 	bic.w	r5, r5, #3
 80134ce:	3508      	adds	r5, #8
 80134d0:	2d0c      	cmp	r5, #12
 80134d2:	bf38      	it	cc
 80134d4:	250c      	movcc	r5, #12
 80134d6:	2d00      	cmp	r5, #0
 80134d8:	4606      	mov	r6, r0
 80134da:	db01      	blt.n	80134e0 <_malloc_r+0x1c>
 80134dc:	42a9      	cmp	r1, r5
 80134de:	d904      	bls.n	80134ea <_malloc_r+0x26>
 80134e0:	230c      	movs	r3, #12
 80134e2:	6033      	str	r3, [r6, #0]
 80134e4:	2000      	movs	r0, #0
 80134e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80135c0 <_malloc_r+0xfc>
 80134ee:	f000 f869 	bl	80135c4 <__malloc_lock>
 80134f2:	f8d8 3000 	ldr.w	r3, [r8]
 80134f6:	461c      	mov	r4, r3
 80134f8:	bb44      	cbnz	r4, 801354c <_malloc_r+0x88>
 80134fa:	4629      	mov	r1, r5
 80134fc:	4630      	mov	r0, r6
 80134fe:	f7ff ffbf 	bl	8013480 <sbrk_aligned>
 8013502:	1c43      	adds	r3, r0, #1
 8013504:	4604      	mov	r4, r0
 8013506:	d158      	bne.n	80135ba <_malloc_r+0xf6>
 8013508:	f8d8 4000 	ldr.w	r4, [r8]
 801350c:	4627      	mov	r7, r4
 801350e:	2f00      	cmp	r7, #0
 8013510:	d143      	bne.n	801359a <_malloc_r+0xd6>
 8013512:	2c00      	cmp	r4, #0
 8013514:	d04b      	beq.n	80135ae <_malloc_r+0xea>
 8013516:	6823      	ldr	r3, [r4, #0]
 8013518:	4639      	mov	r1, r7
 801351a:	4630      	mov	r0, r6
 801351c:	eb04 0903 	add.w	r9, r4, r3
 8013520:	f000 f9f4 	bl	801390c <_sbrk_r>
 8013524:	4581      	cmp	r9, r0
 8013526:	d142      	bne.n	80135ae <_malloc_r+0xea>
 8013528:	6821      	ldr	r1, [r4, #0]
 801352a:	1a6d      	subs	r5, r5, r1
 801352c:	4629      	mov	r1, r5
 801352e:	4630      	mov	r0, r6
 8013530:	f7ff ffa6 	bl	8013480 <sbrk_aligned>
 8013534:	3001      	adds	r0, #1
 8013536:	d03a      	beq.n	80135ae <_malloc_r+0xea>
 8013538:	6823      	ldr	r3, [r4, #0]
 801353a:	442b      	add	r3, r5
 801353c:	6023      	str	r3, [r4, #0]
 801353e:	f8d8 3000 	ldr.w	r3, [r8]
 8013542:	685a      	ldr	r2, [r3, #4]
 8013544:	bb62      	cbnz	r2, 80135a0 <_malloc_r+0xdc>
 8013546:	f8c8 7000 	str.w	r7, [r8]
 801354a:	e00f      	b.n	801356c <_malloc_r+0xa8>
 801354c:	6822      	ldr	r2, [r4, #0]
 801354e:	1b52      	subs	r2, r2, r5
 8013550:	d420      	bmi.n	8013594 <_malloc_r+0xd0>
 8013552:	2a0b      	cmp	r2, #11
 8013554:	d917      	bls.n	8013586 <_malloc_r+0xc2>
 8013556:	1961      	adds	r1, r4, r5
 8013558:	42a3      	cmp	r3, r4
 801355a:	6025      	str	r5, [r4, #0]
 801355c:	bf18      	it	ne
 801355e:	6059      	strne	r1, [r3, #4]
 8013560:	6863      	ldr	r3, [r4, #4]
 8013562:	bf08      	it	eq
 8013564:	f8c8 1000 	streq.w	r1, [r8]
 8013568:	5162      	str	r2, [r4, r5]
 801356a:	604b      	str	r3, [r1, #4]
 801356c:	4630      	mov	r0, r6
 801356e:	f000 f82f 	bl	80135d0 <__malloc_unlock>
 8013572:	f104 000b 	add.w	r0, r4, #11
 8013576:	1d23      	adds	r3, r4, #4
 8013578:	f020 0007 	bic.w	r0, r0, #7
 801357c:	1ac2      	subs	r2, r0, r3
 801357e:	bf1c      	itt	ne
 8013580:	1a1b      	subne	r3, r3, r0
 8013582:	50a3      	strne	r3, [r4, r2]
 8013584:	e7af      	b.n	80134e6 <_malloc_r+0x22>
 8013586:	6862      	ldr	r2, [r4, #4]
 8013588:	42a3      	cmp	r3, r4
 801358a:	bf0c      	ite	eq
 801358c:	f8c8 2000 	streq.w	r2, [r8]
 8013590:	605a      	strne	r2, [r3, #4]
 8013592:	e7eb      	b.n	801356c <_malloc_r+0xa8>
 8013594:	4623      	mov	r3, r4
 8013596:	6864      	ldr	r4, [r4, #4]
 8013598:	e7ae      	b.n	80134f8 <_malloc_r+0x34>
 801359a:	463c      	mov	r4, r7
 801359c:	687f      	ldr	r7, [r7, #4]
 801359e:	e7b6      	b.n	801350e <_malloc_r+0x4a>
 80135a0:	461a      	mov	r2, r3
 80135a2:	685b      	ldr	r3, [r3, #4]
 80135a4:	42a3      	cmp	r3, r4
 80135a6:	d1fb      	bne.n	80135a0 <_malloc_r+0xdc>
 80135a8:	2300      	movs	r3, #0
 80135aa:	6053      	str	r3, [r2, #4]
 80135ac:	e7de      	b.n	801356c <_malloc_r+0xa8>
 80135ae:	230c      	movs	r3, #12
 80135b0:	6033      	str	r3, [r6, #0]
 80135b2:	4630      	mov	r0, r6
 80135b4:	f000 f80c 	bl	80135d0 <__malloc_unlock>
 80135b8:	e794      	b.n	80134e4 <_malloc_r+0x20>
 80135ba:	6005      	str	r5, [r0, #0]
 80135bc:	e7d6      	b.n	801356c <_malloc_r+0xa8>
 80135be:	bf00      	nop
 80135c0:	200043e4 	.word	0x200043e4

080135c4 <__malloc_lock>:
 80135c4:	4801      	ldr	r0, [pc, #4]	@ (80135cc <__malloc_lock+0x8>)
 80135c6:	f000 b9ee 	b.w	80139a6 <__retarget_lock_acquire_recursive>
 80135ca:	bf00      	nop
 80135cc:	20004528 	.word	0x20004528

080135d0 <__malloc_unlock>:
 80135d0:	4801      	ldr	r0, [pc, #4]	@ (80135d8 <__malloc_unlock+0x8>)
 80135d2:	f000 b9e9 	b.w	80139a8 <__retarget_lock_release_recursive>
 80135d6:	bf00      	nop
 80135d8:	20004528 	.word	0x20004528

080135dc <std>:
 80135dc:	2300      	movs	r3, #0
 80135de:	b510      	push	{r4, lr}
 80135e0:	4604      	mov	r4, r0
 80135e2:	e9c0 3300 	strd	r3, r3, [r0]
 80135e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80135ea:	6083      	str	r3, [r0, #8]
 80135ec:	8181      	strh	r1, [r0, #12]
 80135ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80135f0:	81c2      	strh	r2, [r0, #14]
 80135f2:	6183      	str	r3, [r0, #24]
 80135f4:	4619      	mov	r1, r3
 80135f6:	2208      	movs	r2, #8
 80135f8:	305c      	adds	r0, #92	@ 0x5c
 80135fa:	f000 f906 	bl	801380a <memset>
 80135fe:	4b0d      	ldr	r3, [pc, #52]	@ (8013634 <std+0x58>)
 8013600:	6263      	str	r3, [r4, #36]	@ 0x24
 8013602:	4b0d      	ldr	r3, [pc, #52]	@ (8013638 <std+0x5c>)
 8013604:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013606:	4b0d      	ldr	r3, [pc, #52]	@ (801363c <std+0x60>)
 8013608:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801360a:	4b0d      	ldr	r3, [pc, #52]	@ (8013640 <std+0x64>)
 801360c:	6323      	str	r3, [r4, #48]	@ 0x30
 801360e:	4b0d      	ldr	r3, [pc, #52]	@ (8013644 <std+0x68>)
 8013610:	6224      	str	r4, [r4, #32]
 8013612:	429c      	cmp	r4, r3
 8013614:	d006      	beq.n	8013624 <std+0x48>
 8013616:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801361a:	4294      	cmp	r4, r2
 801361c:	d002      	beq.n	8013624 <std+0x48>
 801361e:	33d0      	adds	r3, #208	@ 0xd0
 8013620:	429c      	cmp	r4, r3
 8013622:	d105      	bne.n	8013630 <std+0x54>
 8013624:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801362c:	f000 b9ba 	b.w	80139a4 <__retarget_lock_init_recursive>
 8013630:	bd10      	pop	{r4, pc}
 8013632:	bf00      	nop
 8013634:	08013785 	.word	0x08013785
 8013638:	080137a7 	.word	0x080137a7
 801363c:	080137df 	.word	0x080137df
 8013640:	08013803 	.word	0x08013803
 8013644:	200043e8 	.word	0x200043e8

08013648 <stdio_exit_handler>:
 8013648:	4a02      	ldr	r2, [pc, #8]	@ (8013654 <stdio_exit_handler+0xc>)
 801364a:	4903      	ldr	r1, [pc, #12]	@ (8013658 <stdio_exit_handler+0x10>)
 801364c:	4803      	ldr	r0, [pc, #12]	@ (801365c <stdio_exit_handler+0x14>)
 801364e:	f000 b87b 	b.w	8013748 <_fwalk_sglue>
 8013652:	bf00      	nop
 8013654:	20000020 	.word	0x20000020
 8013658:	080141bd 	.word	0x080141bd
 801365c:	20000030 	.word	0x20000030

08013660 <cleanup_stdio>:
 8013660:	6841      	ldr	r1, [r0, #4]
 8013662:	4b0c      	ldr	r3, [pc, #48]	@ (8013694 <cleanup_stdio+0x34>)
 8013664:	4299      	cmp	r1, r3
 8013666:	b510      	push	{r4, lr}
 8013668:	4604      	mov	r4, r0
 801366a:	d001      	beq.n	8013670 <cleanup_stdio+0x10>
 801366c:	f000 fda6 	bl	80141bc <_fflush_r>
 8013670:	68a1      	ldr	r1, [r4, #8]
 8013672:	4b09      	ldr	r3, [pc, #36]	@ (8013698 <cleanup_stdio+0x38>)
 8013674:	4299      	cmp	r1, r3
 8013676:	d002      	beq.n	801367e <cleanup_stdio+0x1e>
 8013678:	4620      	mov	r0, r4
 801367a:	f000 fd9f 	bl	80141bc <_fflush_r>
 801367e:	68e1      	ldr	r1, [r4, #12]
 8013680:	4b06      	ldr	r3, [pc, #24]	@ (801369c <cleanup_stdio+0x3c>)
 8013682:	4299      	cmp	r1, r3
 8013684:	d004      	beq.n	8013690 <cleanup_stdio+0x30>
 8013686:	4620      	mov	r0, r4
 8013688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801368c:	f000 bd96 	b.w	80141bc <_fflush_r>
 8013690:	bd10      	pop	{r4, pc}
 8013692:	bf00      	nop
 8013694:	200043e8 	.word	0x200043e8
 8013698:	20004450 	.word	0x20004450
 801369c:	200044b8 	.word	0x200044b8

080136a0 <global_stdio_init.part.0>:
 80136a0:	b510      	push	{r4, lr}
 80136a2:	4b0b      	ldr	r3, [pc, #44]	@ (80136d0 <global_stdio_init.part.0+0x30>)
 80136a4:	4c0b      	ldr	r4, [pc, #44]	@ (80136d4 <global_stdio_init.part.0+0x34>)
 80136a6:	4a0c      	ldr	r2, [pc, #48]	@ (80136d8 <global_stdio_init.part.0+0x38>)
 80136a8:	601a      	str	r2, [r3, #0]
 80136aa:	4620      	mov	r0, r4
 80136ac:	2200      	movs	r2, #0
 80136ae:	2104      	movs	r1, #4
 80136b0:	f7ff ff94 	bl	80135dc <std>
 80136b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80136b8:	2201      	movs	r2, #1
 80136ba:	2109      	movs	r1, #9
 80136bc:	f7ff ff8e 	bl	80135dc <std>
 80136c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80136c4:	2202      	movs	r2, #2
 80136c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136ca:	2112      	movs	r1, #18
 80136cc:	f7ff bf86 	b.w	80135dc <std>
 80136d0:	20004520 	.word	0x20004520
 80136d4:	200043e8 	.word	0x200043e8
 80136d8:	08013649 	.word	0x08013649

080136dc <__sfp_lock_acquire>:
 80136dc:	4801      	ldr	r0, [pc, #4]	@ (80136e4 <__sfp_lock_acquire+0x8>)
 80136de:	f000 b962 	b.w	80139a6 <__retarget_lock_acquire_recursive>
 80136e2:	bf00      	nop
 80136e4:	2000452a 	.word	0x2000452a

080136e8 <__sfp_lock_release>:
 80136e8:	4801      	ldr	r0, [pc, #4]	@ (80136f0 <__sfp_lock_release+0x8>)
 80136ea:	f000 b95d 	b.w	80139a8 <__retarget_lock_release_recursive>
 80136ee:	bf00      	nop
 80136f0:	2000452a 	.word	0x2000452a

080136f4 <__sinit>:
 80136f4:	b510      	push	{r4, lr}
 80136f6:	4604      	mov	r4, r0
 80136f8:	f7ff fff0 	bl	80136dc <__sfp_lock_acquire>
 80136fc:	6a23      	ldr	r3, [r4, #32]
 80136fe:	b11b      	cbz	r3, 8013708 <__sinit+0x14>
 8013700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013704:	f7ff bff0 	b.w	80136e8 <__sfp_lock_release>
 8013708:	4b04      	ldr	r3, [pc, #16]	@ (801371c <__sinit+0x28>)
 801370a:	6223      	str	r3, [r4, #32]
 801370c:	4b04      	ldr	r3, [pc, #16]	@ (8013720 <__sinit+0x2c>)
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d1f5      	bne.n	8013700 <__sinit+0xc>
 8013714:	f7ff ffc4 	bl	80136a0 <global_stdio_init.part.0>
 8013718:	e7f2      	b.n	8013700 <__sinit+0xc>
 801371a:	bf00      	nop
 801371c:	08013661 	.word	0x08013661
 8013720:	20004520 	.word	0x20004520

08013724 <fiprintf>:
 8013724:	b40e      	push	{r1, r2, r3}
 8013726:	b503      	push	{r0, r1, lr}
 8013728:	4601      	mov	r1, r0
 801372a:	ab03      	add	r3, sp, #12
 801372c:	4805      	ldr	r0, [pc, #20]	@ (8013744 <fiprintf+0x20>)
 801372e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013732:	6800      	ldr	r0, [r0, #0]
 8013734:	9301      	str	r3, [sp, #4]
 8013736:	f000 fa17 	bl	8013b68 <_vfiprintf_r>
 801373a:	b002      	add	sp, #8
 801373c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013740:	b003      	add	sp, #12
 8013742:	4770      	bx	lr
 8013744:	2000002c 	.word	0x2000002c

08013748 <_fwalk_sglue>:
 8013748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801374c:	4607      	mov	r7, r0
 801374e:	4688      	mov	r8, r1
 8013750:	4614      	mov	r4, r2
 8013752:	2600      	movs	r6, #0
 8013754:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013758:	f1b9 0901 	subs.w	r9, r9, #1
 801375c:	d505      	bpl.n	801376a <_fwalk_sglue+0x22>
 801375e:	6824      	ldr	r4, [r4, #0]
 8013760:	2c00      	cmp	r4, #0
 8013762:	d1f7      	bne.n	8013754 <_fwalk_sglue+0xc>
 8013764:	4630      	mov	r0, r6
 8013766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801376a:	89ab      	ldrh	r3, [r5, #12]
 801376c:	2b01      	cmp	r3, #1
 801376e:	d907      	bls.n	8013780 <_fwalk_sglue+0x38>
 8013770:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013774:	3301      	adds	r3, #1
 8013776:	d003      	beq.n	8013780 <_fwalk_sglue+0x38>
 8013778:	4629      	mov	r1, r5
 801377a:	4638      	mov	r0, r7
 801377c:	47c0      	blx	r8
 801377e:	4306      	orrs	r6, r0
 8013780:	3568      	adds	r5, #104	@ 0x68
 8013782:	e7e9      	b.n	8013758 <_fwalk_sglue+0x10>

08013784 <__sread>:
 8013784:	b510      	push	{r4, lr}
 8013786:	460c      	mov	r4, r1
 8013788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801378c:	f000 f898 	bl	80138c0 <_read_r>
 8013790:	2800      	cmp	r0, #0
 8013792:	bfab      	itete	ge
 8013794:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013796:	89a3      	ldrhlt	r3, [r4, #12]
 8013798:	181b      	addge	r3, r3, r0
 801379a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801379e:	bfac      	ite	ge
 80137a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80137a2:	81a3      	strhlt	r3, [r4, #12]
 80137a4:	bd10      	pop	{r4, pc}

080137a6 <__swrite>:
 80137a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137aa:	461f      	mov	r7, r3
 80137ac:	898b      	ldrh	r3, [r1, #12]
 80137ae:	05db      	lsls	r3, r3, #23
 80137b0:	4605      	mov	r5, r0
 80137b2:	460c      	mov	r4, r1
 80137b4:	4616      	mov	r6, r2
 80137b6:	d505      	bpl.n	80137c4 <__swrite+0x1e>
 80137b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137bc:	2302      	movs	r3, #2
 80137be:	2200      	movs	r2, #0
 80137c0:	f000 f86c 	bl	801389c <_lseek_r>
 80137c4:	89a3      	ldrh	r3, [r4, #12]
 80137c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80137ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80137ce:	81a3      	strh	r3, [r4, #12]
 80137d0:	4632      	mov	r2, r6
 80137d2:	463b      	mov	r3, r7
 80137d4:	4628      	mov	r0, r5
 80137d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80137da:	f000 b8a7 	b.w	801392c <_write_r>

080137de <__sseek>:
 80137de:	b510      	push	{r4, lr}
 80137e0:	460c      	mov	r4, r1
 80137e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137e6:	f000 f859 	bl	801389c <_lseek_r>
 80137ea:	1c43      	adds	r3, r0, #1
 80137ec:	89a3      	ldrh	r3, [r4, #12]
 80137ee:	bf15      	itete	ne
 80137f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80137f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80137f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80137fa:	81a3      	strheq	r3, [r4, #12]
 80137fc:	bf18      	it	ne
 80137fe:	81a3      	strhne	r3, [r4, #12]
 8013800:	bd10      	pop	{r4, pc}

08013802 <__sclose>:
 8013802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013806:	f000 b839 	b.w	801387c <_close_r>

0801380a <memset>:
 801380a:	4402      	add	r2, r0
 801380c:	4603      	mov	r3, r0
 801380e:	4293      	cmp	r3, r2
 8013810:	d100      	bne.n	8013814 <memset+0xa>
 8013812:	4770      	bx	lr
 8013814:	f803 1b01 	strb.w	r1, [r3], #1
 8013818:	e7f9      	b.n	801380e <memset+0x4>

0801381a <_raise_r>:
 801381a:	291f      	cmp	r1, #31
 801381c:	b538      	push	{r3, r4, r5, lr}
 801381e:	4605      	mov	r5, r0
 8013820:	460c      	mov	r4, r1
 8013822:	d904      	bls.n	801382e <_raise_r+0x14>
 8013824:	2316      	movs	r3, #22
 8013826:	6003      	str	r3, [r0, #0]
 8013828:	f04f 30ff 	mov.w	r0, #4294967295
 801382c:	bd38      	pop	{r3, r4, r5, pc}
 801382e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013830:	b112      	cbz	r2, 8013838 <_raise_r+0x1e>
 8013832:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013836:	b94b      	cbnz	r3, 801384c <_raise_r+0x32>
 8013838:	4628      	mov	r0, r5
 801383a:	f000 f865 	bl	8013908 <_getpid_r>
 801383e:	4622      	mov	r2, r4
 8013840:	4601      	mov	r1, r0
 8013842:	4628      	mov	r0, r5
 8013844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013848:	f000 b84c 	b.w	80138e4 <_kill_r>
 801384c:	2b01      	cmp	r3, #1
 801384e:	d00a      	beq.n	8013866 <_raise_r+0x4c>
 8013850:	1c59      	adds	r1, r3, #1
 8013852:	d103      	bne.n	801385c <_raise_r+0x42>
 8013854:	2316      	movs	r3, #22
 8013856:	6003      	str	r3, [r0, #0]
 8013858:	2001      	movs	r0, #1
 801385a:	e7e7      	b.n	801382c <_raise_r+0x12>
 801385c:	2100      	movs	r1, #0
 801385e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013862:	4620      	mov	r0, r4
 8013864:	4798      	blx	r3
 8013866:	2000      	movs	r0, #0
 8013868:	e7e0      	b.n	801382c <_raise_r+0x12>
	...

0801386c <raise>:
 801386c:	4b02      	ldr	r3, [pc, #8]	@ (8013878 <raise+0xc>)
 801386e:	4601      	mov	r1, r0
 8013870:	6818      	ldr	r0, [r3, #0]
 8013872:	f7ff bfd2 	b.w	801381a <_raise_r>
 8013876:	bf00      	nop
 8013878:	2000002c 	.word	0x2000002c

0801387c <_close_r>:
 801387c:	b538      	push	{r3, r4, r5, lr}
 801387e:	4d06      	ldr	r5, [pc, #24]	@ (8013898 <_close_r+0x1c>)
 8013880:	2300      	movs	r3, #0
 8013882:	4604      	mov	r4, r0
 8013884:	4608      	mov	r0, r1
 8013886:	602b      	str	r3, [r5, #0]
 8013888:	f7ed f990 	bl	8000bac <_close>
 801388c:	1c43      	adds	r3, r0, #1
 801388e:	d102      	bne.n	8013896 <_close_r+0x1a>
 8013890:	682b      	ldr	r3, [r5, #0]
 8013892:	b103      	cbz	r3, 8013896 <_close_r+0x1a>
 8013894:	6023      	str	r3, [r4, #0]
 8013896:	bd38      	pop	{r3, r4, r5, pc}
 8013898:	20004524 	.word	0x20004524

0801389c <_lseek_r>:
 801389c:	b538      	push	{r3, r4, r5, lr}
 801389e:	4d07      	ldr	r5, [pc, #28]	@ (80138bc <_lseek_r+0x20>)
 80138a0:	4604      	mov	r4, r0
 80138a2:	4608      	mov	r0, r1
 80138a4:	4611      	mov	r1, r2
 80138a6:	2200      	movs	r2, #0
 80138a8:	602a      	str	r2, [r5, #0]
 80138aa:	461a      	mov	r2, r3
 80138ac:	f7ed f9a5 	bl	8000bfa <_lseek>
 80138b0:	1c43      	adds	r3, r0, #1
 80138b2:	d102      	bne.n	80138ba <_lseek_r+0x1e>
 80138b4:	682b      	ldr	r3, [r5, #0]
 80138b6:	b103      	cbz	r3, 80138ba <_lseek_r+0x1e>
 80138b8:	6023      	str	r3, [r4, #0]
 80138ba:	bd38      	pop	{r3, r4, r5, pc}
 80138bc:	20004524 	.word	0x20004524

080138c0 <_read_r>:
 80138c0:	b538      	push	{r3, r4, r5, lr}
 80138c2:	4d07      	ldr	r5, [pc, #28]	@ (80138e0 <_read_r+0x20>)
 80138c4:	4604      	mov	r4, r0
 80138c6:	4608      	mov	r0, r1
 80138c8:	4611      	mov	r1, r2
 80138ca:	2200      	movs	r2, #0
 80138cc:	602a      	str	r2, [r5, #0]
 80138ce:	461a      	mov	r2, r3
 80138d0:	f7ed f933 	bl	8000b3a <_read>
 80138d4:	1c43      	adds	r3, r0, #1
 80138d6:	d102      	bne.n	80138de <_read_r+0x1e>
 80138d8:	682b      	ldr	r3, [r5, #0]
 80138da:	b103      	cbz	r3, 80138de <_read_r+0x1e>
 80138dc:	6023      	str	r3, [r4, #0]
 80138de:	bd38      	pop	{r3, r4, r5, pc}
 80138e0:	20004524 	.word	0x20004524

080138e4 <_kill_r>:
 80138e4:	b538      	push	{r3, r4, r5, lr}
 80138e6:	4d07      	ldr	r5, [pc, #28]	@ (8013904 <_kill_r+0x20>)
 80138e8:	2300      	movs	r3, #0
 80138ea:	4604      	mov	r4, r0
 80138ec:	4608      	mov	r0, r1
 80138ee:	4611      	mov	r1, r2
 80138f0:	602b      	str	r3, [r5, #0]
 80138f2:	f7ed f907 	bl	8000b04 <_kill>
 80138f6:	1c43      	adds	r3, r0, #1
 80138f8:	d102      	bne.n	8013900 <_kill_r+0x1c>
 80138fa:	682b      	ldr	r3, [r5, #0]
 80138fc:	b103      	cbz	r3, 8013900 <_kill_r+0x1c>
 80138fe:	6023      	str	r3, [r4, #0]
 8013900:	bd38      	pop	{r3, r4, r5, pc}
 8013902:	bf00      	nop
 8013904:	20004524 	.word	0x20004524

08013908 <_getpid_r>:
 8013908:	f7ed b8f4 	b.w	8000af4 <_getpid>

0801390c <_sbrk_r>:
 801390c:	b538      	push	{r3, r4, r5, lr}
 801390e:	4d06      	ldr	r5, [pc, #24]	@ (8013928 <_sbrk_r+0x1c>)
 8013910:	2300      	movs	r3, #0
 8013912:	4604      	mov	r4, r0
 8013914:	4608      	mov	r0, r1
 8013916:	602b      	str	r3, [r5, #0]
 8013918:	f7ed f97c 	bl	8000c14 <_sbrk>
 801391c:	1c43      	adds	r3, r0, #1
 801391e:	d102      	bne.n	8013926 <_sbrk_r+0x1a>
 8013920:	682b      	ldr	r3, [r5, #0]
 8013922:	b103      	cbz	r3, 8013926 <_sbrk_r+0x1a>
 8013924:	6023      	str	r3, [r4, #0]
 8013926:	bd38      	pop	{r3, r4, r5, pc}
 8013928:	20004524 	.word	0x20004524

0801392c <_write_r>:
 801392c:	b538      	push	{r3, r4, r5, lr}
 801392e:	4d07      	ldr	r5, [pc, #28]	@ (801394c <_write_r+0x20>)
 8013930:	4604      	mov	r4, r0
 8013932:	4608      	mov	r0, r1
 8013934:	4611      	mov	r1, r2
 8013936:	2200      	movs	r2, #0
 8013938:	602a      	str	r2, [r5, #0]
 801393a:	461a      	mov	r2, r3
 801393c:	f7ed f91a 	bl	8000b74 <_write>
 8013940:	1c43      	adds	r3, r0, #1
 8013942:	d102      	bne.n	801394a <_write_r+0x1e>
 8013944:	682b      	ldr	r3, [r5, #0]
 8013946:	b103      	cbz	r3, 801394a <_write_r+0x1e>
 8013948:	6023      	str	r3, [r4, #0]
 801394a:	bd38      	pop	{r3, r4, r5, pc}
 801394c:	20004524 	.word	0x20004524

08013950 <__errno>:
 8013950:	4b01      	ldr	r3, [pc, #4]	@ (8013958 <__errno+0x8>)
 8013952:	6818      	ldr	r0, [r3, #0]
 8013954:	4770      	bx	lr
 8013956:	bf00      	nop
 8013958:	2000002c 	.word	0x2000002c

0801395c <__libc_init_array>:
 801395c:	b570      	push	{r4, r5, r6, lr}
 801395e:	4d0d      	ldr	r5, [pc, #52]	@ (8013994 <__libc_init_array+0x38>)
 8013960:	4c0d      	ldr	r4, [pc, #52]	@ (8013998 <__libc_init_array+0x3c>)
 8013962:	1b64      	subs	r4, r4, r5
 8013964:	10a4      	asrs	r4, r4, #2
 8013966:	2600      	movs	r6, #0
 8013968:	42a6      	cmp	r6, r4
 801396a:	d109      	bne.n	8013980 <__libc_init_array+0x24>
 801396c:	4d0b      	ldr	r5, [pc, #44]	@ (801399c <__libc_init_array+0x40>)
 801396e:	4c0c      	ldr	r4, [pc, #48]	@ (80139a0 <__libc_init_array+0x44>)
 8013970:	f000 fd64 	bl	801443c <_init>
 8013974:	1b64      	subs	r4, r4, r5
 8013976:	10a4      	asrs	r4, r4, #2
 8013978:	2600      	movs	r6, #0
 801397a:	42a6      	cmp	r6, r4
 801397c:	d105      	bne.n	801398a <__libc_init_array+0x2e>
 801397e:	bd70      	pop	{r4, r5, r6, pc}
 8013980:	f855 3b04 	ldr.w	r3, [r5], #4
 8013984:	4798      	blx	r3
 8013986:	3601      	adds	r6, #1
 8013988:	e7ee      	b.n	8013968 <__libc_init_array+0xc>
 801398a:	f855 3b04 	ldr.w	r3, [r5], #4
 801398e:	4798      	blx	r3
 8013990:	3601      	adds	r6, #1
 8013992:	e7f2      	b.n	801397a <__libc_init_array+0x1e>
 8013994:	080163a0 	.word	0x080163a0
 8013998:	080163a0 	.word	0x080163a0
 801399c:	080163a0 	.word	0x080163a0
 80139a0:	080163b4 	.word	0x080163b4

080139a4 <__retarget_lock_init_recursive>:
 80139a4:	4770      	bx	lr

080139a6 <__retarget_lock_acquire_recursive>:
 80139a6:	4770      	bx	lr

080139a8 <__retarget_lock_release_recursive>:
 80139a8:	4770      	bx	lr

080139aa <memcpy>:
 80139aa:	440a      	add	r2, r1
 80139ac:	4291      	cmp	r1, r2
 80139ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80139b2:	d100      	bne.n	80139b6 <memcpy+0xc>
 80139b4:	4770      	bx	lr
 80139b6:	b510      	push	{r4, lr}
 80139b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80139bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80139c0:	4291      	cmp	r1, r2
 80139c2:	d1f9      	bne.n	80139b8 <memcpy+0xe>
 80139c4:	bd10      	pop	{r4, pc}
	...

080139c8 <__register_exitproc>:
 80139c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139cc:	4d27      	ldr	r5, [pc, #156]	@ (8013a6c <__register_exitproc+0xa4>)
 80139ce:	4607      	mov	r7, r0
 80139d0:	6828      	ldr	r0, [r5, #0]
 80139d2:	4691      	mov	r9, r2
 80139d4:	460e      	mov	r6, r1
 80139d6:	4698      	mov	r8, r3
 80139d8:	f7ff ffe5 	bl	80139a6 <__retarget_lock_acquire_recursive>
 80139dc:	4a24      	ldr	r2, [pc, #144]	@ (8013a70 <__register_exitproc+0xa8>)
 80139de:	6814      	ldr	r4, [r2, #0]
 80139e0:	b93c      	cbnz	r4, 80139f2 <__register_exitproc+0x2a>
 80139e2:	4b24      	ldr	r3, [pc, #144]	@ (8013a74 <__register_exitproc+0xac>)
 80139e4:	6013      	str	r3, [r2, #0]
 80139e6:	4a24      	ldr	r2, [pc, #144]	@ (8013a78 <__register_exitproc+0xb0>)
 80139e8:	b112      	cbz	r2, 80139f0 <__register_exitproc+0x28>
 80139ea:	6812      	ldr	r2, [r2, #0]
 80139ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80139f0:	4c20      	ldr	r4, [pc, #128]	@ (8013a74 <__register_exitproc+0xac>)
 80139f2:	6863      	ldr	r3, [r4, #4]
 80139f4:	2b1f      	cmp	r3, #31
 80139f6:	dd06      	ble.n	8013a06 <__register_exitproc+0x3e>
 80139f8:	6828      	ldr	r0, [r5, #0]
 80139fa:	f7ff ffd5 	bl	80139a8 <__retarget_lock_release_recursive>
 80139fe:	f04f 30ff 	mov.w	r0, #4294967295
 8013a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a06:	b32f      	cbz	r7, 8013a54 <__register_exitproc+0x8c>
 8013a08:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8013a0c:	b968      	cbnz	r0, 8013a2a <__register_exitproc+0x62>
 8013a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8013a7c <__register_exitproc+0xb4>)
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d0f1      	beq.n	80139f8 <__register_exitproc+0x30>
 8013a14:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8013a18:	f7ff fd22 	bl	8013460 <malloc>
 8013a1c:	2800      	cmp	r0, #0
 8013a1e:	d0eb      	beq.n	80139f8 <__register_exitproc+0x30>
 8013a20:	2300      	movs	r3, #0
 8013a22:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8013a26:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8013a2a:	6863      	ldr	r3, [r4, #4]
 8013a2c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8013a30:	2201      	movs	r2, #1
 8013a32:	409a      	lsls	r2, r3
 8013a34:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8013a38:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8013a3c:	4313      	orrs	r3, r2
 8013a3e:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8013a42:	2f02      	cmp	r7, #2
 8013a44:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8013a48:	bf02      	ittt	eq
 8013a4a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8013a4e:	4313      	orreq	r3, r2
 8013a50:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8013a54:	6863      	ldr	r3, [r4, #4]
 8013a56:	6828      	ldr	r0, [r5, #0]
 8013a58:	1c5a      	adds	r2, r3, #1
 8013a5a:	3302      	adds	r3, #2
 8013a5c:	6062      	str	r2, [r4, #4]
 8013a5e:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8013a62:	f7ff ffa1 	bl	80139a8 <__retarget_lock_release_recursive>
 8013a66:	2000      	movs	r0, #0
 8013a68:	e7cb      	b.n	8013a02 <__register_exitproc+0x3a>
 8013a6a:	bf00      	nop
 8013a6c:	2000007c 	.word	0x2000007c
 8013a70:	200045b8 	.word	0x200045b8
 8013a74:	2000452c 	.word	0x2000452c
 8013a78:	00000000 	.word	0x00000000
 8013a7c:	08013461 	.word	0x08013461

08013a80 <_free_r>:
 8013a80:	b538      	push	{r3, r4, r5, lr}
 8013a82:	4605      	mov	r5, r0
 8013a84:	2900      	cmp	r1, #0
 8013a86:	d041      	beq.n	8013b0c <_free_r+0x8c>
 8013a88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a8c:	1f0c      	subs	r4, r1, #4
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	bfb8      	it	lt
 8013a92:	18e4      	addlt	r4, r4, r3
 8013a94:	f7ff fd96 	bl	80135c4 <__malloc_lock>
 8013a98:	4a1d      	ldr	r2, [pc, #116]	@ (8013b10 <_free_r+0x90>)
 8013a9a:	6813      	ldr	r3, [r2, #0]
 8013a9c:	b933      	cbnz	r3, 8013aac <_free_r+0x2c>
 8013a9e:	6063      	str	r3, [r4, #4]
 8013aa0:	6014      	str	r4, [r2, #0]
 8013aa2:	4628      	mov	r0, r5
 8013aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013aa8:	f7ff bd92 	b.w	80135d0 <__malloc_unlock>
 8013aac:	42a3      	cmp	r3, r4
 8013aae:	d908      	bls.n	8013ac2 <_free_r+0x42>
 8013ab0:	6820      	ldr	r0, [r4, #0]
 8013ab2:	1821      	adds	r1, r4, r0
 8013ab4:	428b      	cmp	r3, r1
 8013ab6:	bf01      	itttt	eq
 8013ab8:	6819      	ldreq	r1, [r3, #0]
 8013aba:	685b      	ldreq	r3, [r3, #4]
 8013abc:	1809      	addeq	r1, r1, r0
 8013abe:	6021      	streq	r1, [r4, #0]
 8013ac0:	e7ed      	b.n	8013a9e <_free_r+0x1e>
 8013ac2:	461a      	mov	r2, r3
 8013ac4:	685b      	ldr	r3, [r3, #4]
 8013ac6:	b10b      	cbz	r3, 8013acc <_free_r+0x4c>
 8013ac8:	42a3      	cmp	r3, r4
 8013aca:	d9fa      	bls.n	8013ac2 <_free_r+0x42>
 8013acc:	6811      	ldr	r1, [r2, #0]
 8013ace:	1850      	adds	r0, r2, r1
 8013ad0:	42a0      	cmp	r0, r4
 8013ad2:	d10b      	bne.n	8013aec <_free_r+0x6c>
 8013ad4:	6820      	ldr	r0, [r4, #0]
 8013ad6:	4401      	add	r1, r0
 8013ad8:	1850      	adds	r0, r2, r1
 8013ada:	4283      	cmp	r3, r0
 8013adc:	6011      	str	r1, [r2, #0]
 8013ade:	d1e0      	bne.n	8013aa2 <_free_r+0x22>
 8013ae0:	6818      	ldr	r0, [r3, #0]
 8013ae2:	685b      	ldr	r3, [r3, #4]
 8013ae4:	6053      	str	r3, [r2, #4]
 8013ae6:	4408      	add	r0, r1
 8013ae8:	6010      	str	r0, [r2, #0]
 8013aea:	e7da      	b.n	8013aa2 <_free_r+0x22>
 8013aec:	d902      	bls.n	8013af4 <_free_r+0x74>
 8013aee:	230c      	movs	r3, #12
 8013af0:	602b      	str	r3, [r5, #0]
 8013af2:	e7d6      	b.n	8013aa2 <_free_r+0x22>
 8013af4:	6820      	ldr	r0, [r4, #0]
 8013af6:	1821      	adds	r1, r4, r0
 8013af8:	428b      	cmp	r3, r1
 8013afa:	bf04      	itt	eq
 8013afc:	6819      	ldreq	r1, [r3, #0]
 8013afe:	685b      	ldreq	r3, [r3, #4]
 8013b00:	6063      	str	r3, [r4, #4]
 8013b02:	bf04      	itt	eq
 8013b04:	1809      	addeq	r1, r1, r0
 8013b06:	6021      	streq	r1, [r4, #0]
 8013b08:	6054      	str	r4, [r2, #4]
 8013b0a:	e7ca      	b.n	8013aa2 <_free_r+0x22>
 8013b0c:	bd38      	pop	{r3, r4, r5, pc}
 8013b0e:	bf00      	nop
 8013b10:	200043e4 	.word	0x200043e4

08013b14 <__sfputc_r>:
 8013b14:	6893      	ldr	r3, [r2, #8]
 8013b16:	3b01      	subs	r3, #1
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	b410      	push	{r4}
 8013b1c:	6093      	str	r3, [r2, #8]
 8013b1e:	da08      	bge.n	8013b32 <__sfputc_r+0x1e>
 8013b20:	6994      	ldr	r4, [r2, #24]
 8013b22:	42a3      	cmp	r3, r4
 8013b24:	db01      	blt.n	8013b2a <__sfputc_r+0x16>
 8013b26:	290a      	cmp	r1, #10
 8013b28:	d103      	bne.n	8013b32 <__sfputc_r+0x1e>
 8013b2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b2e:	f000 bb6d 	b.w	801420c <__swbuf_r>
 8013b32:	6813      	ldr	r3, [r2, #0]
 8013b34:	1c58      	adds	r0, r3, #1
 8013b36:	6010      	str	r0, [r2, #0]
 8013b38:	7019      	strb	r1, [r3, #0]
 8013b3a:	4608      	mov	r0, r1
 8013b3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b40:	4770      	bx	lr

08013b42 <__sfputs_r>:
 8013b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b44:	4606      	mov	r6, r0
 8013b46:	460f      	mov	r7, r1
 8013b48:	4614      	mov	r4, r2
 8013b4a:	18d5      	adds	r5, r2, r3
 8013b4c:	42ac      	cmp	r4, r5
 8013b4e:	d101      	bne.n	8013b54 <__sfputs_r+0x12>
 8013b50:	2000      	movs	r0, #0
 8013b52:	e007      	b.n	8013b64 <__sfputs_r+0x22>
 8013b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b58:	463a      	mov	r2, r7
 8013b5a:	4630      	mov	r0, r6
 8013b5c:	f7ff ffda 	bl	8013b14 <__sfputc_r>
 8013b60:	1c43      	adds	r3, r0, #1
 8013b62:	d1f3      	bne.n	8013b4c <__sfputs_r+0xa>
 8013b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013b68 <_vfiprintf_r>:
 8013b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b6c:	460d      	mov	r5, r1
 8013b6e:	b09d      	sub	sp, #116	@ 0x74
 8013b70:	4614      	mov	r4, r2
 8013b72:	4698      	mov	r8, r3
 8013b74:	4606      	mov	r6, r0
 8013b76:	b118      	cbz	r0, 8013b80 <_vfiprintf_r+0x18>
 8013b78:	6a03      	ldr	r3, [r0, #32]
 8013b7a:	b90b      	cbnz	r3, 8013b80 <_vfiprintf_r+0x18>
 8013b7c:	f7ff fdba 	bl	80136f4 <__sinit>
 8013b80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013b82:	07d9      	lsls	r1, r3, #31
 8013b84:	d405      	bmi.n	8013b92 <_vfiprintf_r+0x2a>
 8013b86:	89ab      	ldrh	r3, [r5, #12]
 8013b88:	059a      	lsls	r2, r3, #22
 8013b8a:	d402      	bmi.n	8013b92 <_vfiprintf_r+0x2a>
 8013b8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013b8e:	f7ff ff0a 	bl	80139a6 <__retarget_lock_acquire_recursive>
 8013b92:	89ab      	ldrh	r3, [r5, #12]
 8013b94:	071b      	lsls	r3, r3, #28
 8013b96:	d501      	bpl.n	8013b9c <_vfiprintf_r+0x34>
 8013b98:	692b      	ldr	r3, [r5, #16]
 8013b9a:	b99b      	cbnz	r3, 8013bc4 <_vfiprintf_r+0x5c>
 8013b9c:	4629      	mov	r1, r5
 8013b9e:	4630      	mov	r0, r6
 8013ba0:	f000 fb72 	bl	8014288 <__swsetup_r>
 8013ba4:	b170      	cbz	r0, 8013bc4 <_vfiprintf_r+0x5c>
 8013ba6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013ba8:	07dc      	lsls	r4, r3, #31
 8013baa:	d504      	bpl.n	8013bb6 <_vfiprintf_r+0x4e>
 8013bac:	f04f 30ff 	mov.w	r0, #4294967295
 8013bb0:	b01d      	add	sp, #116	@ 0x74
 8013bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bb6:	89ab      	ldrh	r3, [r5, #12]
 8013bb8:	0598      	lsls	r0, r3, #22
 8013bba:	d4f7      	bmi.n	8013bac <_vfiprintf_r+0x44>
 8013bbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013bbe:	f7ff fef3 	bl	80139a8 <__retarget_lock_release_recursive>
 8013bc2:	e7f3      	b.n	8013bac <_vfiprintf_r+0x44>
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8013bc8:	2320      	movs	r3, #32
 8013bca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013bce:	f8cd 800c 	str.w	r8, [sp, #12]
 8013bd2:	2330      	movs	r3, #48	@ 0x30
 8013bd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013d84 <_vfiprintf_r+0x21c>
 8013bd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013bdc:	f04f 0901 	mov.w	r9, #1
 8013be0:	4623      	mov	r3, r4
 8013be2:	469a      	mov	sl, r3
 8013be4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013be8:	b10a      	cbz	r2, 8013bee <_vfiprintf_r+0x86>
 8013bea:	2a25      	cmp	r2, #37	@ 0x25
 8013bec:	d1f9      	bne.n	8013be2 <_vfiprintf_r+0x7a>
 8013bee:	ebba 0b04 	subs.w	fp, sl, r4
 8013bf2:	d00b      	beq.n	8013c0c <_vfiprintf_r+0xa4>
 8013bf4:	465b      	mov	r3, fp
 8013bf6:	4622      	mov	r2, r4
 8013bf8:	4629      	mov	r1, r5
 8013bfa:	4630      	mov	r0, r6
 8013bfc:	f7ff ffa1 	bl	8013b42 <__sfputs_r>
 8013c00:	3001      	adds	r0, #1
 8013c02:	f000 80a7 	beq.w	8013d54 <_vfiprintf_r+0x1ec>
 8013c06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013c08:	445a      	add	r2, fp
 8013c0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8013c0c:	f89a 3000 	ldrb.w	r3, [sl]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	f000 809f 	beq.w	8013d54 <_vfiprintf_r+0x1ec>
 8013c16:	2300      	movs	r3, #0
 8013c18:	f04f 32ff 	mov.w	r2, #4294967295
 8013c1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c20:	f10a 0a01 	add.w	sl, sl, #1
 8013c24:	9304      	str	r3, [sp, #16]
 8013c26:	9307      	str	r3, [sp, #28]
 8013c28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013c2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8013c2e:	4654      	mov	r4, sl
 8013c30:	2205      	movs	r2, #5
 8013c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c36:	4853      	ldr	r0, [pc, #332]	@ (8013d84 <_vfiprintf_r+0x21c>)
 8013c38:	f7ec faca 	bl	80001d0 <memchr>
 8013c3c:	9a04      	ldr	r2, [sp, #16]
 8013c3e:	b9d8      	cbnz	r0, 8013c78 <_vfiprintf_r+0x110>
 8013c40:	06d1      	lsls	r1, r2, #27
 8013c42:	bf44      	itt	mi
 8013c44:	2320      	movmi	r3, #32
 8013c46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013c4a:	0713      	lsls	r3, r2, #28
 8013c4c:	bf44      	itt	mi
 8013c4e:	232b      	movmi	r3, #43	@ 0x2b
 8013c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013c54:	f89a 3000 	ldrb.w	r3, [sl]
 8013c58:	2b2a      	cmp	r3, #42	@ 0x2a
 8013c5a:	d015      	beq.n	8013c88 <_vfiprintf_r+0x120>
 8013c5c:	9a07      	ldr	r2, [sp, #28]
 8013c5e:	4654      	mov	r4, sl
 8013c60:	2000      	movs	r0, #0
 8013c62:	f04f 0c0a 	mov.w	ip, #10
 8013c66:	4621      	mov	r1, r4
 8013c68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013c6c:	3b30      	subs	r3, #48	@ 0x30
 8013c6e:	2b09      	cmp	r3, #9
 8013c70:	d94b      	bls.n	8013d0a <_vfiprintf_r+0x1a2>
 8013c72:	b1b0      	cbz	r0, 8013ca2 <_vfiprintf_r+0x13a>
 8013c74:	9207      	str	r2, [sp, #28]
 8013c76:	e014      	b.n	8013ca2 <_vfiprintf_r+0x13a>
 8013c78:	eba0 0308 	sub.w	r3, r0, r8
 8013c7c:	fa09 f303 	lsl.w	r3, r9, r3
 8013c80:	4313      	orrs	r3, r2
 8013c82:	9304      	str	r3, [sp, #16]
 8013c84:	46a2      	mov	sl, r4
 8013c86:	e7d2      	b.n	8013c2e <_vfiprintf_r+0xc6>
 8013c88:	9b03      	ldr	r3, [sp, #12]
 8013c8a:	1d19      	adds	r1, r3, #4
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	9103      	str	r1, [sp, #12]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	bfbb      	ittet	lt
 8013c94:	425b      	neglt	r3, r3
 8013c96:	f042 0202 	orrlt.w	r2, r2, #2
 8013c9a:	9307      	strge	r3, [sp, #28]
 8013c9c:	9307      	strlt	r3, [sp, #28]
 8013c9e:	bfb8      	it	lt
 8013ca0:	9204      	strlt	r2, [sp, #16]
 8013ca2:	7823      	ldrb	r3, [r4, #0]
 8013ca4:	2b2e      	cmp	r3, #46	@ 0x2e
 8013ca6:	d10a      	bne.n	8013cbe <_vfiprintf_r+0x156>
 8013ca8:	7863      	ldrb	r3, [r4, #1]
 8013caa:	2b2a      	cmp	r3, #42	@ 0x2a
 8013cac:	d132      	bne.n	8013d14 <_vfiprintf_r+0x1ac>
 8013cae:	9b03      	ldr	r3, [sp, #12]
 8013cb0:	1d1a      	adds	r2, r3, #4
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	9203      	str	r2, [sp, #12]
 8013cb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013cba:	3402      	adds	r4, #2
 8013cbc:	9305      	str	r3, [sp, #20]
 8013cbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013d94 <_vfiprintf_r+0x22c>
 8013cc2:	7821      	ldrb	r1, [r4, #0]
 8013cc4:	2203      	movs	r2, #3
 8013cc6:	4650      	mov	r0, sl
 8013cc8:	f7ec fa82 	bl	80001d0 <memchr>
 8013ccc:	b138      	cbz	r0, 8013cde <_vfiprintf_r+0x176>
 8013cce:	9b04      	ldr	r3, [sp, #16]
 8013cd0:	eba0 000a 	sub.w	r0, r0, sl
 8013cd4:	2240      	movs	r2, #64	@ 0x40
 8013cd6:	4082      	lsls	r2, r0
 8013cd8:	4313      	orrs	r3, r2
 8013cda:	3401      	adds	r4, #1
 8013cdc:	9304      	str	r3, [sp, #16]
 8013cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ce2:	4829      	ldr	r0, [pc, #164]	@ (8013d88 <_vfiprintf_r+0x220>)
 8013ce4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013ce8:	2206      	movs	r2, #6
 8013cea:	f7ec fa71 	bl	80001d0 <memchr>
 8013cee:	2800      	cmp	r0, #0
 8013cf0:	d03f      	beq.n	8013d72 <_vfiprintf_r+0x20a>
 8013cf2:	4b26      	ldr	r3, [pc, #152]	@ (8013d8c <_vfiprintf_r+0x224>)
 8013cf4:	bb1b      	cbnz	r3, 8013d3e <_vfiprintf_r+0x1d6>
 8013cf6:	9b03      	ldr	r3, [sp, #12]
 8013cf8:	3307      	adds	r3, #7
 8013cfa:	f023 0307 	bic.w	r3, r3, #7
 8013cfe:	3308      	adds	r3, #8
 8013d00:	9303      	str	r3, [sp, #12]
 8013d02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d04:	443b      	add	r3, r7
 8013d06:	9309      	str	r3, [sp, #36]	@ 0x24
 8013d08:	e76a      	b.n	8013be0 <_vfiprintf_r+0x78>
 8013d0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8013d0e:	460c      	mov	r4, r1
 8013d10:	2001      	movs	r0, #1
 8013d12:	e7a8      	b.n	8013c66 <_vfiprintf_r+0xfe>
 8013d14:	2300      	movs	r3, #0
 8013d16:	3401      	adds	r4, #1
 8013d18:	9305      	str	r3, [sp, #20]
 8013d1a:	4619      	mov	r1, r3
 8013d1c:	f04f 0c0a 	mov.w	ip, #10
 8013d20:	4620      	mov	r0, r4
 8013d22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d26:	3a30      	subs	r2, #48	@ 0x30
 8013d28:	2a09      	cmp	r2, #9
 8013d2a:	d903      	bls.n	8013d34 <_vfiprintf_r+0x1cc>
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d0c6      	beq.n	8013cbe <_vfiprintf_r+0x156>
 8013d30:	9105      	str	r1, [sp, #20]
 8013d32:	e7c4      	b.n	8013cbe <_vfiprintf_r+0x156>
 8013d34:	fb0c 2101 	mla	r1, ip, r1, r2
 8013d38:	4604      	mov	r4, r0
 8013d3a:	2301      	movs	r3, #1
 8013d3c:	e7f0      	b.n	8013d20 <_vfiprintf_r+0x1b8>
 8013d3e:	ab03      	add	r3, sp, #12
 8013d40:	9300      	str	r3, [sp, #0]
 8013d42:	462a      	mov	r2, r5
 8013d44:	4b12      	ldr	r3, [pc, #72]	@ (8013d90 <_vfiprintf_r+0x228>)
 8013d46:	a904      	add	r1, sp, #16
 8013d48:	4630      	mov	r0, r6
 8013d4a:	f3af 8000 	nop.w
 8013d4e:	4607      	mov	r7, r0
 8013d50:	1c78      	adds	r0, r7, #1
 8013d52:	d1d6      	bne.n	8013d02 <_vfiprintf_r+0x19a>
 8013d54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013d56:	07d9      	lsls	r1, r3, #31
 8013d58:	d405      	bmi.n	8013d66 <_vfiprintf_r+0x1fe>
 8013d5a:	89ab      	ldrh	r3, [r5, #12]
 8013d5c:	059a      	lsls	r2, r3, #22
 8013d5e:	d402      	bmi.n	8013d66 <_vfiprintf_r+0x1fe>
 8013d60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013d62:	f7ff fe21 	bl	80139a8 <__retarget_lock_release_recursive>
 8013d66:	89ab      	ldrh	r3, [r5, #12]
 8013d68:	065b      	lsls	r3, r3, #25
 8013d6a:	f53f af1f 	bmi.w	8013bac <_vfiprintf_r+0x44>
 8013d6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013d70:	e71e      	b.n	8013bb0 <_vfiprintf_r+0x48>
 8013d72:	ab03      	add	r3, sp, #12
 8013d74:	9300      	str	r3, [sp, #0]
 8013d76:	462a      	mov	r2, r5
 8013d78:	4b05      	ldr	r3, [pc, #20]	@ (8013d90 <_vfiprintf_r+0x228>)
 8013d7a:	a904      	add	r1, sp, #16
 8013d7c:	4630      	mov	r0, r6
 8013d7e:	f000 f879 	bl	8013e74 <_printf_i>
 8013d82:	e7e4      	b.n	8013d4e <_vfiprintf_r+0x1e6>
 8013d84:	08015ee0 	.word	0x08015ee0
 8013d88:	08015eea 	.word	0x08015eea
 8013d8c:	00000000 	.word	0x00000000
 8013d90:	08013b43 	.word	0x08013b43
 8013d94:	08015ee6 	.word	0x08015ee6

08013d98 <_printf_common>:
 8013d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d9c:	4616      	mov	r6, r2
 8013d9e:	4698      	mov	r8, r3
 8013da0:	688a      	ldr	r2, [r1, #8]
 8013da2:	690b      	ldr	r3, [r1, #16]
 8013da4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013da8:	4293      	cmp	r3, r2
 8013daa:	bfb8      	it	lt
 8013dac:	4613      	movlt	r3, r2
 8013dae:	6033      	str	r3, [r6, #0]
 8013db0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013db4:	4607      	mov	r7, r0
 8013db6:	460c      	mov	r4, r1
 8013db8:	b10a      	cbz	r2, 8013dbe <_printf_common+0x26>
 8013dba:	3301      	adds	r3, #1
 8013dbc:	6033      	str	r3, [r6, #0]
 8013dbe:	6823      	ldr	r3, [r4, #0]
 8013dc0:	0699      	lsls	r1, r3, #26
 8013dc2:	bf42      	ittt	mi
 8013dc4:	6833      	ldrmi	r3, [r6, #0]
 8013dc6:	3302      	addmi	r3, #2
 8013dc8:	6033      	strmi	r3, [r6, #0]
 8013dca:	6825      	ldr	r5, [r4, #0]
 8013dcc:	f015 0506 	ands.w	r5, r5, #6
 8013dd0:	d106      	bne.n	8013de0 <_printf_common+0x48>
 8013dd2:	f104 0a19 	add.w	sl, r4, #25
 8013dd6:	68e3      	ldr	r3, [r4, #12]
 8013dd8:	6832      	ldr	r2, [r6, #0]
 8013dda:	1a9b      	subs	r3, r3, r2
 8013ddc:	42ab      	cmp	r3, r5
 8013dde:	dc26      	bgt.n	8013e2e <_printf_common+0x96>
 8013de0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013de4:	6822      	ldr	r2, [r4, #0]
 8013de6:	3b00      	subs	r3, #0
 8013de8:	bf18      	it	ne
 8013dea:	2301      	movne	r3, #1
 8013dec:	0692      	lsls	r2, r2, #26
 8013dee:	d42b      	bmi.n	8013e48 <_printf_common+0xb0>
 8013df0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013df4:	4641      	mov	r1, r8
 8013df6:	4638      	mov	r0, r7
 8013df8:	47c8      	blx	r9
 8013dfa:	3001      	adds	r0, #1
 8013dfc:	d01e      	beq.n	8013e3c <_printf_common+0xa4>
 8013dfe:	6823      	ldr	r3, [r4, #0]
 8013e00:	6922      	ldr	r2, [r4, #16]
 8013e02:	f003 0306 	and.w	r3, r3, #6
 8013e06:	2b04      	cmp	r3, #4
 8013e08:	bf02      	ittt	eq
 8013e0a:	68e5      	ldreq	r5, [r4, #12]
 8013e0c:	6833      	ldreq	r3, [r6, #0]
 8013e0e:	1aed      	subeq	r5, r5, r3
 8013e10:	68a3      	ldr	r3, [r4, #8]
 8013e12:	bf0c      	ite	eq
 8013e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013e18:	2500      	movne	r5, #0
 8013e1a:	4293      	cmp	r3, r2
 8013e1c:	bfc4      	itt	gt
 8013e1e:	1a9b      	subgt	r3, r3, r2
 8013e20:	18ed      	addgt	r5, r5, r3
 8013e22:	2600      	movs	r6, #0
 8013e24:	341a      	adds	r4, #26
 8013e26:	42b5      	cmp	r5, r6
 8013e28:	d11a      	bne.n	8013e60 <_printf_common+0xc8>
 8013e2a:	2000      	movs	r0, #0
 8013e2c:	e008      	b.n	8013e40 <_printf_common+0xa8>
 8013e2e:	2301      	movs	r3, #1
 8013e30:	4652      	mov	r2, sl
 8013e32:	4641      	mov	r1, r8
 8013e34:	4638      	mov	r0, r7
 8013e36:	47c8      	blx	r9
 8013e38:	3001      	adds	r0, #1
 8013e3a:	d103      	bne.n	8013e44 <_printf_common+0xac>
 8013e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8013e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e44:	3501      	adds	r5, #1
 8013e46:	e7c6      	b.n	8013dd6 <_printf_common+0x3e>
 8013e48:	18e1      	adds	r1, r4, r3
 8013e4a:	1c5a      	adds	r2, r3, #1
 8013e4c:	2030      	movs	r0, #48	@ 0x30
 8013e4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013e52:	4422      	add	r2, r4
 8013e54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013e58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013e5c:	3302      	adds	r3, #2
 8013e5e:	e7c7      	b.n	8013df0 <_printf_common+0x58>
 8013e60:	2301      	movs	r3, #1
 8013e62:	4622      	mov	r2, r4
 8013e64:	4641      	mov	r1, r8
 8013e66:	4638      	mov	r0, r7
 8013e68:	47c8      	blx	r9
 8013e6a:	3001      	adds	r0, #1
 8013e6c:	d0e6      	beq.n	8013e3c <_printf_common+0xa4>
 8013e6e:	3601      	adds	r6, #1
 8013e70:	e7d9      	b.n	8013e26 <_printf_common+0x8e>
	...

08013e74 <_printf_i>:
 8013e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013e78:	7e0f      	ldrb	r7, [r1, #24]
 8013e7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013e7c:	2f78      	cmp	r7, #120	@ 0x78
 8013e7e:	4691      	mov	r9, r2
 8013e80:	4680      	mov	r8, r0
 8013e82:	460c      	mov	r4, r1
 8013e84:	469a      	mov	sl, r3
 8013e86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013e8a:	d807      	bhi.n	8013e9c <_printf_i+0x28>
 8013e8c:	2f62      	cmp	r7, #98	@ 0x62
 8013e8e:	d80a      	bhi.n	8013ea6 <_printf_i+0x32>
 8013e90:	2f00      	cmp	r7, #0
 8013e92:	f000 80d2 	beq.w	801403a <_printf_i+0x1c6>
 8013e96:	2f58      	cmp	r7, #88	@ 0x58
 8013e98:	f000 80b9 	beq.w	801400e <_printf_i+0x19a>
 8013e9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013ea0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013ea4:	e03a      	b.n	8013f1c <_printf_i+0xa8>
 8013ea6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013eaa:	2b15      	cmp	r3, #21
 8013eac:	d8f6      	bhi.n	8013e9c <_printf_i+0x28>
 8013eae:	a101      	add	r1, pc, #4	@ (adr r1, 8013eb4 <_printf_i+0x40>)
 8013eb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013eb4:	08013f0d 	.word	0x08013f0d
 8013eb8:	08013f21 	.word	0x08013f21
 8013ebc:	08013e9d 	.word	0x08013e9d
 8013ec0:	08013e9d 	.word	0x08013e9d
 8013ec4:	08013e9d 	.word	0x08013e9d
 8013ec8:	08013e9d 	.word	0x08013e9d
 8013ecc:	08013f21 	.word	0x08013f21
 8013ed0:	08013e9d 	.word	0x08013e9d
 8013ed4:	08013e9d 	.word	0x08013e9d
 8013ed8:	08013e9d 	.word	0x08013e9d
 8013edc:	08013e9d 	.word	0x08013e9d
 8013ee0:	08014021 	.word	0x08014021
 8013ee4:	08013f4b 	.word	0x08013f4b
 8013ee8:	08013fdb 	.word	0x08013fdb
 8013eec:	08013e9d 	.word	0x08013e9d
 8013ef0:	08013e9d 	.word	0x08013e9d
 8013ef4:	08014043 	.word	0x08014043
 8013ef8:	08013e9d 	.word	0x08013e9d
 8013efc:	08013f4b 	.word	0x08013f4b
 8013f00:	08013e9d 	.word	0x08013e9d
 8013f04:	08013e9d 	.word	0x08013e9d
 8013f08:	08013fe3 	.word	0x08013fe3
 8013f0c:	6833      	ldr	r3, [r6, #0]
 8013f0e:	1d1a      	adds	r2, r3, #4
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	6032      	str	r2, [r6, #0]
 8013f14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013f18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013f1c:	2301      	movs	r3, #1
 8013f1e:	e09d      	b.n	801405c <_printf_i+0x1e8>
 8013f20:	6833      	ldr	r3, [r6, #0]
 8013f22:	6820      	ldr	r0, [r4, #0]
 8013f24:	1d19      	adds	r1, r3, #4
 8013f26:	6031      	str	r1, [r6, #0]
 8013f28:	0606      	lsls	r6, r0, #24
 8013f2a:	d501      	bpl.n	8013f30 <_printf_i+0xbc>
 8013f2c:	681d      	ldr	r5, [r3, #0]
 8013f2e:	e003      	b.n	8013f38 <_printf_i+0xc4>
 8013f30:	0645      	lsls	r5, r0, #25
 8013f32:	d5fb      	bpl.n	8013f2c <_printf_i+0xb8>
 8013f34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013f38:	2d00      	cmp	r5, #0
 8013f3a:	da03      	bge.n	8013f44 <_printf_i+0xd0>
 8013f3c:	232d      	movs	r3, #45	@ 0x2d
 8013f3e:	426d      	negs	r5, r5
 8013f40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013f44:	4859      	ldr	r0, [pc, #356]	@ (80140ac <_printf_i+0x238>)
 8013f46:	230a      	movs	r3, #10
 8013f48:	e011      	b.n	8013f6e <_printf_i+0xfa>
 8013f4a:	6821      	ldr	r1, [r4, #0]
 8013f4c:	6833      	ldr	r3, [r6, #0]
 8013f4e:	0608      	lsls	r0, r1, #24
 8013f50:	f853 5b04 	ldr.w	r5, [r3], #4
 8013f54:	d402      	bmi.n	8013f5c <_printf_i+0xe8>
 8013f56:	0649      	lsls	r1, r1, #25
 8013f58:	bf48      	it	mi
 8013f5a:	b2ad      	uxthmi	r5, r5
 8013f5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8013f5e:	4853      	ldr	r0, [pc, #332]	@ (80140ac <_printf_i+0x238>)
 8013f60:	6033      	str	r3, [r6, #0]
 8013f62:	bf14      	ite	ne
 8013f64:	230a      	movne	r3, #10
 8013f66:	2308      	moveq	r3, #8
 8013f68:	2100      	movs	r1, #0
 8013f6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013f6e:	6866      	ldr	r6, [r4, #4]
 8013f70:	60a6      	str	r6, [r4, #8]
 8013f72:	2e00      	cmp	r6, #0
 8013f74:	bfa2      	ittt	ge
 8013f76:	6821      	ldrge	r1, [r4, #0]
 8013f78:	f021 0104 	bicge.w	r1, r1, #4
 8013f7c:	6021      	strge	r1, [r4, #0]
 8013f7e:	b90d      	cbnz	r5, 8013f84 <_printf_i+0x110>
 8013f80:	2e00      	cmp	r6, #0
 8013f82:	d04b      	beq.n	801401c <_printf_i+0x1a8>
 8013f84:	4616      	mov	r6, r2
 8013f86:	fbb5 f1f3 	udiv	r1, r5, r3
 8013f8a:	fb03 5711 	mls	r7, r3, r1, r5
 8013f8e:	5dc7      	ldrb	r7, [r0, r7]
 8013f90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013f94:	462f      	mov	r7, r5
 8013f96:	42bb      	cmp	r3, r7
 8013f98:	460d      	mov	r5, r1
 8013f9a:	d9f4      	bls.n	8013f86 <_printf_i+0x112>
 8013f9c:	2b08      	cmp	r3, #8
 8013f9e:	d10b      	bne.n	8013fb8 <_printf_i+0x144>
 8013fa0:	6823      	ldr	r3, [r4, #0]
 8013fa2:	07df      	lsls	r7, r3, #31
 8013fa4:	d508      	bpl.n	8013fb8 <_printf_i+0x144>
 8013fa6:	6923      	ldr	r3, [r4, #16]
 8013fa8:	6861      	ldr	r1, [r4, #4]
 8013faa:	4299      	cmp	r1, r3
 8013fac:	bfde      	ittt	le
 8013fae:	2330      	movle	r3, #48	@ 0x30
 8013fb0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013fb4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013fb8:	1b92      	subs	r2, r2, r6
 8013fba:	6122      	str	r2, [r4, #16]
 8013fbc:	f8cd a000 	str.w	sl, [sp]
 8013fc0:	464b      	mov	r3, r9
 8013fc2:	aa03      	add	r2, sp, #12
 8013fc4:	4621      	mov	r1, r4
 8013fc6:	4640      	mov	r0, r8
 8013fc8:	f7ff fee6 	bl	8013d98 <_printf_common>
 8013fcc:	3001      	adds	r0, #1
 8013fce:	d14a      	bne.n	8014066 <_printf_i+0x1f2>
 8013fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8013fd4:	b004      	add	sp, #16
 8013fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fda:	6823      	ldr	r3, [r4, #0]
 8013fdc:	f043 0320 	orr.w	r3, r3, #32
 8013fe0:	6023      	str	r3, [r4, #0]
 8013fe2:	4833      	ldr	r0, [pc, #204]	@ (80140b0 <_printf_i+0x23c>)
 8013fe4:	2778      	movs	r7, #120	@ 0x78
 8013fe6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013fea:	6823      	ldr	r3, [r4, #0]
 8013fec:	6831      	ldr	r1, [r6, #0]
 8013fee:	061f      	lsls	r7, r3, #24
 8013ff0:	f851 5b04 	ldr.w	r5, [r1], #4
 8013ff4:	d402      	bmi.n	8013ffc <_printf_i+0x188>
 8013ff6:	065f      	lsls	r7, r3, #25
 8013ff8:	bf48      	it	mi
 8013ffa:	b2ad      	uxthmi	r5, r5
 8013ffc:	6031      	str	r1, [r6, #0]
 8013ffe:	07d9      	lsls	r1, r3, #31
 8014000:	bf44      	itt	mi
 8014002:	f043 0320 	orrmi.w	r3, r3, #32
 8014006:	6023      	strmi	r3, [r4, #0]
 8014008:	b11d      	cbz	r5, 8014012 <_printf_i+0x19e>
 801400a:	2310      	movs	r3, #16
 801400c:	e7ac      	b.n	8013f68 <_printf_i+0xf4>
 801400e:	4827      	ldr	r0, [pc, #156]	@ (80140ac <_printf_i+0x238>)
 8014010:	e7e9      	b.n	8013fe6 <_printf_i+0x172>
 8014012:	6823      	ldr	r3, [r4, #0]
 8014014:	f023 0320 	bic.w	r3, r3, #32
 8014018:	6023      	str	r3, [r4, #0]
 801401a:	e7f6      	b.n	801400a <_printf_i+0x196>
 801401c:	4616      	mov	r6, r2
 801401e:	e7bd      	b.n	8013f9c <_printf_i+0x128>
 8014020:	6833      	ldr	r3, [r6, #0]
 8014022:	6825      	ldr	r5, [r4, #0]
 8014024:	6961      	ldr	r1, [r4, #20]
 8014026:	1d18      	adds	r0, r3, #4
 8014028:	6030      	str	r0, [r6, #0]
 801402a:	062e      	lsls	r6, r5, #24
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	d501      	bpl.n	8014034 <_printf_i+0x1c0>
 8014030:	6019      	str	r1, [r3, #0]
 8014032:	e002      	b.n	801403a <_printf_i+0x1c6>
 8014034:	0668      	lsls	r0, r5, #25
 8014036:	d5fb      	bpl.n	8014030 <_printf_i+0x1bc>
 8014038:	8019      	strh	r1, [r3, #0]
 801403a:	2300      	movs	r3, #0
 801403c:	6123      	str	r3, [r4, #16]
 801403e:	4616      	mov	r6, r2
 8014040:	e7bc      	b.n	8013fbc <_printf_i+0x148>
 8014042:	6833      	ldr	r3, [r6, #0]
 8014044:	1d1a      	adds	r2, r3, #4
 8014046:	6032      	str	r2, [r6, #0]
 8014048:	681e      	ldr	r6, [r3, #0]
 801404a:	6862      	ldr	r2, [r4, #4]
 801404c:	2100      	movs	r1, #0
 801404e:	4630      	mov	r0, r6
 8014050:	f7ec f8be 	bl	80001d0 <memchr>
 8014054:	b108      	cbz	r0, 801405a <_printf_i+0x1e6>
 8014056:	1b80      	subs	r0, r0, r6
 8014058:	6060      	str	r0, [r4, #4]
 801405a:	6863      	ldr	r3, [r4, #4]
 801405c:	6123      	str	r3, [r4, #16]
 801405e:	2300      	movs	r3, #0
 8014060:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014064:	e7aa      	b.n	8013fbc <_printf_i+0x148>
 8014066:	6923      	ldr	r3, [r4, #16]
 8014068:	4632      	mov	r2, r6
 801406a:	4649      	mov	r1, r9
 801406c:	4640      	mov	r0, r8
 801406e:	47d0      	blx	sl
 8014070:	3001      	adds	r0, #1
 8014072:	d0ad      	beq.n	8013fd0 <_printf_i+0x15c>
 8014074:	6823      	ldr	r3, [r4, #0]
 8014076:	079b      	lsls	r3, r3, #30
 8014078:	d413      	bmi.n	80140a2 <_printf_i+0x22e>
 801407a:	68e0      	ldr	r0, [r4, #12]
 801407c:	9b03      	ldr	r3, [sp, #12]
 801407e:	4298      	cmp	r0, r3
 8014080:	bfb8      	it	lt
 8014082:	4618      	movlt	r0, r3
 8014084:	e7a6      	b.n	8013fd4 <_printf_i+0x160>
 8014086:	2301      	movs	r3, #1
 8014088:	4632      	mov	r2, r6
 801408a:	4649      	mov	r1, r9
 801408c:	4640      	mov	r0, r8
 801408e:	47d0      	blx	sl
 8014090:	3001      	adds	r0, #1
 8014092:	d09d      	beq.n	8013fd0 <_printf_i+0x15c>
 8014094:	3501      	adds	r5, #1
 8014096:	68e3      	ldr	r3, [r4, #12]
 8014098:	9903      	ldr	r1, [sp, #12]
 801409a:	1a5b      	subs	r3, r3, r1
 801409c:	42ab      	cmp	r3, r5
 801409e:	dcf2      	bgt.n	8014086 <_printf_i+0x212>
 80140a0:	e7eb      	b.n	801407a <_printf_i+0x206>
 80140a2:	2500      	movs	r5, #0
 80140a4:	f104 0619 	add.w	r6, r4, #25
 80140a8:	e7f5      	b.n	8014096 <_printf_i+0x222>
 80140aa:	bf00      	nop
 80140ac:	08015ef1 	.word	0x08015ef1
 80140b0:	08015f02 	.word	0x08015f02

080140b4 <__sflush_r>:
 80140b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80140b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140bc:	0716      	lsls	r6, r2, #28
 80140be:	4605      	mov	r5, r0
 80140c0:	460c      	mov	r4, r1
 80140c2:	d454      	bmi.n	801416e <__sflush_r+0xba>
 80140c4:	684b      	ldr	r3, [r1, #4]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	dc02      	bgt.n	80140d0 <__sflush_r+0x1c>
 80140ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	dd48      	ble.n	8014162 <__sflush_r+0xae>
 80140d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80140d2:	2e00      	cmp	r6, #0
 80140d4:	d045      	beq.n	8014162 <__sflush_r+0xae>
 80140d6:	2300      	movs	r3, #0
 80140d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80140dc:	682f      	ldr	r7, [r5, #0]
 80140de:	6a21      	ldr	r1, [r4, #32]
 80140e0:	602b      	str	r3, [r5, #0]
 80140e2:	d030      	beq.n	8014146 <__sflush_r+0x92>
 80140e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80140e6:	89a3      	ldrh	r3, [r4, #12]
 80140e8:	0759      	lsls	r1, r3, #29
 80140ea:	d505      	bpl.n	80140f8 <__sflush_r+0x44>
 80140ec:	6863      	ldr	r3, [r4, #4]
 80140ee:	1ad2      	subs	r2, r2, r3
 80140f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80140f2:	b10b      	cbz	r3, 80140f8 <__sflush_r+0x44>
 80140f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80140f6:	1ad2      	subs	r2, r2, r3
 80140f8:	2300      	movs	r3, #0
 80140fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80140fc:	6a21      	ldr	r1, [r4, #32]
 80140fe:	4628      	mov	r0, r5
 8014100:	47b0      	blx	r6
 8014102:	1c43      	adds	r3, r0, #1
 8014104:	89a3      	ldrh	r3, [r4, #12]
 8014106:	d106      	bne.n	8014116 <__sflush_r+0x62>
 8014108:	6829      	ldr	r1, [r5, #0]
 801410a:	291d      	cmp	r1, #29
 801410c:	d82b      	bhi.n	8014166 <__sflush_r+0xb2>
 801410e:	4a2a      	ldr	r2, [pc, #168]	@ (80141b8 <__sflush_r+0x104>)
 8014110:	410a      	asrs	r2, r1
 8014112:	07d6      	lsls	r6, r2, #31
 8014114:	d427      	bmi.n	8014166 <__sflush_r+0xb2>
 8014116:	2200      	movs	r2, #0
 8014118:	6062      	str	r2, [r4, #4]
 801411a:	04d9      	lsls	r1, r3, #19
 801411c:	6922      	ldr	r2, [r4, #16]
 801411e:	6022      	str	r2, [r4, #0]
 8014120:	d504      	bpl.n	801412c <__sflush_r+0x78>
 8014122:	1c42      	adds	r2, r0, #1
 8014124:	d101      	bne.n	801412a <__sflush_r+0x76>
 8014126:	682b      	ldr	r3, [r5, #0]
 8014128:	b903      	cbnz	r3, 801412c <__sflush_r+0x78>
 801412a:	6560      	str	r0, [r4, #84]	@ 0x54
 801412c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801412e:	602f      	str	r7, [r5, #0]
 8014130:	b1b9      	cbz	r1, 8014162 <__sflush_r+0xae>
 8014132:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014136:	4299      	cmp	r1, r3
 8014138:	d002      	beq.n	8014140 <__sflush_r+0x8c>
 801413a:	4628      	mov	r0, r5
 801413c:	f7ff fca0 	bl	8013a80 <_free_r>
 8014140:	2300      	movs	r3, #0
 8014142:	6363      	str	r3, [r4, #52]	@ 0x34
 8014144:	e00d      	b.n	8014162 <__sflush_r+0xae>
 8014146:	2301      	movs	r3, #1
 8014148:	4628      	mov	r0, r5
 801414a:	47b0      	blx	r6
 801414c:	4602      	mov	r2, r0
 801414e:	1c50      	adds	r0, r2, #1
 8014150:	d1c9      	bne.n	80140e6 <__sflush_r+0x32>
 8014152:	682b      	ldr	r3, [r5, #0]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d0c6      	beq.n	80140e6 <__sflush_r+0x32>
 8014158:	2b1d      	cmp	r3, #29
 801415a:	d001      	beq.n	8014160 <__sflush_r+0xac>
 801415c:	2b16      	cmp	r3, #22
 801415e:	d11e      	bne.n	801419e <__sflush_r+0xea>
 8014160:	602f      	str	r7, [r5, #0]
 8014162:	2000      	movs	r0, #0
 8014164:	e022      	b.n	80141ac <__sflush_r+0xf8>
 8014166:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801416a:	b21b      	sxth	r3, r3
 801416c:	e01b      	b.n	80141a6 <__sflush_r+0xf2>
 801416e:	690f      	ldr	r7, [r1, #16]
 8014170:	2f00      	cmp	r7, #0
 8014172:	d0f6      	beq.n	8014162 <__sflush_r+0xae>
 8014174:	0793      	lsls	r3, r2, #30
 8014176:	680e      	ldr	r6, [r1, #0]
 8014178:	bf08      	it	eq
 801417a:	694b      	ldreq	r3, [r1, #20]
 801417c:	600f      	str	r7, [r1, #0]
 801417e:	bf18      	it	ne
 8014180:	2300      	movne	r3, #0
 8014182:	eba6 0807 	sub.w	r8, r6, r7
 8014186:	608b      	str	r3, [r1, #8]
 8014188:	f1b8 0f00 	cmp.w	r8, #0
 801418c:	dde9      	ble.n	8014162 <__sflush_r+0xae>
 801418e:	6a21      	ldr	r1, [r4, #32]
 8014190:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014192:	4643      	mov	r3, r8
 8014194:	463a      	mov	r2, r7
 8014196:	4628      	mov	r0, r5
 8014198:	47b0      	blx	r6
 801419a:	2800      	cmp	r0, #0
 801419c:	dc08      	bgt.n	80141b0 <__sflush_r+0xfc>
 801419e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80141a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80141a6:	81a3      	strh	r3, [r4, #12]
 80141a8:	f04f 30ff 	mov.w	r0, #4294967295
 80141ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141b0:	4407      	add	r7, r0
 80141b2:	eba8 0800 	sub.w	r8, r8, r0
 80141b6:	e7e7      	b.n	8014188 <__sflush_r+0xd4>
 80141b8:	dfbffffe 	.word	0xdfbffffe

080141bc <_fflush_r>:
 80141bc:	b538      	push	{r3, r4, r5, lr}
 80141be:	690b      	ldr	r3, [r1, #16]
 80141c0:	4605      	mov	r5, r0
 80141c2:	460c      	mov	r4, r1
 80141c4:	b913      	cbnz	r3, 80141cc <_fflush_r+0x10>
 80141c6:	2500      	movs	r5, #0
 80141c8:	4628      	mov	r0, r5
 80141ca:	bd38      	pop	{r3, r4, r5, pc}
 80141cc:	b118      	cbz	r0, 80141d6 <_fflush_r+0x1a>
 80141ce:	6a03      	ldr	r3, [r0, #32]
 80141d0:	b90b      	cbnz	r3, 80141d6 <_fflush_r+0x1a>
 80141d2:	f7ff fa8f 	bl	80136f4 <__sinit>
 80141d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d0f3      	beq.n	80141c6 <_fflush_r+0xa>
 80141de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80141e0:	07d0      	lsls	r0, r2, #31
 80141e2:	d404      	bmi.n	80141ee <_fflush_r+0x32>
 80141e4:	0599      	lsls	r1, r3, #22
 80141e6:	d402      	bmi.n	80141ee <_fflush_r+0x32>
 80141e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80141ea:	f7ff fbdc 	bl	80139a6 <__retarget_lock_acquire_recursive>
 80141ee:	4628      	mov	r0, r5
 80141f0:	4621      	mov	r1, r4
 80141f2:	f7ff ff5f 	bl	80140b4 <__sflush_r>
 80141f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80141f8:	07da      	lsls	r2, r3, #31
 80141fa:	4605      	mov	r5, r0
 80141fc:	d4e4      	bmi.n	80141c8 <_fflush_r+0xc>
 80141fe:	89a3      	ldrh	r3, [r4, #12]
 8014200:	059b      	lsls	r3, r3, #22
 8014202:	d4e1      	bmi.n	80141c8 <_fflush_r+0xc>
 8014204:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014206:	f7ff fbcf 	bl	80139a8 <__retarget_lock_release_recursive>
 801420a:	e7dd      	b.n	80141c8 <_fflush_r+0xc>

0801420c <__swbuf_r>:
 801420c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801420e:	460e      	mov	r6, r1
 8014210:	4614      	mov	r4, r2
 8014212:	4605      	mov	r5, r0
 8014214:	b118      	cbz	r0, 801421e <__swbuf_r+0x12>
 8014216:	6a03      	ldr	r3, [r0, #32]
 8014218:	b90b      	cbnz	r3, 801421e <__swbuf_r+0x12>
 801421a:	f7ff fa6b 	bl	80136f4 <__sinit>
 801421e:	69a3      	ldr	r3, [r4, #24]
 8014220:	60a3      	str	r3, [r4, #8]
 8014222:	89a3      	ldrh	r3, [r4, #12]
 8014224:	071a      	lsls	r2, r3, #28
 8014226:	d501      	bpl.n	801422c <__swbuf_r+0x20>
 8014228:	6923      	ldr	r3, [r4, #16]
 801422a:	b943      	cbnz	r3, 801423e <__swbuf_r+0x32>
 801422c:	4621      	mov	r1, r4
 801422e:	4628      	mov	r0, r5
 8014230:	f000 f82a 	bl	8014288 <__swsetup_r>
 8014234:	b118      	cbz	r0, 801423e <__swbuf_r+0x32>
 8014236:	f04f 37ff 	mov.w	r7, #4294967295
 801423a:	4638      	mov	r0, r7
 801423c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801423e:	6823      	ldr	r3, [r4, #0]
 8014240:	6922      	ldr	r2, [r4, #16]
 8014242:	1a98      	subs	r0, r3, r2
 8014244:	6963      	ldr	r3, [r4, #20]
 8014246:	b2f6      	uxtb	r6, r6
 8014248:	4283      	cmp	r3, r0
 801424a:	4637      	mov	r7, r6
 801424c:	dc05      	bgt.n	801425a <__swbuf_r+0x4e>
 801424e:	4621      	mov	r1, r4
 8014250:	4628      	mov	r0, r5
 8014252:	f7ff ffb3 	bl	80141bc <_fflush_r>
 8014256:	2800      	cmp	r0, #0
 8014258:	d1ed      	bne.n	8014236 <__swbuf_r+0x2a>
 801425a:	68a3      	ldr	r3, [r4, #8]
 801425c:	3b01      	subs	r3, #1
 801425e:	60a3      	str	r3, [r4, #8]
 8014260:	6823      	ldr	r3, [r4, #0]
 8014262:	1c5a      	adds	r2, r3, #1
 8014264:	6022      	str	r2, [r4, #0]
 8014266:	701e      	strb	r6, [r3, #0]
 8014268:	6962      	ldr	r2, [r4, #20]
 801426a:	1c43      	adds	r3, r0, #1
 801426c:	429a      	cmp	r2, r3
 801426e:	d004      	beq.n	801427a <__swbuf_r+0x6e>
 8014270:	89a3      	ldrh	r3, [r4, #12]
 8014272:	07db      	lsls	r3, r3, #31
 8014274:	d5e1      	bpl.n	801423a <__swbuf_r+0x2e>
 8014276:	2e0a      	cmp	r6, #10
 8014278:	d1df      	bne.n	801423a <__swbuf_r+0x2e>
 801427a:	4621      	mov	r1, r4
 801427c:	4628      	mov	r0, r5
 801427e:	f7ff ff9d 	bl	80141bc <_fflush_r>
 8014282:	2800      	cmp	r0, #0
 8014284:	d0d9      	beq.n	801423a <__swbuf_r+0x2e>
 8014286:	e7d6      	b.n	8014236 <__swbuf_r+0x2a>

08014288 <__swsetup_r>:
 8014288:	b538      	push	{r3, r4, r5, lr}
 801428a:	4b29      	ldr	r3, [pc, #164]	@ (8014330 <__swsetup_r+0xa8>)
 801428c:	4605      	mov	r5, r0
 801428e:	6818      	ldr	r0, [r3, #0]
 8014290:	460c      	mov	r4, r1
 8014292:	b118      	cbz	r0, 801429c <__swsetup_r+0x14>
 8014294:	6a03      	ldr	r3, [r0, #32]
 8014296:	b90b      	cbnz	r3, 801429c <__swsetup_r+0x14>
 8014298:	f7ff fa2c 	bl	80136f4 <__sinit>
 801429c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80142a0:	0719      	lsls	r1, r3, #28
 80142a2:	d422      	bmi.n	80142ea <__swsetup_r+0x62>
 80142a4:	06da      	lsls	r2, r3, #27
 80142a6:	d407      	bmi.n	80142b8 <__swsetup_r+0x30>
 80142a8:	2209      	movs	r2, #9
 80142aa:	602a      	str	r2, [r5, #0]
 80142ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80142b0:	81a3      	strh	r3, [r4, #12]
 80142b2:	f04f 30ff 	mov.w	r0, #4294967295
 80142b6:	e033      	b.n	8014320 <__swsetup_r+0x98>
 80142b8:	0758      	lsls	r0, r3, #29
 80142ba:	d512      	bpl.n	80142e2 <__swsetup_r+0x5a>
 80142bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80142be:	b141      	cbz	r1, 80142d2 <__swsetup_r+0x4a>
 80142c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80142c4:	4299      	cmp	r1, r3
 80142c6:	d002      	beq.n	80142ce <__swsetup_r+0x46>
 80142c8:	4628      	mov	r0, r5
 80142ca:	f7ff fbd9 	bl	8013a80 <_free_r>
 80142ce:	2300      	movs	r3, #0
 80142d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80142d2:	89a3      	ldrh	r3, [r4, #12]
 80142d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80142d8:	81a3      	strh	r3, [r4, #12]
 80142da:	2300      	movs	r3, #0
 80142dc:	6063      	str	r3, [r4, #4]
 80142de:	6923      	ldr	r3, [r4, #16]
 80142e0:	6023      	str	r3, [r4, #0]
 80142e2:	89a3      	ldrh	r3, [r4, #12]
 80142e4:	f043 0308 	orr.w	r3, r3, #8
 80142e8:	81a3      	strh	r3, [r4, #12]
 80142ea:	6923      	ldr	r3, [r4, #16]
 80142ec:	b94b      	cbnz	r3, 8014302 <__swsetup_r+0x7a>
 80142ee:	89a3      	ldrh	r3, [r4, #12]
 80142f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80142f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80142f8:	d003      	beq.n	8014302 <__swsetup_r+0x7a>
 80142fa:	4621      	mov	r1, r4
 80142fc:	4628      	mov	r0, r5
 80142fe:	f000 f83f 	bl	8014380 <__smakebuf_r>
 8014302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014306:	f013 0201 	ands.w	r2, r3, #1
 801430a:	d00a      	beq.n	8014322 <__swsetup_r+0x9a>
 801430c:	2200      	movs	r2, #0
 801430e:	60a2      	str	r2, [r4, #8]
 8014310:	6962      	ldr	r2, [r4, #20]
 8014312:	4252      	negs	r2, r2
 8014314:	61a2      	str	r2, [r4, #24]
 8014316:	6922      	ldr	r2, [r4, #16]
 8014318:	b942      	cbnz	r2, 801432c <__swsetup_r+0xa4>
 801431a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801431e:	d1c5      	bne.n	80142ac <__swsetup_r+0x24>
 8014320:	bd38      	pop	{r3, r4, r5, pc}
 8014322:	0799      	lsls	r1, r3, #30
 8014324:	bf58      	it	pl
 8014326:	6962      	ldrpl	r2, [r4, #20]
 8014328:	60a2      	str	r2, [r4, #8]
 801432a:	e7f4      	b.n	8014316 <__swsetup_r+0x8e>
 801432c:	2000      	movs	r0, #0
 801432e:	e7f7      	b.n	8014320 <__swsetup_r+0x98>
 8014330:	2000002c 	.word	0x2000002c

08014334 <__swhatbuf_r>:
 8014334:	b570      	push	{r4, r5, r6, lr}
 8014336:	460c      	mov	r4, r1
 8014338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801433c:	2900      	cmp	r1, #0
 801433e:	b096      	sub	sp, #88	@ 0x58
 8014340:	4615      	mov	r5, r2
 8014342:	461e      	mov	r6, r3
 8014344:	da0d      	bge.n	8014362 <__swhatbuf_r+0x2e>
 8014346:	89a3      	ldrh	r3, [r4, #12]
 8014348:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801434c:	f04f 0100 	mov.w	r1, #0
 8014350:	bf14      	ite	ne
 8014352:	2340      	movne	r3, #64	@ 0x40
 8014354:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014358:	2000      	movs	r0, #0
 801435a:	6031      	str	r1, [r6, #0]
 801435c:	602b      	str	r3, [r5, #0]
 801435e:	b016      	add	sp, #88	@ 0x58
 8014360:	bd70      	pop	{r4, r5, r6, pc}
 8014362:	466a      	mov	r2, sp
 8014364:	f000 f848 	bl	80143f8 <_fstat_r>
 8014368:	2800      	cmp	r0, #0
 801436a:	dbec      	blt.n	8014346 <__swhatbuf_r+0x12>
 801436c:	9901      	ldr	r1, [sp, #4]
 801436e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014372:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014376:	4259      	negs	r1, r3
 8014378:	4159      	adcs	r1, r3
 801437a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801437e:	e7eb      	b.n	8014358 <__swhatbuf_r+0x24>

08014380 <__smakebuf_r>:
 8014380:	898b      	ldrh	r3, [r1, #12]
 8014382:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014384:	079d      	lsls	r5, r3, #30
 8014386:	4606      	mov	r6, r0
 8014388:	460c      	mov	r4, r1
 801438a:	d507      	bpl.n	801439c <__smakebuf_r+0x1c>
 801438c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014390:	6023      	str	r3, [r4, #0]
 8014392:	6123      	str	r3, [r4, #16]
 8014394:	2301      	movs	r3, #1
 8014396:	6163      	str	r3, [r4, #20]
 8014398:	b003      	add	sp, #12
 801439a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801439c:	ab01      	add	r3, sp, #4
 801439e:	466a      	mov	r2, sp
 80143a0:	f7ff ffc8 	bl	8014334 <__swhatbuf_r>
 80143a4:	9f00      	ldr	r7, [sp, #0]
 80143a6:	4605      	mov	r5, r0
 80143a8:	4639      	mov	r1, r7
 80143aa:	4630      	mov	r0, r6
 80143ac:	f7ff f88a 	bl	80134c4 <_malloc_r>
 80143b0:	b948      	cbnz	r0, 80143c6 <__smakebuf_r+0x46>
 80143b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80143b6:	059a      	lsls	r2, r3, #22
 80143b8:	d4ee      	bmi.n	8014398 <__smakebuf_r+0x18>
 80143ba:	f023 0303 	bic.w	r3, r3, #3
 80143be:	f043 0302 	orr.w	r3, r3, #2
 80143c2:	81a3      	strh	r3, [r4, #12]
 80143c4:	e7e2      	b.n	801438c <__smakebuf_r+0xc>
 80143c6:	89a3      	ldrh	r3, [r4, #12]
 80143c8:	6020      	str	r0, [r4, #0]
 80143ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80143ce:	81a3      	strh	r3, [r4, #12]
 80143d0:	9b01      	ldr	r3, [sp, #4]
 80143d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80143d6:	b15b      	cbz	r3, 80143f0 <__smakebuf_r+0x70>
 80143d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80143dc:	4630      	mov	r0, r6
 80143de:	f000 f81d 	bl	801441c <_isatty_r>
 80143e2:	b128      	cbz	r0, 80143f0 <__smakebuf_r+0x70>
 80143e4:	89a3      	ldrh	r3, [r4, #12]
 80143e6:	f023 0303 	bic.w	r3, r3, #3
 80143ea:	f043 0301 	orr.w	r3, r3, #1
 80143ee:	81a3      	strh	r3, [r4, #12]
 80143f0:	89a3      	ldrh	r3, [r4, #12]
 80143f2:	431d      	orrs	r5, r3
 80143f4:	81a5      	strh	r5, [r4, #12]
 80143f6:	e7cf      	b.n	8014398 <__smakebuf_r+0x18>

080143f8 <_fstat_r>:
 80143f8:	b538      	push	{r3, r4, r5, lr}
 80143fa:	4d07      	ldr	r5, [pc, #28]	@ (8014418 <_fstat_r+0x20>)
 80143fc:	2300      	movs	r3, #0
 80143fe:	4604      	mov	r4, r0
 8014400:	4608      	mov	r0, r1
 8014402:	4611      	mov	r1, r2
 8014404:	602b      	str	r3, [r5, #0]
 8014406:	f7ec fbdd 	bl	8000bc4 <_fstat>
 801440a:	1c43      	adds	r3, r0, #1
 801440c:	d102      	bne.n	8014414 <_fstat_r+0x1c>
 801440e:	682b      	ldr	r3, [r5, #0]
 8014410:	b103      	cbz	r3, 8014414 <_fstat_r+0x1c>
 8014412:	6023      	str	r3, [r4, #0]
 8014414:	bd38      	pop	{r3, r4, r5, pc}
 8014416:	bf00      	nop
 8014418:	20004524 	.word	0x20004524

0801441c <_isatty_r>:
 801441c:	b538      	push	{r3, r4, r5, lr}
 801441e:	4d06      	ldr	r5, [pc, #24]	@ (8014438 <_isatty_r+0x1c>)
 8014420:	2300      	movs	r3, #0
 8014422:	4604      	mov	r4, r0
 8014424:	4608      	mov	r0, r1
 8014426:	602b      	str	r3, [r5, #0]
 8014428:	f7ec fbdc 	bl	8000be4 <_isatty>
 801442c:	1c43      	adds	r3, r0, #1
 801442e:	d102      	bne.n	8014436 <_isatty_r+0x1a>
 8014430:	682b      	ldr	r3, [r5, #0]
 8014432:	b103      	cbz	r3, 8014436 <_isatty_r+0x1a>
 8014434:	6023      	str	r3, [r4, #0]
 8014436:	bd38      	pop	{r3, r4, r5, pc}
 8014438:	20004524 	.word	0x20004524

0801443c <_init>:
 801443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801443e:	bf00      	nop
 8014440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014442:	bc08      	pop	{r3}
 8014444:	469e      	mov	lr, r3
 8014446:	4770      	bx	lr

08014448 <_fini>:
 8014448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801444a:	bf00      	nop
 801444c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801444e:	bc08      	pop	{r3}
 8014450:	469e      	mov	lr, r3
 8014452:	4770      	bx	lr
